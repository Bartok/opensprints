MP2COD 4.12, COFF to COD File Converter
Copyright (c) 2007 Microchip Technology Inc.
Listing File Generated: Thu Sep 27 00:11:32 2007


Address  Value    Disassembly              Source                                                                           File
-------  -------  -----------------------  -------------------------------------------------------------------------------  -----
                                           /*********************************************************************           E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            *                Microchip USB C18 Firmware Version 1.0                         E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            *********************************************************************           E:\iro_svn\opensprints\FW\main.c
                                            * FileName:        main.c                                                       E:\iro_svn\opensprints\FW\main.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iro_svn\opensprints\FW\main.c
                                            * Processor:       PIC18                                                        E:\iro_svn\opensprints\FW\main.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iro_svn\opensprints\FW\main.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Software License Agreement                                                    E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iro_svn\opensprints\FW\main.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iro_svn\opensprints\FW\main.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iro_svn\opensprints\FW\main.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iro_svn\opensprints\FW\main.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iro_svn\opensprints\FW\main.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iro_svn\opensprints\FW\main.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iro_svn\opensprints\FW\main.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iro_svn\opensprints\FW\main.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iro_svn\opensprints\FW\main.c
                                            * license.                                                                      E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iro_svn\opensprints\FW\main.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iro_svn\opensprints\FW\main.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iro_svn\opensprints\FW\main.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iro_svn\opensprints\FW\main.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iro_svn\opensprints\FW\main.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Author               Date        Comment                                      E:\iro_svn\opensprints\FW\main.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           E:\iro_svn\opensprints\FW\main.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    E:\iro_svn\opensprints\FW\main.c
                                            ********************************************************************/           E:\iro_svn\opensprints\FW\main.c
                                                                                                                            E:\iro_svn\opensprints\FW\main.c
                                           /** I N C L U D E S **********************************************************/  E:\iro_svn\opensprints\FW\main.c
                                           #include <p18cxxx.h>                                                             E:\iro_svn\opensprints\FW\main.c
                                           #include "system\typedefs.h"                        // Required                  E:\iro_svn\opensprints\FW\main.c
                                           #include "system\usb\usb.h"                         // Required                  E:\iro_svn\opensprints\FW\main.c
                                           #include "io_cfg.h"                                 // Required                  E:\iro_svn\opensprints\FW\main.c
                                                                                                                            E:\iro_svn\opensprints\FW\main.c
                                           #include "system\usb\usb_compile_time_validation.h" // Optional                  E:\iro_svn\opensprints\FW\main.c
                                           #include "user\user.h"                              // Modifiable                E:\iro_svn\opensprints\FW\main.c
                                                                                                                            E:\iro_svn\opensprints\FW\main.c
                                           /** V A R I A B L E S ********************************************************/  E:\iro_svn\opensprints\FW\main.c
                                           #pragma udata                                                                    E:\iro_svn\opensprints\FW\main.c
                                                                                                                            E:\iro_svn\opensprints\FW\main.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  E:\iro_svn\opensprints\FW\main.c
                                           static void InitializeSystem(void);                                              E:\iro_svn\opensprints\FW\main.c
                                           void USBTasks(void);                                                             E:\iro_svn\opensprints\FW\main.c
                                                                                                                            E:\iro_svn\opensprints\FW\main.c
                                           #pragma code high_vector_section = 0x000808                                      E:\iro_svn\opensprints\FW\main.c
                                           void high_vector (void)                                                          E:\iro_svn\opensprints\FW\main.c
                                           {                                                                                E:\iro_svn\opensprints\FW\main.c
000808   efcc     GOTO      0xb98              _asm goto high_ISR _endasm                                                   E:\iro_svn\opensprints\FW\main.c
00080a   f005                                                                                                               
00080c   0012     RETURN    0x0            }                                                                                E:\iro_svn\opensprints\FW\main.c
                                           #pragma code low_vector_section = 0x000818                                       E:\iro_svn\opensprints\FW\main.c
                                           void low_vector (void)                                                           E:\iro_svn\opensprints\FW\main.c
                                           {                                                                                E:\iro_svn\opensprints\FW\main.c
000818   ef22     GOTO      0x844              _asm goto low_ISR _endasm                                                    E:\iro_svn\opensprints\FW\main.c
00081a   f004                                                                                                               
00081c   0012     RETURN    0x0            }                                                                                E:\iro_svn\opensprints\FW\main.c
                                           #pragma code                                                                     E:\iro_svn\opensprints\FW\main.c
                                                                                                                            E:\iro_svn\opensprints\FW\main.c
                                           /** D E C L A R A T I O N S **************************************************/  E:\iro_svn\opensprints\FW\main.c
                                           #pragma code                                                                     E:\iro_svn\opensprints\FW\main.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\main.c
                                            * Function:        void main(void)                                              E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Overview:        Main program entry point.                                    E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\main.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\main.c
                                           void main(void)                                                                  E:\iro_svn\opensprints\FW\main.c
                                           {                                                                                E:\iro_svn\opensprints\FW\main.c
00479a   d805     RCALL     0x47a6             InitializeSystem();                                                          E:\iro_svn\opensprints\FW\main.c
0047a2   d7fc     BRA       0x479c         	while(1)                                                                        E:\iro_svn\opensprints\FW\main.c
                                               {                                                                            E:\iro_svn\opensprints\FW\main.c
00479c   d811     RCALL     0x47c0                 USBTasks();         // USB Tasks                                         E:\iro_svn\opensprints\FW\main.c
00479e   ecd1     CALL      0xda2,0x0              ProcessIO();        // See user.c and user.h                             E:\iro_svn\opensprints\FW\main.c
0047a0   f006                                                                                                               
                                               }//end while                                                                 E:\iro_svn\opensprints\FW\main.c
0047a4   0012     RETURN    0x0            }//end main                                                                      E:\iro_svn\opensprints\FW\main.c
                                                                                                                            E:\iro_svn\opensprints\FW\main.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\main.c
                                            * Function:        static void InitializeSystem(void)                           E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Overview:        InitializeSystem is a centralize initialization routine.     E:\iro_svn\opensprints\FW\main.c
                                            *                  All required USB initialization routines are called from     E:\iro_svn\opensprints\FW\main.c
                                            *                  here.                                                        E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            *                  User application initialization routine should also be       E:\iro_svn\opensprints\FW\main.c
                                            *                  called from here.                                            E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\main.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\main.c
                                           static void InitializeSystem(void)                                               E:\iro_svn\opensprints\FW\main.c
                                           {                                                                                E:\iro_svn\opensprints\FW\main.c
0047a6   0e0f     MOVLW     0xf                ADCON1 |= 0x0F;                 // Default all pins to digital               E:\iro_svn\opensprints\FW\main.c
0047a8   12c1     IORWF     0xc1,0x1,0x0                                                                                    
                                                                                                                            E:\iro_svn\opensprints\FW\main.c
0047aa   0e14     MOVLW     0x14               mInitializeUSBDriver();         // See usbdrv.h                              E:\iro_svn\opensprints\FW\main.c
0047ac   6e6f     MOVWF     0x6f,0x0                                                                                        
0047ae   0101     MOVLB     0x1                                                                                             
0047b0   6be8     CLRF      0xe8,0x1                                                                                        
0047b2   0101     MOVLB     0x1                                                                                             
0047b4   6be9     CLRF      0xe9,0x1                                                                                        
0047b6   0101     MOVLB     0x1                                                                                             
0047b8   6bea     CLRF      0xea,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\main.c
0047ba   ec06     CALL      0xc0c,0x0          UserInit();                     // See user.c & .h                           E:\iro_svn\opensprints\FW\main.c
0047bc   f006                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\main.c
0047be   0012     RETURN    0x0            }//end InitializeSystem                                                          E:\iro_svn\opensprints\FW\main.c
                                                                                                                            E:\iro_svn\opensprints\FW\main.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\main.c
                                            * Function:        void USBTasks(void)                                          E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * PreCondition:    InitializeSystem has been called.                            E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Overview:        Service loop for USB tasks.                                  E:\iro_svn\opensprints\FW\main.c
                                            *                                                                               E:\iro_svn\opensprints\FW\main.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\main.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\main.c
                                           void USBTasks(void)                                                              E:\iro_svn\opensprints\FW\main.c
                                           {                                                                                E:\iro_svn\opensprints\FW\main.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\main.c
                                                * Servicing Hardware                                                        E:\iro_svn\opensprints\FW\main.c
                                                */                                                                          E:\iro_svn\opensprints\FW\main.c
0047c0   eccf     CALL      0x3f9e,0x0         USBCheckBusStatus();                    // Must use polling method           E:\iro_svn\opensprints\FW\main.c
0047c2   f01f                                                                                                               
0047c4   be6f     BTFSC     0x6f,0x7,0x0       if(UCFGbits.UTEYE!=1)                                                        E:\iro_svn\opensprints\FW\main.c
0047c6   d002     BRA       0x47cc                                                                                          
0047c8   ecef     CALL      0x3fde,0x0             USBDriverService();                 // Interrupt or polling method       E:\iro_svn\opensprints\FW\main.c
0047ca   f01f                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\main.c
                                               #if defined(USB_USE_CDC)                                                     E:\iro_svn\opensprints\FW\main.c
0047cc   ec19     CALL      0x3832,0x0         CDCTxService();                                                              E:\iro_svn\opensprints\FW\main.c
0047ce   f01c                                                                                                               
                                               #endif                                                                       E:\iro_svn\opensprints\FW\main.c
                                                                                                                            E:\iro_svn\opensprints\FW\main.c
0047d0   0012     RETURN    0x0            }// end USBTasks                                                                 E:\iro_svn\opensprints\FW\main.c
                                                                                                                            E:\iro_svn\opensprints\FW\main.c
                                           /** EOF main.c ***************************************************************/  E:\iro_svn\opensprints\FW\main.c
                                           /*********************************************************************           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                Microchip USB C18 Firmware Version 1.0                         E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *********************************************************************           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * FileName:        usbmmap.c                                                    E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Processor:       PIC18                                                        E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Software License Agreement                                                    E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * license.                                                                      E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Author               Date        Comment                                      E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            ********************************************************************/           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * -usbmmap.c-                                                                   E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * USB Memory Map                                                                E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * This file is the USB memory manager; it serves as a compile-time memory       E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * allocator for the USB endpoints. It uses the compile time options passed      E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * from usbcfg.h to instantiate endpoints and endpoint buffer.                   E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Each endpoint requires to have a set of Buffer Descriptor registers(BDT).     E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * A BDT is 4-byte long and has a specific RAM location for each endpoint.       E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The BDT for endpoint 0 out is located at address 0x400 to 0x403.              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The BDT for endpoint 0 in is located at address 0x404 to 0x407.               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The BDT for endpoint 1 out is located at address 0x408 to 0x40B.              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * and so on... The above allocation assumes the Ping-Pong Buffer Mode 0 is      E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * used. These locations are already hard-wired in the silicon. The point        E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * of doing instantiation, i.e. volatile far BDT ep0Bo;, is to provide the       E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * C compiler a way to address each variable directly. This is very important    E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * because when a register can be accessed directly, it saves execution time     E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * and reduces program size.                                                     E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Endpoints are defined using the endpoint number and the direction             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * of transfer. For simplicity, usbmmap.c only uses the endpoint number          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * in the BDT register allocation scheme. This means if the usbcfg.h states      E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * that the MAX_EP_NUMBER is number 1, then four BDTs will be                    E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * instantiated: one each for endpoint0 in and endpoint0 out, which must         E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * always be instantiated for control transfer by default, and one each sets     E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * for endpoint1 in and endpoint1 out. The naming convention for instantiating   E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * BDT is                                                                        E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * ep<#>B<d>                                                                     E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * where # is the endpoint number, and d is the direction of                     E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * transfer, which could be either <i> or <o>.                                   E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The USB memory manager uses MAX_EP_NUMBER, as defined in usbcfg.h, to define  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * the endpoints to be instantiated. This represents the highest endpoint        E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * number to be allocated, not how many endpoints are used. Since the BDTs for   E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * endpoints have hardware-assigned addresses in Bank 4, setting this value too  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * high may lead to inefficient use of data RAM. For example, if an application  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * uses only endpoints EP0 and EP4, then the MAX_EP_NUMBER is 4, and not 2.      E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The in-between endpoint BDTs in this example (EP1, EP2, and EP3) go unused,   E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * and the 24 bytes of memory associated with them are wasted. It does not make  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * much sense to skip endpoints, but the final decision lies with the user.      E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The next step is to assign the instantiated BDTs to different                 E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * USB functions. The firmware framework fundamentally assumes that every USB    E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * function should know which endpoint it is using, i.e., the default control    E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * transfer should know that it is using endpoint 0 in and endpoint 0 out.       E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * A HID class can choose which endpoint it wants to use, but once chosen, it    E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * should always know the number of the endpoint.                                E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The assignment of endpoints to USB functions is managed centrally             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * in usbcfg.h. This helps prevent the mistake of having more                    E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * than one USB function using the same endpoint. The "Endpoint Allocation"      E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * section in usbcfg.h provides examples for how to map USB endpoints to USB     E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * functions.                                                                    E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Quite a few things can be mapped in that section. There is no                 E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * one correct way to do the mapping and the user has the choice to              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * choose a method that is most suitable to the application.                     E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Typically, however, a user will want to map the following for a given         E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * USB interface function:                                                       E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * 1. The USB interface ID                                                       E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * 2. The endpoint control registers (UEPn)                                      E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * 3. The BDT registers (ep<#>B<d>)                                              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * 4. The endpoint size                                                          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Example: Assume a USB device class "foo", which uses one out endpoint         E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *          of size 64-byte and one in endpoint of size 64-byte, then:           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * #define FOO_INTF_ID          0x00                                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * #define FOO_UEP              UEP1                                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * #define FOO_BD_OUT           ep1Bo                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * #define FOO_BD_IN            ep1Bi                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * #define FOO_EP_SIZE          64                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The mapping above has chosen class "foo" to use endpoint 1.                   E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The names are arbitrary and can be anything other than FOO_??????.            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * For abstraction, the code for class "foo" should use the abstract             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * definitions of FOO_BD_OUT,FOO_BD_IN, and not ep1Bo or ep1Bi.                  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Note that the endpoint size defined in the usbcfg.h file is again             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * used in the usbmmap.c file. This shows that the relationship between          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * the two files are tightly related.                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The endpoint buffer for each USB function must be located in the              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * dual-port RAM area and has to come after all the BDTs have been               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * instantiated. An example declaration is:                                      E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * volatile far unsigned char[FOO_EP_SIZE] data;                                 E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The 'volatile' keyword tells the compiler not to perform any code             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * optimization on this variable because its content could be modified           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * by the hardware. The 'far' keyword tells the compiler that this variable      E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * is not located in the Access RAM area (0x000 - 0x05F).                        E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * For the variable to be globally accessible by other files, it should be       E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * declared in the header file usbmmap.h as an extern definition, such as        E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * extern volatile far unsigned char[FOO_EP_SIZE] data;                          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Conclusion:                                                                   E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * In a short summary, the dependencies between usbcfg and usbmmap can           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * be shown as:                                                                  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * usbcfg[MAX_EP_NUMBER] -> usbmmap                                              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * usbmmap[ep<#>B<d>] -> usbcfg                                                  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * usbcfg[EP size] -> usbmmap                                                    E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * usbcfg[abstract ep definitions] -> usb9/hid/cdc/etc class code                E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * usbmmap[endpoint buffer variable] -> usb9/hid/cdc/etc class code              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Data mapping provides a means for direct addressing of BDT and endpoint       E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * buffer. This means less usage of pointers, which equates to a faster and      E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * smaller program code.                                                         E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /** I N C L U D E S **********************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #include "system\typedefs.h"                                                     E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #include "system\usb\usb.h"                                                      E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /** U S B  G L O B A L  V A R I A B L E S ************************************/  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #pragma udata                                                                    E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           byte usb_device_state;          // Device States: DETACHED, ATTACHED, ...        E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           USB_DEVICE_STATUS usb_stat;     // Global USB flags                              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           byte usb_active_cfg;            // Value of current configuration                E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           byte usb_alt_intf[MAX_NUM_INT]; // Array to keep track of the current alternate  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                           // setting for each interface ID                 E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /** U S B  F I X E D  L O C A T I O N  V A R I A B L E S *********************/  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #pragma udata usbram4=0x400     //See Linker Script,usb4:0x400-0x4FF(256-byte)   E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Section A: Buffer Descriptor Table                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * - 0x400 - 0x4FF(max)                                                          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * - MAX_EP_NUMBER is defined in autofiles\usbcfg.h                              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * - BDT data type is defined in system\usb\usbmmap.h                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(0 <= MAX_EP_NUMBER)                                                          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep0Bo;         //Endpoint #0 BD Out                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep0Bi;         //Endpoint #0 BD In                              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(1 <= MAX_EP_NUMBER)                                                          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep1Bo;         //Endpoint #1 BD Out                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep1Bi;         //Endpoint #1 BD In                              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(2 <= MAX_EP_NUMBER)                                                          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep2Bo;         //Endpoint #2 BD Out                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep2Bi;         //Endpoint #2 BD In                              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(3 <= MAX_EP_NUMBER)                                                          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep3Bo;         //Endpoint #3 BD Out                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep3Bi;         //Endpoint #3 BD In                              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(4 <= MAX_EP_NUMBER)                                                          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep4Bo;         //Endpoint #4 BD Out                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep4Bi;         //Endpoint #4 BD In                              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(5 <= MAX_EP_NUMBER)                                                          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep5Bo;         //Endpoint #5 BD Out                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep5Bi;         //Endpoint #5 BD In                              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(6 <= MAX_EP_NUMBER)                                                          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep6Bo;         //Endpoint #6 BD Out                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep6Bi;         //Endpoint #6 BD In                              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(7 <= MAX_EP_NUMBER)                                                          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep7Bo;         //Endpoint #7 BD Out                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep7Bi;         //Endpoint #7 BD In                              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(8 <= MAX_EP_NUMBER)                                                          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep8Bo;         //Endpoint #8 BD Out                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep8Bi;         //Endpoint #8 BD In                              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(9 <= MAX_EP_NUMBER)                                                          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep9Bo;         //Endpoint #9 BD Out                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep9Bi;         //Endpoint #9 BD In                              E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(10 <= MAX_EP_NUMBER)                                                         E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep10Bo;        //Endpoint #10 BD Out                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep10Bi;        //Endpoint #10 BD In                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(11 <= MAX_EP_NUMBER)                                                         E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep11Bo;        //Endpoint #11 BD Out                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep11Bi;        //Endpoint #11 BD In                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(12 <= MAX_EP_NUMBER)                                                         E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep12Bo;        //Endpoint #12 BD Out                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep12Bi;        //Endpoint #12 BD In                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(13 <= MAX_EP_NUMBER)                                                         E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep13Bo;        //Endpoint #13 BD Out                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep13Bi;        //Endpoint #13 BD In                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(14 <= MAX_EP_NUMBER)                                                         E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep14Bo;        //Endpoint #14 BD Out                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep14Bi;        //Endpoint #14 BD In                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(15 <= MAX_EP_NUMBER)                                                         E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep15Bo;        //Endpoint #15 BD Out                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep15Bi;        //Endpoint #15 BD In                             E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Section B: EP0 Buffer Space                                                   E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            ******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * - Two buffer areas are defined:                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *   A. CTRL_TRF_SETUP                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *      - Size = EP0_BUFF_SIZE as defined in autofiles\usbcfg.h                  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *      - Detailed data structure allows direct adddressing of bits and bytes.   E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *   B. CTRL_TRF_DATA                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *      - Size = EP0_BUFF_SIZE as defined in autofiles\usbcfg.h                  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *      - Data structure allows direct adddressing of the first 8 bytes.         E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * - Both data types are defined in system\usb\usbdefs\usbdefs_ep0_buff.h        E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far CTRL_TRF_SETUP SetupPkt;                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far CTRL_TRF_DATA CtrlTrfData;                                          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Section C: CDC Buffer                                                         E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            ******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #pragma udata usbram5a=0x500    //See Linker Script,usb5:0x500-...               E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if defined(USB_USE_CDC)                                                         E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far unsigned char cdc_notice[CDC_INT_EP_SIZE];                          E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far unsigned char cdc_data_rx[CDC_BULK_OUT_EP_SIZE];                    E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far unsigned char cdc_data_tx[CDC_BULK_IN_EP_SIZE];                     E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #pragma udata                                                                    E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /** EOF usbmmap.c ************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /*********************************************************************           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                Microchip USB C18 Firmware Version 1.0                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *********************************************************************           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * FileName:        usbdrv.c                                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Processor:       PIC18                                                        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Software License Agreement                                                    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * license.                                                                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Author               Date        Comment                                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            ********************************************************************/           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /** I N C L U D E S **********************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #include <p18cxxx.h>                                                             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #include "system\typedefs.h"                                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #include "system\usb\usb.h"                                                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #include "io_cfg.h"             // Required for USBCheckBusStatus()              E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /** V A R I A B L E S ********************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #pragma udata                                                                    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleEnable(void);                                                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleDisable(void);                                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBSuspend(void);                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBWakeFromSuspend(void);                                                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBProtocolResetHandler(void);                                              E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USB_SOF_Handler(void);                                                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBStallHandler(void);                                                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBErrorHandler(void);                                                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /** D E C L A R A T I O N S **************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #pragma code                                                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBCheckBusStatus(void)                                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine enables/disables the USB module by monitoring   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the USB power signal.                                        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBCheckBusStatus(void)                                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /**************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Bus Attachment & Detachment Detection                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * usb_bus_sense is an i/o pin defined in io_cfg.h                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               #define USB_BUS_ATTACHED    1                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               #define USB_BUS_DETACHED    0                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               if(usb_bus_sense == USB_BUS_ATTACHED)       // Is USB bus attached?          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003f9e   a66d     BTFSS     0x6d,0x3,0x0           if(UCONbits.USBEN == 0)                 // Is the module off?            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fa0   d810     RCALL     0x3fc2                     USBModuleEnable();                  // Is off, enable it             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fa2   d002     BRA       0x3fa8             else                                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fa4   b66d     BTFSC     0x6d,0x3,0x0           if(UCONbits.USBEN == 1)                 // Is the module on?             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fa6   d814     RCALL     0x3fd0                     USBModuleDisable();                 // Is on, disable it             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }//end if(usb_bus_sense...)                                                  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * After enabling the USB module, it takes some time for the voltage         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * on the D+ or D- line to rise high enough to get out of the SE0 condition. E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * The USB Reset interrupt should not be unmasked until the SE0 condition is E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * cleared. This helps preventing the firmware from misinterpreting this     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * unique event as a USB bus reset from the USB host.                        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fa8   0101     MOVLB     0x1                if(usb_device_state == ATTACHED_STATE)                                       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003faa   05e8     DECF      0xe8,0x0,0x1                                                                                    
003fac   e109     BNZ       0x3fc0                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fae   ba6d     BTFSC     0x6d,0x5,0x0           if(!UCONbits.SE0)                                                        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fb0   d007     BRA       0x3fc0                                                                                          
                                                   {                                                                        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fb2   6a68     CLRF      0x68,0x0                   UIR = 0;                        // Clear all USB interrupts          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fb4   6a69     CLRF      0x69,0x0                   UIE = 0;                        // Mask all USB interrupts           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fb6   8069     BSF       0x69,0x0,0x0               UIEbits.URSTIE = 1;             // Unmask RESET interrupt            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fb8   8869     BSF       0x69,0x4,0x0               UIEbits.IDLEIE = 1;             // Unmask IDLE interrupt             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fba   0101     MOVLB     0x1                        usb_device_state = POWERED_STATE;                                    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fbc   0e02     MOVLW     0x2                                                                                             
003fbe   6fe8     MOVWF     0xe8,0x1                                                                                        
                                                   }//end if                           // else wait until SE0 is cleared    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }//end if(usb_device_state == ATTACHED_STATE)                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fc0   0012     RETURN    0x0            }//end USBCheckBusStatus                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBModuleEnable(void)                                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine enables the USB module.                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  An end designer should never have to call this routine       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  manually. This routine should only be called from            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  USBCheckBusStatus().                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            See USBCheckBusStatus() for more information.                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleEnable(void)                                                       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fc2   6a6d     CLRF      0x6d,0x0           UCON = 0;                                                                    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fc4   6a69     CLRF      0x69,0x0           UIE = 0;                                // Mask all USB interrupts           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fc6   866d     BSF       0x6d,0x3,0x0       UCONbits.USBEN = 1;                     // Enable module & attach to bus     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fc8   0101     MOVLB     0x1                usb_device_state = ATTACHED_STATE;      // Defined in usbmmap.c & .h         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fca   0e01     MOVLW     0x1                                                                                             
003fcc   6fe8     MOVWF     0xe8,0x1                                                                                        
003fce   0012     RETURN    0x0            }//end USBModuleEnable                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBModuleDisable(void)                                  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine disables the USB module.                        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  An end designer should never have to call this routine       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  manually. This routine should only be called from            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  USBCheckBusStatus().                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            See USBCheckBusStatus() for more information.                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleDisable(void)                                                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fd0   6a6d     CLRF      0x6d,0x0           UCON = 0;                               // Disable module & detach from bus  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fd2   6a69     CLRF      0x69,0x0           UIE = 0;                                // Mask all USB interrupts           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fd4   0101     MOVLB     0x1                usb_device_state = DETACHED_STATE;      // Defined in usbmmap.c & .h         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fd6   6be8     CLRF      0xe8,0x1                                                                                        
003fd8   0012     RETURN    0x0            }//end USBModuleDisable                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBSoftDetach(void)                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    The device will have to be re-enumerated to function again.  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        USBSoftDetach electrically disconnects the device from       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the bus. This is done by stop supplying Vusb voltage to      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  pull-up resistor. The pull-down resistors on the host        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  side will pull both differential signal lines low and        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the host registers the event as a disconnect.                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  Since the USB cable is not physically disconnected, the      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  power supply through the cable can still be sensed by        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the device. The next time USBCheckBusStatus() function       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  is called, it will reconnect the device back to the bus.     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBSoftDetach(void)                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fda   dffa     RCALL     0x3fd0             USBModuleDisable();                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fdc   0012     RETURN    0x0            }//end USBSoftDetach                                                             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBDriverService(void)                                  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine is the heart of this firmware. It manages       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  all USB interrupts.                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            Device state transitions through the following stages:       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  DETACHED -> ATTACHED -> POWERED -> DEFAULT ->                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  ADDRESS_PENDING -> ADDRESSED -> CONFIGURED -> READY          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBDriverService(void)                                                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Pointless to continue servicing if USB cable is not even attached.        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fde   0101     MOVLB     0x1                if(usb_device_state == DETACHED_STATE) return;                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fe0   51e8     MOVF      0xe8,0x0,0x1                                                                                    
003fe2   e101     BNZ       0x3fe6                                                                                          
003fe4   d03a     BRA       0x405a                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Task A: Service USB Activity Interrupt                                    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fe6   5068     MOVF      0x68,0x0,0x0       if(UIRbits.ACTVIF && UIEbits.ACTVIE)    USBWakeFromSuspend();                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003fe8   0b04     ANDLW     0x4                                                                                             
003fea   e004     BZ        0x3ff4                                                                                          
003fec   5069     MOVF      0x69,0x0,0x0                                                                                    
003fee   0b04     ANDLW     0x4                                                                                             
003ff0   e001     BZ        0x3ff4                                                                                          
003ff2   d83c     RCALL     0x406c                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Pointless to continue servicing if the device is in suspend mode.         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003ff4   b26d     BTFSC     0x6d,0x1,0x0       if(UCONbits.SUSPND==1) return;                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003ff6   d031     BRA       0x405a                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Task B: Service USB Bus Reset Interrupt.                                  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * When bus reset is received during suspend, ACTVIF will be set first,      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * once the UCONbits.SUSPND is clear, then the URSTIF bit will be asserted.  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * This is why URSTIF is checked after ACTVIF.                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003ff8   5068     MOVF      0x68,0x0,0x0       if(UIRbits.URSTIF && UIEbits.URSTIE)    USBProtocolResetHandler();           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
003ffa   0b01     ANDLW     0x1                                                                                             
003ffc   e004     BZ        0x4006                                                                                          
003ffe   5069     MOVF      0x69,0x0,0x0                                                                                    
004000   0b01     ANDLW     0x1                                                                                             
004002   e001     BZ        0x4006                                                                                          
004004   d856     RCALL     0x40b2                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Task C: Service other USB interrupts                                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004006   5068     MOVF      0x68,0x0,0x0       if(UIRbits.IDLEIF && UIEbits.IDLEIE)    USBSuspend();                        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004008   0b10     ANDLW     0x10                                                                                            
00400a   e004     BZ        0x4014                                                                                          
00400c   5069     MOVF      0x69,0x0,0x0                                                                                    
00400e   0b10     ANDLW     0x10                                                                                            
004010   e001     BZ        0x4014                                                                                          
004012   d824     RCALL     0x405c                                                                                          
004014   5068     MOVF      0x68,0x0,0x0       if(UIRbits.SOFIF && UIEbits.SOFIE)      USB_SOF_Handler();                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004016   0b40     ANDLW     0x40                                                                                            
004018   e004     BZ        0x4022                                                                                          
00401a   5069     MOVF      0x69,0x0,0x0                                                                                    
00401c   0b40     ANDLW     0x40                                                                                            
00401e   e001     BZ        0x4022                                                                                          
004020   d83d     RCALL     0x409c                                                                                          
004022   5068     MOVF      0x68,0x0,0x0       if(UIRbits.STALLIF && UIEbits.STALLIE)  USBStallHandler();                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004024   0b20     ANDLW     0x20                                                                                            
004026   e004     BZ        0x4030                                                                                          
004028   5069     MOVF      0x69,0x0,0x0                                                                                    
00402a   0b20     ANDLW     0x20                                                                                            
00402c   e001     BZ        0x4030                                                                                          
00402e   d838     RCALL     0x40a0                                                                                          
004030   5068     MOVF      0x68,0x0,0x0       if(UIRbits.UERRIF && UIEbits.UERRIE)    USBErrorHandler();                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004032   0b02     ANDLW     0x2                                                                                             
004034   e004     BZ        0x403e                                                                                          
004036   5069     MOVF      0x69,0x0,0x0                                                                                    
004038   0b02     ANDLW     0x2                                                                                             
00403a   e001     BZ        0x403e                                                                                          
00403c   d838     RCALL     0x40ae                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Pointless to continue servicing if the host has not sent a bus reset.     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Once bus reset is received, the device transitions into the DEFAULT       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * state and is ready for communication.                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00403e   0e03     MOVLW     0x3                if(usb_device_state < DEFAULT_STATE) return;                                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004040   0101     MOVLB     0x1                                                                                             
004042   5de8     SUBWF     0xe8,0x0,0x1                                                                                    
004044   e201     BC        0x4048                                                                                          
004046   d009     BRA       0x405a                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Task D: Servicing USB Transaction Complete Interrupt                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004048   5068     MOVF      0x68,0x0,0x0       if(UIRbits.TRNIF && UIEbits.TRNIE)                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00404a   0b08     ANDLW     0x8                                                                                             
00404c   e006     BZ        0x405a                                                                                          
00404e   5069     MOVF      0x69,0x0,0x0                                                                                    
004050   0b08     ANDLW     0x8                                                                                             
004052   e003     BZ        0x405a                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   /*                                                                       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * USBCtrlEPService only services transactions over EP0.                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * It ignores all other EP transactions.                                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    */                                                                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004054   eca3     CALL      0x3946,0x0             USBCtrlEPService();                                                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004056   f01c                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   /*                                                                       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * Other EP can be serviced later by responsible device class firmware.  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * Each device driver knows when an OUT or IN transaction is ready by    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * checking the buffer ownership bit.                                    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * An OUT EP should always be owned by SIE until the data is ready.      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * An IN EP should always be owned by CPU until the data is ready.       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    *                                                                       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * Because of this logic, it is not necessary to save the USTAT value    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * of non-EP0 transactions.                                              E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    */                                                                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004058   9668     BCF       0x68,0x3,0x0           UIRbits.TRNIF = 0;                                                       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }//end if(UIRbits.TRNIF && UIEbits.TRNIE)                                    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00405a   0012     RETURN    0x0            }//end USBDriverService                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBSuspend(void)                                        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:                                                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBSuspend(void)                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * NOTE: Do not clear UIRbits.ACTVIF here!                                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Reason:                                                                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * ACTVIF is only generated once an IDLEIF has been generated.               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * This is a 1:1 ratio interrupt generation.                                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * For every IDLEIF, there will be only one ACTVIF regardless of             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * the number of subsequent bus transitions.                                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * If the ACTIF is cleared here, a problem could occur when:                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * [       IDLE       ][bus activity ->                                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * <--- 3 ms ----->     ^                                                    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                ^     ACTVIF=1                                             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                IDLEIF=1                                                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *  #           #           #           #   (#=Program polling flags)        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          ^                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          This polling loop will see both                  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          IDLEIF=1 and ACTVIF=1.                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          However, the program services IDLEIF first       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          because ACTIVIE=0.                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          If this routine clears the only ACTIVIF,         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          then it can never get out of the suspend         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          mode.                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00405c   8469     BSF       0x69,0x2,0x0       UIEbits.ACTVIE = 1;                     // Enable bus activity interrupt     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00405e   9868     BCF       0x68,0x4,0x0       UIRbits.IDLEIF = 0;                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004060   826d     BSF       0x6d,0x1,0x0       UCONbits.SUSPND = 1;                    // Put USB module in power conserve  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                       // mode, SIE clock inactive          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * At this point the PIC can go into sleep,idle, or                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * switch to a slower clock, etc.                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /* Modifiable Section */                                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004062   9aa1     BCF       0xa1,0x5,0x0       PIR2bits.USBIF = 0;                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004064   8aa0     BSF       0xa0,0x5,0x0       PIE2bits.USBIE = 1;                     // Set USB wakeup source             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004066   0003     SLEEP                        Sleep();                                // Goto sleep                        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004068   9aa0     BCF       0xa0,0x5,0x0       PIE2bits.USBIE = 0;                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /* End Modifiable Section */                                                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00406a   0012     RETURN    0x0            }//end USBSuspend                                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBWakeFromSuspend(void)                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:                                                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBWakeFromSuspend(void)                                                    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * If using clock switching, this is the place to restore the                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * original clock frequency.                                                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00406c   926d     BCF       0x6d,0x1,0x0       UCONbits.SUSPND = 0;                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00406e   9469     BCF       0x69,0x2,0x0       UIEbits.ACTVIE = 0;                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004070   9468     BCF       0x68,0x2,0x0       UIRbits.ACTVIF = 0;                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004072   0012     RETURN    0x0            }//end USBWakeFromSuspend                                                        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBRemoteWakeup(void)                                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This function should be called by user when the device       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  is waken up by an external stimulus other than ACTIVIF.      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  Please read the note below to understand the limitations.    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            The modifiable section in this routine should be changed     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  to meet the application needs. Current implementation        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  temporary blocks other functions from executing for a        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  period of 1-13 ms depending on the core frequency.           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  According to USB 2.0 specification section 7.1.7.7,          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  "The remote wakeup device must hold the resume signaling     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  for at lest 1 ms but for no more than 15 ms."                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  The idea here is to use a delay counter loop, using a        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  common value that would work over a wide range of core       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  frequencies.                                                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  That value selected is 1800. See table below:                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  ==========================================================   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  Core Freq(MHz)      MIP         RESUME Signal Period (ms)    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  ==========================================================   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                      48              12          1.05                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                       4              1           12.6                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  ==========================================================   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  * These timing could be incorrect when using code            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                    optimization or extended instruction mode,                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                    or when having other interrupts enabled.                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                    Make sure to verify using the MPLAB SIM's Stopwatch        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBRemoteWakeup(void)                                                       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               static word delay_count;                                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004074   0101     MOVLB     0x1                if(usb_stat.RemoteWakeup == 1)          // Check if RemoteWakeup function    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004076   a1e9     BTFSS     0xe9,0x0,0x1                                                                                    
004078   d010     BRA       0x409a                                                                                          
                                               {                                       // has been enabled by the host.     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00407a   dff8     RCALL     0x406c                 USBWakeFromSuspend();               // Unsuspend USB modue               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00407c   846d     BSF       0x6d,0x2,0x0           UCONbits.RESUME = 1;                // Start RESUME signaling            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   /* Modifiable Section */                                                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00407e   0101     MOVLB     0x1                    delay_count = 1800U;                // Set RESUME line for 1-13 ms       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004080   0e08     MOVLW     0x8                                                                                             
004082   6fec     MOVWF     0xec,0x1                                                                                        
004084   0e07     MOVLW     0x7                                                                                             
004086   6fed     MOVWF     0xed,0x1                                                                                        
                                                   do                                                                       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   {                                                                        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004088   0101     MOVLB     0x1                        delay_count--;                                                       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00408a   07ec     DECF      0xec,0x1,0x1                                                                                    
00408c   0e00     MOVLW     0x0                                                                                             
00408e   5bed     SUBWFB    0xed,0x1,0x1                                                                                    
004090   0101     MOVLB     0x1                    }while(delay_count);                                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004092   51ec     MOVF      0xec,0x0,0x1                                                                                    
004094   11ed     IORWF     0xed,0x0,0x1                                                                                    
004096   e1f8     BNZ       0x4088                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   /* End Modifiable Section */                                             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004098   946d     BCF       0x6d,0x2,0x0           UCONbits.RESUME = 0;                                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }//endif                                                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00409a   0012     RETURN    0x0            }//end USBRemoteWakeup                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USB_SOF_Handler(void)                                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        The USB host sends out a SOF packet to full-speed devices    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  every 1 ms. This interrupt may be useful for isochronous     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  pipes. End designers should implement callback routine       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  as necessary.                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USB_SOF_Handler(void)                                                       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /* Callback routine here */                                                  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00409c   9c68     BCF       0x68,0x6,0x0       UIRbits.SOFIF = 0;                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00409e   0012     RETURN    0x0            }//end USB_SOF_Handler                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBStallHandler(void)                                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    A STALL packet is sent to the host by the SIE.               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        The STALLIF is set anytime the SIE sends out a STALL         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  packet regardless of which endpoint causes it.               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  A Setup transaction overrides the STALL function. A stalled  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  endpoint stops stalling once it receives a setup packet.     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  In this case, the SIE will accepts the Setup packet and      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  set the TRNIF flag to notify the firmware. STALL function    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  for that particular endpoint pipe will be automatically      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  disabled (direction specific).                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  There are a few reasons for an endpoint to be stalled.       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  1. When a non-supported USB request is received.             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                     Example: GET_DESCRIPTOR(DEVICE_QUALIFIER)                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  2. When an endpoint is currently halted.                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  3. When the device class specifies that an endpoint must     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                     stall in response to a specific event.                    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                     Example: Mass Storage Device Class                        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                              If the CBW is not valid, the device shall        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                              STALL the Bulk-In pipe.                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                              See USB Mass Storage Class Bulk-only Transport   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                              Specification for more details.                  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            UEPn.EPSTALL can be scanned to see which endpoint causes     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the stall event.                                             E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  If                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBStallHandler(void)                                                       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Does not really have to do anything here,                                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * even for the control endpoint.                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * All BDs of Endpoint 0 are owned by SIE right now,                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * but once a Setup Transaction is received, the ownership                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * for EP0_OUT will be returned to CPU.                                      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * When the Setup Transaction is serviced, the ownership                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * for EP0_IN will then be forced back to CPU by firmware.                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040a0   a070     BTFSS     0x70,0x0,0x0       if(UEP0bits.EPSTALL == 1)                                                    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040a2   d003     BRA       0x40aa                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040a4   ec30     CALL      0x3c60,0x0             USBPrepareForNextSetupTrf();        // Firmware work-around              E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040a6   f01e                                                                                                               
0040a8   9070     BCF       0x70,0x0,0x0           UEP0bits.EPSTALL = 0;                                                    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040aa   9a68     BCF       0x68,0x5,0x0       UIRbits.STALLIF = 0;                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040ac   0012     RETURN    0x0            }//end USBStallHandler                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBErrorHandler(void)                                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        The purpose of this interrupt is mainly for debugging        E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  during development. Check UEIR to see which error causes     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the interrupt.                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBErrorHandler(void)                                                       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040ae   9268     BCF       0x68,0x1,0x0       UIRbits.UERRIF = 0;                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040b0   0012     RETURN    0x0            }//end USBErrorHandler                                                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBProtocolResetHandler(void)                           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    A USB bus reset is received from the host.                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    Currently, this routine flushes any pending USB              E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  transactions. It empties out the USTAT FIFO. This action     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  might not be desirable in some applications.                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        Once a USB bus reset is received from the host, this         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  routine should be called. It resets the device address to    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  zero, disables all non-EP0 endpoints, initializes EP0 to     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  be ready for default communication, clears all USB           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  interrupt flags, unmasks applicable USB interrupts, and      E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  reinitializes internal state-machine variables.              E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBProtocolResetHandler(void)                                               E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040b2   6a6a     CLRF      0x6a,0x0           UEIR = 0;                       // Clear all USB error flags                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040b4   6a68     CLRF      0x68,0x0           UIR = 0;                        // Clears all USB interrupts                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040b6   0e9f     MOVLW     0x9f               UEIE = 0b10011111;              // Unmask all USB error interrupts           E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040b8   6e6b     MOVWF     0x6b,0x0                                                                                        
0040ba   0e7b     MOVLW     0x7b               UIE = 0b01111011;               // Enable all interrupts except ACTVIE       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040bc   6e69     MOVWF     0x69,0x0                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040be   6a6e     CLRF      0x6e,0x0           UADDR = 0x00;                   // Reset to default address                  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040c0   0e0f     MOVLW     0xf                mDisableEP1to15();              // Reset all non-EP0 UEPn registers          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040c2   6ee6     MOVWF     0xe6,0x0                                                                                        
0040c4   0e71     MOVLW     0x71                                                                                            
0040c6   6ee6     MOVWF     0xe6,0x0                                                                                        
0040c8   0e0f     MOVLW     0xf                                                                                             
0040ca   6ee6     MOVWF     0xe6,0x0                                                                                        
0040cc   d814     RCALL     0x40f6                                                                                          
0040ce   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0040d0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0040d2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0040d4   0e16     MOVLW     0x16               UEP0 = EP_CTRL|HSHK_EN;         // Init EP0 as a Ctrl EP, see usbdrv.h       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040d6   6e70     MOVWF     0x70,0x0                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040d8   a668     BTFSS     0x68,0x3,0x0       while(UIRbits.TRNIF == 1)       // Flush any pending transactions            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040da   d002     BRA       0x40e0                                                                                          
0040de   d7fc     BRA       0x40d8                                                                                          
0040dc   9668     BCF       0x68,0x3,0x0           UIRbits.TRNIF = 0;                                                       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040e0   986d     BCF       0x6d,0x4,0x0       UCONbits.PKTDIS = 0;            // Make sure packet processing is enabled    E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040e2   ec30     CALL      0x3c60,0x0         USBPrepareForNextSetupTrf();    // Declared in usbctrltrf.c                  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040e4   f01e                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040e6   0101     MOVLB     0x1                usb_stat.RemoteWakeup = 0;      // Default status flag to disable            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040e8   91e9     BCF       0xe9,0x0,0x1                                                                                    
0040ea   0101     MOVLB     0x1                usb_active_cfg = 0;             // Clear active configuration                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040ec   6bea     CLRF      0xea,0x1                                                                                        
0040ee   0101     MOVLB     0x1                usb_device_state = DEFAULT_STATE;                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040f0   0e03     MOVLW     0x3                                                                                             
0040f2   6fe8     MOVWF     0xe8,0x1                                                                                        
0040f4   0012     RETURN    0x0            }//end USBProtocolResetHandler                                                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /* Auxiliary Function */                                                         E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040f6   cfd9     MOVFF     0xfd9,0xfe6    void ClearArray(byte* startAdr,byte count)                                       E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040f8   ffe6                                                                                                               
0040fa   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0040fc   ffd9                                                                                                               
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040fe   0efd     MOVLW     0xfd               *startAdr;                                                                   E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004100   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
004102   ffe9                                                                                                               
004104   0efe     MOVLW     0xfe                                                                                            
004106   cfdb     MOVFF     0xfdb,0xfea                                                                                     
004108   ffea                                                                                                               
00410a   0efc     MOVLW     0xfc               while(count)                                                                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00410c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00410e   e004     BZ        0x4118                                                                                          
004116   d7f9     BRA       0x410a                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   _asm                                                                     E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004110   6aee     CLRF      0xee,0x0               clrf POSTINC0,0                                                          E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   _endasm                                                                  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004112   0efc     MOVLW     0xfc                   count--;                                                                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004114   06db     DECF      0xdb,0x1,0x0                                                                                    
                                               }//end while                                                                 E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004118   52e5     MOVF      0xe5,0x1,0x0   }//end ClearArray                                                                E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00411a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00411c   ffd9                                                                                                               
00411e   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /** EOF usbdrv.c *************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /*********************************************************************           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                Microchip USB C18 Firmware Version 1.0                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *********************************************************************           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * FileName:        usb9.c                                                       E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Processor:       PIC18                                                        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Software License Agreement                                                    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * license.                                                                      E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Author               Date        Comment                                      E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            ********************************************************************/           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /** I N C L U D E S **********************************************************/  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #include <p18cxxx.h>                                                             E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #include "system\typedefs.h"                                                     E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #include "system\usb\usb.h"                                                      E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #include "io_cfg.h"                     // Required for self_power status        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /** V A R I A B L E S ********************************************************/  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #pragma udata                                                                    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdGetDscHandler(void);                                                  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdSetCfgHandler(void);                                                  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdGetStatusHandler(void);                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdFeatureReqHandler(void);                                              E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /** D E C L A R A T I O N S **************************************************/  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #pragma code                                                                     E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Function:        void USBCheckStdRequest(void)                                E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Overview:        This routine checks the setup data packet to see if it       E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  knows how to handle it                                       E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBCheckStdRequest(void)                                                    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003c80   0104     MOVLB     0x4                if(SetupPkt.RequestType != STANDARD) return;                                 E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003c82   5120     MOVF      0x20,0x0,0x1                                                                                    
003c84   0b60     ANDLW     0x60                                                                                            
003c86   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003c88   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003c8a   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003c8c   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003c8e   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003c90   0900     IORLW     0x0                                                                                             
003c92   e001     BZ        0x3c96                                                                                          
003c94   d058     BRA       0x3d46                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003c96   0104     MOVLB     0x4                switch(SetupPkt.bRequest)                                                    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003c98   5121     MOVF      0x21,0x0,0x1                                                                                    
003c9a   0a07     XORLW     0x7                                                                                             
003c9c   e053     BZ        0x3d44                                                                                          
003c9e   0a0b     XORLW     0xb                                                                                             
003ca0   e051     BZ        0x3d44                                                                                          
003ca2   0a07     XORLW     0x7                                                                                             
003ca4   e042     BZ        0x3d2a                                                                                          
003ca6   0a01     XORLW     0x1                                                                                             
003ca8   e02c     BZ        0x3d02                                                                                          
003caa   0a0b     XORLW     0xb                                                                                             
003cac   e028     BZ        0x3cfe                                                                                          
003cae   0a02     XORLW     0x2                                                                                             
003cb0   e026     BZ        0x3cfe                                                                                          
003cb2   0a03     XORLW     0x3                                                                                             
003cb4   e022     BZ        0x3cfa                                                                                          
003cb6   0a08     XORLW     0x8                                                                                             
003cb8   e012     BZ        0x3cde                                                                                          
003cba   0a01     XORLW     0x1                                                                                             
003cbc   e00e     BZ        0x3cda                                                                                          
003cbe   0a0f     XORLW     0xf                                                                                             
003cc0   e00a     BZ        0x3cd6                                                                                          
003cc2   0a03     XORLW     0x3                                                                                             
003cc4   e001     BZ        0x3cc8                                                                                          
003cc6   d03e     BRA       0x3d44                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SET_ADR:                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003cc8   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003cca   0e01     MOVLW     0x1                                                                                             
003ccc   6fe1     MOVWF     0xe1,0x1                                                                                        
003cce   0101     MOVLB     0x1                        usb_device_state = ADR_PENDING_STATE;       // Update state only     E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003cd0   0e04     MOVLW     0x4                                                                                             
003cd2   6fe8     MOVWF     0xe8,0x1                                                                                        
                                                       /* See USBCtrlTrfInHandler() in usbctrltrf.c for the next step */    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003cd4   d038     BRA       0x3d46                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case GET_DSC:                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003cd6   d838     RCALL     0x3d48                     USBStdGetDscHandler();                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003cd8   d036     BRA       0x3d46                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SET_CFG:                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003cda   d893     RCALL     0x3e02                     USBStdSetCfgHandler();                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003cdc   d034     BRA       0x3d46                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case GET_CFG:                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003cde   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ce0   0e01     MOVLW     0x1                                                                                             
003ce2   6fe1     MOVWF     0xe1,0x1                                                                                        
003ce4   0101     MOVLB     0x1                        pSrc.bRam = (byte*)&usb_active_cfg;         // Set Source            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ce6   0eea     MOVLW     0xea                                                                                            
003ce8   6fe2     MOVWF     0xe2,0x1                                                                                        
003cea   0e01     MOVLW     0x1                                                                                             
003cec   6fe3     MOVWF     0xe3,0x1                                                                                        
003cee   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;               // Set memory type       E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003cf0   93e9     BCF       0xe9,0x1,0x1                                                                                    
003cf2   0101     MOVLB     0x1                        LSB(wCount) = 1;                            // Set data count        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003cf4   0e01     MOVLW     0x1                                                                                             
003cf6   6fe6     MOVWF     0xe6,0x1                                                                                        
003cf8   d026     BRA       0x3d46                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case GET_STATUS:                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003cfa   d8ab     RCALL     0x3e52                     USBStdGetStatusHandler();                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003cfc   d024     BRA       0x3d46                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case CLR_FEATURE:                                                        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SET_FEATURE:                                                        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003cfe   d8f9     RCALL     0x3ef2                     USBStdFeatureReqHandler();                                           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d00   d022     BRA       0x3d46                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case GET_INTF:                                                           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d02   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d04   0e01     MOVLW     0x1                                                                                             
003d06   6fe1     MOVWF     0xe1,0x1                                                                                        
003d08   0104     MOVLB     0x4                        pSrc.bRam = (byte*)&usb_alt_intf+SetupPkt.bIntfID;  // Set source    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d0a   5124     MOVF      0x24,0x0,0x1                                                                                    
003d0c   0101     MOVLB     0x1                                                                                             
003d0e   6fe2     MOVWF     0xe2,0x1                                                                                        
003d10   6be3     CLRF      0xe3,0x1                                                                                        
003d12   0eeb     MOVLW     0xeb                                                                                            
003d14   0101     MOVLB     0x1                                                                                             
003d16   27e2     ADDWF     0xe2,0x1,0x1                                                                                    
003d18   0e01     MOVLW     0x1                                                                                             
003d1a   0101     MOVLB     0x1                                                                                             
003d1c   23e3     ADDWFC    0xe3,0x1,0x1                                                                                    
003d1e   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;               // Set memory type       E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d20   93e9     BCF       0xe9,0x1,0x1                                                                                    
003d22   0101     MOVLB     0x1                        LSB(wCount) = 1;                            // Set data count        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d24   0e01     MOVLW     0x1                                                                                             
003d26   6fe6     MOVWF     0xe6,0x1                                                                                        
003d28   d00e     BRA       0x3d46                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SET_INTF:                                                           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d2a   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d2c   0e01     MOVLW     0x1                                                                                             
003d2e   6fe1     MOVWF     0xe1,0x1                                                                                        
003d30   0104     MOVLB     0x4                        usb_alt_intf[SetupPkt.bIntfID] = SetupPkt.bAltID;                    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d32   5124     MOVF      0x24,0x0,0x1                                                                                    
003d34   6aea     CLRF      0xea,0x0                                                                                        
003d36   0feb     ADDLW     0xeb                                                                                            
003d38   6ee9     MOVWF     0xe9,0x0                                                                                        
003d3a   0e01     MOVLW     0x1                                                                                             
003d3c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
003d3e   c422     MOVFF     0x422,0xfef                                                                                     
003d40   ffef                                                                                                               
003d42   d001     BRA       0x3d46                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SET_DSC:                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SYNCH_FRAME:                                                        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   default:                                                                 E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d44   d000     BRA       0x3d46                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                               }//end switch                                                                E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d46   0012     RETURN    0x0            }//end USBCheckStdRequest                                                        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdGetDscHandler(void)                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Overview:        This routine handles the standard GET_DESCRIPTOR request.    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  It utilizes tables dynamically looks up descriptor size.     E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  This routine should never have to be modified if the tables  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  in usbdsc.c are declared correctly.                          E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdGetDscHandler(void)                                                   E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d48   0e80     MOVLW     0x80               if(SetupPkt.bmRequestType == 0x80)                                           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d4a   0104     MOVLB     0x4                                                                                             
003d4c   5d20     SUBWF     0x20,0x0,0x1                                                                                    
003d4e   e158     BNZ       0x3e00                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d50   0104     MOVLB     0x4                    switch(SetupPkt.bDscType)                                                E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d52   5123     MOVF      0x23,0x0,0x1                                                                                    
003d54   0a03     XORLW     0x3                                                                                             
003d56   e034     BZ        0x3dc0                                                                                          
003d58   0a01     XORLW     0x1                                                                                             
003d5a   e010     BZ        0x3d7c                                                                                          
003d5c   0a03     XORLW     0x3                                                                                             
003d5e   e001     BZ        0x3d62                                                                                          
003d60   d04d     BRA       0x3dfc                                                                                          
                                                   {                                                                        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                       case DSC_DEV:                                                        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d62   0101     MOVLB     0x1                            ctrl_trf_session_owner = MUID_USB9;                              E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d64   0e01     MOVLW     0x1                                                                                             
003d66   6fe1     MOVWF     0xe1,0x1                                                                                        
003d68   0101     MOVLB     0x1                            pSrc.bRom = (rom byte*)&device_dsc;                              E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d6a   0e6a     MOVLW     0x6a                                                                                            
003d6c   6fe2     MOVWF     0xe2,0x1                                                                                        
003d6e   0e43     MOVLW     0x43                                                                                            
003d70   6fe3     MOVWF     0xe3,0x1                                                                                        
003d72   0e12     MOVLW     0x12                           wCount._word = sizeof(device_dsc);          // Set data count    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d74   0101     MOVLB     0x1                                                                                             
003d76   6fe6     MOVWF     0xe6,0x1                                                                                        
003d78   6be7     CLRF      0xe7,0x1                                                                                        
003d7a   d040     BRA       0x3dfc                         break;                                                           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                       case DSC_CFG:                                                        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d7c   0101     MOVLB     0x1                            ctrl_trf_session_owner = MUID_USB9;                              E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d7e   0e01     MOVLW     0x1                                                                                             
003d80   6fe1     MOVWF     0xe1,0x1                                                                                        
003d82   0104     MOVLB     0x4                            pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);                    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d84   5122     MOVF      0x22,0x0,0x1                                                                                    
003d86   6ef6     MOVWF     0xf6,0x0                                                                                        
003d88   6af7     CLRF      0xf7,0x0                                                                                        
003d8a   90d8     BCF       0xd8,0x0,0x0                                                                                    
003d8c   36f6     RLCF      0xf6,0x1,0x0                                                                                    
003d8e   36f7     RLCF      0xf7,0x1,0x0                                                                                    
003d90   0e2b     MOVLW     0x2b                                                                                            
003d92   26f6     ADDWF     0xf6,0x1,0x0                                                                                    
003d94   0e44     MOVLW     0x44                                                                                            
003d96   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
003d98   0009     TBLRDPOSTINC                                                                                              
003d9a   cff5     MOVFF     0xff5,0x1e2                                                                                     
003d9c   f1e2                                                                                                               
003d9e   000a     TBLRDPOSTDEC                                                                                              
003da0   cff5     MOVFF     0xff5,0x1e3                                                                                     
003da2   f1e3                                                                                                               
003da4   0e02     MOVLW     0x2                            wCount._word = *(pSrc.wRom+1);              // Set data count    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003da6   0101     MOVLB     0x1                                                                                             
003da8   6af7     CLRF      0xf7,0x0                                                                                        
003daa   25e2     ADDWF     0xe2,0x0,0x1                                                                                    
003dac   6ef6     MOVWF     0xf6,0x0                                                                                        
003dae   51e3     MOVF      0xe3,0x0,0x1                                                                                    
003db0   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
003db2   0009     TBLRDPOSTINC                                                                                              
003db4   cff5     MOVFF     0xff5,0x1e6                                                                                     
003db6   f1e6                                                                                                               
003db8   000a     TBLRDPOSTDEC                                                                                              
003dba   cff5     MOVFF     0xff5,0x1e7                                                                                     
003dbc   f1e7                                                                                                               
003dbe   d01e     BRA       0x3dfc                         break;                                                           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                       case DSC_STR:                                                        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dc0   0101     MOVLB     0x1                            ctrl_trf_session_owner = MUID_USB9;                              E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dc2   0e01     MOVLW     0x1                                                                                             
003dc4   6fe1     MOVWF     0xe1,0x1                                                                                        
003dc6   0104     MOVLB     0x4                            pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);                    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dc8   5122     MOVF      0x22,0x0,0x1                                                                                    
003dca   6ef6     MOVWF     0xf6,0x0                                                                                        
003dcc   6af7     CLRF      0xf7,0x0                                                                                        
003dce   90d8     BCF       0xd8,0x0,0x0                                                                                    
003dd0   36f6     RLCF      0xf6,0x1,0x0                                                                                    
003dd2   36f7     RLCF      0xf7,0x1,0x0                                                                                    
003dd4   0e2f     MOVLW     0x2f                                                                                            
003dd6   26f6     ADDWF     0xf6,0x1,0x0                                                                                    
003dd8   0e44     MOVLW     0x44                                                                                            
003dda   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
003ddc   0009     TBLRDPOSTINC                                                                                              
003dde   cff5     MOVFF     0xff5,0x1e2                                                                                     
003de0   f1e2                                                                                                               
003de2   000a     TBLRDPOSTDEC                                                                                              
003de4   cff5     MOVFF     0xff5,0x1e3                                                                                     
003de6   f1e3                                                                                                               
003de8   c1e2     MOVFF     0x1e2,0xff6                    wCount._word = *pSrc.bRom;                  // Set data count    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dea   fff6                                                                                                               
003dec   c1e3     MOVFF     0x1e3,0xff7                                                                                     
003dee   fff7                                                                                                               
003df0   0008     TBLRD                                                                                                     
003df2   50f5     MOVF      0xf5,0x0,0x0                                                                                    
003df4   0101     MOVLB     0x1                                                                                             
003df6   6fe6     MOVWF     0xe6,0x1                                                                                        
003df8   6be7     CLRF      0xe7,0x1                                                                                        
003dfa   d000     BRA       0x3dfc                         break;                                                           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   }//end switch                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dfc   0101     MOVLB     0x1                    usb_stat.ctrl_trf_mem = _ROM;                       // Set memory type   E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dfe   83e9     BSF       0xe9,0x1,0x1                                                                                    
                                               }//end if                                                                    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e00   0012     RETURN    0x0            }//end USBStdGetDscHandler                                                       E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdSetCfgHandler(void)                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Overview:        This routine first disables all endpoints by clearing        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  UEP registers. It then configures (initializes) endpoints    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  specified in the modifiable section.                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdSetCfgHandler(void)                                                   E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e02   0101     MOVLB     0x1                ctrl_trf_session_owner = MUID_USB9;                                          E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e04   0e01     MOVLW     0x1                                                                                             
003e06   6fe1     MOVWF     0xe1,0x1                                                                                        
003e08   0e0f     MOVLW     0xf                mDisableEP1to15();                          // See usbdrv.h                  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e0a   6ee6     MOVWF     0xe6,0x0                                                                                        
003e0c   0e71     MOVLW     0x71                                                                                            
003e0e   6ee6     MOVWF     0xe6,0x0                                                                                        
003e10   0e0f     MOVLW     0xf                                                                                             
003e12   6ee6     MOVWF     0xe6,0x0                                                                                        
003e14   ec7b     CALL      0x40f6,0x0                                                                                      
003e16   f020                                                                                                               
003e18   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003e1a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003e1c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003e1e   0e01     MOVLW     0x1                ClearArray((byte*)&usb_alt_intf,MAX_NUM_INT);                                E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e20   6ee6     MOVWF     0xe6,0x0                                                                                        
003e22   0eeb     MOVLW     0xeb                                                                                            
003e24   6ee6     MOVWF     0xe6,0x0                                                                                        
003e26   0e01     MOVLW     0x1                                                                                             
003e28   6ee6     MOVWF     0xe6,0x0                                                                                        
003e2a   ec7b     CALL      0x40f6,0x0                                                                                      
003e2c   f020                                                                                                               
003e2e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003e30   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003e32   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003e34   c422     MOVFF     0x422,0x1ea        usb_active_cfg = SetupPkt.bCfgValue;                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e36   f1ea                                                                                                               
003e38   0104     MOVLB     0x4                if(SetupPkt.bCfgValue == 0)                                                  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e3a   5122     MOVF      0x22,0x0,0x1                                                                                    
003e3c   e104     BNZ       0x3e46                                                                                          
003e3e   0101     MOVLB     0x1                    usb_device_state = ADDRESS_STATE;                                        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e40   0e05     MOVLW     0x5                                                                                             
003e42   6fe8     MOVWF     0xe8,0x1                                                                                        
003e44   d005     BRA       0x3e50             else                                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e46   0101     MOVLB     0x1                    usb_device_state = CONFIGURED_STATE;                                     E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e48   0e06     MOVLW     0x6                                                                                             
003e4a   6fe8     MOVWF     0xe8,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   /* Modifiable Section */                                                 E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   #if defined(USB_USE_CDC)                // See autofiles\usbcfg.h        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e4c   ec1e     CALL      0x363c,0x0             CDCInitEP();                                                             E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e4e   f01b                                                                                                               
                                                   #endif                                                                   E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   /* End modifiable section */                                             E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                               }//end if(SetupPkt.bcfgValue == 0)                                           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e50   0012     RETURN    0x0            }//end USBStdSetCfgHandler                                                       E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdGetStatusHandler(void)                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Overview:        This routine handles the standard GET_STATUS request         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdGetStatusHandler(void)                                                E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e52   0104     MOVLB     0x4                CtrlTrfData._byte0 = 0;                         // Initialize content        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e54   6b28     CLRF      0x28,0x1                                                                                        
003e56   0104     MOVLB     0x4                CtrlTrfData._byte1 = 0;                                                      E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e58   6b29     CLRF      0x29,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e5a   0104     MOVLB     0x4                switch(SetupPkt.Recipient)                                                   E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e5c   5120     MOVF      0x20,0x0,0x1                                                                                    
003e5e   0b1f     ANDLW     0x1f                                                                                            
003e60   0a02     XORLW     0x2                                                                                             
003e62   e014     BZ        0x3e8c                                                                                          
003e64   0a03     XORLW     0x3                                                                                             
003e66   e00e     BZ        0x3e84                                                                                          
003e68   0a01     XORLW     0x1                                                                                             
003e6a   e001     BZ        0x3e6e                                                                                          
003e6c   d034     BRA       0x3ed6                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case RCPT_DEV:                                                           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e6e   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e70   0e01     MOVLW     0x1                                                                                             
003e72   6fe1     MOVWF     0xe1,0x1                                                                                        
                                                       /*                                                                   E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                        * _byte0: bit0: Self-Powered Status [0] Bus-Powered [1] Self-Powered E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                        *         bit1: RemoteWakeup        [0] Disabled    [1] Enabled     E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                        */                                                                  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                       if(self_power == 1)                     // self_power defined in io_cfg.h E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e74   0104     MOVLB     0x4                            CtrlTrfData._byte0|=0b000000001;    // Set bit0                  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e76   8128     BSF       0x28,0x0,0x1                                                                                    
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e78   0101     MOVLB     0x1                        if(usb_stat.RemoteWakeup == 1)          // usb_stat defined in usbmmap.c E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e7a   a1e9     BTFSS     0xe9,0x0,0x1                                                                                    
003e7c   d002     BRA       0x3e82                                                                                          
003e7e   0104     MOVLB     0x4                            CtrlTrfData._byte0|=0b00000010;     // Set bit1                  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e80   8328     BSF       0x28,0x1,0x1                                                                                    
003e82   d029     BRA       0x3ed6                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case RCPT_INTF:                                                          E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e84   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;     // No data to update         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e86   0e01     MOVLW     0x1                                                                                             
003e88   6fe1     MOVWF     0xe1,0x1                                                                                        
003e8a   d025     BRA       0x3ed6                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case RCPT_EP:                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e8c   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e8e   0e01     MOVLW     0x1                                                                                             
003e90   6fe1     MOVWF     0xe1,0x1                                                                                        
                                                       /*                                                                   E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                        * _byte0: bit0: Halt Status [0] Not Halted [1] Halted               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                        */                                                                  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e92   0104     MOVLB     0x4                        pDst.bRam = (byte*)&ep0Bo+(SetupPkt.EPNum*8)+(SetupPkt.EPDir*4);     E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e94   5124     MOVF      0x24,0x0,0x1                                                                                    
003e96   0b0f     ANDLW     0xf                                                                                             
003e98   0d08     MULLW     0x8                                                                                             
003e9a   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003e9c   6a2b     CLRF      0x2b,0x0                                                                                        
003e9e   0f00     ADDLW     0x0                                                                                             
003ea0   6e2a     MOVWF     0x2a,0x0                                                                                        
003ea2   0e04     MOVLW     0x4                                                                                             
003ea4   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
003ea6   0104     MOVLB     0x4                                                                                             
003ea8   5124     MOVF      0x24,0x0,0x1                                                                                    
003eaa   0b80     ANDLW     0x80                                                                                            
003eac   e001     BZ        0x3eb0                                                                                          
003eae   0e01     MOVLW     0x1                                                                                             
003eb0   0d04     MULLW     0x4                                                                                             
003eb2   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003eb4   0101     MOVLB     0x1                                                                                             
003eb6   242a     ADDWF     0x2a,0x0,0x0                                                                                    
003eb8   6fe4     MOVWF     0xe4,0x1                                                                                        
003eba   0e00     MOVLW     0x0                                                                                             
003ebc   202b     ADDWFC    0x2b,0x0,0x0                                                                                    
003ebe   6fe5     MOVWF     0xe5,0x1                                                                                        
003ec0   c1e4     MOVFF     0x1e4,0xfe9                if(*pDst.bRam & _BSTALL)    // Use _BSTALL as a bit mask             E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ec2   ffe9                                                                                                               
003ec4   c1e5     MOVFF     0x1e5,0xfea                                                                                     
003ec6   ffea                                                                                                               
003ec8   50ef     MOVF      0xef,0x0,0x0                                                                                    
003eca   0b04     ANDLW     0x4                                                                                             
003ecc   e003     BZ        0x3ed4                                                                                          
003ece   0104     MOVLB     0x4                            CtrlTrfData._byte0=0x01;// Set bit0                              E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ed0   0e01     MOVLW     0x1                                                                                             
003ed2   6f28     MOVWF     0x28,0x1                                                                                        
003ed4   d000     BRA       0x3ed6                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                               }//end switch                                                                E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ed6   0101     MOVLB     0x1                if(ctrl_trf_session_owner == MUID_USB9)                                      E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ed8   05e1     DECF      0xe1,0x0,0x1                                                                                    
003eda   e10a     BNZ       0x3ef0                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003edc   0101     MOVLB     0x1                    pSrc.bRam = (byte*)&CtrlTrfData;            // Set Source                E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ede   0e28     MOVLW     0x28                                                                                            
003ee0   6fe2     MOVWF     0xe2,0x1                                                                                        
003ee2   0e04     MOVLW     0x4                                                                                             
003ee4   6fe3     MOVWF     0xe3,0x1                                                                                        
003ee6   0101     MOVLB     0x1                    usb_stat.ctrl_trf_mem = _RAM;               // Set memory type           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ee8   93e9     BCF       0xe9,0x1,0x1                                                                                    
003eea   0101     MOVLB     0x1                    LSB(wCount) = 2;                            // Set data count            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003eec   0e02     MOVLW     0x2                                                                                             
003eee   6fe6     MOVWF     0xe6,0x1                                                                                        
                                               }//end if(...)                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ef0   0012     RETURN    0x0            }//end USBStdGetStatusHandler                                                    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdFeatureReqHandler(void)                           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Overview:        This routine handles the standard SET & CLEAR FEATURES       E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  requests                                                     E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdFeatureReqHandler(void)                                               E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ef2   0104     MOVLB     0x4                if((SetupPkt.bFeature == DEVICE_REMOTE_WAKEUP)&&                             E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ef4   0522     DECF      0x22,0x0,0x1                                                                                    
003ef6   e111     BNZ       0x3f1a                (SetupPkt.Recipient == RCPT_DEV))                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ef8   0104     MOVLB     0x4                                                                                             
003efa   5120     MOVF      0x20,0x0,0x1                                                                                    
003efc   0b1f     ANDLW     0x1f                                                                                            
003efe   0900     IORLW     0x0                                                                                             
003f00   e10c     BNZ       0x3f1a                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f02   0101     MOVLB     0x1                    ctrl_trf_session_owner = MUID_USB9;                                      E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f04   0e01     MOVLW     0x1                                                                                             
003f06   6fe1     MOVWF     0xe1,0x1                                                                                        
003f08   0e03     MOVLW     0x3                    if(SetupPkt.bRequest == SET_FEATURE)                                     E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f0a   0104     MOVLB     0x4                                                                                             
003f0c   5d21     SUBWF     0x21,0x0,0x1                                                                                    
003f0e   e103     BNZ       0x3f16                                                                                          
003f10   0101     MOVLB     0x1                        usb_stat.RemoteWakeup = 1;                                           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f12   81e9     BSF       0xe9,0x0,0x1                                                                                    
003f14   d002     BRA       0x3f1a                 else                                                                     E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f16   0101     MOVLB     0x1                        usb_stat.RemoteWakeup = 0;                                           E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f18   91e9     BCF       0xe9,0x0,0x1                                                                                    
                                               }//end if                                                                    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f1a   0104     MOVLB     0x4                if((SetupPkt.bFeature == ENDPOINT_HALT)&&                                    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f1c   5122     MOVF      0x22,0x0,0x1                                                                                    
003f1e   e13e     BNZ       0x3f9c                (SetupPkt.Recipient == RCPT_EP)&&                                         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f20   0104     MOVLB     0x4                                                                                             
003f22   5120     MOVF      0x20,0x0,0x1                                                                                    
003f24   0b1f     ANDLW     0x1f                                                                                            
003f26   0802     SUBLW     0x2                                                                                             
003f28   e139     BNZ       0x3f9c                                                                                          
003f2a   0104     MOVLB     0x4                   (SetupPkt.EPNum != 0))                                                    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f2c   5124     MOVF      0x24,0x0,0x1                                                                                    
003f2e   0b0f     ANDLW     0xf                                                                                             
003f30   0900     IORLW     0x0                                                                                             
003f32   e034     BZ        0x3f9c                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f34   0101     MOVLB     0x1                    ctrl_trf_session_owner = MUID_USB9;                                      E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f36   0e01     MOVLW     0x1                                                                                             
003f38   6fe1     MOVWF     0xe1,0x1                                                                                        
                                                   /* Must do address calculation here */                                   E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f3a   0104     MOVLB     0x4                    pDst.bRam = (byte*)&ep0Bo+(SetupPkt.EPNum*8)+(SetupPkt.EPDir*4);         E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f3c   5124     MOVF      0x24,0x0,0x1                                                                                    
003f3e   0b0f     ANDLW     0xf                                                                                             
003f40   0d08     MULLW     0x8                                                                                             
003f42   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003f44   6a2b     CLRF      0x2b,0x0                                                                                        
003f46   0f00     ADDLW     0x0                                                                                             
003f48   6e2a     MOVWF     0x2a,0x0                                                                                        
003f4a   0e04     MOVLW     0x4                                                                                             
003f4c   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
003f4e   0104     MOVLB     0x4                                                                                             
003f50   5124     MOVF      0x24,0x0,0x1                                                                                    
003f52   0b80     ANDLW     0x80                                                                                            
003f54   e001     BZ        0x3f58                                                                                          
003f56   0e01     MOVLW     0x1                                                                                             
003f58   0d04     MULLW     0x4                                                                                             
003f5a   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003f5c   0101     MOVLB     0x1                                                                                             
003f5e   242a     ADDWF     0x2a,0x0,0x0                                                                                    
003f60   6fe4     MOVWF     0xe4,0x1                                                                                        
003f62   0e00     MOVLW     0x0                                                                                             
003f64   202b     ADDWFC    0x2b,0x0,0x0                                                                                    
003f66   6fe5     MOVWF     0xe5,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f68   0e03     MOVLW     0x3                    if(SetupPkt.bRequest == SET_FEATURE)                                     E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f6a   0104     MOVLB     0x4                                                                                             
003f6c   5d21     SUBWF     0x21,0x0,0x1                                                                                    
003f6e   e107     BNZ       0x3f7e                                                                                          
003f70   0e84     MOVLW     0x84                       *pDst.bRam = _USIE|_BSTALL;                                          E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f72   c1e4     MOVFF     0x1e4,0xfe9                                                                                     
003f74   ffe9                                                                                                               
003f76   c1e5     MOVFF     0x1e5,0xfea                                                                                     
003f78   ffea                                                                                                               
003f7a   6eef     MOVWF     0xef,0x0                                                                                        
003f7c   d00f     BRA       0x3f9c                 else                                                                     E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   {                                                                        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f7e   0104     MOVLB     0x4                        if(SetupPkt.EPDir == 1) // IN                                        E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f80   af24     BTFSS     0x24,0x7,0x1                                                                                    
003f82   d006     BRA       0x3f90                                                                                          
003f84   c1e4     MOVFF     0x1e4,0xfe9                    *pDst.bRam = _UCPU;                                              E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f86   ffe9                                                                                                               
003f88   c1e5     MOVFF     0x1e5,0xfea                                                                                     
003f8a   ffea                                                                                                               
003f8c   6aef     CLRF      0xef,0x0                                                                                        
003f8e   d006     BRA       0x3f9c                     else                                                                 E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f90   0e88     MOVLW     0x88                           *pDst.bRam = _USIE|_DAT0|_DTSEN;                                 E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f92   c1e4     MOVFF     0x1e4,0xfe9                                                                                     
003f94   ffe9                                                                                                               
003f96   c1e5     MOVFF     0x1e5,0xfea                                                                                     
003f98   ffea                                                                                                               
003f9a   6eef     MOVWF     0xef,0x0                                                                                        
                                                   }//end if                                                                E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                               }//end if                                                                    E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f9c   0012     RETURN    0x0            }//end USBStdFeatureReqHandler                                                   E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /** EOF usb9.c ***************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /*********************************************************************           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                Microchip USB C18 Firmware Version 1.0                         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *********************************************************************           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * FileName:        usbdsc.c                                                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Processor:       PIC18                                                        E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Software License Agreement                                                    E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * license.                                                                      E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            ********************************************************************/           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /*********************************************************************           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -usbdsc.c-                                                                    E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * This file contains the USB descriptor information. It is used                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * in conjunction with the usbdsc.h file. When a descriptor is added             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * or removed from the main configuration descriptor, i.e. CFG01,                E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * the user must also change the descriptor structure defined in                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * the usbdsc.h file. The structure is used to calculate the                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * descriptor size, i.e. sizeof(CFG01).                                          E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * A typical configuration descriptor consists of:                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * At least one configuration descriptor (USB_CFG_DSC)                           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * One or more interface descriptors (USB_INTF_DSC)                              E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * One or more endpoint descriptors (USB_EP_DSC)                                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Naming Convention:                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * To resolve ambiguity, the naming convention are as followed:                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * - USB_CFG_DSC type should be named cdxx, where xx is the                      E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   configuration number. This number should match the actual                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   index value of this configuration.                                          E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * - USB_INTF_DSC type should be named i<yy>a<zz>, where yy is the               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   interface number and zz is the alternate interface number.                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * - USB_EP_DSC type should be named ep<##><d>_i<yy>a<zz>, where                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   ## is the endpoint number and d is the direction of transfer.               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   The interface name should also be listed as a suffix to identify            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   which interface does the endpoint belong to.                                E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Example:                                                                      E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * If a device has one configuration, two interfaces; interface 0                E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * has two endpoints (in and out), and interface 1 has one endpoint(in).         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Then the CFG01 structure in the usbdsc.h should be:                           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * #define CFG01 rom struct                            \                         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * {   USB_CFG_DSC             cd01;                   \                         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *     USB_INTF_DSC            i00a00;                 \                         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *     USB_EP_DSC              ep01o_i00a00;           \                         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *     USB_EP_DSC              ep01i_i00a00;           \                         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *     USB_INTF_DSC            i01a00;                 \                         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *     USB_EP_DSC              ep02i_i01a00;           \                         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * } cfg01                                                                       E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Note the hierarchy of the descriptors above, it follows the USB               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * specification requirement. All endpoints belonging to an interface            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * should be listed immediately after that interface.                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Filling in the descriptor values in the usbdsc.c file:                        E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Most items should be self-explanatory, however, a few will be                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * explained for clarification.                                                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * [Configuration Descriptor(USB_CFG_DSC)]                                       E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The configuration attribute must always have the _DEFAULT                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * definition at the minimum. Additional options can be ORed                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * to the _DEFAULT attribute. Available options are _SELF and _RWU.              E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * These definitions are defined in the usbdefs_std_dsc.h file. The              E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * _SELF tells the USB host that this device is self-powered. The                E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * _RWU tells the USB host that this device supports Remote Wakeup.              E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * [Endpoint Descriptor(USB_EP_DSC)]                                             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Assume the following example:                                                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * sizeof(USB_EP_DSC),DSC_EP,_EP01_OUT,_BULK,64,0x00                             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The first two parameters are self-explanatory. They specify the               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * length of this endpoint descriptor (7) and the descriptor type.               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The next parameter identifies the endpoint, the definitions are               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * defined in usbdefs_std_dsc.h and has the following naming                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * convention:                                                                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * _EP<##>_<dir>                                                                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * where ## is the endpoint number and dir is the direction of                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * transfer. The dir has the value of either 'OUT' or 'IN'.                      E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The next parameter identifies the type of the endpoint. Available             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * options are _BULK, _INT, _ISO, and _CTRL. The _CTRL is not                    E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * typically used because the default control transfer endpoint is               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * not defined in the USB descriptors. When _ISO option is used,                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * addition options can be ORed to _ISO. Example:                                E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * _ISO|_AD|_FE                                                                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * This describes the endpoint as an isochronous pipe with adaptive              E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * and feedback attributes. See usbdefs_std_dsc.h and the USB                    E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * specification for details. The next parameter defines the size of             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * the endpoint. The last parameter in the polling interval.                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Adding a USB String                                                           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * A string descriptor array should have the following format:                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * rom struct{byte bLength;byte bDscType;word string[size];}sdxxx={              E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * sizeof(sdxxx),DSC_STR,<text>};                                                E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The above structure provides a means for the C compiler to                    E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * calculate the length of string descriptor sdxxx, where xxx is the             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * index number. The first two bytes of the descriptor are descriptor            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * length and type. The rest <text> are string texts which must be               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * in the unicode format. The unicode format is achieved by declaring            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * each character as a word type. The whole text string is declared              E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * as a word array with the number of characters equals to <size>.               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * <size> has to be manually counted and entered into the array                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * declaration. Let's study this through an example:                             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * if the string is "USB" , then the string descriptor should be:                E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * (Using index 02)                                                              E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * rom struct{byte bLength;byte bDscType;word string[3];}sd002={                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * sizeof(sd002),DSC_STR,'U','S','B'};                                           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * A USB project may have multiple strings and the firmware supports             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * the management of multiple strings through a look-up table.                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The look-up table is defined as:                                              E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * rom const unsigned char *rom USB_SD_Ptr[]={&sd000,&sd001,&sd002};             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The above declaration has 3 strings, sd000, sd001, and sd002.                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Strings can be removed or added. sd000 is a specialized string                E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * descriptor. It defines the language code, usually this is                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * US English (0x0409). The index of the string must match the index             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * position of the USB_SD_Ptr array, &sd000 must be in position                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * USB_SD_Ptr[0], &sd001 must be in position USB_SD_Ptr[1] and so on.            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The look-up table USB_SD_Ptr is used by the get string handler                E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * function in usb9.c.                                                           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The look-up table scheme also applies to the configuration                    E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * descriptor. A USB device may have multiple configuration                      E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * descriptors, i.e. CFG01, CFG02, etc. To add a configuration                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * descriptor, user must implement a structure similar to CFG01.                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The next step is to add the configuration descriptor name, i.e.               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * cfg01, cfg02,.., to the look-up table USB_CD_Ptr. USB_CD_Ptr[0]               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * is a dummy place holder since configuration 0 is the un-configured            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * state according to the definition in the USB specification.                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            ********************************************************************/           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /*********************************************************************           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Descriptor specific type definitions are defined in:                          E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * system\usb\usbdefs\usbdefs_std_dsc.h                                          E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Configuration information is defined in:                                      E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * autofiles\usbcfg.h                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            ********************************************************************/           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /** I N C L U D E S *************************************************/           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           #include "system\typedefs.h"                                                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           #include "system\usb\usb.h"                                                      E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /** C O N S T A N T S ************************************************/          E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           #pragma romdata                                                                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /* Device Descriptor */                                                          E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom USB_DEV_DSC device_dsc=                                                      E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           {                                                                                E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_DEV_DSC),    // Size of this descriptor in bytes                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               DSC_DEV,                // DEVICE descriptor type                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x0200,                 // USB Spec Release Number in BCD format             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               CDC_DEVICE,             // Class Code                                        E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x00,                   // Subclass code                                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x00,                   // Protocol code                                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               EP0_BUFF_SIZE,          // Max packet size for EP0, see usbcfg.h             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x04D8,                 // Vendor ID                                         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x000A,                 // Product ID: CDC RS-232 Emulation Demo             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x0000,                 // Device release number in BCD format               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x01,                   // Manufacturer string index                         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x02,                   // Product string index                              E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x00,                   // Device serial number string index                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x01                    // Number of possible configurations                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           };                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /* Configuration 1 Descriptor */                                                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           CFG01=                                                                           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           {                                                                                E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* Configuration Descriptor */                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_CFG_DSC),    // Size of this descriptor in bytes                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               DSC_CFG,                // CONFIGURATION descriptor type                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(cfg01),          // Total length of data for this cfg                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               2,                      // Number of interfaces in this cfg                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               1,                      // Index value of this configuration                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Configuration string index                        E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               _DEFAULT,               // Attributes, see usbdefs_std_dsc.h                 E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               50,                     // Max power consumption (2X mA)                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* Interface Descriptor */                                                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_INTF_DSC),   // Size of this descriptor in bytes                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               DSC_INTF,               // INTERFACE descriptor type                         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Interface Number                                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Alternate Setting Number                          E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               1,                      // Number of endpoints in this intf                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               COMM_INTF,              // Class code                                        E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               ABSTRACT_CONTROL_MODEL, // Subclass code                                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               V25TER,                 // Protocol code                                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Interface string index                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* CDC Class-Specific Descriptors */                                         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_HEADER_FN_DSC),CS_INTERFACE,DSC_FN_HEADER,0x0110,             E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_ACM_FN_DSC),CS_INTERFACE,DSC_FN_ACM,0x02,                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_UNION_FN_DSC),CS_INTERFACE,DSC_FN_UNION,CDC_COMM_INTF_ID,CDC_DATA_INTF_ID, E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_CALL_MGT_FN_DSC),CS_INTERFACE,DSC_FN_CALL_MGT,0x00,CDC_DATA_INTF_ID, E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* Endpoint Descriptor */                                                    E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_EP_DSC),DSC_EP,_EP02_IN,_INT,CDC_INT_EP_SIZE,0x02,                E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* Interface Descriptor */                                                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_INTF_DSC),   // Size of this descriptor in bytes                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               DSC_INTF,               // INTERFACE descriptor type                         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               1,                      // Interface Number                                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Alternate Setting Number                          E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               2,                      // Number of endpoints in this intf                  E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               DATA_INTF,              // Class code                                        E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Subclass code                                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               NO_PROTOCOL,            // Protocol code                                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Interface string index                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* Endpoint Descriptors */                                                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_EP_DSC),DSC_EP,_EP03_OUT,_BULK,CDC_BULK_OUT_EP_SIZE,0x00,         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_EP_DSC),DSC_EP,_EP03_IN,_BULK,CDC_BULK_IN_EP_SIZE,0x00            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           };                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom struct{byte bLength;byte bDscType;word string[1];}sd000={                    E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           sizeof(sd000),DSC_STR,0x0409};                                                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom struct{byte bLength;byte bDscType;word string[25];}sd001={                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           sizeof(sd001),DSC_STR,                                                           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           'M','i','c','r','o','c','h','i','p',' ',                                         E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           'T','e','c','h','n','o','l','o','g','y',' ','I','n','c','.'};                    E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom struct{byte bLength;byte bDscType;word string[25];}sd002={                   E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           sizeof(sd002),DSC_STR,                                                           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           'C','D','C',' ','R','S','-','2','3','2',' ',                                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           'E','m','u','l','a','t','i','o','n',' ','D','e','m','o'};                        E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom const unsigned char *rom USB_CD_Ptr[]={&cfg01,&cfg01};                       E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom const unsigned char *rom USB_SD_Ptr[]={&sd000,&sd001,&sd002};                E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom pFunc ClassReqHandler[1]=                                                    E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           {                                                                                E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               &USBCheckCDCRequest                                                          E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           };                                                                               E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           #pragma code                                                                     E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /** EOF usbdsc.c ****************************************************/           E:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /*********************************************************************           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                Microchip USB C18 Firmware Version 1.0                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *********************************************************************           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * FileName:        usbctrltrf.c                                                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Processor:       PIC18                                                        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Software License Agreement                                                    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * license.                                                                      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Author               Date        Comment                                      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            ********************************************************************/           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** I N C L U D E S **********************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           #include <p18cxxx.h>                                                             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           #include "system\typedefs.h"                                                     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           #include "system\usb\usb.h"                                                      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** V A R I A B L E S ********************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           #pragma udata                                                                    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           byte ctrl_trf_state;                // Control Transfer State                    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           byte ctrl_trf_session_owner;        // Current transfer session owner            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           POINTER pSrc;                       // Data source pointer                       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           POINTER pDst;                       // Data destination pointer                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           WORD wCount;                        // Data counter                              E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfSetupHandler(void);                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfOutHandler(void);                                                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfInHandler(void);                                                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** D E C L A R A T I O N S **************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           #pragma code                                                                     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlEPService(void)                                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    USTAT is loaded with a valid endpoint address.               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        USBCtrlEPService checks for three transaction types that     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  it knows how to service and services them:                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  1. EP0 SETUP                                                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  2. EP0 OUT                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  3. EP0 IN                                                    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  It ignores all other types (i.e. EP1, EP2, etc.)             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlEPService(void)                                                      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003946   506c     MOVF      0x6c,0x0,0x0       if(USTAT == EP00_OUT)                                                        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003948   e002     BZ        0x394e                                                                                          
00394a   0e00     MOVLW     0x0                                                                                             
00394c   d001     BRA       0x3950                                                                                          
00394e   0e01     MOVLW     0x1                                                                                             
003950   0900     IORLW     0x0                                                                                             
003952   e00b     BZ        0x396a                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003954   0104     MOVLB     0x4                    if(ep0Bo.Stat.PID == SETUP_TOKEN)           // EP0 SETUP                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003956   5100     MOVF      0x0,0x0,0x1                                                                                     
003958   0b3c     ANDLW     0x3c                                                                                            
00395a   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
00395c   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
00395e   080d     SUBLW     0xd                                                                                             
003960   e102     BNZ       0x3966                                                                                          
003962   d80c     RCALL     0x397c                     USBCtrlTrfSetupHandler();                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003964   d001     BRA       0x3968                 else                                        // EP0 OUT                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003966   d842     RCALL     0x39ec                     USBCtrlTrfOutHandler();                                              E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               }                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003968   d008     BRA       0x397a             else if(USTAT == EP00_IN)                       // EP0 IN                    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
00396a   506c     MOVF      0x6c,0x0,0x0                                                                                    
00396c   e002     BZ        0x3972                                                                                          
00396e   0e00     MOVLW     0x0                                                                                             
003970   d001     BRA       0x3974                                                                                          
003972   0e01     MOVLW     0x1                                                                                             
003974   0904     IORLW     0x4                                                                                             
003976   e001     BZ        0x397a                                                                                          
003978   d84b     RCALL     0x3a10                 USBCtrlTrfInHandler();                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
00397a   0012     RETURN    0x0            }//end USBCtrlEPService                                                          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfSetupHandler(void)                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    SetupPkt buffer is loaded with valid USB Setup Data          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine is a task dispatcher and has 3 stages.          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  1. It initializes the control transfer state machine.        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  2. It calls on each of the module that may know how to       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     service the Setup Request from the host.                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     Module Example: USB9, HID, CDC, MSD, ...                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     As new classes are added, ClassReqHandler table in        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     usbdsc.c should be updated to call all available          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     class handlers.                                           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  3. Once each of the modules has had a chance to check if     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     it is responsible for servicing the request, stage 3      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     then checks direction of the transfer to determine how    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     to prepare EP0 for the control transfer.                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     Refer to USBCtrlEPServiceComplete() for more details.     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            Microchip USB Firmware has three different states for        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  the control transfer state machine:                          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  1. WAIT_SETUP                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  2. CTRL_TRF_TX                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  3. CTRL_TRF_RX                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  Refer to firmware manual to find out how one state           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  is transitioned to another.                                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  A Control Transfer is composed of many USB transactions.     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  When transferring data over multiple transactions,           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  it is important to keep track of data source, data           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  destination, and data count. These three parameters are      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  stored in pSrc,pDst, and wCount. A flag is used to           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  note if the data source is from ROM or RAM.                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
00397c   cfd9     MOVFF     0xfd9,0xfe6    void USBCtrlTrfSetupHandler(void)                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
00397e   ffe6                                                                                                               
003980   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003982   ffd9                                                                                                               
003984   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               byte i;                                                                      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /* Stage 1 */                                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003986   0101     MOVLB     0x1                ctrl_trf_state = WAIT_SETUP;                                                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003988   6be0     CLRF      0xe0,0x1                                                                                        
00398a   0101     MOVLB     0x1                ctrl_trf_session_owner = MUID_NULL;     // Set owner to NULL                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
00398c   6be1     CLRF      0xe1,0x1                                                                                        
00398e   0101     MOVLB     0x1                wCount._word = 0;                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003990   6be6     CLRF      0xe6,0x1                                                                                        
003992   6be7     CLRF      0xe7,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /* Stage 2 */                                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003994   ec40     CALL      0x3c80,0x0         USBCheckStdRequest();                   // See system\usb9\usb9.c            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003996   f01e                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003998   6adf     CLRF      0xdf,0x0           for(i=0;i < (sizeof(ClassReqHandler)/sizeof(pFunc));i++)                     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
00399a   50df     MOVF      0xdf,0x0,0x0                                                                                    
00399c   6e2a     MOVWF     0x2a,0x0                                                                                        
00399e   6a2b     CLRF      0x2b,0x0                                                                                        
0039a0   0e01     MOVLW     0x1                                                                                             
0039a2   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0039a4   0e00     MOVLW     0x0                                                                                             
0039a6   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
0039a8   e21b     BC        0x39e0                                                                                          
0039dc   2adf     INCF      0xdf,0x1,0x0                                                                                    
0039de   d7dd     BRA       0x399a                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
0039aa   0101     MOVLB     0x1                    if(ctrl_trf_session_owner != MUID_NULL)break;                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
0039ac   51e1     MOVF      0xe1,0x0,0x1                                                                                    
0039ae   e001     BZ        0x39b2                                                                                          
0039b0   d017     BRA       0x39e0                                                                                          
0039b2   6af7     CLRF      0xf7,0x0               ClassReqHandler[i]();               // See autofiles\usbdsc.c            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
0039b4   34df     RLCF      0xdf,0x0,0x0                                                                                    
0039b6   0bfe     ANDLW     0xfe                                                                                            
0039b8   36f7     RLCF      0xf7,0x1,0x0                                                                                    
0039ba   6ef6     MOVWF     0xf6,0x0                                                                                        
0039bc   0e35     MOVLW     0x35                                                                                            
0039be   26f6     ADDWF     0xf6,0x1,0x0                                                                                    
0039c0   0e44     MOVLW     0x44                                                                                            
0039c2   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
0039c4   0009     TBLRDPOSTINC                                                                                              
0039c6   cff5     MOVFF     0xff5,0x2a                                                                                      
0039c8   f02a                                                                                                               
0039ca   0008     TBLRD                                                                                                     
0039cc   cff5     MOVFF     0xff5,0x2b                                                                                      
0039ce   f02b                                                                                                               
0039d0   d004     BRA       0x39da                                                                                          
0039d2   c02b     MOVFF     0x2b,0xffa                                                                                      
0039d4   fffa                                                                                                               
0039d6   502a     MOVF      0x2a,0x0,0x0                                                                                    
0039d8   6ef9     MOVWF     0xf9,0x0                                                                                        
0039da   dffb     RCALL     0x39d2                                                                                          
                                               }//end while                                                                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /* Stage 3 */                                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
0039e0   d8f0     RCALL     0x3bc2             USBCtrlEPServiceComplete();                                                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
0039e2   52e5     MOVF      0xe5,0x1,0x0   }//end USBCtrlTrfSetupHandler                                                    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
0039e4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0039e6   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0039e8   ffd9                                                                                                               
0039ea   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfOutHandler(void)                              E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine handles an OUT transaction according to         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  which control transfer state is currently active.            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            Note that if the the control transfer was from               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  host to device, the session owner should be notified         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  at the end of each OUT transaction to service the            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  received data.                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfOutHandler(void)                                                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
0039ec   0e02     MOVLW     0x2                if(ctrl_trf_state == CTRL_TRF_RX)                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
0039ee   0101     MOVLB     0x1                                                                                             
0039f0   5de0     SUBWF     0xe0,0x0,0x1                                                                                    
0039f2   e10c     BNZ       0x3a0c                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
0039f4   d8a4     RCALL     0x3b3e                 USBCtrlTrfRxService();                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                   /*                                                                       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * Don't have to worry about overwriting _KEEP bit                       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * because if _KEEP was set, TRNIF would not have been                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * generated in the first place.                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    */                                                                      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
0039f6   0104     MOVLB     0x4                    if(ep0Bo.Stat.DTS == 0)                                                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
0039f8   bd00     BTFSC     0x0,0x6,0x1                                                                                     
0039fa   d004     BRA       0x3a04                                                                                          
0039fc   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE|_DAT1|_DTSEN;                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
0039fe   0ec8     MOVLW     0xc8                                                                                            
003a00   6f00     MOVWF     0x0,0x1                                                                                         
003a02   d003     BRA       0x3a0a                 else                                                                     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a04   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE|_DAT0|_DTSEN;                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a06   0e88     MOVLW     0x88                                                                                            
003a08   6f00     MOVWF     0x0,0x1                                                                                         
                                               }                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a0a   d001     BRA       0x3a0e             else    // CTRL_TRF_TX                                                       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a0c   d929     RCALL     0x3c60                 USBPrepareForNextSetupTrf();                                             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a0e   0012     RETURN    0x0            }//end USBCtrlTrfOutHandler                                                      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfInHandler(void)                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine handles an IN transaction according to          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  which control transfer state is currently active.            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            A Set Address Request must not change the acutal address     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  of the device until the completion of the control            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transfer. The end of the control transfer for Set Address    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  Request is an IN transaction. Therefore it is necessary      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  to service this unique situation when the condition is       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  right. Macro mUSBCheckAdrPendingState is defined in          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  usb9.h and its function is to specifically service this      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  event.                                                       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfInHandler(void)                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a10   0e04     MOVLW     0x4                mUSBCheckAdrPendingState();         // Must check if in ADR_PENDING_STATE    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a12   0101     MOVLB     0x1                                                                                             
003a14   5de8     SUBWF     0xe8,0x0,0x1                                                                                    
003a16   e10c     BNZ       0x3a30                                                                                          
003a18   c422     MOVFF     0x422,0xf6e                                                                                     
003a1a   ff6e                                                                                                               
003a1c   506e     MOVF      0x6e,0x0,0x0                                                                                    
003a1e   0800     SUBLW     0x0                                                                                             
003a20   e204     BC        0x3a2a                                                                                          
003a22   0101     MOVLB     0x1                                                                                             
003a24   0e05     MOVLW     0x5                                                                                             
003a26   6fe8     MOVWF     0xe8,0x1                                                                                        
003a28   d003     BRA       0x3a30                                                                                          
003a2a   0101     MOVLB     0x1                                                                                             
003a2c   0e03     MOVLW     0x3                                                                                             
003a2e   6fe8     MOVWF     0xe8,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a30   0101     MOVLB     0x1                if(ctrl_trf_state == CTRL_TRF_TX)                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a32   05e0     DECF      0xe0,0x0,0x1                                                                                    
003a34   e10c     BNZ       0x3a4e                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a36   d80d     RCALL     0x3a52                 USBCtrlTrfTxService();                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a38   0104     MOVLB     0x4                    if(ep0Bi.Stat.DTS == 0)                                                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a3a   bd04     BTFSC     0x4,0x6,0x1                                                                                     
003a3c   d004     BRA       0x3a46                                                                                          
003a3e   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT1|_DTSEN;                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a40   0ec8     MOVLW     0xc8                                                                                            
003a42   6f04     MOVWF     0x4,0x1                                                                                         
003a44   d003     BRA       0x3a4c                 else                                                                     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a46   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT0|_DTSEN;                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a48   0e88     MOVLW     0x88                                                                                            
003a4a   6f04     MOVWF     0x4,0x1                                                                                         
                                               }                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a4c   d001     BRA       0x3a50             else // CTRL_TRF_RX                                                          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a4e   d908     RCALL     0x3c60                 USBPrepareForNextSetupTrf();                                             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a50   0012     RETURN    0x0            }//end USBCtrlTrfInHandler                                                       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfTxService(void)                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    pSrc, wCount, and usb_stat.ctrl_trf_mem are setup properly.  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine should be called from only two places.          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  One from USBCtrlEPServiceComplete() and one from             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  USBCtrlTrfInHandler(). It takes care of managing a           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transfer over multiple USB transactions.                     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            This routine works with isochronous endpoint larger than     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  256 bytes and is shown here as an example of how to deal     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  with BC9 and BC8. In reality, a control endpoint can never   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  be larger than 64 bytes.                                     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a52   cfd9     MOVFF     0xfd9,0xfe6    void USBCtrlTrfTxService(void)                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a54   ffe6                                                                                                               
003a56   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003a58   ffd9                                                                                                               
003a5a   0e02     MOVLW     0x2                                                                                             
003a5c   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               WORD byte_to_send;                                                           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * First, have to figure out how many byte of data to send.                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a5e   0101     MOVLB     0x1                if(wCount._word < EP0_BUFF_SIZE)                                             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a60   0e08     MOVLW     0x8                                                                                             
003a62   5de6     SUBWF     0xe6,0x0,0x1                                                                                    
003a64   0e00     MOVLW     0x0                                                                                             
003a66   59e7     SUBWFB    0xe7,0x0,0x1                                                                                    
003a68   e205     BC        0x3a74                                                                                          
003a6a   c1e6     MOVFF     0x1e6,0xfde            byte_to_send._word = wCount._word;                                       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a6c   ffde                                                                                                               
003a6e   c1e7     MOVFF     0x1e7,0xfdd                                                                                     
003a70   ffdd                                                                                                               
003a72   d003     BRA       0x3a7a             else                                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a74   0e08     MOVLW     0x8                    byte_to_send._word = EP0_BUFF_SIZE;                                      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a76   6ede     MOVWF     0xde,0x0                                                                                        
003a78   6add     CLRF      0xdd,0x0                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Next, load the number of bytes to send to BC9..0 in buffer descriptor     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a7a   0104     MOVLB     0x4                ep0Bi.Stat.BC9 = 0;                                                          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a7c   9304     BCF       0x4,0x1,0x1                                                                                     
003a7e   0104     MOVLB     0x4                ep0Bi.Stat.BC8 = 0;                                                          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a80   9104     BCF       0x4,0x0,0x1                                                                                     
003a82   0e01     MOVLW     0x1                ep0Bi.Stat._byte |= MSB(byte_to_send);                                       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a84   50db     MOVF      0xdb,0x0,0x0                                                                                    
003a86   0104     MOVLB     0x4                                                                                             
003a88   1304     IORWF     0x4,0x1,0x1                                                                                     
003a8a   cfdf     MOVFF     0xfdf,0x405        ep0Bi.Cnt = LSB(byte_to_send);                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a8c   f405                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Subtract the number of bytes just about to be sent from the total.        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a8e   0e00     MOVLW     0x0                wCount._word = wCount._word - byte_to_send._word;                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a90   50db     MOVF      0xdb,0x0,0x0                                                                                    
003a92   0101     MOVLB     0x1                                                                                             
003a94   5fe6     SUBWF     0xe6,0x1,0x1                                                                                    
003a96   0e01     MOVLW     0x1                                                                                             
003a98   50db     MOVF      0xdb,0x0,0x0                                                                                    
003a9a   0101     MOVLB     0x1                                                                                             
003a9c   5be7     SUBWFB    0xe7,0x1,0x1                                                                                    
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a9e   0101     MOVLB     0x1                pDst.bRam = (byte*)&CtrlTrfData;        // Set destination pointer           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aa0   0e28     MOVLW     0x28                                                                                            
003aa2   6fe4     MOVWF     0xe4,0x1                                                                                        
003aa4   0e04     MOVLW     0x4                                                                                             
003aa6   6fe5     MOVWF     0xe5,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aa8   0101     MOVLB     0x1                if(usb_stat.ctrl_trf_mem == _ROM)       // Determine type of memory source   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aaa   a3e9     BTFSS     0xe9,0x1,0x1                                                                                    
003aac   d020     BRA       0x3aee                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aae   cfd9     MOVFF     0xfd9,0xfe9            while(byte_to_send._word)                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ab0   ffe9                                                                                                               
003ab2   cfda     MOVFF     0xfda,0xfea                                                                                     
003ab4   ffea                                                                                                               
003ab6   50ee     MOVF      0xee,0x0,0x0                                                                                    
003ab8   10ed     IORWF     0xed,0x0,0x0                                                                                    
003aba   e018     BZ        0x3aec                                                                                          
003aea   d7e1     BRA       0x3aae                                                                                          
                                                   {                                                                        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003abc   c1e2     MOVFF     0x1e2,0xff6                *pDst.bRam = *pSrc.bRom;                                             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003abe   fff6                                                                                                               
003ac0   c1e3     MOVFF     0x1e3,0xff7                                                                                     
003ac2   fff7                                                                                                               
003ac4   0008     TBLRD                                                                                                     
003ac6   50f5     MOVF      0xf5,0x0,0x0                                                                                    
003ac8   c1e4     MOVFF     0x1e4,0xfe9                                                                                     
003aca   ffe9                                                                                                               
003acc   c1e5     MOVFF     0x1e5,0xfea                                                                                     
003ace   ffea                                                                                                               
003ad0   6eef     MOVWF     0xef,0x0                                                                                        
003ad2   0101     MOVLB     0x1                        pDst.bRam++;                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ad4   2be4     INCF      0xe4,0x1,0x1                                                                                    
003ad6   0e00     MOVLW     0x0                                                                                             
003ad8   23e5     ADDWFC    0xe5,0x1,0x1                                                                                    
003ada   0101     MOVLB     0x1                        pSrc.bRom++;                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003adc   2be2     INCF      0xe2,0x1,0x1                                                                                    
003ade   0e00     MOVLW     0x0                                                                                             
003ae0   23e3     ADDWFC    0xe3,0x1,0x1                                                                                    
003ae2   06df     DECF      0xdf,0x1,0x0               byte_to_send._word--;                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ae4   0e01     MOVLW     0x1                                                                                             
003ae6   e201     BC        0x3aea                                                                                          
003ae8   06db     DECF      0xdb,0x1,0x0                                                                                    
                                                   }//end while(byte_to_send._word)                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               }                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aec   d01e     BRA       0x3b2a             else // RAM                                                                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aee   cfd9     MOVFF     0xfd9,0xfe9            while(byte_to_send._word)                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003af0   ffe9                                                                                                               
003af2   cfda     MOVFF     0xfda,0xfea                                                                                     
003af4   ffea                                                                                                               
003af6   50ee     MOVF      0xee,0x0,0x0                                                                                    
003af8   10ed     IORWF     0xed,0x0,0x0                                                                                    
003afa   e017     BZ        0x3b2a                                                                                          
003b28   d7e2     BRA       0x3aee                                                                                          
                                                   {                                                                        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003afc   c1e2     MOVFF     0x1e2,0xfe9                *pDst.bRam = *pSrc.bRam;                                             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003afe   ffe9                                                                                                               
003b00   c1e3     MOVFF     0x1e3,0xfea                                                                                     
003b02   ffea                                                                                                               
003b04   50ef     MOVF      0xef,0x0,0x0                                                                                    
003b06   c1e4     MOVFF     0x1e4,0xfe9                                                                                     
003b08   ffe9                                                                                                               
003b0a   c1e5     MOVFF     0x1e5,0xfea                                                                                     
003b0c   ffea                                                                                                               
003b0e   6eef     MOVWF     0xef,0x0                                                                                        
003b10   0101     MOVLB     0x1                        pDst.bRam++;                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b12   2be4     INCF      0xe4,0x1,0x1                                                                                    
003b14   0e00     MOVLW     0x0                                                                                             
003b16   23e5     ADDWFC    0xe5,0x1,0x1                                                                                    
003b18   0101     MOVLB     0x1                        pSrc.bRam++;                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b1a   2be2     INCF      0xe2,0x1,0x1                                                                                    
003b1c   0e00     MOVLW     0x0                                                                                             
003b1e   23e3     ADDWFC    0xe3,0x1,0x1                                                                                    
003b20   06df     DECF      0xdf,0x1,0x0               byte_to_send._word--;                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b22   0e01     MOVLW     0x1                                                                                             
003b24   e201     BC        0x3b28                                                                                          
003b26   06db     DECF      0xdb,0x1,0x0                                                                                    
                                                   }//end while(byte_to_send._word)                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               }//end if(usb_stat.ctrl_trf_mem == _ROM)                                     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b2a   0e02     MOVLW     0x2            }//end USBCtrlTrfTxService                                                       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b2c   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
003b2e   e202     BC        0x3b34                                                                                          
003b30   6ae1     CLRF      0xe1,0x0                                                                                        
003b32   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003b34   6ee1     MOVWF     0xe1,0x0                                                                                        
003b36   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003b38   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003b3a   ffd9                                                                                                               
003b3c   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfRxService(void)                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    pDst and wCount are setup properly.                          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  pSrc is always &CtrlTrfData                                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  usb_stat.ctrl_trf_mem is always _RAM.                        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  wCount should be set to 0 at the start of each control       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transfer.                                                    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        *** This routine is only partially complete. Check for       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  new version of the firmware.                                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b3e   cfd9     MOVFF     0xfd9,0xfe6    void USBCtrlTrfRxService(void)                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b40   ffe6                                                                                                               
003b42   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003b44   ffd9                                                                                                               
003b46   0e02     MOVLW     0x2                                                                                             
003b48   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               WORD byte_to_read;                                                           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b4a   0e03     MOVLW     0x3                MSB(byte_to_read) = 0x03 & ep0Bo.Stat._byte;    // Filter out last 2 bits    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b4c   0104     MOVLB     0x4                                                                                             
003b4e   1500     ANDWF     0x0,0x0,0x1                                                                                     
003b50   6ee7     MOVWF     0xe7,0x0                                                                                        
003b52   0e01     MOVLW     0x1                                                                                             
003b54   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
003b56   ffdb                                                                                                               
003b58   c401     MOVFF     0x401,0xfdf        LSB(byte_to_read) = ep0Bo.Cnt;                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b5a   ffdf                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Accumulate total number of bytes read                                     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b5c   50de     MOVF      0xde,0x0,0x0       wCount._word = wCount._word + byte_to_read._word;                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b5e   0101     MOVLB     0x1                                                                                             
003b60   27e6     ADDWF     0xe6,0x1,0x1                                                                                    
003b62   50dd     MOVF      0xdd,0x0,0x0                                                                                    
003b64   0101     MOVLB     0x1                                                                                             
003b66   23e7     ADDWFC    0xe7,0x1,0x1                                                                                    
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b68   0101     MOVLB     0x1                pSrc.bRam = (byte*)&CtrlTrfData;                                             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b6a   0e28     MOVLW     0x28                                                                                            
003b6c   6fe2     MOVWF     0xe2,0x1                                                                                        
003b6e   0e04     MOVLW     0x4                                                                                             
003b70   6fe3     MOVWF     0xe3,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b72   cfd9     MOVFF     0xfd9,0xfe9        while(byte_to_read._word)                                                    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b74   ffe9                                                                                                               
003b76   cfda     MOVFF     0xfda,0xfea                                                                                     
003b78   ffea                                                                                                               
003b7a   50ee     MOVF      0xee,0x0,0x0                                                                                    
003b7c   10ed     IORWF     0xed,0x0,0x0                                                                                    
003b7e   e017     BZ        0x3bae                                                                                          
003bac   d7e2     BRA       0x3b72                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b80   c1e2     MOVFF     0x1e2,0xfe9            *pDst.bRam = *pSrc.bRam;                                                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b82   ffe9                                                                                                               
003b84   c1e3     MOVFF     0x1e3,0xfea                                                                                     
003b86   ffea                                                                                                               
003b88   50ef     MOVF      0xef,0x0,0x0                                                                                    
003b8a   c1e4     MOVFF     0x1e4,0xfe9                                                                                     
003b8c   ffe9                                                                                                               
003b8e   c1e5     MOVFF     0x1e5,0xfea                                                                                     
003b90   ffea                                                                                                               
003b92   6eef     MOVWF     0xef,0x0                                                                                        
003b94   0101     MOVLB     0x1                    pDst.bRam++;                                                             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b96   2be4     INCF      0xe4,0x1,0x1                                                                                    
003b98   0e00     MOVLW     0x0                                                                                             
003b9a   23e5     ADDWFC    0xe5,0x1,0x1                                                                                    
003b9c   0101     MOVLB     0x1                    pSrc.bRam++;                                                             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b9e   2be2     INCF      0xe2,0x1,0x1                                                                                    
003ba0   0e00     MOVLW     0x0                                                                                             
003ba2   23e3     ADDWFC    0xe3,0x1,0x1                                                                                    
003ba4   06df     DECF      0xdf,0x1,0x0           byte_to_read._word--;                                                    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ba6   0e01     MOVLW     0x1                                                                                             
003ba8   e201     BC        0x3bac                                                                                          
003baa   06db     DECF      0xdb,0x1,0x0                                                                                    
                                               }//end while(byte_to_read._word)                                             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bae   0e02     MOVLW     0x2            }//end USBCtrlTrfRxService                                                       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bb0   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
003bb2   e202     BC        0x3bb8                                                                                          
003bb4   6ae1     CLRF      0xe1,0x0                                                                                        
003bb6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003bb8   6ee1     MOVWF     0xe1,0x0                                                                                        
003bba   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003bbc   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003bbe   ffd9                                                                                                               
003bc0   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlEPServiceComplete(void)                          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine wrap up the ramaining tasks in servicing        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  a Setup Request. Its main task is to set the endpoint        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  controls appropriately for a given situation. See code       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  below.                                                       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  There are three main scenarios:                              E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  a) There was no handler for the Request, in this case        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     a STALL should be sent out.                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  b) The host has requested a read control transfer,           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     endpoints are required to be setup in a specific way.     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  c) The host has requested a write control transfer, or       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     a control data stage is not required, endpoints are       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     required to be setup in a specific way.                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  Packet processing is resumed by clearing PKTDIS bit.         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlEPServiceComplete(void)                                              E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * PKTDIS bit is set when a Setup Transaction is received.                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Clear to resume packet processing.                                        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bc2   986d     BCF       0x6d,0x4,0x0       UCONbits.PKTDIS = 0;                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bc4   0101     MOVLB     0x1                if(ctrl_trf_session_owner == MUID_NULL)                                      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bc6   51e1     MOVF      0xe1,0x0,0x1                                                                                    
003bc8   e10f     BNZ       0x3be8                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                   /*                                                                       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * If no one knows how to service this request then stall.               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * Must also prepare EP0 to receive the next SETUP transaction.          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    */                                                                      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bca   0104     MOVLB     0x4                    ep0Bo.Cnt = EP0_BUFF_SIZE;                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bcc   0e08     MOVLW     0x8                                                                                             
003bce   6f01     MOVWF     0x1,0x1                                                                                         
003bd0   0104     MOVLB     0x4                    ep0Bo.ADR = (byte*)&SetupPkt;                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bd2   0e20     MOVLW     0x20                                                                                            
003bd4   6f02     MOVWF     0x2,0x1                                                                                         
003bd6   0e04     MOVLW     0x4                                                                                             
003bd8   6f03     MOVWF     0x3,0x1                                                                                         
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bda   0104     MOVLB     0x4                    ep0Bo.Stat._byte = _USIE|_BSTALL;                                        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bdc   0e84     MOVLW     0x84                                                                                            
003bde   6f00     MOVWF     0x0,0x1                                                                                         
003be0   0104     MOVLB     0x4                    ep0Bi.Stat._byte = _USIE|_BSTALL;                                        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003be2   0e84     MOVLW     0x84                                                                                            
003be4   6f04     MOVWF     0x4,0x1                                                                                         
                                               }                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003be6   d03b     BRA       0x3c5e             else    // A module has claimed ownership of the control transfer session.   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003be8   0104     MOVLB     0x4                    if(SetupPkt.DataDir == DEV_TO_HOST)                                      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bea   af20     BTFSS     0x20,0x7,0x1                                                                                    
003bec   d025     BRA       0x3c38                                                                                          
                                                   {                                                                        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bee   0101     MOVLB     0x1                        if(SetupPkt.wLength < wCount._word)                                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bf0   51e6     MOVF      0xe6,0x0,0x1                                                                                    
003bf2   0104     MOVLB     0x4                                                                                             
003bf4   5d26     SUBWF     0x26,0x0,0x1                                                                                    
003bf6   0101     MOVLB     0x1                                                                                             
003bf8   51e7     MOVF      0xe7,0x0,0x1                                                                                    
003bfa   0104     MOVLB     0x4                                                                                             
003bfc   5927     SUBWFB    0x27,0x0,0x1                                                                                    
003bfe   e204     BC        0x3c08                                                                                          
003c00   c426     MOVFF     0x426,0x1e6                    wCount._word = SetupPkt.wLength;                                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c02   f1e6                                                                                                               
003c04   c427     MOVFF     0x427,0x1e7                                                                                     
003c06   f1e7                                                                                                               
003c08   df24     RCALL     0x3a52                     USBCtrlTrfTxService();                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c0a   0101     MOVLB     0x1                        ctrl_trf_state = CTRL_TRF_TX;                                        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c0c   0e01     MOVLW     0x1                                                                                             
003c0e   6fe0     MOVWF     0xe0,0x1                                                                                        
                                                       /*                                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Control Read:                                                     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * <SETUP[0]><IN[1]><IN[0]>...<OUT[1]> | <SETUP[0]>                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 1. Prepare OUT EP to respond to early termination                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * NOTE:                                                             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * If something went wrong during the control transfer,              E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * the last status stage may not be sent by the host.                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * When this happens, two different things could happen              E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * depending on the host.                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * a) The host could send out a RESET.                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * b) The host could send out a new SETUP transaction                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    without sending a RESET first.                                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * To properly handle case (b), the OUT EP must be setup             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * to receive either a zero length OUT transaction, or a             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * new SETUP transaction.                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Since the SETUP transaction requires the DTS bit to be            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * DAT0 while the zero length OUT status requires the DTS            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * bit to be DAT1, the DTS bit check by the hardware should          E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * be disabled. This way the SIE could accept either of              E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * the two transactions.                                             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Furthermore, the Cnt byte should be set to prepare for            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * the SETUP data (8-byte or more), and the buffer address           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * should be pointed to SetupPkt.                                    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c10   0104     MOVLB     0x4                        ep0Bo.Cnt = EP0_BUFF_SIZE;                                           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c12   0e08     MOVLW     0x8                                                                                             
003c14   6f01     MOVWF     0x1,0x1                                                                                         
003c16   0104     MOVLB     0x4                        ep0Bo.ADR = (byte*)&SetupPkt;                                        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c18   0e20     MOVLW     0x20                                                                                            
003c1a   6f02     MOVWF     0x2,0x1                                                                                         
003c1c   0e04     MOVLW     0x4                                                                                             
003c1e   6f03     MOVWF     0x3,0x1                                                                                         
003c20   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE;           // Note: DTSEN is 0!             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c22   0e80     MOVLW     0x80                                                                                            
003c24   6f00     MOVWF     0x0,0x1                                                                                         
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                       /*                                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 2. Prepare IN EP to transfer data, Cnt should have                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    been initialized by responsible request owner.                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c26   0104     MOVLB     0x4                        ep0Bi.ADR = (byte*)&CtrlTrfData;                                     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c28   0e28     MOVLW     0x28                                                                                            
003c2a   6f06     MOVWF     0x6,0x1                                                                                         
003c2c   0e04     MOVLW     0x4                                                                                             
003c2e   6f07     MOVWF     0x7,0x1                                                                                         
003c30   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT1|_DTSEN;                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c32   0ec8     MOVLW     0xc8                                                                                            
003c34   6f04     MOVWF     0x4,0x1                                                                                         
                                                   }                                                                        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c36   d013     BRA       0x3c5e                 else    // (SetupPkt.DataDir == HOST_TO_DEV)                             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                   {                                                                        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c38   0101     MOVLB     0x1                        ctrl_trf_state = CTRL_TRF_RX;                                        E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c3a   0e02     MOVLW     0x2                                                                                             
003c3c   6fe0     MOVWF     0xe0,0x1                                                                                        
                                                       /*                                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Control Write:                                                    E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * <SETUP[0]><OUT[1]><OUT[0]>...<IN[1]> | <SETUP[0]>                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 1. Prepare IN EP to respond to early termination                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    This is the same as a Zero Length Packet Response              E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    for control transfer without a data stage                      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c3e   0104     MOVLB     0x4                        ep0Bi.Cnt = 0;                                                       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c40   6b05     CLRF      0x5,0x1                                                                                         
003c42   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT1|_DTSEN;                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c44   0ec8     MOVLW     0xc8                                                                                            
003c46   6f04     MOVWF     0x4,0x1                                                                                         
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                       /*                                                                   E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 2. Prepare OUT EP to receive data.                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c48   0104     MOVLB     0x4                        ep0Bo.Cnt = EP0_BUFF_SIZE;                                           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c4a   0e08     MOVLW     0x8                                                                                             
003c4c   6f01     MOVWF     0x1,0x1                                                                                         
003c4e   0104     MOVLB     0x4                        ep0Bo.ADR = (byte*)&CtrlTrfData;                                     E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c50   0e28     MOVLW     0x28                                                                                            
003c52   6f02     MOVWF     0x2,0x1                                                                                         
003c54   0e04     MOVLW     0x4                                                                                             
003c56   6f03     MOVWF     0x3,0x1                                                                                         
003c58   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE|_DAT1|_DTSEN;                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c5a   0ec8     MOVLW     0xc8                                                                                            
003c5c   6f00     MOVWF     0x0,0x1                                                                                         
                                                   }//end if(SetupPkt.DataDir == DEV_TO_HOST)                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               }//end if(ctrl_trf_session_owner == MUID_NULL)                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c5e   0012     RETURN    0x0            }//end USBCtrlEPServiceComplete                                                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBPrepareForNextSetupTrf(void)                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        The routine forces EP0 OUT to be ready for a new Setup       E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transaction, and forces EP0 IN to be owned by CPU.           E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBPrepareForNextSetupTrf(void)                                             E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c60   0101     MOVLB     0x1                ctrl_trf_state = WAIT_SETUP;            // See usbctrltrf.h                  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c62   6be0     CLRF      0xe0,0x1                                                                                        
003c64   0104     MOVLB     0x4                ep0Bo.Cnt = EP0_BUFF_SIZE;              // Defined in usbcfg.h               E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c66   0e08     MOVLW     0x8                                                                                             
003c68   6f01     MOVWF     0x1,0x1                                                                                         
003c6a   0104     MOVLB     0x4                ep0Bo.ADR = (byte*)&SetupPkt;                                                E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c6c   0e20     MOVLW     0x20                                                                                            
003c6e   6f02     MOVWF     0x2,0x1                                                                                         
003c70   0e04     MOVLW     0x4                                                                                             
003c72   6f03     MOVWF     0x3,0x1                                                                                         
003c74   0104     MOVLB     0x4                ep0Bo.Stat._byte = _USIE|_DAT0|_DTSEN;  // EP0 buff dsc init, see usbmmap.h  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c76   0e88     MOVLW     0x88                                                                                            
003c78   6f00     MOVWF     0x0,0x1                                                                                         
003c7a   0104     MOVLB     0x4                ep0Bi.Stat._byte = _UCPU;               // EP0 IN buffer initialization      E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c7c   6b04     CLRF      0x4,0x1                                                                                         
003c7e   0012     RETURN    0x0            }//end USBPrepareForNextSetupTrf                                                 E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** EOF usbctrltrf.c *********************************************************/  E:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /*********************************************************************           E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            *                Microchip USB C18 Firmware Version 1.0                         E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            *********************************************************************           E:\iro_svn\opensprints\FW\user\user.c
                                            * FileName:        user.c                                                       E:\iro_svn\opensprints\FW\user\user.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iro_svn\opensprints\FW\user\user.c
                                            * Processor:       PIC18                                                        E:\iro_svn\opensprints\FW\user\user.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iro_svn\opensprints\FW\user\user.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * Software License Agreement                                                    E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iro_svn\opensprints\FW\user\user.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iro_svn\opensprints\FW\user\user.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iro_svn\opensprints\FW\user\user.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iro_svn\opensprints\FW\user\user.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iro_svn\opensprints\FW\user\user.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iro_svn\opensprints\FW\user\user.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iro_svn\opensprints\FW\user\user.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iro_svn\opensprints\FW\user\user.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iro_svn\opensprints\FW\user\user.c
                                            * license.                                                                      E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iro_svn\opensprints\FW\user\user.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iro_svn\opensprints\FW\user\user.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iro_svn\opensprints\FW\user\user.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iro_svn\opensprints\FW\user\user.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iro_svn\opensprints\FW\user\user.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * Author               Date        Comment                                      E:\iro_svn\opensprints\FW\user\user.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           E:\iro_svn\opensprints\FW\user\user.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    E:\iro_svn\opensprints\FW\user\user.c
                                            * Brian Schmalz		03/15/06	Added user code to impliment                          E:\iro_svn\opensprints\FW\user\user.c
                                            *									firmware version D v1.0 for UBW                                       E:\iro_svn\opensprints\FW\user\user.c
                                            *									project. See www.greta.dhs.org/UBW                                    E:\iro_svn\opensprints\FW\user\user.c
                                            * Brian Schmalz		05/04/06	Starting version 1.1, which will                      E:\iro_svn\opensprints\FW\user\user.c
                                            * 									include several fixes. See website.                                  E:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					06/21/06	Starting v1.2 -                                              E:\iro_svn\opensprints\FW\user\user.c
                                            * - Fixed problem with I packets (from T command) filling up TX buffer          E:\iro_svn\opensprints\FW\user\user.c
                                            * 		and not letting any incoming commands be received. (strange)                E:\iro_svn\opensprints\FW\user\user.c
                                            * - Adding several commands - Analog inputs being the biggest set.              E:\iro_svn\opensprints\FW\user\user.c
                                            * - Also Byte read/Byte write (PEEK/POKE) anywhere in memory                    E:\iro_svn\opensprints\FW\user\user.c
                                            * - Individual pin I/O and direction                                            E:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					08/16/06	v1.3 - Fixed bug with USB startup                            E:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					09/09/06	v1.4 - Starting 1.4                                          E:\iro_svn\opensprints\FW\user\user.c
                                            * - Fixed Microchip bug with early silicon - UCONbits.PKTDIS = 0;               E:\iro_svn\opensprints\FW\user\user.c
                                            * - Adding BO and BC commands for parallel output to graphics pannels           E:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					12/06/06	v1.4 - More work on 1.4                                      E:\iro_svn\opensprints\FW\user\user.c
                                            * - Re-wrote all I/O buffering code for increased speed and functionality       E:\iro_svn\opensprints\FW\user\user.c
                                            * - Re-wrote error handling code                                                E:\iro_svn\opensprints\FW\user\user.c
                                            * - Added delays to BC/BO commands to help Corey                                E:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					01/06/07	v1.4 - Added RC command for servos                           E:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					03/07/07	v1.4.1 - Changed blink rate for SFE                          E:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					05/24/07	v1.4.2 - Fixed RC command bug - it                           E:\iro_svn\opensprints\FW\user\user.c
                                            *									wouldn't shut off.                                                    E:\iro_svn\opensprints\FW\user\user.c
                                            * Luke Orland			2007/08/28	added some stuff                                     E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            ********************************************************************/           E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           /** I N C L U D E S **********************************************************/  E:\iro_svn\opensprints\FW\user\user.c
                                           #include <p18cxxx.h>                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           #include <usart.h>                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           #include <stdio.h>                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           #include <ctype.h>                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           #include <delays.h>                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           #include "system\typedefs.h"                                                     E:\iro_svn\opensprints\FW\user\user.c
                                           #include "system\usb\usb.h"                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           #include "io_cfg.h"             // I/O pin mapping                               E:\iro_svn\opensprints\FW\user\user.c
                                           #include "user\user.h"                                                           E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           /** D E F I N E S ********************************************************/      E:\iro_svn\opensprints\FW\user\user.c
                                           #define bitset(var,bitno) ((var) |= (1 << (bitno)))                              E:\iro_svn\opensprints\FW\user\user.c
                                           #define bitclr(var,bitno) ((var) &= ~(1 << (bitno)))                             E:\iro_svn\opensprints\FW\user\user.c
                                           #define bittst(var,bitno) (var& (1 << (bitno)))                                  E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // For the RC command, we define a little data structure that holds the          E:\iro_svn\opensprints\FW\user\user.c
                                           // values assoicated with a particular servo connection                          E:\iro_svn\opensprints\FW\user\user.c
                                           // It's port, pin, value (position) and state (INACTIVE, PRIMED or TIMING)       E:\iro_svn\opensprints\FW\user\user.c
                                           // Later on we make an array of these (19 elements long - 19 pins) to track      E:\iro_svn\opensprints\FW\user\user.c
                                           // the values of all of the servos.                                              E:\iro_svn\opensprints\FW\user\user.c
                                           typedef enum {                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           	 kOFF = 1                                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           	,kWAITING                                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           	,kPRIMED                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	,kTIMING                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           } tRC_state;                                                                     E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           #define kRC_DATA_SIZE			24				// In structs, since there are 3 ports of 8 bits each E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           #define kTX_BUF_SIZE 			64				// In bytes                                        E:\iro_svn\opensprints\FW\user\user.c
                                           #define kRX_BUF_SIZE			64				// In bytes                                         E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           #define kUSART_TX_BUF_SIZE		64				// In bytes                                    E:\iro_svn\opensprints\FW\user\user.c
                                           #define kUSART_RX_BUF_SIZE		64				// In bytes                                    E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // Enum for extract_num() function parameter                                     E:\iro_svn\opensprints\FW\user\user.c
                                           typedef enum {                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           	 kCHAR                                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           	,kUCHAR                                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           	,kINT                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           	,kUINT                                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           	,kASCII_CHAR                                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           	,kUCASE_ASCII_CHAR                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           } tExtractType;                                                                  E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           #define advance_RX_buf_out()						\                                              E:\iro_svn\opensprints\FW\user\user.c
                                           { 													\                                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	g_RX_buf_out++;									\                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           	if (kRX_BUF_SIZE == g_RX_buf_out)				\                                          E:\iro_svn\opensprints\FW\user\user.c
                                           	{												\                                                                  E:\iro_svn\opensprints\FW\user\user.c
                                           		g_RX_buf_out = 0;							\                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           	}												\                                                                  E:\iro_svn\opensprints\FW\user\user.c
                                           }                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           #define kISR_FIFO_A_DEPTH		3                                                     E:\iro_svn\opensprints\FW\user\user.c
                                           #define kISR_FIFO_D_DEPTH		3                                                     E:\iro_svn\opensprints\FW\user\user.c
                                           #define kPR2_RELOAD				250		// For 1ms TMR2 tick                                 E:\iro_svn\opensprints\FW\user\user.c
                                           #define kCR						0x0D                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           #define kLF						0x0A                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // defines for the error_byte byte - each bit has a meaning                      E:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_TX_BUF_OVERRUN			2                                           E:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_RX_BUFFER_OVERRUN		3                                         E:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_MISSING_PARAMETER		4                                         E:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_PRINTED_ERROR			5			// We've already printed out an error    E:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT	6                                    E:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_EXTRA_CHARACTERS 		7                                         E:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_UNKNOWN_COMMAND			8			// Part of command parser, not error handler E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           /** V A R I A B L E S ********************************************************/  E:\iro_svn\opensprints\FW\user\user.c
                                           #pragma udata access fast_vars                                                   E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // Rate variable - how fast does interrupt fire to capture inputs?               E:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned int time_between_updates;                                          E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned int ISR_D_RepeatRate;			// How many 1ms ticks between Digital updates E:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_D_FIFO_in;				// In pointer                      E:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_D_FIFO_out;				// Out pointer                    E:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_D_FIFO_length;			// Current FIFO depth           E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned int ISR_A_RepeatRate;			// How many 1ms ticks between Analog updates E:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_A_FIFO_in;				// In pointer                      E:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_A_FIFO_out;				// Out pointer                    E:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_A_FIFO_length;			// Current FIFO depth           E:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char AnalogEnable;				// Maximum ADC channel to convert   E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // This byte has each of its bits used as a seperate error flag                  E:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned char error_byte;                                                   E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // RC servo variables                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // First the main array of data for each servo                                   E:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned char g_RC_primed_ptr;                                              E:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned char g_RC_next_ptr;                                                E:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned char g_RC_timing_ptr;                                              E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // Used only in LowISR                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned int D_tick_counter;                                                E:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned int A_tick_counter;                                                E:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned char A_cur_channel;                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // ROM strings                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           const rom char st_OK[] = {"OK\r\n"};                                             E:\iro_svn\opensprints\FW\user\user.c
                                           const rom char st_LFCR[] = {"\r\n"};                                             E:\iro_svn\opensprints\FW\user\user.c
                                           const rom char st_version[] = {"opensprints FW 0.31 based on UBW FW D Version 1.4.2\r\n"}; E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           #pragma udata ISR_buf=0x100                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           volatile unsigned int ISR_A_FIFO[12][kISR_FIFO_A_DEPTH];	// Stores the most recent analog conversions E:\iro_svn\opensprints\FW\user\user.c
                                           volatile unsigned char ISR_D_FIFO[3][kISR_FIFO_D_DEPTH];	// FIFO of actual data  E:\iro_svn\opensprints\FW\user\user.c
                                           volatile tRC_state g_RC_state[kRC_DATA_SIZE];				// Stores states for each pin for RC command E:\iro_svn\opensprints\FW\user\user.c
                                           volatile unsigned int g_RC_value[kRC_DATA_SIZE];			// Stores reload values for TMR0 E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           #pragma udata com_buf=0x200                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           // USB Transmit buffer for packets (back to PC)                                  E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_TX_buf[kTX_BUF_SIZE];                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // USB Receiving buffer for commands as they come from PC                        E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_RX_buf[kRX_BUF_SIZE];                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // USART Receiving buffer for data coming from the USART                         E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_RX_buf[kUSART_RX_BUF_SIZE];                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // USART Transmit buffer for data going to the USART                             E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_TX_buf[kUSART_TX_BUF_SIZE];                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // These variables are in normal storage space                                   E:\iro_svn\opensprints\FW\user\user.c
                                           #pragma udata                                                                    E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // These are used for the Fast Parallel Output routines                          E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_BO_init;                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_BO_strobe_mask;                                                  E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_BO_wait_mask;                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_BO_wait_delay;                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_BO_strobe_delay;                                                 E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // Pointers to USB transmit (back to PC) buffer                                  E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_TX_buf_in;                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_TX_buf_out;                                                      E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // Pointers to USB receive (from PC) buffer                                      E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_RX_buf_in;                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_RX_buf_out;                                                      E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // In and out pointers to our USART input buffer                                 E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_RX_buf_in;                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_RX_buf_out;                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // In and out pointers to our USART output buffer                                E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_TX_buf_in;                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_TX_buf_out;                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // Normally set to TRUE. Able to set FALSE to not send "OK" message after packet recepetion E:\iro_svn\opensprints\FW\user\user.c
                                           BOOL	g_ack_enable;                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // sensor stuff                                                                  E:\iro_svn\opensprints\FW\user\user.c
                                           BOOL is_racing = FALSE;                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int raceTimeMins;                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int raceTimeCentisecs;                                                  E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  E:\iro_svn\opensprints\FW\user\user.c
                                           void BlinkUSBStatus (void);		// Handles blinking the USB status LED              E:\iro_svn\opensprints\FW\user\user.c
                                           BOOL SwitchIsPressed (void);	// Check to see if the user (PRG) switch is pressed E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_packet (void);		// Take a full packet and dispatch it to the right function E:\iro_svn\opensprints\FW\user\user.c
                                           signed short long extract_number (tExtractType type); // Pull a number paramter out of the packet E:\iro_svn\opensprints\FW\user\user.c
                                           signed char extract_digit (signed short long * acc, unsigned char digits); // Pull a character out of the packet E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_R_packet (void);		// R for resetting UBW                              E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_C_packet (void);		// C for configuring I/O and analog pins            E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CX_packet (void); 	// CX For configuring serial port                  E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_O_packet (void);		// O for output digital to pins                     E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_I_packet (void);		// I for input digital from pins                    E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_V_packet (void);		// V for printing version                           E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_A_packet (void);		// A for requesting analog inputs                   E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_T_packet (void);		// T for setting up timed I/O (digital or analog)   E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_PI_packet (void);	// PI for reading a single pin                      E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_PO_packet (void);	// PO for setting a single pin state                E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_PD_packet (void);	// PD for setting a pin's direction                 E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_MR_packet (void);	// MR for Memory Read                               E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_MW_packet (void); 	// MW for Memory Write                             E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_TX_packet (void);	// TX for transmitting serial                       E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RX_packet (void);	// RX for receiving serial                          E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RC_packet (void);	// RC is for outputing RC servo pulses              E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_BO_packet (void);	// BO sends data to fast parallel output            E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_BC_packet (void);	// BC configures fast parallel outputs              E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_BS_packet (void);	// BS sends binary data to fast parallel output     E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CU_packet (void);	// CU configures UBW (system wide parameters)       E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_SS_packet (void);	// SS Send SPI                                      E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RS_packet (void);	// RS Receive SPI                                   E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CS_packet (void);	// CS Configure SPI                                 E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_SI_packet (void);	// SI Send I2C                                      E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RI_packet (void);	// RI Receive I2C                                   E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CI_packet (void);	// CI Configure I2C                                 E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_GO_packet (void);	// start sending sensor messages to PC              E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_ST_packet (void);	// stop sending sensor messages to PC               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           void check_and_send_TX_data (void); // See if there is any data to send to PC, and if so, do it E:\iro_svn\opensprints\FW\user\user.c
                                           void print_ack (void);			// Print "OK" after packet is parsed                    E:\iro_svn\opensprints\FW\user\user.c
                                           int _user_putc (char c);		// Our UBS based stream character printer              E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           /** D E C L A R A T I O N S **************************************************/  E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           #pragma code                                                                     E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           #pragma interruptlow low_ISR                                                     E:\iro_svn\opensprints\FW\user\user.c
000844   cfd8     MOVFF     0xfd8,0xfe4    void low_ISR(void)                                                               E:\iro_svn\opensprints\FW\user\user.c
000846   ffe4                                                                                                               
000848   cfe0     MOVFF     0xfe0,0xfe4                                                                                     
00084a   ffe4                                                                                                               
00084c   6ee4     MOVWF     0xe4,0x0                                                                                        
00084e   cfda     MOVFF     0xfda,0xfe4                                                                                     
000850   ffe4                                                                                                               
000852   cfe2     MOVFF     0xfe2,0xfda                                                                                     
000854   ffda                                                                                                               
000856   cfe9     MOVFF     0xfe9,0xfe4                                                                                     
000858   ffe4                                                                                                               
00085a   cfea     MOVFF     0xfea,0xfe4                                                                                     
00085c   ffe4                                                                                                               
00085e   cff3     MOVFF     0xff3,0xfe4                                                                                     
000860   ffe4                                                                                                               
000862   cff4     MOVFF     0xff4,0xfe4                                                                                     
000864   ffe4                                                                                                               
000866   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {	                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	// Do we have a Timer2 interrupt? (1ms rate)                                    E:\iro_svn\opensprints\FW\user\user.c
000868   a29e     BTFSS     0x9e,0x1,0x0   	if (PIR1bits.TMR2IF)                                                            E:\iro_svn\opensprints\FW\user\user.c
00086a   d112     BRA       0xa90                                                                                           
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// Clear the interrupt                                                         E:\iro_svn\opensprints\FW\user\user.c
00086c   929e     BCF       0x9e,0x1,0x0   		PIR1bits.TMR2IF = 0;                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// The most time critical part of this interrupt service routine is the        E:\iro_svn\opensprints\FW\user\user.c
                                           		// handling of the RC command's servo output pulses.                           E:\iro_svn\opensprints\FW\user\user.c
                                           		// Each time we get this interrupt, we look to see if the next pin on the      E:\iro_svn\opensprints\FW\user\user.c
                                           		// list has a value greater than zero. If so, we arm set it high and set       E:\iro_svn\opensprints\FW\user\user.c
                                           		// it's state to PRIMED. Then we advance the pointers to the next pair.        E:\iro_svn\opensprints\FW\user\user.c
00086e   0e03     MOVLW     0x3            		if (kPRIMED == g_RC_state[g_RC_primed_ptr])                                    E:\iro_svn\opensprints\FW\user\user.c
000870   6e38     MOVWF     0x38,0x0                                                                                        
000872   500e     MOVF      0xe,0x0,0x0                                                                                     
000874   6aea     CLRF      0xea,0x0                                                                                        
000876   0f51     ADDLW     0x51                                                                                            
000878   6ee9     MOVWF     0xe9,0x0                                                                                        
00087a   0e01     MOVLW     0x1                                                                                             
00087c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00087e   50ef     MOVF      0xef,0x0,0x0                                                                                    
000880   5c38     SUBWF     0x38,0x0,0x0                                                                                    
000882   e130     BNZ       0x8e4                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// This is easy, throw the value into the timer                               E:\iro_svn\opensprints\FW\user\user.c
000884   500e     MOVF      0xe,0x0,0x0    			TMR0H = g_RC_value[g_RC_primed_ptr] >> 8;                                     E:\iro_svn\opensprints\FW\user\user.c
000886   6ee9     MOVWF     0xe9,0x0                                                                                        
000888   6aea     CLRF      0xea,0x0                                                                                        
00088a   90d8     BCF       0xd8,0x0,0x0                                                                                    
00088c   36e9     RLCF      0xe9,0x1,0x0                                                                                    
00088e   36ea     RLCF      0xea,0x1,0x0                                                                                    
000890   0e69     MOVLW     0x69                                                                                            
000892   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000894   0e01     MOVLW     0x1                                                                                             
000896   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000898   cfee     MOVFF     0xfee,0x38                                                                                      
00089a   f038                                                                                                               
00089c   cfef     MOVFF     0xfef,0x39                                                                                      
00089e   f039                                                                                                               
0008a0   c039     MOVFF     0x39,0x38                                                                                       
0008a2   f038                                                                                                               
0008a4   6a39     CLRF      0x39,0x0                                                                                        
0008a6   5038     MOVF      0x38,0x0,0x0                                                                                    
0008a8   6ed7     MOVWF     0xd7,0x0                                                                                        
0008aa   500e     MOVF      0xe,0x0,0x0    			TMR0L = g_RC_value[g_RC_primed_ptr] & 0xFF;                                   E:\iro_svn\opensprints\FW\user\user.c
0008ac   6ee9     MOVWF     0xe9,0x0                                                                                        
0008ae   6aea     CLRF      0xea,0x0                                                                                        
0008b0   90d8     BCF       0xd8,0x0,0x0                                                                                    
0008b2   36e9     RLCF      0xe9,0x1,0x0                                                                                    
0008b4   36ea     RLCF      0xea,0x1,0x0                                                                                    
0008b6   0e69     MOVLW     0x69                                                                                            
0008b8   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
0008ba   0e01     MOVLW     0x1                                                                                             
0008bc   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0008be   cfee     MOVFF     0xfee,0x38                                                                                      
0008c0   f038                                                                                                               
0008c2   cfef     MOVFF     0xfef,0x39                                                                                      
0008c4   f039                                                                                                               
0008c6   5038     MOVF      0x38,0x0,0x0                                                                                    
0008c8   6ed6     MOVWF     0xd6,0x0                                                                                        
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           			// Then make sure the timer's interrupt enable is set                         E:\iro_svn\opensprints\FW\user\user.c
0008ca   8af2     BSF       0xf2,0x5,0x0   			INTCONbits.TMR0IE = 1;                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           			// And be sure to clear the flag too                                          E:\iro_svn\opensprints\FW\user\user.c
0008cc   94f2     BCF       0xf2,0x2,0x0   			INTCONbits.TMR0IF = 0;                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           			// Turn on Timer0                                                             E:\iro_svn\opensprints\FW\user\user.c
0008ce   8ed5     BSF       0xd5,0x7,0x0   			T0CONbits.TMR0ON = 1;                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           			// And set this pin's state to timing                                         E:\iro_svn\opensprints\FW\user\user.c
0008d0   500e     MOVF      0xe,0x0,0x0    			g_RC_state[g_RC_primed_ptr] = kTIMING;                                        E:\iro_svn\opensprints\FW\user\user.c
0008d2   6aea     CLRF      0xea,0x0                                                                                        
0008d4   0f51     ADDLW     0x51                                                                                            
0008d6   6ee9     MOVWF     0xe9,0x0                                                                                        
0008d8   0e01     MOVLW     0x1                                                                                             
0008da   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0008dc   0e04     MOVLW     0x4                                                                                             
0008de   6eef     MOVWF     0xef,0x0                                                                                        
                                           			                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Remember which pin is now timing                                           E:\iro_svn\opensprints\FW\user\user.c
0008e0   500e     MOVF      0xe,0x0,0x0    			g_RC_timing_ptr = g_RC_primed_ptr;                                            E:\iro_svn\opensprints\FW\user\user.c
0008e2   6e10     MOVWF     0x10,0x0                                                                                        
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
0008e4   0e02     MOVLW     0x2            		if (kWAITING == g_RC_state[g_RC_next_ptr])                                     E:\iro_svn\opensprints\FW\user\user.c
0008e6   6e38     MOVWF     0x38,0x0                                                                                        
0008e8   500f     MOVF      0xf,0x0,0x0                                                                                     
0008ea   6aea     CLRF      0xea,0x0                                                                                        
0008ec   0f51     ADDLW     0x51                                                                                            
0008ee   6ee9     MOVWF     0xe9,0x0                                                                                        
0008f0   0e01     MOVLW     0x1                                                                                             
0008f2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0008f4   50ef     MOVF      0xef,0x0,0x0                                                                                    
0008f6   5c38     SUBWF     0x38,0x0,0x0                                                                                    
0008f8   e149     BNZ       0x98c                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// If the value is zero, then shut this pin off                               E:\iro_svn\opensprints\FW\user\user.c
                                           			// otherwise, prime it for sending a pulse                                    E:\iro_svn\opensprints\FW\user\user.c
0008fa   500f     MOVF      0xf,0x0,0x0    			if (0 == g_RC_value[g_RC_next_ptr])                                           E:\iro_svn\opensprints\FW\user\user.c
0008fc   6ee9     MOVWF     0xe9,0x0                                                                                        
0008fe   6aea     CLRF      0xea,0x0                                                                                        
000900   90d8     BCF       0xd8,0x0,0x0                                                                                    
000902   36e9     RLCF      0xe9,0x1,0x0                                                                                    
000904   36ea     RLCF      0xea,0x1,0x0                                                                                    
000906   0e69     MOVLW     0x69                                                                                            
000908   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
00090a   0e01     MOVLW     0x1                                                                                             
00090c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00090e   50ee     MOVF      0xee,0x0,0x0                                                                                    
000910   10ed     IORWF     0xed,0x0,0x0                                                                                    
000912   e109     BNZ       0x926                                                                                           
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
000914   500f     MOVF      0xf,0x0,0x0    				g_RC_state[g_RC_next_ptr] = kOFF;                                            E:\iro_svn\opensprints\FW\user\user.c
000916   6aea     CLRF      0xea,0x0                                                                                        
000918   0f51     ADDLW     0x51                                                                                            
00091a   6ee9     MOVWF     0xe9,0x0                                                                                        
00091c   0e01     MOVLW     0x1                                                                                             
00091e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000920   0e01     MOVLW     0x1                                                                                             
000922   6eef     MOVWF     0xef,0x0                                                                                        
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
000924   d033     BRA       0x98c          			else                                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           				// Set the bit high                                                          E:\iro_svn\opensprints\FW\user\user.c
000926   0e08     MOVLW     0x8            				if (g_RC_next_ptr < 8)                                                       E:\iro_svn\opensprints\FW\user\user.c
000928   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
00092a   e20c     BC        0x944                                                                                           
                                           				{                                                                            E:\iro_svn\opensprints\FW\user\user.c
00092c   0e07     MOVLW     0x7            					bitset (LATA, g_RC_next_ptr & 0x7);                                         E:\iro_svn\opensprints\FW\user\user.c
00092e   140f     ANDWF     0xf,0x0,0x0                                                                                     
000930   6e38     MOVWF     0x38,0x0                                                                                        
000932   0e01     MOVLW     0x1                                                                                             
000934   5238     MOVF      0x38,0x1,0x0                                                                                    
000936   e004     BZ        0x940                                                                                           
000938   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
00093a   0bfe     ANDLW     0xfe                                                                                            
00093c   0638     DECF      0x38,0x1,0x0                                                                                    
00093e   e1fc     BNZ       0x938                                                                                           
000940   1289     IORWF     0x89,0x1,0x0                                                                                    
                                           				}                                                                            E:\iro_svn\opensprints\FW\user\user.c
000942   d01a     BRA       0x978          				else if (g_RC_next_ptr < 16)                                                 E:\iro_svn\opensprints\FW\user\user.c
000944   0e10     MOVLW     0x10                                                                                            
000946   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
000948   e20c     BC        0x962                                                                                           
                                           				{                                                                            E:\iro_svn\opensprints\FW\user\user.c
00094a   0e07     MOVLW     0x7            					bitset (LATB, g_RC_next_ptr & 0x7);                                         E:\iro_svn\opensprints\FW\user\user.c
00094c   140f     ANDWF     0xf,0x0,0x0                                                                                     
00094e   6e38     MOVWF     0x38,0x0                                                                                        
000950   0e01     MOVLW     0x1                                                                                             
000952   5238     MOVF      0x38,0x1,0x0                                                                                    
000954   e004     BZ        0x95e                                                                                           
000956   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000958   0bfe     ANDLW     0xfe                                                                                            
00095a   0638     DECF      0x38,0x1,0x0                                                                                    
00095c   e1fc     BNZ       0x956                                                                                           
00095e   128a     IORWF     0x8a,0x1,0x0                                                                                    
                                           				}                                                                            E:\iro_svn\opensprints\FW\user\user.c
000960   d00b     BRA       0x978          				else                                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           				{                                                                            E:\iro_svn\opensprints\FW\user\user.c
000962   0e07     MOVLW     0x7            					bitset (LATC, g_RC_next_ptr & 0x7);                                         E:\iro_svn\opensprints\FW\user\user.c
000964   140f     ANDWF     0xf,0x0,0x0                                                                                     
000966   6e38     MOVWF     0x38,0x0                                                                                        
000968   0e01     MOVLW     0x1                                                                                             
00096a   5238     MOVF      0x38,0x1,0x0                                                                                    
00096c   e004     BZ        0x976                                                                                           
00096e   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000970   0bfe     ANDLW     0xfe                                                                                            
000972   0638     DECF      0x38,0x1,0x0                                                                                    
000974   e1fc     BNZ       0x96e                                                                                           
000976   128b     IORWF     0x8b,0x1,0x0                                                                                    
                                           				}                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           				// Set the state to primed so we know to do next                             E:\iro_svn\opensprints\FW\user\user.c
000978   500f     MOVF      0xf,0x0,0x0    				g_RC_state[g_RC_next_ptr] = kPRIMED;                                         E:\iro_svn\opensprints\FW\user\user.c
00097a   6aea     CLRF      0xea,0x0                                                                                        
00097c   0f51     ADDLW     0x51                                                                                            
00097e   6ee9     MOVWF     0xe9,0x0                                                                                        
000980   0e01     MOVLW     0x1                                                                                             
000982   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000984   0e03     MOVLW     0x3                                                                                             
000986   6eef     MOVWF     0xef,0x0                                                                                        
                                           				// And remember which pin is primed                                          E:\iro_svn\opensprints\FW\user\user.c
000988   500f     MOVF      0xf,0x0,0x0    				g_RC_primed_ptr = g_RC_next_ptr;                                             E:\iro_svn\opensprints\FW\user\user.c
00098a   6e0e     MOVWF     0xe,0x0                                                                                         
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		// And always advance the main pointer                                         E:\iro_svn\opensprints\FW\user\user.c
                                           		// NOTE: we need to skip RA6, RA7, and RC3, RC4, and RC5                       E:\iro_svn\opensprints\FW\user\user.c
                                           		// (Because UBW doesn't bring those pins out to headers)                       E:\iro_svn\opensprints\FW\user\user.c
00098c   2a0f     INCF      0xf,0x1,0x0    		g_RC_next_ptr++;                                                               E:\iro_svn\opensprints\FW\user\user.c
00098e   0e06     MOVLW     0x6            		if (6 == g_RC_next_ptr)                                                        E:\iro_svn\opensprints\FW\user\user.c
000990   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
000992   e103     BNZ       0x99a                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
000994   0e08     MOVLW     0x8            			g_RC_next_ptr = 8;                                                            E:\iro_svn\opensprints\FW\user\user.c
000996   6e0f     MOVWF     0xf,0x0                                                                                         
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
000998   d00a     BRA       0x9ae          		else if (19 == g_RC_next_ptr)                                                  E:\iro_svn\opensprints\FW\user\user.c
00099a   0e13     MOVLW     0x13                                                                                            
00099c   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
00099e   e103     BNZ       0x9a6                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
0009a0   0e16     MOVLW     0x16           			g_RC_next_ptr = 22;                                                           E:\iro_svn\opensprints\FW\user\user.c
0009a2   6e0f     MOVWF     0xf,0x0                                                                                         
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
0009a4   d004     BRA       0x9ae          		else if (kRC_DATA_SIZE == g_RC_next_ptr)                                       E:\iro_svn\opensprints\FW\user\user.c
0009a6   0e18     MOVLW     0x18                                                                                            
0009a8   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
0009aa   e101     BNZ       0x9ae                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
0009ac   6a0f     CLRF      0xf,0x0        			g_RC_next_ptr = 0;                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           				                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		// See if it's time to fire off an I packet                                    E:\iro_svn\opensprints\FW\user\user.c
0009ae   0e00     MOVLW     0x0            		if (ISR_D_RepeatRate > 0)                                                      E:\iro_svn\opensprints\FW\user\user.c
0009b0   80d8     BSF       0xd8,0x0,0x0                                                                                    
0009b2   5402     SUBFWB    0x2,0x0,0x0                                                                                     
0009b4   0e00     MOVLW     0x0                                                                                             
0009b6   5403     SUBFWB    0x3,0x0,0x0                                                                                     
0009b8   e23f     BC        0xa38                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
0009ba   2a11     INCF      0x11,0x1,0x0   			D_tick_counter++;                                                             E:\iro_svn\opensprints\FW\user\user.c
0009bc   0e00     MOVLW     0x0                                                                                             
0009be   2212     ADDWFC    0x12,0x1,0x0                                                                                    
0009c0   5002     MOVF      0x2,0x0,0x0    			if (D_tick_counter >= ISR_D_RepeatRate)                                       E:\iro_svn\opensprints\FW\user\user.c
0009c2   5c11     SUBWF     0x11,0x0,0x0                                                                                    
0009c4   5003     MOVF      0x3,0x0,0x0                                                                                     
0009c6   5812     SUBWFB    0x12,0x0,0x0                                                                                    
0009c8   e337     BNC       0xa38                                                                                           
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
0009ca   0101     MOVLB     0x1            				raceTimeCentisecs++;                                                         E:\iro_svn\opensprints\FW\user\user.c
0009cc   2ba9     INCF      0xa9,0x1,0x1                                                                                    
0009ce   0e00     MOVLW     0x0                                                                                             
0009d0   23aa     ADDWFC    0xaa,0x1,0x1                                                                                    
0009d2   0101     MOVLB     0x1            				if (raceTimeCentisecs >= 6000)                                               E:\iro_svn\opensprints\FW\user\user.c
0009d4   0e70     MOVLW     0x70                                                                                            
0009d6   5da9     SUBWF     0xa9,0x0,0x1                                                                                    
0009d8   0e17     MOVLW     0x17                                                                                            
0009da   59aa     SUBWFB    0xaa,0x0,0x1                                                                                    
0009dc   e307     BNC       0x9ec                                                                                           
                                           				{                                                                            E:\iro_svn\opensprints\FW\user\user.c
0009de   0101     MOVLB     0x1            					raceTimeCentisecs=0;                                                        E:\iro_svn\opensprints\FW\user\user.c
0009e0   6ba9     CLRF      0xa9,0x1                                                                                        
0009e2   6baa     CLRF      0xaa,0x1                                                                                        
0009e4   0101     MOVLB     0x1            					raceTimeMins++;                                                             E:\iro_svn\opensprints\FW\user\user.c
0009e6   2ba7     INCF      0xa7,0x1,0x1                                                                                    
0009e8   0e00     MOVLW     0x0                                                                                             
0009ea   23a8     ADDWFC    0xa8,0x1,0x1                                                                                    
                                           				}                                                                            E:\iro_svn\opensprints\FW\user\user.c
0009ec   6a11     CLRF      0x11,0x0       				D_tick_counter = 0;                                                          E:\iro_svn\opensprints\FW\user\user.c
0009ee   6a12     CLRF      0x12,0x0                                                                                        
                                           				// Tell the main code to send an I packet                                    E:\iro_svn\opensprints\FW\user\user.c
0009f0   0e03     MOVLW     0x3            				if (ISR_D_FIFO_length < kISR_FIFO_D_DEPTH)                                   E:\iro_svn\opensprints\FW\user\user.c
0009f2   5c06     SUBWF     0x6,0x0,0x0                                                                                     
0009f4   e21f     BC        0xa34                                                                                           
                                           				{                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           					// And copy over our port values                                            E:\iro_svn\opensprints\FW\user\user.c
0009f6   5004     MOVF      0x4,0x0,0x0    					ISR_D_FIFO[0][ISR_D_FIFO_in] = PORTA;                                       E:\iro_svn\opensprints\FW\user\user.c
0009f8   6aea     CLRF      0xea,0x0                                                                                        
0009fa   0f48     ADDLW     0x48                                                                                            
0009fc   6ee9     MOVWF     0xe9,0x0                                                                                        
0009fe   0e01     MOVLW     0x1                                                                                             
000a00   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000a02   cf80     MOVFF     0xf80,0xfef                                                                                     
000a04   ffef                                                                                                               
000a06   5004     MOVF      0x4,0x0,0x0    					ISR_D_FIFO[1][ISR_D_FIFO_in] = PORTB;                                       E:\iro_svn\opensprints\FW\user\user.c
000a08   6aea     CLRF      0xea,0x0                                                                                        
000a0a   0f4b     ADDLW     0x4b                                                                                            
000a0c   6ee9     MOVWF     0xe9,0x0                                                                                        
000a0e   0e01     MOVLW     0x1                                                                                             
000a10   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000a12   cf81     MOVFF     0xf81,0xfef                                                                                     
000a14   ffef                                                                                                               
000a16   5004     MOVF      0x4,0x0,0x0    					ISR_D_FIFO[2][ISR_D_FIFO_in] = PORTC;                                       E:\iro_svn\opensprints\FW\user\user.c
000a18   6aea     CLRF      0xea,0x0                                                                                        
000a1a   0f4e     ADDLW     0x4e                                                                                            
000a1c   6ee9     MOVWF     0xe9,0x0                                                                                        
000a1e   0e01     MOVLW     0x1                                                                                             
000a20   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000a22   cf82     MOVFF     0xf82,0xfef                                                                                     
000a24   ffef                                                                                                               
000a26   2a04     INCF      0x4,0x1,0x0    					ISR_D_FIFO_in++;                                                            E:\iro_svn\opensprints\FW\user\user.c
000a28   0e03     MOVLW     0x3            					if (ISR_D_FIFO_in >= kISR_FIFO_D_DEPTH)                                     E:\iro_svn\opensprints\FW\user\user.c
000a2a   5c04     SUBWF     0x4,0x0,0x0                                                                                     
000a2c   e301     BNC       0xa30                                                                                           
                                           					{                                                                           E:\iro_svn\opensprints\FW\user\user.c
000a2e   6a04     CLRF      0x4,0x0        						ISR_D_FIFO_in = 0;	                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           					}                                                                           E:\iro_svn\opensprints\FW\user\user.c
000a30   2a06     INCF      0x6,0x1,0x0    					ISR_D_FIFO_length++;                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           				}                                                                            E:\iro_svn\opensprints\FW\user\user.c
000a32   d002     BRA       0xa38          				else                                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           				{                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           					// Stop the madness! Something is wrong, we're                              E:\iro_svn\opensprints\FW\user\user.c
                                           					// not getting our packets out. So kill the                                 E:\iro_svn\opensprints\FW\user\user.c
                                           					// timer.                                                                   E:\iro_svn\opensprints\FW\user\user.c
000a34   6a02     CLRF      0x2,0x0        					ISR_D_RepeatRate = 0;                                                       E:\iro_svn\opensprints\FW\user\user.c
000a36   6a03     CLRF      0x3,0x0                                                                                         
                                           				}                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           			}	                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// See if it's time to fire off an A packet                                    E:\iro_svn\opensprints\FW\user\user.c
000a38   0e00     MOVLW     0x0            		if ((ISR_A_RepeatRate > 0) && (AnalogEnable > 0))                              E:\iro_svn\opensprints\FW\user\user.c
000a3a   80d8     BSF       0xd8,0x0,0x0                                                                                    
000a3c   5407     SUBFWB    0x7,0x0,0x0                                                                                     
000a3e   0e00     MOVLW     0x0                                                                                             
000a40   5408     SUBFWB    0x8,0x0,0x0                                                                                     
000a42   e219     BC        0xa76                                                                                           
000a44   500c     MOVF      0xc,0x0,0x0                                                                                     
000a46   0800     SUBLW     0x0                                                                                             
000a48   e216     BC        0xa76                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
000a4a   2a13     INCF      0x13,0x1,0x0   			A_tick_counter++;                                                             E:\iro_svn\opensprints\FW\user\user.c
000a4c   0e00     MOVLW     0x0                                                                                             
000a4e   2214     ADDWFC    0x14,0x1,0x0                                                                                    
000a50   5007     MOVF      0x7,0x0,0x0    			if (A_tick_counter >= ISR_A_RepeatRate)                                       E:\iro_svn\opensprints\FW\user\user.c
000a52   5c13     SUBWF     0x13,0x0,0x0                                                                                    
000a54   5008     MOVF      0x8,0x0,0x0                                                                                     
000a56   5814     SUBWFB    0x14,0x0,0x0                                                                                    
000a58   e30e     BNC       0xa76                                                                                           
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
000a5a   6a13     CLRF      0x13,0x0       				A_tick_counter = 0;                                                          E:\iro_svn\opensprints\FW\user\user.c
000a5c   6a14     CLRF      0x14,0x0                                                                                        
                                           				// Tell the main code to send an A packet                                    E:\iro_svn\opensprints\FW\user\user.c
000a5e   0e03     MOVLW     0x3            				if (ISR_A_FIFO_length < kISR_FIFO_A_DEPTH)                                   E:\iro_svn\opensprints\FW\user\user.c
000a60   5c0b     SUBWF     0xb,0x0,0x0                                                                                     
000a62   e207     BC        0xa72                                                                                           
                                           				{                                                                            E:\iro_svn\opensprints\FW\user\user.c
000a64   2a09     INCF      0x9,0x1,0x0    					ISR_A_FIFO_in++;                                                            E:\iro_svn\opensprints\FW\user\user.c
000a66   0e03     MOVLW     0x3            					if (ISR_A_FIFO_in >= kISR_FIFO_A_DEPTH)                                     E:\iro_svn\opensprints\FW\user\user.c
000a68   5c09     SUBWF     0x9,0x0,0x0                                                                                     
000a6a   e301     BNC       0xa6e                                                                                           
                                           					{                                                                           E:\iro_svn\opensprints\FW\user\user.c
000a6c   6a09     CLRF      0x9,0x0        						ISR_A_FIFO_in = 0;	                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           					}                                                                           E:\iro_svn\opensprints\FW\user\user.c
000a6e   2a0b     INCF      0xb,0x1,0x0    					ISR_A_FIFO_length++;                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           				}                                                                            E:\iro_svn\opensprints\FW\user\user.c
000a70   d002     BRA       0xa76          				else                                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           				{                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           					// Stop the madness! Something is wrong, we're                              E:\iro_svn\opensprints\FW\user\user.c
                                           					// not getting our packets out. So kill the A                               E:\iro_svn\opensprints\FW\user\user.c
                                           					// packets.                                                                 E:\iro_svn\opensprints\FW\user\user.c
000a72   6a07     CLRF      0x7,0x0        					ISR_A_RepeatRate = 0;                                                       E:\iro_svn\opensprints\FW\user\user.c
000a74   6a08     CLRF      0x8,0x0                                                                                         
                                           				}                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           			}	                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		// See if it's time to start analog conversions                                E:\iro_svn\opensprints\FW\user\user.c
000a76   500c     MOVF      0xc,0x0,0x0    		if (AnalogEnable > 0)                                                          E:\iro_svn\opensprints\FW\user\user.c
000a78   0800     SUBLW     0x0                                                                                             
000a7a   e20a     BC        0xa90                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the channel to zero to start off with                                  E:\iro_svn\opensprints\FW\user\user.c
000a7c   6a15     CLRF      0x15,0x0       			A_cur_channel = 0;                                                            E:\iro_svn\opensprints\FW\user\user.c
000a7e   5015     MOVF      0x15,0x0,0x0   			ADCON0 = (A_cur_channel << 2) + 1;                                            E:\iro_svn\opensprints\FW\user\user.c
000a80   0d04     MULLW     0x4                                                                                             
000a82   28f3     INCF      0xf3,0x0,0x0                                                                                    
000a84   6ec2     MOVWF     0xc2,0x0                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           			// Clear the interrupt                                                        E:\iro_svn\opensprints\FW\user\user.c
000a86   9c9e     BCF       0x9e,0x6,0x0   			PIR1bits.ADIF = 0;                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           			// And make sure to always use low priority.                                  E:\iro_svn\opensprints\FW\user\user.c
000a88   9c9f     BCF       0x9f,0x6,0x0   			IPR1bits.ADIP = 0;                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the interrupt enable                                                   E:\iro_svn\opensprints\FW\user\user.c
000a8a   8c9d     BSF       0x9d,0x6,0x0   			PIE1bits.ADIE = 1;                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           			// Make sure it's on!                                                         E:\iro_svn\opensprints\FW\user\user.c
000a8c   80c2     BSF       0xc2,0x0,0x0   			ADCON0bits.ADON = 1;                                                          E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           			// And tell the A/D to GO!                                                    E:\iro_svn\opensprints\FW\user\user.c
000a8e   82c2     BSF       0xc2,0x1,0x0   			ADCON0bits.GO_DONE = 1;                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Do we have an analog interrupt?                                              E:\iro_svn\opensprints\FW\user\user.c
000a90   ac9e     BTFSS     0x9e,0x6,0x0   	if (PIR1bits.ADIF)                                                              E:\iro_svn\opensprints\FW\user\user.c
000a92   d02d     BRA       0xaee                                                                                           
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// Clear the interrupt                                                         E:\iro_svn\opensprints\FW\user\user.c
000a94   9c9e     BCF       0x9e,0x6,0x0   		PIR1bits.ADIF = 0;                                                             E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		// Read out the value that we just converted, and store it.                    E:\iro_svn\opensprints\FW\user\user.c
000aac   5015     MOVF      0x15,0x0,0x0   		ISR_A_FIFO[A_cur_channel][ISR_A_FIFO_in] =                                     E:\iro_svn\opensprints\FW\user\user.c
000aae   0d06     MULLW     0x6                                                                                             
000ab0   cff3     MOVFF     0xff3,0x38                                                                                      
000ab2   f038                                                                                                               
000ab4   cff4     MOVFF     0xff4,0x39                                                                                      
000ab6   f039                                                                                                               
000ab8   0e00     MOVLW     0x0                                                                                             
000aba   2638     ADDWF     0x38,0x1,0x0                                                                                    
000abc   0e01     MOVLW     0x1                                                                                             
000abe   2239     ADDWFC    0x39,0x1,0x0                                                                                    
000ac0   5009     MOVF      0x9,0x0,0x0                                                                                     
000ac2   0d02     MULLW     0x2                                                                                             
000ac4   5038     MOVF      0x38,0x0,0x0                                                                                    
000ac6   24f3     ADDWF     0xf3,0x0,0x0                                                                                    
000ac8   6ee9     MOVWF     0xe9,0x0                                                                                        
000aca   5039     MOVF      0x39,0x0,0x0                                                                                    
000acc   20f4     ADDWFC    0xf4,0x0,0x0                                                                                    
000ace   6eea     MOVWF     0xea,0x0                                                                                        
000aa0   50c3     MOVF      0xc3,0x0,0x0   			(unsigned int)ADRESL                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           			|                                                                             E:\iro_svn\opensprints\FW\user\user.c
000a96   50c4     MOVF      0xc4,0x0,0x0   			((unsigned int)ADRESH << 8);                                                  E:\iro_svn\opensprints\FW\user\user.c
000a98   6e3c     MOVWF     0x3c,0x0                                                                                        
000a9a   c03c     MOVFF     0x3c,0x3d                                                                                       
000a9c   f03d                                                                                                               
000a9e   6a3c     CLRF      0x3c,0x0                                                                                        
000aa2   0100     MOVLB     0x0                                                                                             
000aa4   103c     IORWF     0x3c,0x0,0x0                                                                                    
000aa6   6e3a     MOVWF     0x3a,0x0                                                                                        
000aa8   c03d     MOVFF     0x3d,0x3b                                                                                       
000aaa   f03b                                                                                                               
000ad0   c03a     MOVFF     0x3a,0xfee                                                                                      
000ad2   ffee                                                                                                               
000ad4   c03b     MOVFF     0x3b,0xfed                                                                                      
000ad6   ffed                                                                                                               
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           		// Incriment the channel and write the new one in                              E:\iro_svn\opensprints\FW\user\user.c
000ad8   2a15     INCF      0x15,0x1,0x0   		A_cur_channel++;                                                               E:\iro_svn\opensprints\FW\user\user.c
000ada   500c     MOVF      0xc,0x0,0x0    		if (A_cur_channel >= AnalogEnable)                                             E:\iro_svn\opensprints\FW\user\user.c
000adc   5c15     SUBWF     0x15,0x0,0x0                                                                                    
000ade   e302     BNC       0xae4                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// We're done, so just sit and wait                                           E:\iro_svn\opensprints\FW\user\user.c
                                           			// Turn off our interrupts though.                                            E:\iro_svn\opensprints\FW\user\user.c
000ae0   9c9d     BCF       0x9d,0x6,0x0   			PIE1bits.ADIE = 0;                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
000ae2   d005     BRA       0xaee          		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Update the channel number                                                  E:\iro_svn\opensprints\FW\user\user.c
000ae4   5015     MOVF      0x15,0x0,0x0   			ADCON0 = (A_cur_channel << 2) + 1;                                            E:\iro_svn\opensprints\FW\user\user.c
000ae6   0d04     MULLW     0x4                                                                                             
000ae8   28f3     INCF      0xf3,0x0,0x0                                                                                    
000aea   6ec2     MOVWF     0xc2,0x0                                                                                        
                                           			// And start the next conversion                                              E:\iro_svn\opensprints\FW\user\user.c
000aec   82c2     BSF       0xc2,0x1,0x0   			ADCON0bits.GO_DONE = 1;                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Do we have a TMR0 interrupt? (RC command)                                    E:\iro_svn\opensprints\FW\user\user.c
                                           	// TMR0 is in 16 bit mode, and counts up to FFFF and overflows, generating      E:\iro_svn\opensprints\FW\user\user.c
                                           	// this interrupt.                                                              E:\iro_svn\opensprints\FW\user\user.c
000aee   a4f2     BTFSS     0xf2,0x2,0x0   	if (INTCONbits.TMR0IF)                                                          E:\iro_svn\opensprints\FW\user\user.c
000af0   d042     BRA       0xb76                                                                                           
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// Turn off Timer0                                                             E:\iro_svn\opensprints\FW\user\user.c
000af2   9ed5     BCF       0xd5,0x7,0x0   		T0CONbits.TMR0ON = 0;                                                          E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		// Clear the interrupt                                                         E:\iro_svn\opensprints\FW\user\user.c
000af4   94f2     BCF       0xf2,0x2,0x0   		INTCONbits.TMR0IF = 0;                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// And disable it                                                              E:\iro_svn\opensprints\FW\user\user.c
000af6   9af2     BCF       0xf2,0x5,0x0   		INTCONbits.TMR0IE = 0;                                                         E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		// Only do our stuff if the pin is in the proper state                         E:\iro_svn\opensprints\FW\user\user.c
000af8   0e04     MOVLW     0x4            		if (kTIMING == g_RC_state[g_RC_timing_ptr])                                    E:\iro_svn\opensprints\FW\user\user.c
000afa   6e38     MOVWF     0x38,0x0                                                                                        
000afc   5010     MOVF      0x10,0x0,0x0                                                                                    
000afe   6aea     CLRF      0xea,0x0                                                                                        
000b00   0f51     ADDLW     0x51                                                                                            
000b02   6ee9     MOVWF     0xe9,0x0                                                                                        
000b04   0e01     MOVLW     0x1                                                                                             
000b06   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000b08   50ef     MOVF      0xef,0x0,0x0                                                                                    
000b0a   5c38     SUBWF     0x38,0x0,0x0                                                                                    
000b0c   e134     BNZ       0xb76                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// All we need to do is clear the pin and change its state to kWAITING        E:\iro_svn\opensprints\FW\user\user.c
000b0e   0e08     MOVLW     0x8            			if (g_RC_timing_ptr < 8)                                                      E:\iro_svn\opensprints\FW\user\user.c
000b10   5c10     SUBWF     0x10,0x0,0x0                                                                                    
000b12   e20d     BC        0xb2e                                                                                           
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
000b14   0e07     MOVLW     0x7            				bitclr (LATA, g_RC_timing_ptr & 0x7);                                        E:\iro_svn\opensprints\FW\user\user.c
000b16   1410     ANDWF     0x10,0x0,0x0                                                                                    
000b18   6e38     MOVWF     0x38,0x0                                                                                        
000b1a   0e01     MOVLW     0x1                                                                                             
000b1c   5238     MOVF      0x38,0x1,0x0                                                                                    
000b1e   e004     BZ        0xb28                                                                                           
000b20   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000b22   0bfe     ANDLW     0xfe                                                                                            
000b24   0638     DECF      0x38,0x1,0x0                                                                                    
000b26   e1fc     BNZ       0xb20                                                                                           
000b28   1ce8     COMF      0xe8,0x0,0x0                                                                                    
000b2a   1689     ANDWF     0x89,0x1,0x0                                                                                    
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
000b2c   d01c     BRA       0xb66          			else if (g_RC_timing_ptr < 16)                                                E:\iro_svn\opensprints\FW\user\user.c
000b2e   0e10     MOVLW     0x10                                                                                            
000b30   5c10     SUBWF     0x10,0x0,0x0                                                                                    
000b32   e20d     BC        0xb4e                                                                                           
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
000b34   0e07     MOVLW     0x7            				bitclr (LATB, g_RC_timing_ptr & 0x7);                                        E:\iro_svn\opensprints\FW\user\user.c
000b36   1410     ANDWF     0x10,0x0,0x0                                                                                    
000b38   6e38     MOVWF     0x38,0x0                                                                                        
000b3a   0e01     MOVLW     0x1                                                                                             
000b3c   5238     MOVF      0x38,0x1,0x0                                                                                    
000b3e   e004     BZ        0xb48                                                                                           
000b40   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000b42   0bfe     ANDLW     0xfe                                                                                            
000b44   0638     DECF      0x38,0x1,0x0                                                                                    
000b46   e1fc     BNZ       0xb40                                                                                           
000b48   1ce8     COMF      0xe8,0x0,0x0                                                                                    
000b4a   168a     ANDWF     0x8a,0x1,0x0                                                                                    
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
000b4c   d00c     BRA       0xb66          			else                                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
000b4e   0e07     MOVLW     0x7            				bitclr (LATC, g_RC_timing_ptr & 0x7);                                        E:\iro_svn\opensprints\FW\user\user.c
000b50   1410     ANDWF     0x10,0x0,0x0                                                                                    
000b52   6e38     MOVWF     0x38,0x0                                                                                        
000b54   0e01     MOVLW     0x1                                                                                             
000b56   5238     MOVF      0x38,0x1,0x0                                                                                    
000b58   e004     BZ        0xb62                                                                                           
000b5a   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000b5c   0bfe     ANDLW     0xfe                                                                                            
000b5e   0638     DECF      0x38,0x1,0x0                                                                                    
000b60   e1fc     BNZ       0xb5a                                                                                           
000b62   1ce8     COMF      0xe8,0x0,0x0                                                                                    
000b64   168b     ANDWF     0x8b,0x1,0x0                                                                                    
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
000b66   5010     MOVF      0x10,0x0,0x0   			g_RC_state[g_RC_timing_ptr] = kWAITING;		                                     E:\iro_svn\opensprints\FW\user\user.c
000b68   6aea     CLRF      0xea,0x0                                                                                        
000b6a   0f51     ADDLW     0x51                                                                                            
000b6c   6ee9     MOVWF     0xe9,0x0                                                                                        
000b6e   0e01     MOVLW     0x1                                                                                             
000b70   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000b72   0e02     MOVLW     0x2                                                                                             
000b74   6eef     MOVWF     0xef,0x0                                                                                        
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
000b76   52e5     MOVF      0xe5,0x1,0x0   }                                                                                E:\iro_svn\opensprints\FW\user\user.c
000b78   cfe5     MOVFF     0xfe5,0xff4                                                                                     
000b7a   fff4                                                                                                               
000b7c   cfe5     MOVFF     0xfe5,0xff3                                                                                     
000b7e   fff3                                                                                                               
000b80   cfe5     MOVFF     0xfe5,0xfea                                                                                     
000b82   ffea                                                                                                               
000b84   cfe5     MOVFF     0xfe5,0xfe9                                                                                     
000b86   ffe9                                                                                                               
000b88   cfe5     MOVFF     0xfe5,0xfda                                                                                     
000b8a   ffda                                                                                                               
000b8c   50e5     MOVF      0xe5,0x0,0x0                                                                                    
000b8e   cfe5     MOVFF     0xfe5,0xfe0                                                                                     
000b90   ffe0                                                                                                               
000b92   cfe5     MOVFF     0xfe5,0xfd8                                                                                     
000b94   ffd8                                                                                                               
000b96   0010     RETFIE    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           #pragma interrupt high_ISR                                                       E:\iro_svn\opensprints\FW\user\user.c
000b98   cfda     MOVFF     0xfda,0xfe4    void high_ISR(void)                                                              E:\iro_svn\opensprints\FW\user\user.c
000b9a   ffe4                                                                                                               
000b9c   cfe2     MOVFF     0xfe2,0xfda                                                                                     
000b9e   ffda                                                                                                               
000ba0   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
000ba2   52e5     MOVF      0xe5,0x1,0x0   }                                                                                E:\iro_svn\opensprints\FW\user\user.c
000ba4   cfe5     MOVFF     0xfe5,0xfda                                                                                     
000ba6   ffda                                                                                                               
000ba8   0011     RETFIE    0x1                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           void RaceInit(void)                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           //	char i, j;                                                                    E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Make all of 3 digital inputs                                                 E:\iro_svn\opensprints\FW\user\user.c
000baa   6a89     CLRF      0x89,0x0       	LATA = 0x00;                                                                    E:\iro_svn\opensprints\FW\user\user.c
000bac   6892     SETF      0x92,0x0       	TRISA = 0xFF;                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           	// Turn all analog inputs into digital inputs                                   E:\iro_svn\opensprints\FW\user\user.c
000bae   0e0f     MOVLW     0xf            	ADCON1 = 0x0F;                                                                  E:\iro_svn\opensprints\FW\user\user.c
000bb0   6ec1     MOVWF     0xc1,0x0                                                                                        
                                           	// Turn off the ADC                                                             E:\iro_svn\opensprints\FW\user\user.c
000bb2   90c2     BCF       0xc2,0x0,0x0   	ADCON0bits.ADON = 0;                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Turn off our own idea of how many analog channels to convert                 E:\iro_svn\opensprints\FW\user\user.c
000bb4   6a0c     CLRF      0xc,0x0        	AnalogEnable = 0;                                                               E:\iro_svn\opensprints\FW\user\user.c
000bb6   0e07     MOVLW     0x7            	CMCON = 0x07;	// Comparators as digital inputs                                  E:\iro_svn\opensprints\FW\user\user.c
000bb8   6eb4     MOVWF     0xb4,0x0                                                                                        
                                           	// Make all of PORTB inputs                                                     E:\iro_svn\opensprints\FW\user\user.c
000bba   6a8a     CLRF      0x8a,0x0       	LATB = 0x00;                                                                    E:\iro_svn\opensprints\FW\user\user.c
000bbc   6893     SETF      0x93,0x0       	TRISB = 0xFF;                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           	// Make all of PORTC inputs                                                     E:\iro_svn\opensprints\FW\user\user.c
000bbe   6a8b     CLRF      0x8b,0x0       	LATC = 0x00;                                                                    E:\iro_svn\opensprints\FW\user\user.c
000bc0   6894     SETF      0x94,0x0       	TRISC = 0xFF;                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	// Make all of PORTD and PORTE inputs too                                       E:\iro_svn\opensprints\FW\user\user.c
                                           	LATD = 0x00;                                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           	TRISD = 0xFF;                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           	LATE = 0x00;                                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           	TRISE = 0xFF;                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Initalize LED I/Os to outputs                                                E:\iro_svn\opensprints\FW\user\user.c
                                           //    mInitAllLEDs();                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Initalize switch as an input                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           //    mInitSwitch();                                                             E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Start off always using "OK" acknoledge.                                      E:\iro_svn\opensprints\FW\user\user.c
                                           //	g_ack_enable = TRUE;                                                          E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Use our own special output function for STDOUT                               E:\iro_svn\opensprints\FW\user\user.c
                                           //	stdout = _H_USER;                                                             E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Initalize all of the ISR FIFOs                                               E:\iro_svn\opensprints\FW\user\user.c
000bc2   6a0a     CLRF      0xa,0x0            ISR_A_FIFO_out = 0;                                                          E:\iro_svn\opensprints\FW\user\user.c
000bc4   6a09     CLRF      0x9,0x0            ISR_A_FIFO_in = 0;                                                           E:\iro_svn\opensprints\FW\user\user.c
000bc6   6a0b     CLRF      0xb,0x0            ISR_A_FIFO_length = 0;                                                       E:\iro_svn\opensprints\FW\user\user.c
000bc8   6a05     CLRF      0x5,0x0            ISR_D_FIFO_out = 0;                                                          E:\iro_svn\opensprints\FW\user\user.c
000bca   6a04     CLRF      0x4,0x0            ISR_D_FIFO_in = 0;                                                           E:\iro_svn\opensprints\FW\user\user.c
000bcc   6a06     CLRF      0x6,0x0            ISR_D_FIFO_length = 0;                                                       E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Make sure that our timer stuff starts out disabled                           E:\iro_svn\opensprints\FW\user\user.c
000bce   6a02     CLRF      0x2,0x0        	ISR_D_RepeatRate = 0;                                                           E:\iro_svn\opensprints\FW\user\user.c
000bd0   6a03     CLRF      0x3,0x0                                                                                         
000bd2   6a07     CLRF      0x7,0x0        	ISR_A_RepeatRate = 0;                                                           E:\iro_svn\opensprints\FW\user\user.c
000bd4   6a08     CLRF      0x8,0x0                                                                                         
000bd6   6a11     CLRF      0x11,0x0       	D_tick_counter = 0;                                                             E:\iro_svn\opensprints\FW\user\user.c
000bd8   6a12     CLRF      0x12,0x0                                                                                        
000bda   6a13     CLRF      0x13,0x0       	A_tick_counter = 0;                                                             E:\iro_svn\opensprints\FW\user\user.c
000bdc   6a14     CLRF      0x14,0x0                                                                                        
000bde   6a15     CLRF      0x15,0x0       	A_cur_channel = 0;                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                               // Now init our registers                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           	// The prescaler will be at 16                                                  E:\iro_svn\opensprints\FW\user\user.c
000be0   82ca     BSF       0xca,0x1,0x0       T2CONbits.T2CKPS1 = 1;                                                       E:\iro_svn\opensprints\FW\user\user.c
000be2   80ca     BSF       0xca,0x0,0x0       T2CONbits.T2CKPS0 = 1;                                                       E:\iro_svn\opensprints\FW\user\user.c
                                               // We want the TMR2 post scaler to be a 3                                    E:\iro_svn\opensprints\FW\user\user.c
000be4   9cca     BCF       0xca,0x6,0x0       T2CONbits.T2OUTPS3 = 0;                                                      E:\iro_svn\opensprints\FW\user\user.c
000be6   9aca     BCF       0xca,0x5,0x0       T2CONbits.T2OUTPS2 = 0;                                                      E:\iro_svn\opensprints\FW\user\user.c
000be8   88ca     BSF       0xca,0x4,0x0       T2CONbits.T2OUTPS1 = 1;                                                      E:\iro_svn\opensprints\FW\user\user.c
000bea   96ca     BCF       0xca,0x3,0x0       T2CONbits.T2OUTPS0 = 0;                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           	// Set our reload value                                                         E:\iro_svn\opensprints\FW\user\user.c
000bec   0efa     MOVLW     0xfa           	PR2 = kPR2_RELOAD;                                                              E:\iro_svn\opensprints\FW\user\user.c
000bee   6ecb     MOVWF     0xcb,0x0                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           /*	// Set up the Analog to Digital converter                                     E:\iro_svn\opensprints\FW\user\user.c
                                           	// Clear out the FIFO data                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           	for (i = 0; i < 12; i++)                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		for (j = 0; j < kISR_FIFO_A_DEPTH; j++)                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			ISR_A_FIFO[i][j] = 0;                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}	                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                               // Inialize USB TX and RX buffer management                                  E:\iro_svn\opensprints\FW\user\user.c
                                               g_RX_buf_in = 0;                                                             E:\iro_svn\opensprints\FW\user\user.c
                                               g_RX_buf_out = 0;                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	g_TX_buf_in = 0;                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	g_TX_buf_out = 0;                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// And the USART TX and RX buffer management                                    E:\iro_svn\opensprints\FW\user\user.c
                                           	g_USART_RX_buf_in = 0;                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           	g_USART_RX_buf_out = 0;                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           	g_USART_TX_buf_in = 0;                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           	g_USART_TX_buf_out = 0;                                                         E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Clear out the RC servo output pointer values                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	g_RC_primed_ptr = 0;                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	g_RC_next_ptr = 0;                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	g_RC_timing_ptr = 0;                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Clear the RC data structure                                                  E:\iro_svn\opensprints\FW\user\user.c
                                           	for (i = 0; i < kRC_DATA_SIZE; i++)                                             E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		g_RC_value[i] = 0;                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		g_RC_state[i] = kOFF;                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           */                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	// Enable TMR0 for our RC timing operation                                      E:\iro_svn\opensprints\FW\user\user.c
000bf0   86d5     BSF       0xd5,0x3,0x0   	T0CONbits.PSA = 1;		// Do NOT use the prescaler                                 E:\iro_svn\opensprints\FW\user\user.c
000bf2   9ad5     BCF       0xd5,0x5,0x0   	T0CONbits.T0CS = 0;		// Use internal clock                                      E:\iro_svn\opensprints\FW\user\user.c
000bf4   9cd5     BCF       0xd5,0x6,0x0   	T0CONbits.T08BIT = 0;	// 16 bit timer                                           E:\iro_svn\opensprints\FW\user\user.c
000bf6   94f2     BCF       0xf2,0x2,0x0   	INTCONbits.TMR0IF = 0;	// Clear the interrupt flag                              E:\iro_svn\opensprints\FW\user\user.c
000bf8   9af2     BCF       0xf2,0x5,0x0   	INTCONbits.TMR0IE = 0;	// And clear the interrupt enable                        E:\iro_svn\opensprints\FW\user\user.c
000bfa   94f1     BCF       0xf1,0x2,0x0   	INTCON2bits.TMR0IP = 0;	// Low priority                                         E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                               // Enable interrupt priorities                                               E:\iro_svn\opensprints\FW\user\user.c
000bfc   8ed0     BSF       0xd0,0x7,0x0       RCONbits.IPEN = 1;                                                           E:\iro_svn\opensprints\FW\user\user.c
000bfe   94ca     BCF       0xca,0x2,0x0   	T2CONbits.TMR2ON = 0;                                                           E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
000c00   829d     BSF       0x9d,0x1,0x0       PIE1bits.TMR2IE = 1;                                                         E:\iro_svn\opensprints\FW\user\user.c
000c02   929f     BCF       0x9f,0x1,0x0       IPR1bits.TMR2IP = 0;                                                         E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
000c04   8ef2     BSF       0xf2,0x7,0x0       INTCONbits.GIEH = 1;	// Turn high priority interrupts on                     E:\iro_svn\opensprints\FW\user\user.c
000c06   8cf2     BSF       0xf2,0x6,0x0       INTCONbits.GIEL = 1;	// Turn low priority interrupts on                      E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Turn on the Timer2                                                           E:\iro_svn\opensprints\FW\user\user.c
000c08   84ca     BSF       0xca,0x2,0x0   	T2CONbits.TMR2ON = 1;                                                           E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
000c0a   0012     RETURN    0x0            }//end RaceInit                                                                  E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
000c0c   cfd9     MOVFF     0xfd9,0xfe6    void UserInit(void)                                                              E:\iro_svn\opensprints\FW\user\user.c
000c0e   ffe6                                                                                                               
000c10   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000c12   ffd9                                                                                                               
000c14   0e02     MOVLW     0x2                                                                                             
000c16   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	char i, j;                                                                      E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Make all of 3 digital inputs                                                 E:\iro_svn\opensprints\FW\user\user.c
000c18   6a89     CLRF      0x89,0x0       	LATA = 0x00;                                                                    E:\iro_svn\opensprints\FW\user\user.c
000c1a   6892     SETF      0x92,0x0       	TRISA = 0xFF;                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           	// Turn all analog inputs into digital inputs                                   E:\iro_svn\opensprints\FW\user\user.c
000c1c   0e0f     MOVLW     0xf            	ADCON1 = 0x0F;                                                                  E:\iro_svn\opensprints\FW\user\user.c
000c1e   6ec1     MOVWF     0xc1,0x0                                                                                        
                                           	// Turn off the ADC                                                             E:\iro_svn\opensprints\FW\user\user.c
000c20   90c2     BCF       0xc2,0x0,0x0   	ADCON0bits.ADON = 0;                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Turn off our own idea of how many analog channels to convert                 E:\iro_svn\opensprints\FW\user\user.c
000c22   6a0c     CLRF      0xc,0x0        	AnalogEnable = 0;                                                               E:\iro_svn\opensprints\FW\user\user.c
000c24   0e07     MOVLW     0x7            	CMCON = 0x07;	// Comparators as digital inputs                                  E:\iro_svn\opensprints\FW\user\user.c
000c26   6eb4     MOVWF     0xb4,0x0                                                                                        
                                           	// Make all of PORTB inputs                                                     E:\iro_svn\opensprints\FW\user\user.c
000c28   6a8a     CLRF      0x8a,0x0       	LATB = 0x00;                                                                    E:\iro_svn\opensprints\FW\user\user.c
000c2a   6893     SETF      0x93,0x0       	TRISB = 0xFF;                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           	// Make all of PORTC inputs                                                     E:\iro_svn\opensprints\FW\user\user.c
000c2c   6a8b     CLRF      0x8b,0x0       	LATC = 0x00;                                                                    E:\iro_svn\opensprints\FW\user\user.c
000c2e   6894     SETF      0x94,0x0       	TRISC = 0xFF;                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	// Make all of PORTD and PORTE inputs too                                       E:\iro_svn\opensprints\FW\user\user.c
                                           	LATD = 0x00;                                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           	TRISD = 0xFF;                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           	LATE = 0x00;                                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           	TRISE = 0xFF;                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Initalize LED I/Os to outputs                                                E:\iro_svn\opensprints\FW\user\user.c
000c30   0efc     MOVLW     0xfc               mInitAllLEDs();                                                              E:\iro_svn\opensprints\FW\user\user.c
000c32   168b     ANDWF     0x8b,0x1,0x0                                                                                    
000c34   0efc     MOVLW     0xfc                                                                                            
000c36   1694     ANDWF     0x94,0x1,0x0                                                                                    
                                           	// Initalize switch as an input                                                 E:\iro_svn\opensprints\FW\user\user.c
000c38   8494     BSF       0x94,0x2,0x0       mInitSwitch();                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Start off always using "OK" acknoledge.                                      E:\iro_svn\opensprints\FW\user\user.c
000c3a   0101     MOVLB     0x1            	g_ack_enable = TRUE;                                                            E:\iro_svn\opensprints\FW\user\user.c
000c3c   0e01     MOVLW     0x1                                                                                             
000c3e   6fa6     MOVWF     0xa6,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Use our own special output function for STDOUT                               E:\iro_svn\opensprints\FW\user\user.c
000c40   0101     MOVLB     0x1            	stdout = _H_USER;                                                               E:\iro_svn\opensprints\FW\user\user.c
000c42   69ee     SETF      0xee,0x1                                                                                        
000c44   69ef     SETF      0xef,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Initalize all of the ISR FIFOs                                               E:\iro_svn\opensprints\FW\user\user.c
000c46   6a0a     CLRF      0xa,0x0            ISR_A_FIFO_out = 0;                                                          E:\iro_svn\opensprints\FW\user\user.c
000c48   6a09     CLRF      0x9,0x0            ISR_A_FIFO_in = 0;                                                           E:\iro_svn\opensprints\FW\user\user.c
000c4a   6a0b     CLRF      0xb,0x0            ISR_A_FIFO_length = 0;                                                       E:\iro_svn\opensprints\FW\user\user.c
000c4c   6a05     CLRF      0x5,0x0            ISR_D_FIFO_out = 0;                                                          E:\iro_svn\opensprints\FW\user\user.c
000c4e   6a04     CLRF      0x4,0x0            ISR_D_FIFO_in = 0;                                                           E:\iro_svn\opensprints\FW\user\user.c
000c50   6a06     CLRF      0x6,0x0            ISR_D_FIFO_length = 0;                                                       E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Make sure that our timer stuff starts out disabled                           E:\iro_svn\opensprints\FW\user\user.c
000c52   6a02     CLRF      0x2,0x0        	ISR_D_RepeatRate = 0;                                                           E:\iro_svn\opensprints\FW\user\user.c
000c54   6a03     CLRF      0x3,0x0                                                                                         
000c56   6a07     CLRF      0x7,0x0        	ISR_A_RepeatRate = 0;                                                           E:\iro_svn\opensprints\FW\user\user.c
000c58   6a08     CLRF      0x8,0x0                                                                                         
000c5a   6a11     CLRF      0x11,0x0       	D_tick_counter = 0;                                                             E:\iro_svn\opensprints\FW\user\user.c
000c5c   6a12     CLRF      0x12,0x0                                                                                        
000c5e   6a13     CLRF      0x13,0x0       	A_tick_counter = 0;                                                             E:\iro_svn\opensprints\FW\user\user.c
000c60   6a14     CLRF      0x14,0x0                                                                                        
000c62   6a15     CLRF      0x15,0x0       	A_cur_channel = 0;                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                               // Now init our registers                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           	// The prescaler will be at 16                                                  E:\iro_svn\opensprints\FW\user\user.c
000c64   82ca     BSF       0xca,0x1,0x0       T2CONbits.T2CKPS1 = 1;                                                       E:\iro_svn\opensprints\FW\user\user.c
000c66   80ca     BSF       0xca,0x0,0x0       T2CONbits.T2CKPS0 = 1;                                                       E:\iro_svn\opensprints\FW\user\user.c
                                               // We want the TMR2 post scaler to be a 3                                    E:\iro_svn\opensprints\FW\user\user.c
000c68   9cca     BCF       0xca,0x6,0x0       T2CONbits.T2OUTPS3 = 0;                                                      E:\iro_svn\opensprints\FW\user\user.c
000c6a   9aca     BCF       0xca,0x5,0x0       T2CONbits.T2OUTPS2 = 0;                                                      E:\iro_svn\opensprints\FW\user\user.c
000c6c   88ca     BSF       0xca,0x4,0x0       T2CONbits.T2OUTPS1 = 1;                                                      E:\iro_svn\opensprints\FW\user\user.c
000c6e   96ca     BCF       0xca,0x3,0x0       T2CONbits.T2OUTPS0 = 0;                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           	// Set our reload value                                                         E:\iro_svn\opensprints\FW\user\user.c
000c70   0efa     MOVLW     0xfa           	PR2 = kPR2_RELOAD;                                                              E:\iro_svn\opensprints\FW\user\user.c
000c72   6ecb     MOVWF     0xcb,0x0                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Set up the Analog to Digital converter                                       E:\iro_svn\opensprints\FW\user\user.c
                                           	// Clear out the FIFO data                                                      E:\iro_svn\opensprints\FW\user\user.c
000c74   6adf     CLRF      0xdf,0x0       	for (i = 0; i < 12; i++)                                                        E:\iro_svn\opensprints\FW\user\user.c
000c76   cfdf     MOVFF     0xfdf,0x2a                                                                                      
000c78   f02a                                                                                                               
000c7a   0e0c     MOVLW     0xc                                                                                             
000c7c   6ee7     MOVWF     0xe7,0x0                                                                                        
000c7e   182a     XORWF     0x2a,0x0,0x0                                                                                    
000c80   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000c82   d002     BRA       0xc88                                                                                           
000c84   34e7     RLCF      0xe7,0x0,0x0                                                                                    
000c86   d002     BRA       0xc8c                                                                                           
000c88   50e7     MOVF      0xe7,0x0,0x0                                                                                    
000c8a   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
000c8c   e238     BC        0xcfe                                                                                           
000cfa   2adf     INCF      0xdf,0x1,0x0                                                                                    
000cfc   d7bc     BRA       0xc76                                                                                           
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
000c8e   0e01     MOVLW     0x1            		for (j = 0; j < kISR_FIFO_A_DEPTH; j++)                                        E:\iro_svn\opensprints\FW\user\user.c
000c90   6adb     CLRF      0xdb,0x0                                                                                        
000c92   0e01     MOVLW     0x1                                                                                             
000c94   cfdb     MOVFF     0xfdb,0x2a                                                                                      
000c96   f02a                                                                                                               
000c98   0e03     MOVLW     0x3                                                                                             
000c9a   6ee7     MOVWF     0xe7,0x0                                                                                        
000c9c   182a     XORWF     0x2a,0x0,0x0                                                                                    
000c9e   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000ca0   d002     BRA       0xca6                                                                                           
000ca2   34e7     RLCF      0xe7,0x0,0x0                                                                                    
000ca4   d002     BRA       0xcaa                                                                                           
000ca6   50e7     MOVF      0xe7,0x0,0x0                                                                                    
000ca8   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
000caa   e227     BC        0xcfa                                                                                           
000cf4   0e01     MOVLW     0x1                                                                                             
000cf6   2adb     INCF      0xdb,0x1,0x0                                                                                    
000cf8   d7cc     BRA       0xc92                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
000cac   cfdf     MOVFF     0xfdf,0x2a     			ISR_A_FIFO[i][j] = 0;                                                         E:\iro_svn\opensprints\FW\user\user.c
000cae   f02a                                                                                                               
000cb0   6a2b     CLRF      0x2b,0x0                                                                                        
000cb2   be2a     BTFSC     0x2a,0x7,0x0                                                                                    
000cb4   682b     SETF      0x2b,0x0                                                                                        
000cb6   0e06     MOVLW     0x6                                                                                             
000cb8   022b     MULWF     0x2b,0x0                                                                                        
000cba   cff3     MOVFF     0xff3,0x2b                                                                                      
000cbc   f02b                                                                                                               
000cbe   0e06     MOVLW     0x6                                                                                             
000cc0   022a     MULWF     0x2a,0x0                                                                                        
000cc2   cff3     MOVFF     0xff3,0x2a                                                                                      
000cc4   f02a                                                                                                               
000cc6   50f4     MOVF      0xf4,0x0,0x0                                                                                    
000cc8   262b     ADDWF     0x2b,0x1,0x0                                                                                    
000cca   0e00     MOVLW     0x0                                                                                             
000ccc   262a     ADDWF     0x2a,0x1,0x0                                                                                    
000cce   0e01     MOVLW     0x1                                                                                             
000cd0   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
000cd2   0e01     MOVLW     0x1                                                                                             
000cd4   cfdb     MOVFF     0xfdb,0x2c                                                                                      
000cd6   f02c                                                                                                               
000cd8   6a2d     CLRF      0x2d,0x0                                                                                        
000cda   be2c     BTFSC     0x2c,0x7,0x0                                                                                    
000cdc   682d     SETF      0x2d,0x0                                                                                        
000cde   90d8     BCF       0xd8,0x0,0x0                                                                                    
000ce0   362c     RLCF      0x2c,0x1,0x0                                                                                    
000ce2   362d     RLCF      0x2d,0x1,0x0                                                                                    
000ce4   502a     MOVF      0x2a,0x0,0x0                                                                                    
000ce6   242c     ADDWF     0x2c,0x0,0x0                                                                                    
000ce8   6ee9     MOVWF     0xe9,0x0                                                                                        
000cea   502b     MOVF      0x2b,0x0,0x0                                                                                    
000cec   202d     ADDWFC    0x2d,0x0,0x0                                                                                    
000cee   6eea     MOVWF     0xea,0x0                                                                                        
000cf0   6aee     CLRF      0xee,0x0                                                                                        
000cf2   6aed     CLRF      0xed,0x0                                                                                        
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}	                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                               // Inialize USB TX and RX buffer management                                  E:\iro_svn\opensprints\FW\user\user.c
000cfe   0101     MOVLB     0x1                g_RX_buf_in = 0;                                                             E:\iro_svn\opensprints\FW\user\user.c
000d00   6ba0     CLRF      0xa0,0x1                                                                                        
000d02   0101     MOVLB     0x1                g_RX_buf_out = 0;                                                            E:\iro_svn\opensprints\FW\user\user.c
000d04   6ba1     CLRF      0xa1,0x1                                                                                        
000d06   0101     MOVLB     0x1            	g_TX_buf_in = 0;                                                                E:\iro_svn\opensprints\FW\user\user.c
000d08   6b9e     CLRF      0x9e,0x1                                                                                        
000d0a   0101     MOVLB     0x1            	g_TX_buf_out = 0;                                                               E:\iro_svn\opensprints\FW\user\user.c
000d0c   6b9f     CLRF      0x9f,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// And the USART TX and RX buffer management                                    E:\iro_svn\opensprints\FW\user\user.c
000d0e   0101     MOVLB     0x1            	g_USART_RX_buf_in = 0;                                                          E:\iro_svn\opensprints\FW\user\user.c
000d10   6ba2     CLRF      0xa2,0x1                                                                                        
000d12   0101     MOVLB     0x1            	g_USART_RX_buf_out = 0;                                                         E:\iro_svn\opensprints\FW\user\user.c
000d14   6ba3     CLRF      0xa3,0x1                                                                                        
000d16   0101     MOVLB     0x1            	g_USART_TX_buf_in = 0;                                                          E:\iro_svn\opensprints\FW\user\user.c
000d18   6ba4     CLRF      0xa4,0x1                                                                                        
000d1a   0101     MOVLB     0x1            	g_USART_TX_buf_out = 0;                                                         E:\iro_svn\opensprints\FW\user\user.c
000d1c   6ba5     CLRF      0xa5,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Clear out the RC servo output pointer values                                 E:\iro_svn\opensprints\FW\user\user.c
000d1e   6a0e     CLRF      0xe,0x0        	g_RC_primed_ptr = 0;                                                            E:\iro_svn\opensprints\FW\user\user.c
000d20   6a0f     CLRF      0xf,0x0        	g_RC_next_ptr = 0;                                                              E:\iro_svn\opensprints\FW\user\user.c
000d22   6a10     CLRF      0x10,0x0       	g_RC_timing_ptr = 0;                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Clear the RC data structure                                                  E:\iro_svn\opensprints\FW\user\user.c
000d24   6adf     CLRF      0xdf,0x0       	for (i = 0; i < kRC_DATA_SIZE; i++)                                             E:\iro_svn\opensprints\FW\user\user.c
000d26   cfdf     MOVFF     0xfdf,0x2a                                                                                      
000d28   f02a                                                                                                               
000d2a   0e18     MOVLW     0x18                                                                                            
000d2c   6ee7     MOVWF     0xe7,0x0                                                                                        
000d2e   182a     XORWF     0x2a,0x0,0x0                                                                                    
000d30   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000d32   d002     BRA       0xd38                                                                                           
000d34   34e7     RLCF      0xe7,0x0,0x0                                                                                    
000d36   d002     BRA       0xd3c                                                                                           
000d38   50e7     MOVF      0xe7,0x0,0x0                                                                                    
000d3a   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
000d3c   e21b     BC        0xd74                                                                                           
000d70   2adf     INCF      0xdf,0x1,0x0                                                                                    
000d72   d7d9     BRA       0xd26                                                                                           
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
000d3e   cfdf     MOVFF     0xfdf,0xfe9    		g_RC_value[i] = 0;                                                             E:\iro_svn\opensprints\FW\user\user.c
000d40   ffe9                                                                                                               
000d42   6aea     CLRF      0xea,0x0                                                                                        
000d44   bee9     BTFSC     0xe9,0x7,0x0                                                                                    
000d46   68ea     SETF      0xea,0x0                                                                                        
000d48   90d8     BCF       0xd8,0x0,0x0                                                                                    
000d4a   36e9     RLCF      0xe9,0x1,0x0                                                                                    
000d4c   36ea     RLCF      0xea,0x1,0x0                                                                                    
000d4e   0e69     MOVLW     0x69                                                                                            
000d50   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000d52   0e01     MOVLW     0x1                                                                                             
000d54   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000d56   6aee     CLRF      0xee,0x0                                                                                        
000d58   6aed     CLRF      0xed,0x0                                                                                        
000d5a   cfdf     MOVFF     0xfdf,0xfe9    		g_RC_state[i] = kOFF;                                                          E:\iro_svn\opensprints\FW\user\user.c
000d5c   ffe9                                                                                                               
000d5e   6aea     CLRF      0xea,0x0                                                                                        
000d60   bee9     BTFSC     0xe9,0x7,0x0                                                                                    
000d62   68ea     SETF      0xea,0x0                                                                                        
000d64   0e51     MOVLW     0x51                                                                                            
000d66   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000d68   0e01     MOVLW     0x1                                                                                             
000d6a   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000d6c   0e01     MOVLW     0x1                                                                                             
000d6e   6eef     MOVWF     0xef,0x0                                                                                        
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Enable TMR0 for our RC timing operation                                      E:\iro_svn\opensprints\FW\user\user.c
000d74   86d5     BSF       0xd5,0x3,0x0   	T0CONbits.PSA = 1;		// Do NOT use the prescaler                                 E:\iro_svn\opensprints\FW\user\user.c
000d76   9ad5     BCF       0xd5,0x5,0x0   	T0CONbits.T0CS = 0;		// Use internal clock                                      E:\iro_svn\opensprints\FW\user\user.c
000d78   9cd5     BCF       0xd5,0x6,0x0   	T0CONbits.T08BIT = 0;	// 16 bit timer                                           E:\iro_svn\opensprints\FW\user\user.c
000d7a   94f2     BCF       0xf2,0x2,0x0   	INTCONbits.TMR0IF = 0;	// Clear the interrupt flag                              E:\iro_svn\opensprints\FW\user\user.c
000d7c   9af2     BCF       0xf2,0x5,0x0   	INTCONbits.TMR0IE = 0;	// And clear the interrupt enable                        E:\iro_svn\opensprints\FW\user\user.c
000d7e   94f1     BCF       0xf1,0x2,0x0   	INTCON2bits.TMR0IP = 0;	// Low priority                                         E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                               // Enable interrupt priorities                                               E:\iro_svn\opensprints\FW\user\user.c
000d80   8ed0     BSF       0xd0,0x7,0x0       RCONbits.IPEN = 1;                                                           E:\iro_svn\opensprints\FW\user\user.c
000d82   94ca     BCF       0xca,0x2,0x0   	T2CONbits.TMR2ON = 0;                                                           E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
000d84   829d     BSF       0x9d,0x1,0x0       PIE1bits.TMR2IE = 1;                                                         E:\iro_svn\opensprints\FW\user\user.c
000d86   929f     BCF       0x9f,0x1,0x0       IPR1bits.TMR2IP = 0;                                                         E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
000d88   8ef2     BSF       0xf2,0x7,0x0       INTCONbits.GIEH = 1;	// Turn high priority interrupts on                     E:\iro_svn\opensprints\FW\user\user.c
000d8a   8cf2     BSF       0xf2,0x6,0x0       INTCONbits.GIEL = 1;	// Turn low priority interrupts on                      E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Turn on the Timer2                                                           E:\iro_svn\opensprints\FW\user\user.c
000d8c   84ca     BSF       0xca,0x2,0x0   	T2CONbits.TMR2ON = 1;                                                           E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
000d8e   0e02     MOVLW     0x2            }//end UserInit                                                                  E:\iro_svn\opensprints\FW\user\user.c
000d90   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
000d92   e202     BC        0xd98                                                                                           
000d94   6ae1     CLRF      0xe1,0x0                                                                                        
000d96   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000d98   6ee1     MOVWF     0xe1,0x0                                                                                        
000d9a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000d9c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000d9e   ffd9                                                                                                               
000da0   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\user\user.c
                                            * Function:        void ProcessIO(void)                                         E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * Overview:        In this function, we check for a new packet that just        E:\iro_svn\opensprints\FW\user\user.c
                                            * 					arrived via USB. We do a few checks on the packet to see                 E:\iro_svn\opensprints\FW\user\user.c
                                            *					if it is worthy of us trying to interpret it. If it is,                   E:\iro_svn\opensprints\FW\user\user.c
                                            *					we go and call the proper function based upon the first                   E:\iro_svn\opensprints\FW\user\user.c
                                            *					character of the packet.                                                  E:\iro_svn\opensprints\FW\user\user.c
                                            *					NOTE: We need to see everything in one packet (i.e. we                    E:\iro_svn\opensprints\FW\user\user.c
                                            *					won't treat the USB data as a stream and try to find our                  E:\iro_svn\opensprints\FW\user\user.c
                                            *					start and end of packets within the stream. We just look                  E:\iro_svn\opensprints\FW\user\user.c
                                            *					at the first character of each packet for a command and                   E:\iro_svn\opensprints\FW\user\user.c
                                            * 					check that there's a CR as the last character of the                     E:\iro_svn\opensprints\FW\user\user.c
                                            *					packet.                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\user\user.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\user\user.c
000da2   cfd9     MOVFF     0xfd9,0xfe6    void ProcessIO(void)                                                             E:\iro_svn\opensprints\FW\user\user.c
000da4   ffe6                                                                                                               
000da6   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000da8   ffd9                                                                                                               
000daa   0e02     MOVLW     0x2                                                                                             
000dac   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	static BOOL in_cr = FALSE;                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           	static byte last_fifo_size;                                                     E:\iro_svn\opensprints\FW\user\user.c
                                               unsigned char tst_char;                                                      E:\iro_svn\opensprints\FW\user\user.c
000dae   0e01     MOVLW     0x1            	BOOL	got_full_packet = FALSE;                                                   E:\iro_svn\opensprints\FW\user\user.c
000db0   6adb     CLRF      0xdb,0x0                                                                                        
000db2   0101     MOVLB     0x1            	cdc_rx_len = 0;                                                                 E:\iro_svn\opensprints\FW\user\user.c
000db4   6bb4     CLRF      0xb4,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
000db6   ec70     CALL      0x26e0,0x0     	BlinkUSBStatus();                                                               E:\iro_svn\opensprints\FW\user\user.c
000db8   f013                                                                                                               
000dba   ece3     CALL      0x27c6,0x0     	HallEffSensors();	// Function by Luke Orland in user.c                          E:\iro_svn\opensprints\FW\user\user.c
000dbc   f013                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                               // User Application USB tasks                                                E:\iro_svn\opensprints\FW\user\user.c
000dbe   0e06     MOVLW     0x6                if((usb_device_state < CONFIGURED_STATE) || (UCONbits.SUSPND == 1))          E:\iro_svn\opensprints\FW\user\user.c
000dc0   0101     MOVLB     0x1                                                                                             
000dc2   5de8     SUBWF     0xe8,0x0,0x1                                                                                    
000dc4   e303     BNC       0xdcc                                                                                           
000dc6   506d     MOVF      0x6d,0x0,0x0                                                                                    
000dc8   0b02     ANDLW     0x2                                                                                             
000dca   e001     BZ        0xdce                                                                                           
                                           	{	                                                                              E:\iro_svn\opensprints\FW\user\user.c
000dcc   d101     BRA       0xfd0          		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for any new I packets (from T command) ready to go out                 E:\iro_svn\opensprints\FW\user\user.c
000dce   5006     MOVF      0x6,0x0,0x0    	while (ISR_D_FIFO_length > 0)                                                   E:\iro_svn\opensprints\FW\user\user.c
000dd0   0800     SUBLW     0x0                                                                                             
000dd2   e207     BC        0xde2                                                                                           
000de0   d7f6     BRA       0xdce                                                                                           
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// Spit out an I packet first                                                  E:\iro_svn\opensprints\FW\user\user.c
                                           //		parse_I_packet ();					// Temp commmented out by Luke                        E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		// Then upate our I packet fifo stuff                                          E:\iro_svn\opensprints\FW\user\user.c
000dd4   2a05     INCF      0x5,0x1,0x0    		ISR_D_FIFO_out++;                                                              E:\iro_svn\opensprints\FW\user\user.c
000dd6   0e03     MOVLW     0x3            		if (ISR_D_FIFO_out == kISR_FIFO_D_DEPTH)                                       E:\iro_svn\opensprints\FW\user\user.c
000dd8   5c05     SUBWF     0x5,0x0,0x0                                                                                     
000dda   e101     BNZ       0xdde                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
000ddc   6a05     CLRF      0x5,0x0        			ISR_D_FIFO_out = 0;                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
000dde   0606     DECF      0x6,0x1,0x0    		ISR_D_FIFO_length--;                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           	}			                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for a new A packet (from T command) ready to go out                    E:\iro_svn\opensprints\FW\user\user.c
000de2   500b     MOVF      0xb,0x0,0x0    	while (ISR_A_FIFO_length > 0)                                                   E:\iro_svn\opensprints\FW\user\user.c
000de4   0800     SUBLW     0x0                                                                                             
000de6   e207     BC        0xdf6                                                                                           
000df4   d7f6     BRA       0xde2                                                                                           
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// Spit out an A packet first                                                  E:\iro_svn\opensprints\FW\user\user.c
                                           //		parse_A_packet ();					// Temp commmented out by Luke                        E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		// Then update our A packet fifo stuff                                         E:\iro_svn\opensprints\FW\user\user.c
000de8   2a0a     INCF      0xa,0x1,0x0    		ISR_A_FIFO_out++;                                                              E:\iro_svn\opensprints\FW\user\user.c
000dea   0e03     MOVLW     0x3            		if (ISR_A_FIFO_out == kISR_FIFO_A_DEPTH)                                       E:\iro_svn\opensprints\FW\user\user.c
000dec   5c0a     SUBWF     0xa,0x0,0x0                                                                                     
000dee   e101     BNZ       0xdf2                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
000df0   6a0a     CLRF      0xa,0x0        			ISR_A_FIFO_out = 0;                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
000df2   060b     DECF      0xb,0x1,0x0    		ISR_A_FIFO_length--;                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           	}			                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Pull in some new data if there is new data to pull in                        E:\iro_svn\opensprints\FW\user\user.c
000df6   0104     MOVLB     0x4            	if(!mCDCUsartRxIsBusy())                                                        E:\iro_svn\opensprints\FW\user\user.c
000df8   bf18     BTFSC     0x18,0x7,0x1                                                                                    
000dfa   d065     BRA       0xec6                                                                                           
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// Copy data from dual-ram buffer to user's buffer                             E:\iro_svn\opensprints\FW\user\user.c
000dfc   0101     MOVLB     0x1            		for(cdc_rx_len = 0; cdc_rx_len < CDC_BULK_BD_OUT.Cnt; cdc_rx_len++)            E:\iro_svn\opensprints\FW\user\user.c
000dfe   6bb4     CLRF      0xb4,0x1                                                                                        
000e00   0104     MOVLB     0x4                                                                                             
000e02   5119     MOVF      0x19,0x0,0x1                                                                                    
000e04   0101     MOVLB     0x1                                                                                             
000e06   5db4     SUBWF     0xb4,0x0,0x1                                                                                    
000e08   e253     BC        0xeb0                                                                                           
000eaa   0101     MOVLB     0x1                                                                                             
000eac   2bb4     INCF      0xb4,0x1,0x1                                                                                    
000eae   d7a8     BRA       0xe00                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Check to see if we are in a CR/LF situation                                E:\iro_svn\opensprints\FW\user\user.c
000e0a   0101     MOVLB     0x1            			tst_char = cdc_data_rx[cdc_rx_len];                                           E:\iro_svn\opensprints\FW\user\user.c
000e0c   51b4     MOVF      0xb4,0x0,0x1                                                                                    
000e0e   6aea     CLRF      0xea,0x0                                                                                        
000e10   0f08     ADDLW     0x8                                                                                             
000e12   6ee9     MOVWF     0xe9,0x0                                                                                        
000e14   0e05     MOVLW     0x5                                                                                             
000e16   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000e18   cfef     MOVFF     0xfef,0xfdf                                                                                     
000e1a   ffdf                                                                                                               
                                           			if (                                                                          E:\iro_svn\opensprints\FW\user\user.c
000e1c   0101     MOVLB     0x1            				!in_cr                                                                       E:\iro_svn\opensprints\FW\user\user.c
000e1e   51d7     MOVF      0xd7,0x0,0x1                                                                                    
                                           				&&                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           				(                                                                            E:\iro_svn\opensprints\FW\user\user.c
000e22   0e0d     MOVLW     0xd            					kCR == tst_char                                                             E:\iro_svn\opensprints\FW\user\user.c
000e24   6e2a     MOVWF     0x2a,0x0                                                                                        
000e26   50df     MOVF      0xdf,0x0,0x0                                                                                    
000e28   5c2a     SUBWF     0x2a,0x0,0x0   					||                                                                          E:\iro_svn\opensprints\FW\user\user.c
000e2c   0e0a     MOVLW     0xa            					kLF == tst_char                                                             E:\iro_svn\opensprints\FW\user\user.c
000e2e   6e2b     MOVWF     0x2b,0x0                                                                                        
000e30   50df     MOVF      0xdf,0x0,0x0                                                                                    
000e2a   e005     BZ        0xe36          				)                                                                            E:\iro_svn\opensprints\FW\user\user.c
000e32   5c2b     SUBWF     0x2b,0x0,0x0                                                                                    
000e34   e112     BNZ       0xe5a                                                                                           
000e20   e11c     BNZ       0xe5a          			)                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
000e36   0101     MOVLB     0x1            				in_cr = TRUE;                                                                E:\iro_svn\opensprints\FW\user\user.c
000e38   0e01     MOVLW     0x1                                                                                             
000e3a   6fd7     MOVWF     0xd7,0x1                                                                                        
000e3c   0101     MOVLB     0x1            				g_RX_buf[g_RX_buf_in] = kCR;                                                 E:\iro_svn\opensprints\FW\user\user.c
000e3e   51a0     MOVF      0xa0,0x0,0x1                                                                                    
000e40   6aea     CLRF      0xea,0x0                                                                                        
000e42   0f40     ADDLW     0x40                                                                                            
000e44   6ee9     MOVWF     0xe9,0x0                                                                                        
000e46   0e02     MOVLW     0x2                                                                                             
000e48   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000e4a   0e0d     MOVLW     0xd                                                                                             
000e4c   6eef     MOVWF     0xef,0x0                                                                                        
000e4e   0101     MOVLB     0x1            				g_RX_buf_in++;                                                               E:\iro_svn\opensprints\FW\user\user.c
000e50   2ba0     INCF      0xa0,0x1,0x1                                                                                    
                                           			                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           				// At this point, we know we have a full packet                              E:\iro_svn\opensprints\FW\user\user.c
                                           				// of information from the PC to parse                                       E:\iro_svn\opensprints\FW\user\user.c
000e52   52de     MOVF      0xde,0x1,0x0   				got_full_packet = TRUE;                                                      E:\iro_svn\opensprints\FW\user\user.c
000e54   0e01     MOVLW     0x1                                                                                             
000e56   6edd     MOVWF     0xdd,0x0                                                                                        
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
000e58   d015     BRA       0xe84          			else if (                                                                     E:\iro_svn\opensprints\FW\user\user.c
000e5a   0e0d     MOVLW     0xd            				tst_char != kCR                                                              E:\iro_svn\opensprints\FW\user\user.c
000e5c   5cdf     SUBWF     0xdf,0x0,0x0   				&&                                                                           E:\iro_svn\opensprints\FW\user\user.c
000e60   0e0a     MOVLW     0xa            				tst_char != kLF                                                              E:\iro_svn\opensprints\FW\user\user.c
000e5e   e011     BZ        0xe82          			)                                                                             E:\iro_svn\opensprints\FW\user\user.c
000e62   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
000e64   e00e     BZ        0xe82                                                                                           
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           				// Only add a byte if it is not a CR or LF                                   E:\iro_svn\opensprints\FW\user\user.c
000e66   0101     MOVLB     0x1            				g_RX_buf[g_RX_buf_in] = tst_char;                                            E:\iro_svn\opensprints\FW\user\user.c
000e68   51a0     MOVF      0xa0,0x0,0x1                                                                                    
000e6a   6aea     CLRF      0xea,0x0                                                                                        
000e6c   0f40     ADDLW     0x40                                                                                            
000e6e   6ee9     MOVWF     0xe9,0x0                                                                                        
000e70   0e02     MOVLW     0x2                                                                                             
000e72   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000e74   cfdf     MOVFF     0xfdf,0xfef                                                                                     
000e76   ffef                                                                                                               
000e78   0101     MOVLB     0x1            				in_cr = FALSE;                                                               E:\iro_svn\opensprints\FW\user\user.c
000e7a   6bd7     CLRF      0xd7,0x1                                                                                        
000e7c   0101     MOVLB     0x1            				g_RX_buf_in++;                                                               E:\iro_svn\opensprints\FW\user\user.c
000e7e   2ba0     INCF      0xa0,0x1,0x1                                                                                    
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
000e80   d001     BRA       0xe84          			else                                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
000e82   d013     BRA       0xeaa          				continue;                                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           			// Check for buffer wraparound                                                E:\iro_svn\opensprints\FW\user\user.c
000e84   0e40     MOVLW     0x40           			if (kRX_BUF_SIZE == g_RX_buf_in)                                              E:\iro_svn\opensprints\FW\user\user.c
000e86   0101     MOVLB     0x1                                                                                             
000e88   5da0     SUBWF     0xa0,0x0,0x1                                                                                    
000e8a   e102     BNZ       0xe90                                                                                           
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
000e8c   0101     MOVLB     0x1            				g_RX_buf_in = 0;                                                             E:\iro_svn\opensprints\FW\user\user.c
000e8e   6ba0     CLRF      0xa0,0x1                                                                                        
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           			// If we hit the out pointer, then this is bad.                               E:\iro_svn\opensprints\FW\user\user.c
000e90   0101     MOVLB     0x1            			if (g_RX_buf_in == g_RX_buf_out)                                              E:\iro_svn\opensprints\FW\user\user.c
000e92   51a1     MOVF      0xa1,0x0,0x1                                                                                    
000e94   0101     MOVLB     0x1                                                                                             
000e96   5da0     SUBWF     0xa0,0x0,0x1                                                                                    
000e98   e102     BNZ       0xe9e                                                                                           
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
000e9a   860d     BSF       0xd,0x3,0x0    				bitset (error_byte, kERROR_BYTE_RX_BUFFER_OVERRUN);                          E:\iro_svn\opensprints\FW\user\user.c
000e9c   d009     BRA       0xeb0          				break;                                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           			// Now, if we've gotten a full command (user send <CR>) then                  E:\iro_svn\opensprints\FW\user\user.c
                                           			// go call the code that deals with that command, and then                    E:\iro_svn\opensprints\FW\user\user.c
                                           			// keep parsing. (This allows multiple small commands per packet)             E:\iro_svn\opensprints\FW\user\user.c
000e9e   0e01     MOVLW     0x1            			if (got_full_packet)                                                          E:\iro_svn\opensprints\FW\user\user.c
000ea0   50db     MOVF      0xdb,0x0,0x0                                                                                    
000ea2   e003     BZ        0xeaa                                                                                           
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
000ea4   d915     RCALL     0x10d0         				parse_packet ();                                                             E:\iro_svn\opensprints\FW\user\user.c
000ea6   0e01     MOVLW     0x1            				got_full_packet = FALSE;                                                     E:\iro_svn\opensprints\FW\user\user.c
000ea8   6adb     CLRF      0xdb,0x0                                                                                        
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		}		                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		// Prepare dual-ram buffer for next OUT transaction                            E:\iro_svn\opensprints\FW\user\user.c
000eb0   0104     MOVLB     0x4            		CDC_BULK_BD_OUT.Cnt = sizeof(cdc_data_rx);                                     E:\iro_svn\opensprints\FW\user\user.c
000eb2   0e40     MOVLW     0x40                                                                                            
000eb4   6f19     MOVWF     0x19,0x1                                                                                        
000eb6   0e40     MOVLW     0x40           		mUSBBufferReady(CDC_BULK_BD_OUT);                                              E:\iro_svn\opensprints\FW\user\user.c
000eb8   0104     MOVLB     0x4                                                                                             
000eba   1718     ANDWF     0x18,0x1,0x1                                                                                    
000ebc   0104     MOVLB     0x4                                                                                             
000ebe   7d18     BTG       0x18,0x6,0x1                                                                                    
000ec0   0e88     MOVLW     0x88                                                                                            
000ec2   0104     MOVLB     0x4                                                                                             
000ec4   1318     IORWF     0x18,0x1,0x1                                                                                    
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for any errors logged in error_byte that need to be sent out           E:\iro_svn\opensprints\FW\user\user.c
000ec6   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iro_svn\opensprints\FW\user\user.c
000ec8   e101     BNZ       0xecc                                                                                           
000eca   d081     BRA       0xfce                                                                                           
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
000ecc   a00d     BTFSS     0xd,0x0,0x0    		if (bittst (error_byte, 0))                                                    E:\iro_svn\opensprints\FW\user\user.c
000ece   d010     BRA       0xef0                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Unused as of yet                                                           E:\iro_svn\opensprints\FW\user\user.c
000ed0   0e77     MOVLW     0x77           			printf ((rom char *)"!0 \r\n");                                               E:\iro_svn\opensprints\FW\user\user.c
000ed2   6e2a     MOVWF     0x2a,0x0                                                                                        
000ed4   0e42     MOVLW     0x42                                                                                            
000ed6   6e2b     MOVWF     0x2b,0x0                                                                                        
000ed8   6a2c     CLRF      0x2c,0x0                                                                                        
000eda   c02a     MOVFF     0x2a,0xfe6                                                                                      
000edc   ffe6                                                                                                               
000ede   c02b     MOVFF     0x2b,0xfe6                                                                                      
000ee0   ffe6                                                                                                               
000ee2   c02c     MOVFF     0x2c,0xfe6                                                                                      
000ee4   ffe6                                                                                                               
000ee6   ec6b     CALL      0x44d6,0x0                                                                                      
000ee8   f022                                                                                                               
000eea   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000eec   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000eee   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
000ef0   a20d     BTFSS     0xd,0x1,0x0    		if (bittst (error_byte, 1))                                                    E:\iro_svn\opensprints\FW\user\user.c
000ef2   d010     BRA       0xf14                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Unused as of yet                                                           E:\iro_svn\opensprints\FW\user\user.c
000ef4   0e71     MOVLW     0x71           			printf ((rom char *)"!1 \r\n");                                               E:\iro_svn\opensprints\FW\user\user.c
000ef6   6e2a     MOVWF     0x2a,0x0                                                                                        
000ef8   0e42     MOVLW     0x42                                                                                            
000efa   6e2b     MOVWF     0x2b,0x0                                                                                        
000efc   6a2c     CLRF      0x2c,0x0                                                                                        
000efe   c02a     MOVFF     0x2a,0xfe6                                                                                      
000f00   ffe6                                                                                                               
000f02   c02b     MOVFF     0x2b,0xfe6                                                                                      
000f04   ffe6                                                                                                               
000f06   c02c     MOVFF     0x2c,0xfe6                                                                                      
000f08   ffe6                                                                                                               
000f0a   ec6b     CALL      0x44d6,0x0                                                                                      
000f0c   f022                                                                                                               
000f0e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f10   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f12   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
000f14   a40d     BTFSS     0xd,0x2,0x0    		if (bittst (error_byte, kERROR_BYTE_TX_BUF_OVERRUN))                           E:\iro_svn\opensprints\FW\user\user.c
000f16   d010     BRA       0xf38                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
000f18   0e55     MOVLW     0x55           			printf ((rom char *)"!2 Err: TX Buffer overrun\r\n");                         E:\iro_svn\opensprints\FW\user\user.c
000f1a   6e2a     MOVWF     0x2a,0x0                                                                                        
000f1c   0e42     MOVLW     0x42                                                                                            
000f1e   6e2b     MOVWF     0x2b,0x0                                                                                        
000f20   6a2c     CLRF      0x2c,0x0                                                                                        
000f22   c02a     MOVFF     0x2a,0xfe6                                                                                      
000f24   ffe6                                                                                                               
000f26   c02b     MOVFF     0x2b,0xfe6                                                                                      
000f28   ffe6                                                                                                               
000f2a   c02c     MOVFF     0x2c,0xfe6                                                                                      
000f2c   ffe6                                                                                                               
000f2e   ec6b     CALL      0x44d6,0x0                                                                                      
000f30   f022                                                                                                               
000f32   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f34   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f36   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
000f38   a60d     BTFSS     0xd,0x3,0x0    		if (bittst (error_byte, kERROR_BYTE_RX_BUFFER_OVERRUN))                        E:\iro_svn\opensprints\FW\user\user.c
000f3a   d010     BRA       0xf5c                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
000f3c   0e39     MOVLW     0x39           			printf ((rom char *)"!3 Err: RX Buffer overrun\r\n");                         E:\iro_svn\opensprints\FW\user\user.c
000f3e   6e2a     MOVWF     0x2a,0x0                                                                                        
000f40   0e42     MOVLW     0x42                                                                                            
000f42   6e2b     MOVWF     0x2b,0x0                                                                                        
000f44   6a2c     CLRF      0x2c,0x0                                                                                        
000f46   c02a     MOVFF     0x2a,0xfe6                                                                                      
000f48   ffe6                                                                                                               
000f4a   c02b     MOVFF     0x2b,0xfe6                                                                                      
000f4c   ffe6                                                                                                               
000f4e   c02c     MOVFF     0x2c,0xfe6                                                                                      
000f50   ffe6                                                                                                               
000f52   ec6b     CALL      0x44d6,0x0                                                                                      
000f54   f022                                                                                                               
000f56   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f58   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f5a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
000f5c   a80d     BTFSS     0xd,0x4,0x0    		if (bittst (error_byte, kERROR_BYTE_MISSING_PARAMETER))                        E:\iro_svn\opensprints\FW\user\user.c
000f5e   d010     BRA       0xf80                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
000f60   0e1a     MOVLW     0x1a           			printf ((rom char *)"!4 Err: Missing parameter(s)\r\n");                      E:\iro_svn\opensprints\FW\user\user.c
000f62   6e2a     MOVWF     0x2a,0x0                                                                                        
000f64   0e42     MOVLW     0x42                                                                                            
000f66   6e2b     MOVWF     0x2b,0x0                                                                                        
000f68   6a2c     CLRF      0x2c,0x0                                                                                        
000f6a   c02a     MOVFF     0x2a,0xfe6                                                                                      
000f6c   ffe6                                                                                                               
000f6e   c02b     MOVFF     0x2b,0xfe6                                                                                      
000f70   ffe6                                                                                                               
000f72   c02c     MOVFF     0x2c,0xfe6                                                                                      
000f74   ffe6                                                                                                               
000f76   ec6b     CALL      0x44d6,0x0                                                                                      
000f78   f022                                                                                                               
000f7a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f7c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f7e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
000f80   aa0d     BTFSS     0xd,0x5,0x0    		if (bittst (error_byte, kERROR_BYTE_PRINTED_ERROR))                            E:\iro_svn\opensprints\FW\user\user.c
000f82   d000     BRA       0xf84                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// We don't need to do anything since something has already been printed out  E:\iro_svn\opensprints\FW\user\user.c
                                           			//printf ((rom char *)"!5\r\n");                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
000f84   ac0d     BTFSS     0xd,0x6,0x0    		if (bittst (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT))                  E:\iro_svn\opensprints\FW\user\user.c
000f86   d010     BRA       0xfa8                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
000f88   0ef9     MOVLW     0xf9           			printf ((rom char *)"!6 Err: Invalid paramter value\r\n");                    E:\iro_svn\opensprints\FW\user\user.c
000f8a   6e2a     MOVWF     0x2a,0x0                                                                                        
000f8c   0e41     MOVLW     0x41                                                                                            
000f8e   6e2b     MOVWF     0x2b,0x0                                                                                        
000f90   6a2c     CLRF      0x2c,0x0                                                                                        
000f92   c02a     MOVFF     0x2a,0xfe6                                                                                      
000f94   ffe6                                                                                                               
000f96   c02b     MOVFF     0x2b,0xfe6                                                                                      
000f98   ffe6                                                                                                               
000f9a   c02c     MOVFF     0x2c,0xfe6                                                                                      
000f9c   ffe6                                                                                                               
000f9e   ec6b     CALL      0x44d6,0x0                                                                                      
000fa0   f022                                                                                                               
000fa2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000fa4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000fa6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
000fa8   ae0d     BTFSS     0xd,0x7,0x0    		if (bittst (error_byte, kERROR_BYTE_EXTRA_CHARACTERS))                         E:\iro_svn\opensprints\FW\user\user.c
000faa   d010     BRA       0xfcc                                                                                           
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
000fac   0ee0     MOVLW     0xe0           			printf ((rom char *)"!7 Err: Extra parmater\r\n");                            E:\iro_svn\opensprints\FW\user\user.c
000fae   6e2a     MOVWF     0x2a,0x0                                                                                        
000fb0   0e41     MOVLW     0x41                                                                                            
000fb2   6e2b     MOVWF     0x2b,0x0                                                                                        
000fb4   6a2c     CLRF      0x2c,0x0                                                                                        
000fb6   c02a     MOVFF     0x2a,0xfe6                                                                                      
000fb8   ffe6                                                                                                               
000fba   c02b     MOVFF     0x2b,0xfe6                                                                                      
000fbc   ffe6                                                                                                               
000fbe   c02c     MOVFF     0x2c,0xfe6                                                                                      
000fc0   ffe6                                                                                                               
000fc2   ec6b     CALL      0x44d6,0x0                                                                                      
000fc4   f022                                                                                                               
000fc6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000fc8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000fca   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
000fcc   6a0d     CLRF      0xd,0x0        		error_byte = 0;                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Go send any data that needs sending to PC                                    E:\iro_svn\opensprints\FW\user\user.c
000fce   d835     RCALL     0x103a         	check_and_send_TX_data ();                                                      E:\iro_svn\opensprints\FW\user\user.c
000fd0   0e02     MOVLW     0x2            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
000fd2   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
000fd4   e202     BC        0xfda                                                                                           
000fd6   6ae1     CLRF      0xe1,0x0                                                                                        
000fd8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000fda   6ee1     MOVWF     0xe1,0x0                                                                                        
000fdc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000fde   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000fe0   ffd9                                                                                                               
000fe2   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // This is our replacement for the standard putc routine                         E:\iro_svn\opensprints\FW\user\user.c
                                           // This enables printf() and all related functions to print to                   E:\iro_svn\opensprints\FW\user\user.c
                                           // the UBS output (i.e. to the PC) buffer                                        E:\iro_svn\opensprints\FW\user\user.c
000fe4   cfd9     MOVFF     0xfd9,0xfe6    int _user_putc (char c)                                                          E:\iro_svn\opensprints\FW\user\user.c
000fe6   ffe6                                                                                                               
000fe8   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000fea   ffd9                                                                                                               
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	// Copy the character into the output buffer                                    E:\iro_svn\opensprints\FW\user\user.c
000fec   0101     MOVLB     0x1            	g_TX_buf[g_TX_buf_in] = c;                                                      E:\iro_svn\opensprints\FW\user\user.c
000fee   519e     MOVF      0x9e,0x0,0x1                                                                                    
000ff0   6aea     CLRF      0xea,0x0                                                                                        
000ff2   0f00     ADDLW     0x0                                                                                             
000ff4   6ee9     MOVWF     0xe9,0x0                                                                                        
000ff6   0e02     MOVLW     0x2                                                                                             
000ff8   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000ffa   0efe     MOVLW     0xfe                                                                                            
000ffc   cfdb     MOVFF     0xfdb,0xfef                                                                                     
000ffe   ffef                                                                                                               
001000   0101     MOVLB     0x1            	g_TX_buf_in++;                                                                  E:\iro_svn\opensprints\FW\user\user.c
001002   2b9e     INCF      0x9e,0x1,0x1                                                                                    
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for wrap around                                                        E:\iro_svn\opensprints\FW\user\user.c
001004   0e40     MOVLW     0x40           	if (kTX_BUF_SIZE == g_TX_buf_in)                                                E:\iro_svn\opensprints\FW\user\user.c
001006   0101     MOVLB     0x1                                                                                             
001008   5d9e     SUBWF     0x9e,0x0,0x1                                                                                    
00100a   e102     BNZ       0x1010                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
00100c   0101     MOVLB     0x1            		g_TX_buf_in = 0;                                                               E:\iro_svn\opensprints\FW\user\user.c
00100e   6b9e     CLRF      0x9e,0x1                                                                                        
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	// Also check to see if we bumpted up against our output pointer                E:\iro_svn\opensprints\FW\user\user.c
001010   0101     MOVLB     0x1            	if (g_TX_buf_in == g_TX_buf_out)                                                E:\iro_svn\opensprints\FW\user\user.c
001012   519f     MOVF      0x9f,0x0,0x1                                                                                    
001014   0101     MOVLB     0x1                                                                                             
001016   5d9e     SUBWF     0x9e,0x0,0x1                                                                                    
001018   e101     BNZ       0x101c                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
00101a   840d     BSF       0xd,0x2,0x0    		bitset (error_byte, kERROR_BYTE_TX_BUF_OVERRUN);                               E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
00101c   0efe     MOVLW     0xfe           	return (c);                                                                     E:\iro_svn\opensprints\FW\user\user.c
00101e   cfdb     MOVFF     0xfdb,0x2a                                                                                      
001020   f02a                                                                                                               
001022   6a2b     CLRF      0x2b,0x0                                                                                        
001024   be2a     BTFSC     0x2a,0x7,0x0                                                                                    
001026   682b     SETF      0x2b,0x0                                                                                        
001028   c02a     MOVFF     0x2a,0xff3                                                                                      
00102a   fff3                                                                                                               
00102c   c02b     MOVFF     0x2b,0xff4                                                                                      
00102e   fff4                                                                                                               
001030   d000     BRA       0x1032                                                                                          
001032   52e5     MOVF      0xe5,0x1,0x0   }                                                                                E:\iro_svn\opensprints\FW\user\user.c
001034   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001036   ffd9                                                                                                               
001038   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // In this function, we check to see it is OK to transmit. If so                 E:\iro_svn\opensprints\FW\user\user.c
                                           // we see if there is any data to transmit to PC. If so, we schedule             E:\iro_svn\opensprints\FW\user\user.c
                                           // it for sending.                                                               E:\iro_svn\opensprints\FW\user\user.c
00103a   cfd9     MOVFF     0xfd9,0xfe6    void check_and_send_TX_data (void)                                               E:\iro_svn\opensprints\FW\user\user.c
00103c   ffe6                                                                                                               
00103e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001040   ffd9                                                                                                               
001042   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	char temp;                                                                      E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Only send if we're not already sending something                             E:\iro_svn\opensprints\FW\user\user.c
001044   0101     MOVLB     0x1            	if (mUSBUSARTIsTxTrfReady ())                                                   E:\iro_svn\opensprints\FW\user\user.c
001046   51b5     MOVF      0xb5,0x0,0x1                                                                                    
001048   e13e     BNZ       0x10c6                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// And only send if there's something there to send                            E:\iro_svn\opensprints\FW\user\user.c
00104a   0101     MOVLB     0x1            		if (g_TX_buf_out != g_TX_buf_in)                                               E:\iro_svn\opensprints\FW\user\user.c
00104c   519e     MOVF      0x9e,0x0,0x1                                                                                    
00104e   0101     MOVLB     0x1                                                                                             
001050   5d9f     SUBWF     0x9f,0x0,0x1                                                                                    
001052   e039     BZ        0x10c6                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Now decide if we need to break it up into two parts or not                 E:\iro_svn\opensprints\FW\user\user.c
001054   0101     MOVLB     0x1            			if (g_TX_buf_in > g_TX_buf_out)                                               E:\iro_svn\opensprints\FW\user\user.c
001056   519f     MOVF      0x9f,0x0,0x1                                                                                    
001058   0101     MOVLB     0x1                                                                                             
00105a   80d8     BSF       0xd8,0x0,0x0                                                                                    
00105c   559e     SUBFWB    0x9e,0x0,0x1                                                                                    
00105e   e21a     BC        0x1094                                                                                          
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           				// Since IN is beyond OUT, only need one chunk                               E:\iro_svn\opensprints\FW\user\user.c
001060   0101     MOVLB     0x1            				temp = g_TX_buf_in - g_TX_buf_out;                                           E:\iro_svn\opensprints\FW\user\user.c
001062   519f     MOVF      0x9f,0x0,0x1                                                                                    
001064   0101     MOVLB     0x1                                                                                             
001066   5d9e     SUBWF     0x9e,0x0,0x1                                                                                    
001068   6edf     MOVWF     0xdf,0x0                                                                                        
00106a   0101     MOVLB     0x1            				mUSBUSARTTxRam (&g_TX_buf[g_TX_buf_out], temp);                              E:\iro_svn\opensprints\FW\user\user.c
00106c   519f     MOVF      0x9f,0x0,0x1                                                                                    
00106e   0101     MOVLB     0x1                                                                                             
001070   6fb6     MOVWF     0xb6,0x1                                                                                        
001072   6bb7     CLRF      0xb7,0x1                                                                                        
001074   0e00     MOVLW     0x0                                                                                             
001076   0101     MOVLB     0x1                                                                                             
001078   27b6     ADDWF     0xb6,0x1,0x1                                                                                    
00107a   0e02     MOVLW     0x2                                                                                             
00107c   0101     MOVLB     0x1                                                                                             
00107e   23b7     ADDWFC    0xb7,0x1,0x1                                                                                    
001080   cfdf     MOVFF     0xfdf,0x1ba                                                                                     
001082   f1ba                                                                                                               
001084   0101     MOVLB     0x1                                                                                             
001086   6bbb     CLRF      0xbb,0x1                                                                                        
001088   0101     MOVLB     0x1                                                                                             
00108a   0e01     MOVLW     0x1                                                                                             
00108c   6fb5     MOVWF     0xb5,0x1                                                                                        
                                           				// Now that we've scheduled the data for sending,                            E:\iro_svn\opensprints\FW\user\user.c
                                           				// update the pointer                                                        E:\iro_svn\opensprints\FW\user\user.c
00108e   c19e     MOVFF     0x19e,0x19f    				g_TX_buf_out = g_TX_buf_in;                                                  E:\iro_svn\opensprints\FW\user\user.c
001090   f19f                                                                                                               
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
001092   d019     BRA       0x10c6         			else                                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           				// Since IN is before OUT, we need to send from OUT to the end               E:\iro_svn\opensprints\FW\user\user.c
                                           				// of the buffer, then the next time around we'll catch                      E:\iro_svn\opensprints\FW\user\user.c
                                           				// from the beginning to IN.                                                 E:\iro_svn\opensprints\FW\user\user.c
001094   0e40     MOVLW     0x40           				temp = kTX_BUF_SIZE - g_TX_buf_out;                                          E:\iro_svn\opensprints\FW\user\user.c
001096   0101     MOVLB     0x1                                                                                             
001098   80d8     BSF       0xd8,0x0,0x0                                                                                    
00109a   559f     SUBFWB    0x9f,0x0,0x1                                                                                    
00109c   6edf     MOVWF     0xdf,0x0                                                                                        
00109e   0101     MOVLB     0x1            				mUSBUSARTTxRam (&g_TX_buf[g_TX_buf_out], temp);                              E:\iro_svn\opensprints\FW\user\user.c
0010a0   519f     MOVF      0x9f,0x0,0x1                                                                                    
0010a2   0101     MOVLB     0x1                                                                                             
0010a4   6fb6     MOVWF     0xb6,0x1                                                                                        
0010a6   6bb7     CLRF      0xb7,0x1                                                                                        
0010a8   0e00     MOVLW     0x0                                                                                             
0010aa   0101     MOVLB     0x1                                                                                             
0010ac   27b6     ADDWF     0xb6,0x1,0x1                                                                                    
0010ae   0e02     MOVLW     0x2                                                                                             
0010b0   0101     MOVLB     0x1                                                                                             
0010b2   23b7     ADDWFC    0xb7,0x1,0x1                                                                                    
0010b4   cfdf     MOVFF     0xfdf,0x1ba                                                                                     
0010b6   f1ba                                                                                                               
0010b8   0101     MOVLB     0x1                                                                                             
0010ba   6bbb     CLRF      0xbb,0x1                                                                                        
0010bc   0101     MOVLB     0x1                                                                                             
0010be   0e01     MOVLW     0x1                                                                                             
0010c0   6fb5     MOVWF     0xb5,0x1                                                                                        
                                           				// Now that we've scheduled the data for sending,                            E:\iro_svn\opensprints\FW\user\user.c
                                           				// update the pointer                                                        E:\iro_svn\opensprints\FW\user\user.c
0010c2   0101     MOVLB     0x1            				g_TX_buf_out = 0;                                                            E:\iro_svn\opensprints\FW\user\user.c
0010c4   6b9f     CLRF      0x9f,0x1                                                                                        
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
0010c6   52e5     MOVF      0xe5,0x1,0x0   }                                                                                E:\iro_svn\opensprints\FW\user\user.c
0010c8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0010ca   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0010cc   ffd9                                                                                                               
0010ce   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // Look at the new packet, see what command it is, and                           E:\iro_svn\opensprints\FW\user\user.c
                                           // route it appropriately. We come in knowing that                               E:\iro_svn\opensprints\FW\user\user.c
                                           // our packet is in g_RX_buf[], and that the beginning                           E:\iro_svn\opensprints\FW\user\user.c
                                           // of the packet is at g_RX_buf_out, and the end (CR) is at                      E:\iro_svn\opensprints\FW\user\user.c
                                           // g_RX_buf_in. Note that because of buffer wrapping,                            E:\iro_svn\opensprints\FW\user\user.c
                                           // g_RX_buf_in may be less than g_RX_buf_out.                                    E:\iro_svn\opensprints\FW\user\user.c
0010d0   cfd9     MOVFF     0xfd9,0xfe6    void parse_packet(void)                                                          E:\iro_svn\opensprints\FW\user\user.c
0010d2   ffe6                                                                                                               
0010d4   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0010d6   ffd9                                                                                                               
0010d8   0e04     MOVLW     0x4                                                                                             
0010da   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
0010dc   6ade     CLRF      0xde,0x0       	unsigned int	command = 0;                                                       E:\iro_svn\opensprints\FW\user\user.c
0010de   6add     CLRF      0xdd,0x0                                                                                        
0010e0   0e02     MOVLW     0x2            	unsigned char	cmd1 = 0;                                                         E:\iro_svn\opensprints\FW\user\user.c
0010e2   6adb     CLRF      0xdb,0x0                                                                                        
0010e4   0e03     MOVLW     0x3            	unsigned char	cmd2 = 0;                                                         E:\iro_svn\opensprints\FW\user\user.c
0010e6   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Always grab the first character (which is the first byte of the command)     E:\iro_svn\opensprints\FW\user\user.c
0010e8   0101     MOVLB     0x1            	cmd1 = toupper (g_RX_buf[g_RX_buf_out]);                                        E:\iro_svn\opensprints\FW\user\user.c
0010ea   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0010ec   6aea     CLRF      0xea,0x0                                                                                        
0010ee   0f40     ADDLW     0x40                                                                                            
0010f0   6ee9     MOVWF     0xe9,0x0                                                                                        
0010f2   0e02     MOVLW     0x2                                                                                             
0010f4   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0010f6   50ef     MOVF      0xef,0x0,0x0                                                                                    
0010f8   6ee6     MOVWF     0xe6,0x0                                                                                        
0010fa   6ae6     CLRF      0xe6,0x0                                                                                        
0010fc   ec64     CALL      0x46c8,0x0                                                                                      
0010fe   f023                                                                                                               
001100   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001102   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001104   0e02     MOVLW     0x2                                                                                             
001106   cff3     MOVFF     0xff3,0xfdb                                                                                     
001108   ffdb                                                                                                               
00110a   0101     MOVLB     0x1            	advance_RX_buf_out();                                                           E:\iro_svn\opensprints\FW\user\user.c
00110c   2ba1     INCF      0xa1,0x1,0x1                                                                                    
00110e   0e40     MOVLW     0x40                                                                                            
001110   0101     MOVLB     0x1                                                                                             
001112   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001114   e102     BNZ       0x111a                                                                                          
001116   0101     MOVLB     0x1                                                                                             
001118   6ba1     CLRF      0xa1,0x1                                                                                        
00111a   0e02     MOVLW     0x2            	command = cmd1;                                                                 E:\iro_svn\opensprints\FW\user\user.c
00111c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00111e   6ede     MOVWF     0xde,0x0                                                                                        
001120   6add     CLRF      0xdd,0x0                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Only grab second one if it is not a comma                                    E:\iro_svn\opensprints\FW\user\user.c
001122   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',' && g_RX_buf[g_RX_buf_out] != kCR)             E:\iro_svn\opensprints\FW\user\user.c
001124   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001126   6aea     CLRF      0xea,0x0                                                                                        
001128   0f40     ADDLW     0x40                                                                                            
00112a   6ee9     MOVWF     0xe9,0x0                                                                                        
00112c   0e02     MOVLW     0x2                                                                                             
00112e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001130   50ef     MOVF      0xef,0x0,0x0                                                                                    
001132   082c     SUBLW     0x2c                                                                                            
001134   e035     BZ        0x11a0                                                                                          
001136   0101     MOVLB     0x1                                                                                             
001138   51a1     MOVF      0xa1,0x0,0x1                                                                                    
00113a   6aea     CLRF      0xea,0x0                                                                                        
00113c   0f40     ADDLW     0x40                                                                                            
00113e   6ee9     MOVWF     0xe9,0x0                                                                                        
001140   0e02     MOVLW     0x2                                                                                             
001142   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001144   50ef     MOVF      0xef,0x0,0x0                                                                                    
001146   080d     SUBLW     0xd                                                                                             
001148   e02b     BZ        0x11a0                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
00114a   0101     MOVLB     0x1            		cmd2 = toupper (g_RX_buf[g_RX_buf_out]);                                       E:\iro_svn\opensprints\FW\user\user.c
00114c   51a1     MOVF      0xa1,0x0,0x1                                                                                    
00114e   6aea     CLRF      0xea,0x0                                                                                        
001150   0f40     ADDLW     0x40                                                                                            
001152   6ee9     MOVWF     0xe9,0x0                                                                                        
001154   0e02     MOVLW     0x2                                                                                             
001156   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001158   50ef     MOVF      0xef,0x0,0x0                                                                                    
00115a   6ee6     MOVWF     0xe6,0x0                                                                                        
00115c   6ae6     CLRF      0xe6,0x0                                                                                        
00115e   ec64     CALL      0x46c8,0x0                                                                                      
001160   f023                                                                                                               
001162   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001164   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001166   0e03     MOVLW     0x3                                                                                             
001168   cff3     MOVFF     0xff3,0xfdb                                                                                     
00116a   ffdb                                                                                                               
00116c   0101     MOVLB     0x1            		advance_RX_buf_out();                                                          E:\iro_svn\opensprints\FW\user\user.c
00116e   2ba1     INCF      0xa1,0x1,0x1                                                                                    
001170   0e40     MOVLW     0x40                                                                                            
001172   0101     MOVLB     0x1                                                                                             
001174   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001176   e102     BNZ       0x117c                                                                                          
001178   0101     MOVLB     0x1                                                                                             
00117a   6ba1     CLRF      0xa1,0x1                                                                                        
00117c   0e02     MOVLW     0x2            		command = ((unsigned int)(cmd1) << 8) + cmd2;                                  E:\iro_svn\opensprints\FW\user\user.c
00117e   cfdb     MOVFF     0xfdb,0x2c                                                                                      
001180   f02c                                                                                                               
001182   c02c     MOVFF     0x2c,0x2d                                                                                       
001184   f02d                                                                                                               
001186   6a2c     CLRF      0x2c,0x0                                                                                        
001188   0e03     MOVLW     0x3                                                                                             
00118a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00118c   0100     MOVLB     0x0                                                                                             
00118e   242c     ADDWF     0x2c,0x0,0x0                                                                                    
001190   6e2a     MOVWF     0x2a,0x0                                                                                        
001192   0e00     MOVLW     0x0                                                                                             
001194   202d     ADDWFC    0x2d,0x0,0x0                                                                                    
001196   6e2b     MOVWF     0x2b,0x0                                                                                        
001198   c02a     MOVFF     0x2a,0xfde                                                                                      
00119a   ffde                                                                                                               
00119c   c02b     MOVFF     0x2b,0xfdd                                                                                      
00119e   ffdd                                                                                                               
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Now 'command' is equal to one or two bytes of our command                    E:\iro_svn\opensprints\FW\user\user.c
0011a0   0e00     MOVLW     0x0            	switch (command)                                                                E:\iro_svn\opensprints\FW\user\user.c
0011a2   cfdb     MOVFF     0xfdb,0x1e                                                                                      
0011a4   f01e                                                                                                               
0011a6   0e01     MOVLW     0x1                                                                                             
0011a8   cfdb     MOVFF     0xfdb,0x1f                                                                                      
0011aa   f01f                                                                                                               
0011ac   0e54     MOVLW     0x54                                                                                            
0011ae   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011b0   e102     BNZ       0x11b6                                                                                          
0011b2   0e53     MOVLW     0x53                                                                                            
0011b4   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011b6   e101     BNZ       0x11ba                                                                                          
0011b8   d0eb     BRA       0x1390                                                                                          
0011ba   0e4f     MOVLW     0x4f                                                                                            
0011bc   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011be   e102     BNZ       0x11c4                                                                                          
0011c0   0e47     MOVLW     0x47                                                                                            
0011c2   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011c4   e101     BNZ       0x11c8                                                                                          
0011c6   d0e1     BRA       0x138a                                                                                          
0011c8   0e49     MOVLW     0x49                                                                                            
0011ca   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011cc   e102     BNZ       0x11d2                                                                                          
0011ce   0e43     MOVLW     0x43                                                                                            
0011d0   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011d2   e101     BNZ       0x11d6                                                                                          
0011d4   d0d7     BRA       0x1384                                                                                          
0011d6   0e49     MOVLW     0x49                                                                                            
0011d8   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011da   e102     BNZ       0x11e0                                                                                          
0011dc   0e52     MOVLW     0x52                                                                                            
0011de   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011e0   e101     BNZ       0x11e4                                                                                          
0011e2   d0cd     BRA       0x137e                                                                                          
0011e4   0e49     MOVLW     0x49                                                                                            
0011e6   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011e8   e102     BNZ       0x11ee                                                                                          
0011ea   0e53     MOVLW     0x53                                                                                            
0011ec   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011ee   e101     BNZ       0x11f2                                                                                          
0011f0   d0c3     BRA       0x1378                                                                                          
0011f2   0e53     MOVLW     0x53                                                                                            
0011f4   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011f6   e102     BNZ       0x11fc                                                                                          
0011f8   0e43     MOVLW     0x43                                                                                            
0011fa   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011fc   e101     BNZ       0x1200                                                                                          
0011fe   d0b9     BRA       0x1372                                                                                          
001200   0e53     MOVLW     0x53                                                                                            
001202   181e     XORWF     0x1e,0x0,0x0                                                                                    
001204   e102     BNZ       0x120a                                                                                          
001206   0e52     MOVLW     0x52                                                                                            
001208   181f     XORWF     0x1f,0x0,0x0                                                                                    
00120a   e101     BNZ       0x120e                                                                                          
00120c   d0af     BRA       0x136c                                                                                          
00120e   0e53     MOVLW     0x53                                                                                            
001210   181e     XORWF     0x1e,0x0,0x0                                                                                    
001212   e102     BNZ       0x1218                                                                                          
001214   0e53     MOVLW     0x53                                                                                            
001216   181f     XORWF     0x1f,0x0,0x0                                                                                    
001218   e101     BNZ       0x121c                                                                                          
00121a   d0a5     BRA       0x1366                                                                                          
00121c   0e53     MOVLW     0x53                                                                                            
00121e   181e     XORWF     0x1e,0x0,0x0                                                                                    
001220   e102     BNZ       0x1226                                                                                          
001222   0e42     MOVLW     0x42                                                                                            
001224   181f     XORWF     0x1f,0x0,0x0                                                                                    
001226   e101     BNZ       0x122a                                                                                          
001228   d09b     BRA       0x1360                                                                                          
00122a   0e43     MOVLW     0x43                                                                                            
00122c   181e     XORWF     0x1e,0x0,0x0                                                                                    
00122e   e102     BNZ       0x1234                                                                                          
001230   0e42     MOVLW     0x42                                                                                            
001232   181f     XORWF     0x1f,0x0,0x0                                                                                    
001234   e101     BNZ       0x1238                                                                                          
001236   d091     BRA       0x135a                                                                                          
001238   0e43     MOVLW     0x43                                                                                            
00123a   181e     XORWF     0x1e,0x0,0x0                                                                                    
00123c   e102     BNZ       0x1242                                                                                          
00123e   0e52     MOVLW     0x52                                                                                            
001240   181f     XORWF     0x1f,0x0,0x0                                                                                    
001242   e101     BNZ       0x1246                                                                                          
001244   d087     BRA       0x1354                                                                                          
001246   0e4f     MOVLW     0x4f                                                                                            
001248   181e     XORWF     0x1e,0x0,0x0                                                                                    
00124a   e102     BNZ       0x1250                                                                                          
00124c   0e42     MOVLW     0x42                                                                                            
00124e   181f     XORWF     0x1f,0x0,0x0                                                                                    
001250   e101     BNZ       0x1254                                                                                          
001252   d07d     BRA       0x134e                                                                                          
001254   0e57     MOVLW     0x57                                                                                            
001256   181e     XORWF     0x1e,0x0,0x0                                                                                    
001258   e102     BNZ       0x125e                                                                                          
00125a   0e4d     MOVLW     0x4d                                                                                            
00125c   181f     XORWF     0x1f,0x0,0x0                                                                                    
00125e   e075     BZ        0x134a                                                                                          
001260   0e52     MOVLW     0x52                                                                                            
001262   181e     XORWF     0x1e,0x0,0x0                                                                                    
001264   e102     BNZ       0x126a                                                                                          
001266   0e4d     MOVLW     0x4d                                                                                            
001268   181f     XORWF     0x1f,0x0,0x0                                                                                    
00126a   e06d     BZ        0x1346                                                                                          
00126c   0e44     MOVLW     0x44                                                                                            
00126e   181e     XORWF     0x1e,0x0,0x0                                                                                    
001270   e102     BNZ       0x1276                                                                                          
001272   0e50     MOVLW     0x50                                                                                            
001274   181f     XORWF     0x1f,0x0,0x0                                                                                    
001276   e065     BZ        0x1342                                                                                          
001278   0e4f     MOVLW     0x4f                                                                                            
00127a   181e     XORWF     0x1e,0x0,0x0                                                                                    
00127c   e102     BNZ       0x1282                                                                                          
00127e   0e50     MOVLW     0x50                                                                                            
001280   181f     XORWF     0x1f,0x0,0x0                                                                                    
001282   e05d     BZ        0x133e                                                                                          
001284   0e49     MOVLW     0x49                                                                                            
001286   181e     XORWF     0x1e,0x0,0x0                                                                                    
001288   e102     BNZ       0x128e                                                                                          
00128a   0e50     MOVLW     0x50                                                                                            
00128c   181f     XORWF     0x1f,0x0,0x0                                                                                    
00128e   e055     BZ        0x133a                                                                                          
001290   0e58     MOVLW     0x58                                                                                            
001292   181e     XORWF     0x1e,0x0,0x0                                                                                    
001294   e102     BNZ       0x129a                                                                                          
001296   0e54     MOVLW     0x54                                                                                            
001298   181f     XORWF     0x1f,0x0,0x0                                                                                    
00129a   e04c     BZ        0x1334                                                                                          
00129c   0e54     MOVLW     0x54                                                                                            
00129e   181e     XORWF     0x1e,0x0,0x0                                                                                    
0012a0   e101     BNZ       0x12a4                                                                                          
0012a2   501f     MOVF      0x1f,0x0,0x0                                                                                    
0012a4   e045     BZ        0x1330                                                                                          
0012a6   0e41     MOVLW     0x41                                                                                            
0012a8   181e     XORWF     0x1e,0x0,0x0                                                                                    
0012aa   e101     BNZ       0x12ae                                                                                          
0012ac   501f     MOVF      0x1f,0x0,0x0                                                                                    
0012ae   e03e     BZ        0x132c                                                                                          
0012b0   0e56     MOVLW     0x56                                                                                            
0012b2   181e     XORWF     0x1e,0x0,0x0                                                                                    
0012b4   e101     BNZ       0x12b8                                                                                          
0012b6   501f     MOVF      0x1f,0x0,0x0                                                                                    
0012b8   e037     BZ        0x1328                                                                                          
0012ba   0e49     MOVLW     0x49                                                                                            
0012bc   181e     XORWF     0x1e,0x0,0x0                                                                                    
0012be   e101     BNZ       0x12c2                                                                                          
0012c0   501f     MOVF      0x1f,0x0,0x0                                                                                    
0012c2   e030     BZ        0x1324                                                                                          
0012c4   0e4f     MOVLW     0x4f                                                                                            
0012c6   181e     XORWF     0x1e,0x0,0x0                                                                                    
0012c8   e101     BNZ       0x12cc                                                                                          
0012ca   501f     MOVF      0x1f,0x0,0x0                                                                                    
0012cc   e029     BZ        0x1320                                                                                          
0012ce   0e55     MOVLW     0x55                                                                                            
0012d0   181e     XORWF     0x1e,0x0,0x0                                                                                    
0012d2   e102     BNZ       0x12d8                                                                                          
0012d4   0e43     MOVLW     0x43                                                                                            
0012d6   181f     XORWF     0x1f,0x0,0x0                                                                                    
0012d8   e021     BZ        0x131c                                                                                          
0012da   0e58     MOVLW     0x58                                                                                            
0012dc   181e     XORWF     0x1e,0x0,0x0                                                                                    
0012de   e102     BNZ       0x12e4                                                                                          
0012e0   0e43     MOVLW     0x43                                                                                            
0012e2   181f     XORWF     0x1f,0x0,0x0                                                                                    
0012e4   e018     BZ        0x1316                                                                                          
0012e6   0e43     MOVLW     0x43                                                                                            
0012e8   181e     XORWF     0x1e,0x0,0x0                                                                                    
0012ea   e101     BNZ       0x12ee                                                                                          
0012ec   501f     MOVF      0x1f,0x0,0x0                                                                                    
0012ee   e011     BZ        0x1312                                                                                          
0012f0   0e52     MOVLW     0x52                                                                                            
0012f2   181e     XORWF     0x1e,0x0,0x0                                                                                    
0012f4   e101     BNZ       0x12f8                                                                                          
0012f6   501f     MOVF      0x1f,0x0,0x0                                                                                    
0012f8   e00a     BZ        0x130e                                                                                          
0012fa   0e58     MOVLW     0x58                                                                                            
0012fc   181e     XORWF     0x1e,0x0,0x0                                                                                    
0012fe   e102     BNZ       0x1304                                                                                          
001300   0e52     MOVLW     0x52                                                                                            
001302   181f     XORWF     0x1f,0x0,0x0                                                                                    
001304   e001     BZ        0x1308                                                                                          
001306   d047     BRA       0x1396                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('R' * 256) + 'X':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// For receiving serial                                                       E:\iro_svn\opensprints\FW\user\user.c
001308   ec10     CALL      0x1c20,0x0     			parse_RX_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
00130a   f00e                                                                                                               
00130c   d083     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case 'R':                                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Reset command (resets everything to power-on state)                        E:\iro_svn\opensprints\FW\user\user.c
00130e   d8b9     RCALL     0x1482         			parse_R_packet ();                                                            E:\iro_svn\opensprints\FW\user\user.c
001310   d081     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case 'C':                                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Configure command (configure ports for Input or Ouptut)                    E:\iro_svn\opensprints\FW\user\user.c
001312   d93c     RCALL     0x158c         			parse_C_packet ();                                                            E:\iro_svn\opensprints\FW\user\user.c
001314   d07f     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}		                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('C' * 256) + 'X':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// For configuring serial port                                                E:\iro_svn\opensprints\FW\user\user.c
001316   ec12     CALL      0x1c24,0x0     			parse_CX_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
001318   f00e                                                                                                               
00131a   d07c     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('C' * 256) + 'U':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// For configuring UBW                                                        E:\iro_svn\opensprints\FW\user\user.c
00131c   d8b6     RCALL     0x148a         			parse_CU_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
00131e   d07a     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case 'O':                                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Output command (tell the ports to output something)                        E:\iro_svn\opensprints\FW\user\user.c
001320   d992     RCALL     0x1646         			parse_O_packet ();                                                            E:\iro_svn\opensprints\FW\user\user.c
001322   d078     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case 'I':                                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Input command (return the current status of the ports)                     E:\iro_svn\opensprints\FW\user\user.c
001324   d9c3     RCALL     0x16ac         			parse_I_packet ();                                                            E:\iro_svn\opensprints\FW\user\user.c
001326   d076     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case 'V':                                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Version command                                                            E:\iro_svn\opensprints\FW\user\user.c
001328   d9dc     RCALL     0x16e2         			parse_V_packet ();                                                            E:\iro_svn\opensprints\FW\user\user.c
00132a   d074     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case 'A':                                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Analog command                                                             E:\iro_svn\opensprints\FW\user\user.c
00132c   d9eb     RCALL     0x1704         			parse_A_packet ();                                                            E:\iro_svn\opensprints\FW\user\user.c
00132e   d072     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case 'T':                                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// For timed I/O                                                              E:\iro_svn\opensprints\FW\user\user.c
001330   d8ec     RCALL     0x150a         			parse_T_packet ();                                                            E:\iro_svn\opensprints\FW\user\user.c
001332   d070     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}	                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('T' * 256) + 'X':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// For transmitting serial                                                    E:\iro_svn\opensprints\FW\user\user.c
001334   ec0e     CALL      0x1c1c,0x0     			parse_TX_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
001336   f00e                                                                                                               
001338   d06d     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('P' * 256) + 'I':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// PI for reading a single pin                                                E:\iro_svn\opensprints\FW\user\user.c
00133a   db57     RCALL     0x19ea         			parse_PI_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
00133c   d06b     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('P' * 256) + 'O':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// PO for setting a single pin                                                E:\iro_svn\opensprints\FW\user\user.c
00133e   dbd5     RCALL     0x1aea         			parse_PO_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
001340   d069     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('P' * 256) + 'D':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// PD for setting a pin's direction                                           E:\iro_svn\opensprints\FW\user\user.c
001342   dab7     RCALL     0x18b2         			parse_PD_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
001344   d067     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('M' * 256) + 'R':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// MR for Memory Read                                                         E:\iro_svn\opensprints\FW\user\user.c
001346   da74     RCALL     0x1830         			parse_MR_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
001348   d065     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('M' * 256) + 'W':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// MW for Memory Write                                                        E:\iro_svn\opensprints\FW\user\user.c
00134a   da3d     RCALL     0x17c6         			parse_MW_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
00134c   d063     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('B' * 256) + 'O':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// MR for Fast Parallel Output                                                E:\iro_svn\opensprints\FW\user\user.c
00134e   ec00     CALL      0x1e00,0x0     			parse_BO_packet ();		                                                         E:\iro_svn\opensprints\FW\user\user.c
001350   f00f                                                                                                               
001352   d060     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('R' * 256) + 'C':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// RC for RC servo output                                                     E:\iro_svn\opensprints\FW\user\user.c
001354   ec14     CALL      0x1c28,0x0     			parse_RC_packet ();		                                                         E:\iro_svn\opensprints\FW\user\user.c
001356   f00e                                                                                                               
001358   d05d     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('B' * 256) + 'C':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// BC for Fast Parallel Configure                                             E:\iro_svn\opensprints\FW\user\user.c
00135a   ecb9     CALL      0x1d72,0x0     			parse_BC_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
00135c   f00e                                                                                                               
00135e   d05a     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('B' * 256) + 'S':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// BS for Fast Binary Stream output                                           E:\iro_svn\opensprints\FW\user\user.c
001360   ec47     CALL      0x208e,0x0     			parse_BS_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
001362   f010                                                                                                               
001364   d057     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('S' * 256) + 'S':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// SS for Send SPI                                                            E:\iro_svn\opensprints\FW\user\user.c
001366   ec03     CALL      0x2206,0x0     			parse_SS_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
001368   f011                                                                                                               
00136a   d054     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('R' * 256) + 'S':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// RS for Receive SPI                                                         E:\iro_svn\opensprints\FW\user\user.c
00136c   ec06     CALL      0x220c,0x0     			parse_RS_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
00136e   f011                                                                                                               
001370   d051     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('C' * 256) + 'S':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// CS for Configure SPI                                                       E:\iro_svn\opensprints\FW\user\user.c
001372   ec09     CALL      0x2212,0x0     			parse_CS_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
001374   f011                                                                                                               
001376   d04e     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('S' * 256) + 'I':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// SI for Send I2C                                                            E:\iro_svn\opensprints\FW\user\user.c
001378   ec0c     CALL      0x2218,0x0     			parse_SI_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
00137a   f011                                                                                                               
00137c   d04b     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('R' * 256) + 'I':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// RI for Receive I2C                                                         E:\iro_svn\opensprints\FW\user\user.c
00137e   ec0f     CALL      0x221e,0x0     			parse_RI_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
001380   f011                                                                                                               
001382   d048     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('C' * 256) + 'I':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// CI for Configure I2C                                                       E:\iro_svn\opensprints\FW\user\user.c
001384   ec12     CALL      0x2224,0x0     			parse_CI_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
001386   f011                                                                                                               
001388   d045     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('G' * 256) + 'O':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
00138a   ec15     CALL      0x222a,0x0     			parse_GO_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
00138c   f011                                                                                                               
00138e   d042     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		case ('S' * 256) + 'T':                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001390   ec25     CALL      0x224a,0x0     			parse_ST_packet ();                                                           E:\iro_svn\opensprints\FW\user\user.c
001392   f011                                                                                                               
001394   d03f     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		default:                                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001396   0e03     MOVLW     0x3            			if (0 == cmd2)                                                                E:\iro_svn\opensprints\FW\user\user.c
001398   50db     MOVF      0xdb,0x0,0x0                                                                                    
00139a   e11a     BNZ       0x13d0                                                                                          
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           				// Send back 'unknown command' error                                         E:\iro_svn\opensprints\FW\user\user.c
                                           				printf (                                                                     E:\iro_svn\opensprints\FW\user\user.c
                                           					 (rom char *)"!8 Err: Unknown command '%c:%2X'\r\n"                         E:\iro_svn\opensprints\FW\user\user.c
0013ac   0ebd     MOVLW     0xbd           					,cmd1                                                                       E:\iro_svn\opensprints\FW\user\user.c
0013ae   6e2a     MOVWF     0x2a,0x0                                                                                        
0013b0   0e41     MOVLW     0x41                                                                                            
0013b2   6e2b     MOVWF     0x2b,0x0                                                                                        
0013b4   6a2c     CLRF      0x2c,0x0                                                                                        
0013b6   c02a     MOVFF     0x2a,0xfe6                                                                                      
0013b8   ffe6                                                                                                               
0013ba   c02b     MOVFF     0x2b,0xfe6                                                                                      
0013bc   ffe6                                                                                                               
0013be   c02c     MOVFF     0x2c,0xfe6                                                                                      
0013c0   ffe6                                                                                                               
0013a4   0e02     MOVLW     0x2            					,cmd1                                                                       E:\iro_svn\opensprints\FW\user\user.c
0013a6   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0013a8   ffe6                                                                                                               
0013aa   6ae6     CLRF      0xe6,0x0                                                                                        
00139c   0e02     MOVLW     0x2            				);                                                                           E:\iro_svn\opensprints\FW\user\user.c
00139e   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0013a0   ffe6                                                                                                               
0013a2   6ae6     CLRF      0xe6,0x0                                                                                        
0013c2   ec6b     CALL      0x44d6,0x0                                                                                      
0013c4   f022                                                                                                               
0013c6   6e2d     MOVWF     0x2d,0x0                                                                                        
0013c8   0e07     MOVLW     0x7                                                                                             
0013ca   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0013cc   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
0013ce   d021     BRA       0x1412         			else                                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           				// Send back 'unknown command' error                                         E:\iro_svn\opensprints\FW\user\user.c
                                           				printf (                                                                     E:\iro_svn\opensprints\FW\user\user.c
                                           					 (rom char *)"!8 Err: Unknown command '%c%c:%2X%2X'\r\n"                    E:\iro_svn\opensprints\FW\user\user.c
0013f0   0e95     MOVLW     0x95           					,cmd1                                                                       E:\iro_svn\opensprints\FW\user\user.c
0013f2   6e2a     MOVWF     0x2a,0x0                                                                                        
0013f4   0e41     MOVLW     0x41                                                                                            
0013f6   6e2b     MOVWF     0x2b,0x0                                                                                        
0013f8   6a2c     CLRF      0x2c,0x0                                                                                        
0013fa   c02a     MOVFF     0x2a,0xfe6                                                                                      
0013fc   ffe6                                                                                                               
0013fe   c02b     MOVFF     0x2b,0xfe6                                                                                      
001400   ffe6                                                                                                               
001402   c02c     MOVFF     0x2c,0xfe6                                                                                      
001404   ffe6                                                                                                               
0013e8   0e02     MOVLW     0x2            					,cmd2                                                                       E:\iro_svn\opensprints\FW\user\user.c
0013ea   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0013ec   ffe6                                                                                                               
0013ee   6ae6     CLRF      0xe6,0x0                                                                                        
0013e0   0e03     MOVLW     0x3            					,cmd1                                                                       E:\iro_svn\opensprints\FW\user\user.c
0013e2   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0013e4   ffe6                                                                                                               
0013e6   6ae6     CLRF      0xe6,0x0                                                                                        
0013d8   0e02     MOVLW     0x2            					,cmd2                                                                       E:\iro_svn\opensprints\FW\user\user.c
0013da   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0013dc   ffe6                                                                                                               
0013de   6ae6     CLRF      0xe6,0x0                                                                                        
0013d0   0e03     MOVLW     0x3            				);                                                                           E:\iro_svn\opensprints\FW\user\user.c
0013d2   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0013d4   ffe6                                                                                                               
0013d6   6ae6     CLRF      0xe6,0x0                                                                                        
001406   ec6b     CALL      0x44d6,0x0                                                                                      
001408   f022                                                                                                               
00140a   6e2d     MOVWF     0x2d,0x0                                                                                        
00140c   0e0b     MOVLW     0xb                                                                                             
00140e   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001410   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
001412   d000     BRA       0x1414         			break;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Double check that our output pointer is now at the ending <CR>               E:\iro_svn\opensprints\FW\user\user.c
                                           	// If it is not, this indicates that there were extra characters that           E:\iro_svn\opensprints\FW\user\user.c
                                           	// the command parsing routine didn't eat. This would be an error and needs     E:\iro_svn\opensprints\FW\user\user.c
                                           	// to be reported. (Ignore for Reset command because FIFO pointers get cleared.) E:\iro_svn\opensprints\FW\user\user.c
                                           	if (                                                                            E:\iro_svn\opensprints\FW\user\user.c
001414   0101     MOVLB     0x1            		(g_RX_buf[g_RX_buf_out] != kCR && 0 == error_byte)                             E:\iro_svn\opensprints\FW\user\user.c
001416   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001418   6aea     CLRF      0xea,0x0                                                                                        
00141a   0f40     ADDLW     0x40                                                                                            
00141c   6ee9     MOVWF     0xe9,0x0                                                                                        
00141e   0e02     MOVLW     0x2                                                                                             
001420   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001422   50ef     MOVF      0xef,0x0,0x0                                                                                    
001424   080d     SUBLW     0xd                                                                                             
001426   e00d     BZ        0x1442                                                                                          
001428   500d     MOVF      0xd,0x0,0x0                                                                                     
00142a   e10b     BNZ       0x1442                                                                                          
                                           		&&                                                                             E:\iro_svn\opensprints\FW\user\user.c
00142c   0e52     MOVLW     0x52           		('R' != command)                                                               E:\iro_svn\opensprints\FW\user\user.c
00142e   6e2a     MOVWF     0x2a,0x0                                                                                        
001430   6a2b     CLRF      0x2b,0x0                                                                                        
001432   50df     MOVF      0xdf,0x0,0x0                                                                                    
001434   182a     XORWF     0x2a,0x0,0x0                                                                                    
001436   e103     BNZ       0x143e                                                                                          
001438   52de     MOVF      0xde,0x1,0x0                                                                                    
00143a   50dd     MOVF      0xdd,0x0,0x0                                                                                    
00143c   182b     XORWF     0x2b,0x0,0x0                                                                                    
00143e   e001     BZ        0x1442         	)                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001440   8e0d     BSF       0xd,0x7,0x0    		bitset (error_byte, kERROR_BYTE_EXTRA_CHARACTERS);                             E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Clean up by skipping over any bytes we haven't eaten                         E:\iro_svn\opensprints\FW\user\user.c
                                           	// This is safe since we parse each packet as we get a <CR>                     E:\iro_svn\opensprints\FW\user\user.c
                                           	// (i.e. g_RX_buf_in doesn't move while we are in this routine)                 E:\iro_svn\opensprints\FW\user\user.c
001442   c1a0     MOVFF     0x1a0,0x1a1    	g_RX_buf_out = g_RX_buf_in;                                                     E:\iro_svn\opensprints\FW\user\user.c
001444   f1a1                                                                                                               
001446   0e04     MOVLW     0x4            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
001448   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00144a   e202     BC        0x1450                                                                                          
00144c   6ae1     CLRF      0xe1,0x0                                                                                        
00144e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001450   6ee1     MOVWF     0xe1,0x0                                                                                        
001452   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001454   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001456   ffd9                                                                                                               
001458   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // Print out the positive acknoledgement that the packet was received            E:\iro_svn\opensprints\FW\user\user.c
                                           // if we have acks turned on.                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           void print_ack(void)                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
00145a   0101     MOVLB     0x1            	if (g_ack_enable)                                                               E:\iro_svn\opensprints\FW\user\user.c
00145c   51a6     MOVF      0xa6,0x0,0x1                                                                                    
00145e   e010     BZ        0x1480                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001460   0e5c     MOVLW     0x5c           		printf ((rom char *)st_OK);                                                    E:\iro_svn\opensprints\FW\user\user.c
001462   6e2a     MOVWF     0x2a,0x0                                                                                        
001464   0e47     MOVLW     0x47                                                                                            
001466   6e2b     MOVWF     0x2b,0x0                                                                                        
001468   6a2c     CLRF      0x2c,0x0                                                                                        
00146a   c02a     MOVFF     0x2a,0xfe6                                                                                      
00146c   ffe6                                                                                                               
00146e   c02b     MOVFF     0x2b,0xfe6                                                                                      
001470   ffe6                                                                                                               
001472   c02c     MOVFF     0x2c,0xfe6                                                                                      
001474   ffe6                                                                                                               
001476   ec6b     CALL      0x44d6,0x0                                                                                      
001478   f022                                                                                                               
00147a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00147c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00147e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
001480   0012     RETURN    0x0            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // Return all I/Os to their default power-on values                              E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_R_packet(void)                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
001482   ec06     CALL      0xc0c,0x0      	UserInit ();                                                                    E:\iro_svn\opensprints\FW\user\user.c
001484   f006                                                                                                               
001486   dfe9     RCALL     0x145a         	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
001488   0012     RETURN    0x0            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // CU is "Configure UBW" and controls system-wide configruation values           E:\iro_svn\opensprints\FW\user\user.c
                                           // "CU,<parameter_number>,<paramter_value><CR>"                                  E:\iro_svn\opensprints\FW\user\user.c
                                           // <paramter_number>	<parameter_value>                                           E:\iro_svn\opensprints\FW\user\user.c
                                           // 1					{1|0} turns on or off the 'ack' ("OK" at end of packets)                E:\iro_svn\opensprints\FW\user\user.c
00148a   cfd9     MOVFF     0xfd9,0xfe6    void parse_CU_packet(void)                                                       E:\iro_svn\opensprints\FW\user\user.c
00148c   ffe6                                                                                                               
00148e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001490   ffd9                                                                                                               
001492   0e03     MOVLW     0x3                                                                                             
001494   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char parameter_number;                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	signed int paramater_value;                                                     E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
001496   0e01     MOVLW     0x1            	parameter_number = extract_number (kUCHAR);                                     E:\iro_svn\opensprints\FW\user\user.c
001498   6ee6     MOVWF     0xe6,0x0                                                                                        
00149a   ec28     CALL      0x2250,0x0                                                                                      
00149c   f011                                                                                                               
00149e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0014a0   501d     MOVF      0x1d,0x0,0x0                                                                                    
0014a2   6edf     MOVWF     0xdf,0x0                                                                                        
0014a4   0e02     MOVLW     0x2            	paramater_value = extract_number (kINT);                                        E:\iro_svn\opensprints\FW\user\user.c
0014a6   6ee6     MOVWF     0xe6,0x0                                                                                        
0014a8   ec28     CALL      0x2250,0x0                                                                                      
0014aa   f011                                                                                                               
0014ac   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0014ae   52de     MOVF      0xde,0x1,0x0                                                                                    
0014b0   c01d     MOVFF     0x1d,0xfde                                                                                      
0014b2   ffde                                                                                                               
0014b4   c01e     MOVFF     0x1e,0xfdd                                                                                      
0014b6   ffdd                                                                                                               
0014b8   52dd     MOVF      0xdd,0x1,0x0                                                                                    
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iro_svn\opensprints\FW\user\user.c
0014ba   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iro_svn\opensprints\FW\user\user.c
0014bc   e001     BZ        0x14c0                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
0014be   d01b     BRA       0x14f6         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
0014c0   04df     DECF      0xdf,0x0,0x0   	if (1 == parameter_number)                                                      E:\iro_svn\opensprints\FW\user\user.c
0014c2   e118     BNZ       0x14f4                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
0014c4   50d9     MOVF      0xd9,0x0,0x0   		if (0 == paramater_value || 1 == paramater_value)                              E:\iro_svn\opensprints\FW\user\user.c
0014c6   0f01     ADDLW     0x1                                                                                             
0014c8   6ee9     MOVWF     0xe9,0x0                                                                                        
0014ca   cfda     MOVFF     0xfda,0xfea                                                                                     
0014cc   ffea                                                                                                               
0014ce   50ee     MOVF      0xee,0x0,0x0                                                                                    
0014d0   10ed     IORWF     0xed,0x0,0x0                                                                                    
0014d2   e00b     BZ        0x14ea                                                                                          
0014d4   0e01     MOVLW     0x1                                                                                             
0014d6   6e2a     MOVWF     0x2a,0x0                                                                                        
0014d8   6a2b     CLRF      0x2b,0x0                                                                                        
0014da   0e01     MOVLW     0x1                                                                                             
0014dc   50db     MOVF      0xdb,0x0,0x0                                                                                    
0014de   182a     XORWF     0x2a,0x0,0x0                                                                                    
0014e0   e103     BNZ       0x14e8                                                                                          
0014e2   0e02     MOVLW     0x2                                                                                             
0014e4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0014e6   182b     XORWF     0x2b,0x0,0x0                                                                                    
0014e8   e104     BNZ       0x14f2                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
0014ea   0e01     MOVLW     0x1            			g_ack_enable = paramater_value;			                                            E:\iro_svn\opensprints\FW\user\user.c
0014ec   cfdb     MOVFF     0xfdb,0x1a6                                                                                     
0014ee   f1a6                                                                                                               
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
0014f0   d001     BRA       0x14f4         		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
0014f2   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
0014f4   dfb2     RCALL     0x145a         	print_ack();                                                                    E:\iro_svn\opensprints\FW\user\user.c
0014f6   0e03     MOVLW     0x3            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
0014f8   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0014fa   e202     BC        0x1500                                                                                          
0014fc   6ae1     CLRF      0xe1,0x0                                                                                        
0014fe   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001500   6ee1     MOVWF     0xe1,0x0                                                                                        
001502   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001504   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001506   ffd9                                                                                                               
001508   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // "T" Packet                                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           // Causes PIC to sample digital or analog inputs at a regular interval and send  E:\iro_svn\opensprints\FW\user\user.c
                                           // I (or A) packets back at that interval.                                       E:\iro_svn\opensprints\FW\user\user.c
                                           // Send T,0,0<CR> to stop I (or A) packets                                       E:\iro_svn\opensprints\FW\user\user.c
                                           // FORMAT: T,<TIME_BETWEEN_UPDATES_IN_MS>,<MODE><CR>                             E:\iro_svn\opensprints\FW\user\user.c
                                           // <MODE> is 0 for digital (I packets) and 1 for analog (A packets)              E:\iro_svn\opensprints\FW\user\user.c
                                           // EXAMPLE: "T,4000,0<CR>" to send an I packet back every 4 seconds.             E:\iro_svn\opensprints\FW\user\user.c
                                           // EXAMPLE: "T,2000,1<CR>" to send an A packet back every 2 seconds.             E:\iro_svn\opensprints\FW\user\user.c
00150a   cfd9     MOVFF     0xfd9,0xfe6    void parse_T_packet(void)                                                        E:\iro_svn\opensprints\FW\user\user.c
00150c   ffe6                                                                                                               
00150e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001510   ffd9                                                                                                               
001512   0e03     MOVLW     0x3                                                                                             
001514   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned int value;                                                             E:\iro_svn\opensprints\FW\user\user.c
001516   0e02     MOVLW     0x2            	unsigned char mode = 0;                                                         E:\iro_svn\opensprints\FW\user\user.c
001518   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Extract the <TIME_BETWEEN_UPDATES_IN_MS> value                               E:\iro_svn\opensprints\FW\user\user.c
00151a   0e03     MOVLW     0x3            	time_between_updates = extract_number (kUINT);                                  E:\iro_svn\opensprints\FW\user\user.c
00151c   6ee6     MOVWF     0xe6,0x0                                                                                        
00151e   ec28     CALL      0x2250,0x0                                                                                      
001520   f011                                                                                                               
001522   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001524   c01d     MOVFF     0x1d,0x0                                                                                        
001526   f000                                                                                                               
001528   c01e     MOVFF     0x1e,0x1                                                                                        
00152a   f001                                                                                                               
                                           	// Extract the <MODE> value                                                     E:\iro_svn\opensprints\FW\user\user.c
00152c   0e01     MOVLW     0x1            	mode = extract_number (kUCHAR);                                                 E:\iro_svn\opensprints\FW\user\user.c
00152e   6ee6     MOVWF     0xe6,0x0                                                                                        
001530   ec28     CALL      0x2250,0x0                                                                                      
001532   f011                                                                                                               
001534   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001536   0e02     MOVLW     0x2                                                                                             
001538   c01d     MOVFF     0x1d,0xfdb                                                                                      
00153a   ffdb                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iro_svn\opensprints\FW\user\user.c
00153c   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iro_svn\opensprints\FW\user\user.c
00153e   e001     BZ        0x1542                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001540   d01b     BRA       0x1578         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Now start up the timer at the right rate or shut                             E:\iro_svn\opensprints\FW\user\user.c
                                           	// it down.                                                                     E:\iro_svn\opensprints\FW\user\user.c
001542   0e02     MOVLW     0x2            	if (0 == mode)                                                                  E:\iro_svn\opensprints\FW\user\user.c
001544   50db     MOVF      0xdb,0x0,0x0                                                                                    
001546   e10c     BNZ       0x1560                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001548   5000     MOVF      0x0,0x0,0x0    		if (0 == time_between_updates)                                                 E:\iro_svn\opensprints\FW\user\user.c
00154a   1001     IORWF     0x1,0x0,0x0                                                                                     
00154c   e103     BNZ       0x1554                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Turn off sending of I packets.                                             E:\iro_svn\opensprints\FW\user\user.c
00154e   6a02     CLRF      0x2,0x0        			ISR_D_RepeatRate = 0;                                                         E:\iro_svn\opensprints\FW\user\user.c
001550   6a03     CLRF      0x3,0x0                                                                                         
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
001552   d005     BRA       0x155e         		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001554   84ca     BSF       0xca,0x2,0x0   			T2CONbits.TMR2ON = 1;                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           			// Eventually gaurd this section from interrupts                              E:\iro_svn\opensprints\FW\user\user.c
001556   c000     MOVFF     0x0,0x2        			ISR_D_RepeatRate = time_between_updates;                                      E:\iro_svn\opensprints\FW\user\user.c
001558   f002                                                                                                               
00155a   c001     MOVFF     0x1,0x3                                                                                         
00155c   f003                                                                                                               
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}	                                                                              E:\iro_svn\opensprints\FW\user\user.c
00155e   d00b     BRA       0x1576         	else                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001560   5000     MOVF      0x0,0x0,0x0    		if (0 == time_between_updates)                                                 E:\iro_svn\opensprints\FW\user\user.c
001562   1001     IORWF     0x1,0x0,0x0                                                                                     
001564   e103     BNZ       0x156c                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Turn off sending of A packets.                                             E:\iro_svn\opensprints\FW\user\user.c
001566   6a07     CLRF      0x7,0x0        			ISR_A_RepeatRate = 0;                                                         E:\iro_svn\opensprints\FW\user\user.c
001568   6a08     CLRF      0x8,0x0                                                                                         
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
00156a   d005     BRA       0x1576         		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
00156c   84ca     BSF       0xca,0x2,0x0   			T2CONbits.TMR2ON = 1;                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           			// Eventually gaurd this section from interrupts                              E:\iro_svn\opensprints\FW\user\user.c
00156e   c000     MOVFF     0x0,0x7        			ISR_A_RepeatRate = time_between_updates;                                      E:\iro_svn\opensprints\FW\user\user.c
001570   f007                                                                                                               
001572   c001     MOVFF     0x1,0x8                                                                                         
001574   f008                                                                                                               
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
001576   df71     RCALL     0x145a         	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
001578   0e03     MOVLW     0x3            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
00157a   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00157c   e202     BC        0x1582                                                                                          
00157e   6ae1     CLRF      0xe1,0x0                                                                                        
001580   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001582   6ee1     MOVWF     0xe1,0x0                                                                                        
001584   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001586   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001588   ffd9                                                                                                               
00158a   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // FORMAT: C,<portA_IO>,<portB_IO>,<portC_IO>,<analog_config><CR>                E:\iro_svn\opensprints\FW\user\user.c
                                           // EXAMPLE: "C,255,0,4,0<CR>"                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           // <portX_IO> is the byte sent to the Data Direction (DDR) regsiter for          E:\iro_svn\opensprints\FW\user\user.c
                                           // each port. A 1 in a bit location means input, a 0 means output.               E:\iro_svn\opensprints\FW\user\user.c
                                           // <analog_config> is a value between 0 and 12. It tells the UBW                 E:\iro_svn\opensprints\FW\user\user.c
                                           // how many analog inputs to enable. If a zero is sent for this                  E:\iro_svn\opensprints\FW\user\user.c
                                           // parameter, all analog inputs are disabled.                                    E:\iro_svn\opensprints\FW\user\user.c
                                           // For the other values, see the following chart to know what pins are           E:\iro_svn\opensprints\FW\user\user.c
                                           // used for what:                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           //                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           // Note that in the following chart, PortE is references. This port              E:\iro_svn\opensprints\FW\user\user.c
                                           // only exists on the 40 and 44 pin versions of the UBW. For the                 E:\iro_svn\opensprints\FW\user\user.c
                                           // 28 pin versions of the UBW, all PortE based analog pins will return           E:\iro_svn\opensprints\FW\user\user.c
                                           // zero.                                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           //                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           // <analog_config>	Analog Inputs Enabled	Pins Used For Analog Inputs             E:\iro_svn\opensprints\FW\user\user.c
                                           // ---------------	---------------------	-------------------------------         E:\iro_svn\opensprints\FW\user\user.c
                                           //	0				<none>					<none>                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           //	1				AN0						A0                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           //	2				AN0,AN1					A0,A1	                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           //	3				AN0,AN1,AN2				A0,A1,A2	                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           //	4				AN0,AN1,AN2,AN3			A0,A1,A2,A3	                                           E:\iro_svn\opensprints\FW\user\user.c
                                           //	5				AN0,AN1,AN2,AN3,AN4		A0,A1,A2,A3,A5		                                    E:\iro_svn\opensprints\FW\user\user.c
                                           //	6				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0                                   E:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5						                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           //	7				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1                                E:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6						                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           //	8				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2                             E:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6,AN7						                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           //	9				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2                          E:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6,AN7,AN8						                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           //	10				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2,B3                      E:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6,AN7,AN8,                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           //						AN9						                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           //	11				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2,B3,B1                   E:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6,AN7,AN8,                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           //						AB9,AN10						                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           //	12				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2,B3,B1,B4                E:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6,AN7,AN8,                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           //						AN9,AN10,AN11                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // NOTE: it is up to the user to tell the proper port direction bits to be       E:\iro_svn\opensprints\FW\user\user.c
                                           // inputs for the analog channels they wish to use.                              E:\iro_svn\opensprints\FW\user\user.c
00158c   cfd9     MOVFF     0xfd9,0xfe6    void parse_C_packet(void)                                                        E:\iro_svn\opensprints\FW\user\user.c
00158e   ffe6                                                                                                               
001590   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001592   ffd9                                                                                                               
001594   0e04     MOVLW     0x4                                                                                             
001596   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char PA, PB, PC, AA;                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char PD, PE;                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Extract each of the four values.                                             E:\iro_svn\opensprints\FW\user\user.c
001598   0e01     MOVLW     0x1            	PA = extract_number (kUCHAR);                                                   E:\iro_svn\opensprints\FW\user\user.c
00159a   6ee6     MOVWF     0xe6,0x0                                                                                        
00159c   ec28     CALL      0x2250,0x0                                                                                      
00159e   f011                                                                                                               
0015a0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015a2   501d     MOVF      0x1d,0x0,0x0                                                                                    
0015a4   6edf     MOVWF     0xdf,0x0                                                                                        
0015a6   0e01     MOVLW     0x1            	PB = extract_number (kUCHAR);                                                   E:\iro_svn\opensprints\FW\user\user.c
0015a8   6ee6     MOVWF     0xe6,0x0                                                                                        
0015aa   ec28     CALL      0x2250,0x0                                                                                      
0015ac   f011                                                                                                               
0015ae   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015b0   0e01     MOVLW     0x1                                                                                             
0015b2   c01d     MOVFF     0x1d,0xfdb                                                                                      
0015b4   ffdb                                                                                                               
0015b6   0e01     MOVLW     0x1            	PC = extract_number (kUCHAR);                                                   E:\iro_svn\opensprints\FW\user\user.c
0015b8   6ee6     MOVWF     0xe6,0x0                                                                                        
0015ba   ec28     CALL      0x2250,0x0                                                                                      
0015bc   f011                                                                                                               
0015be   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015c0   0e02     MOVLW     0x2                                                                                             
0015c2   c01d     MOVFF     0x1d,0xfdb                                                                                      
0015c4   ffdb                                                                                                               
                                           #ifdef __18F4550                                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	PD = extract_number (kUCHAR);                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           	PE = extract_number (kUCHAR);                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\user\user.c
0015c6   0e01     MOVLW     0x1            	AA = extract_number (kUCHAR);                                                   E:\iro_svn\opensprints\FW\user\user.c
0015c8   6ee6     MOVWF     0xe6,0x0                                                                                        
0015ca   ec28     CALL      0x2250,0x0                                                                                      
0015cc   f011                                                                                                               
0015ce   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015d0   0e03     MOVLW     0x3                                                                                             
0015d2   c01d     MOVFF     0x1d,0xfdb                                                                                      
0015d4   ffdb                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iro_svn\opensprints\FW\user\user.c
0015d6   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iro_svn\opensprints\FW\user\user.c
0015d8   e001     BZ        0x15dc                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
0015da   d02b     BRA       0x1632         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Now write those values to the data direction registers.                      E:\iro_svn\opensprints\FW\user\user.c
0015dc   50df     MOVF      0xdf,0x0,0x0   	TRISA = PA;                                                                     E:\iro_svn\opensprints\FW\user\user.c
0015de   6e92     MOVWF     0x92,0x0                                                                                        
0015e0   0e01     MOVLW     0x1            	TRISB = PB;                                                                     E:\iro_svn\opensprints\FW\user\user.c
0015e2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0015e4   6e93     MOVWF     0x93,0x0                                                                                        
0015e6   0e02     MOVLW     0x2            	TRISC = PC;                                                                     E:\iro_svn\opensprints\FW\user\user.c
0015e8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0015ea   6e94     MOVWF     0x94,0x0                                                                                        
                                           #ifdef __18F4550                                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	TRISD = PD;                                                                     E:\iro_svn\opensprints\FW\user\user.c
                                           	TRISE = PE;                                                                     E:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	// Handle the analog value.                                                     E:\iro_svn\opensprints\FW\user\user.c
                                           	// Maximum value of 12.                                                         E:\iro_svn\opensprints\FW\user\user.c
0015ec   0e03     MOVLW     0x3            	if (AA > 12)                                                                    E:\iro_svn\opensprints\FW\user\user.c
0015ee   50db     MOVF      0xdb,0x0,0x0                                                                                    
0015f0   080c     SUBLW     0xc                                                                                             
0015f2   e205     BC        0x15fe                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
0015f4   0e0c     MOVLW     0xc            		AA = 12;                                                                       E:\iro_svn\opensprints\FW\user\user.c
0015f6   6ef3     MOVWF     0xf3,0x0                                                                                        
0015f8   0e03     MOVLW     0x3                                                                                             
0015fa   cff3     MOVFF     0xff3,0xfdb                                                                                     
0015fc   ffdb                                                                                                               
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	// If we are turning off Analog inputs                                          E:\iro_svn\opensprints\FW\user\user.c
0015fe   0e03     MOVLW     0x3            	if (0 == AA)                                                                    E:\iro_svn\opensprints\FW\user\user.c
001600   50db     MOVF      0xdb,0x0,0x0                                                                                    
001602   e105     BNZ       0x160e                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// Turn all analog inputs into digital inputs                                  E:\iro_svn\opensprints\FW\user\user.c
001604   0e0f     MOVLW     0xf            		ADCON1 = 0x0F;                                                                 E:\iro_svn\opensprints\FW\user\user.c
001606   6ec1     MOVWF     0xc1,0x0                                                                                        
                                           		// Turn off the ADC                                                            E:\iro_svn\opensprints\FW\user\user.c
001608   90c2     BCF       0xc2,0x0,0x0   		ADCON0bits.ADON = 0;                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		// Turn off our own idea of how many analog channels to convert                E:\iro_svn\opensprints\FW\user\user.c
00160a   6a0c     CLRF      0xc,0x0        		AnalogEnable = 0;                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
00160c   d011     BRA       0x1630         	else                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// Some protection from ISR                                                    E:\iro_svn\opensprints\FW\user\user.c
00160e   6a0c     CLRF      0xc,0x0        		AnalogEnable = 0;                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           		// We're turning some on.                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           		// Start by selecting channel zero		                                           E:\iro_svn\opensprints\FW\user\user.c
001610   6ac2     CLRF      0xc2,0x0       		ADCON0 = 0;                                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           		// Then enabling the proper number of channels                                 E:\iro_svn\opensprints\FW\user\user.c
001612   0e03     MOVLW     0x3            		ADCON1 = 15 - AA;                                                              E:\iro_svn\opensprints\FW\user\user.c
001614   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001616   ffe6                                                                                                               
001618   0e0f     MOVLW     0xf                                                                                             
00161a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00161c   80d8     BSF       0xd8,0x0,0x0                                                                                    
00161e   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
001620   6ec1     MOVWF     0xc1,0x0                                                                                        
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           		// Set up ADCON2 options                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           		// A/D Result right justified                                                  E:\iro_svn\opensprints\FW\user\user.c
                                           		// Acq time = 20 Tad (?)                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           		// Tad = Fosc/64                                                               E:\iro_svn\opensprints\FW\user\user.c
001622   0ebe     MOVLW     0xbe           		ADCON2 = 0b10111110;                                                           E:\iro_svn\opensprints\FW\user\user.c
001624   6ec0     MOVWF     0xc0,0x0                                                                                        
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           		// Turn on the ADC                                                             E:\iro_svn\opensprints\FW\user\user.c
001626   80c2     BSF       0xc2,0x0,0x0   		ADCON0bits.ADON = 1;                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           		// Tell ourselves how many channels to convert, and turn on ISR conversions    E:\iro_svn\opensprints\FW\user\user.c
001628   0e03     MOVLW     0x3            		AnalogEnable = AA;                                                             E:\iro_svn\opensprints\FW\user\user.c
00162a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00162c   6e0c     MOVWF     0xc,0x0                                                                                         
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
00162e   84ca     BSF       0xca,0x2,0x0   		T2CONbits.TMR2ON = 1;                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
001630   df14     RCALL     0x145a         	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
001632   0e04     MOVLW     0x4            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
001634   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001636   e202     BC        0x163c                                                                                          
001638   6ae1     CLRF      0xe1,0x0                                                                                        
00163a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00163c   6ee1     MOVWF     0xe1,0x0                                                                                        
00163e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001640   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001642   ffd9                                                                                                               
001644   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // Outputs values to the ports pins that are set up as outputs.                  E:\iro_svn\opensprints\FW\user\user.c
                                           // Example "O,121,224,002<CR>"                                                   E:\iro_svn\opensprints\FW\user\user.c
001646   cfd9     MOVFF     0xfd9,0xfe6    void parse_O_packet(void)                                                        E:\iro_svn\opensprints\FW\user\user.c
001648   ffe6                                                                                                               
00164a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00164c   ffd9                                                                                                               
00164e   0e03     MOVLW     0x3                                                                                             
001650   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char PA, PB, PC;                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char PD, PE;                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Extract each of the values.                                                  E:\iro_svn\opensprints\FW\user\user.c
001652   0e01     MOVLW     0x1            	PA = extract_number (kUCHAR);                                                   E:\iro_svn\opensprints\FW\user\user.c
001654   6ee6     MOVWF     0xe6,0x0                                                                                        
001656   ec28     CALL      0x2250,0x0                                                                                      
001658   f011                                                                                                               
00165a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00165c   501d     MOVF      0x1d,0x0,0x0                                                                                    
00165e   6edf     MOVWF     0xdf,0x0                                                                                        
001660   0e01     MOVLW     0x1            	PB = extract_number (kUCHAR);                                                   E:\iro_svn\opensprints\FW\user\user.c
001662   6ee6     MOVWF     0xe6,0x0                                                                                        
001664   ec28     CALL      0x2250,0x0                                                                                      
001666   f011                                                                                                               
001668   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00166a   0e01     MOVLW     0x1                                                                                             
00166c   c01d     MOVFF     0x1d,0xfdb                                                                                      
00166e   ffdb                                                                                                               
001670   0e01     MOVLW     0x1            	PC = extract_number (kUCHAR);                                                   E:\iro_svn\opensprints\FW\user\user.c
001672   6ee6     MOVWF     0xe6,0x0                                                                                        
001674   ec28     CALL      0x2250,0x0                                                                                      
001676   f011                                                                                                               
001678   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00167a   0e02     MOVLW     0x2                                                                                             
00167c   c01d     MOVFF     0x1d,0xfdb                                                                                      
00167e   ffdb                                                                                                               
                                           #ifdef __18F4550                                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	PD = extract_number (kUCHAR);                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           	PE = extract_number (kUCHAR);                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iro_svn\opensprints\FW\user\user.c
001680   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iro_svn\opensprints\FW\user\user.c
001682   e001     BZ        0x1686                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001684   d009     BRA       0x1698         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	// Now write those values to the data port registers.                           E:\iro_svn\opensprints\FW\user\user.c
001686   50df     MOVF      0xdf,0x0,0x0   	LATA = PA;                                                                      E:\iro_svn\opensprints\FW\user\user.c
001688   6e89     MOVWF     0x89,0x0                                                                                        
00168a   0e01     MOVLW     0x1            	LATB = PB;                                                                      E:\iro_svn\opensprints\FW\user\user.c
00168c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00168e   6e8a     MOVWF     0x8a,0x0                                                                                        
001690   0e02     MOVLW     0x2            	LATC = PC;                                                                      E:\iro_svn\opensprints\FW\user\user.c
001692   50db     MOVF      0xdb,0x0,0x0                                                                                    
001694   6e8b     MOVWF     0x8b,0x0                                                                                        
                                           #ifdef __18F4550                                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	LATD = PD;                                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           	LATE = PE;                                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               E:\iro_svn\opensprints\FW\user\user.c
001696   dee1     RCALL     0x145a         	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
001698   0e03     MOVLW     0x3            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
00169a   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00169c   e202     BC        0x16a2                                                                                          
00169e   6ae1     CLRF      0xe1,0x0                                                                                        
0016a0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0016a2   6ee1     MOVWF     0xe1,0x0                                                                                        
0016a4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0016a6   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0016a8   ffd9                                                                                                               
0016aa   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // Read in the three I/O ports (A,B,C) and create                                E:\iro_svn\opensprints\FW\user\user.c
                                           // a packet to send back with all of values.                                     E:\iro_svn\opensprints\FW\user\user.c
                                           // Example: "I,143,221,010<CR>"                                                  E:\iro_svn\opensprints\FW\user\user.c
                                           // Remember that on UBW 28 pin boards, we only have                              E:\iro_svn\opensprints\FW\user\user.c
                                           // Port A bits 0 through 5                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           // Port B bits 0 through 7                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           // Port C bits 0,1,2 and 7,8                                                     E:\iro_svn\opensprints\FW\user\user.c
                                           // And that Port C bits 0,1,2 are used for                                       E:\iro_svn\opensprints\FW\user\user.c
                                           // 		User1 LED, User2 LED and Program switch respectively.                       E:\iro_svn\opensprints\FW\user\user.c
                                           // The rest will be read in as zeros.                                            E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_I_packet(void)                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	printf (                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		(rom char*)"I,%03i,%03i,%03i,%03i,%03i\r\n",                                   E:\iro_svn\opensprints\FW\user\user.c
                                           		PORTA,                                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           		PORTB,                                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           		PORTC,                                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           		PORTD,                                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           		PORTE                                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           	);                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           #else                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	printf (                                                                        E:\iro_svn\opensprints\FW\user\user.c
0016be   0e82     MOVLW     0x82           		(rom char*)"I,%03i,%03i,%03i\r\n",                                             E:\iro_svn\opensprints\FW\user\user.c
0016c0   6e2a     MOVWF     0x2a,0x0                                                                                        
0016c2   0e41     MOVLW     0x41                                                                                            
0016c4   6e2b     MOVWF     0x2b,0x0                                                                                        
0016c6   6a2c     CLRF      0x2c,0x0                                                                                        
0016c8   c02a     MOVFF     0x2a,0xfe6                                                                                      
0016ca   ffe6                                                                                                               
0016cc   c02b     MOVFF     0x2b,0xfe6                                                                                      
0016ce   ffe6                                                                                                               
0016d0   c02c     MOVFF     0x2c,0xfe6                                                                                      
0016d2   ffe6                                                                                                               
0016b8   5080     MOVF      0x80,0x0,0x0   		PORTA,                                                                         E:\iro_svn\opensprints\FW\user\user.c
0016ba   6ee6     MOVWF     0xe6,0x0                                                                                        
0016bc   6ae6     CLRF      0xe6,0x0                                                                                        
0016b2   5081     MOVF      0x81,0x0,0x0   		PORTB,                                                                         E:\iro_svn\opensprints\FW\user\user.c
0016b4   6ee6     MOVWF     0xe6,0x0                                                                                        
0016b6   6ae6     CLRF      0xe6,0x0                                                                                        
0016ac   5082     MOVF      0x82,0x0,0x0   		PORTC                                                                          E:\iro_svn\opensprints\FW\user\user.c
0016ae   6ee6     MOVWF     0xe6,0x0       	);                                                                              E:\iro_svn\opensprints\FW\user\user.c
0016b0   6ae6     CLRF      0xe6,0x0                                                                                        
0016d4   ec6b     CALL      0x44d6,0x0                                                                                      
0016d6   f022                                                                                                               
0016d8   6e2d     MOVWF     0x2d,0x0                                                                                        
0016da   0e09     MOVLW     0x9                                                                                             
0016dc   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0016de   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           #endif                                                                           E:\iro_svn\opensprints\FW\user\user.c
0016e0   0012     RETURN    0x0            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // All we do here is just print out our version number                           E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_V_packet(void)                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
0016e2   0e64     MOVLW     0x64           	printf ((rom char *)st_version);                                                E:\iro_svn\opensprints\FW\user\user.c
0016e4   6e2a     MOVWF     0x2a,0x0                                                                                        
0016e6   0e47     MOVLW     0x47                                                                                            
0016e8   6e2b     MOVWF     0x2b,0x0                                                                                        
0016ea   6a2c     CLRF      0x2c,0x0                                                                                        
0016ec   c02a     MOVFF     0x2a,0xfe6                                                                                      
0016ee   ffe6                                                                                                               
0016f0   c02b     MOVFF     0x2b,0xfe6                                                                                      
0016f2   ffe6                                                                                                               
0016f4   c02c     MOVFF     0x2c,0xfe6                                                                                      
0016f6   ffe6                                                                                                               
0016f8   ec6b     CALL      0x44d6,0x0                                                                                      
0016fa   f022                                                                                                               
0016fc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0016fe   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001700   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001702   0012     RETURN    0x0            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // A is for read Analog inputs                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           // Just print out the last analog values for each of the                         E:\iro_svn\opensprints\FW\user\user.c
                                           // enabled channels. The number of value returned in the                         E:\iro_svn\opensprints\FW\user\user.c
                                           // A packet depend upon the number of analog inputs enabled.                     E:\iro_svn\opensprints\FW\user\user.c
                                           // The user can enabled any number of analog inputs between                      E:\iro_svn\opensprints\FW\user\user.c
                                           // 0 and 12. (none enabled, through all 12 analog inputs enabled).               E:\iro_svn\opensprints\FW\user\user.c
                                           // Returned packet will look like "A,0,0,0,0,0,0<CR>" if                         E:\iro_svn\opensprints\FW\user\user.c
                                           // six analog inputs are enabled but they are all                                E:\iro_svn\opensprints\FW\user\user.c
                                           // grounded. Note that each one is a 10 bit                                      E:\iro_svn\opensprints\FW\user\user.c
                                           // value, where 0 means the intput was at ground, and                            E:\iro_svn\opensprints\FW\user\user.c
                                           // 1024 means it was at +5 V. (Or whatever the USB +5                            E:\iro_svn\opensprints\FW\user\user.c
                                           // pin is at.)                                                                   E:\iro_svn\opensprints\FW\user\user.c
001704   cfd9     MOVFF     0xfd9,0xfe6    void parse_A_packet(void)                                                        E:\iro_svn\opensprints\FW\user\user.c
001706   ffe6                                                                                                               
001708   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00170a   ffd9                                                                                                               
00170c   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
00170e   6adf     CLRF      0xdf,0x0       	char channel = 0;                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Put the beginning of the packet in place                                     E:\iro_svn\opensprints\FW\user\user.c
001710   0e80     MOVLW     0x80           	printf ((rom char *)"A");                                                       E:\iro_svn\opensprints\FW\user\user.c
001712   6e2a     MOVWF     0x2a,0x0                                                                                        
001714   0e41     MOVLW     0x41                                                                                            
001716   6e2b     MOVWF     0x2b,0x0                                                                                        
001718   6a2c     CLRF      0x2c,0x0                                                                                        
00171a   c02a     MOVFF     0x2a,0xfe6                                                                                      
00171c   ffe6                                                                                                               
00171e   c02b     MOVFF     0x2b,0xfe6                                                                                      
001720   ffe6                                                                                                               
001722   c02c     MOVFF     0x2c,0xfe6                                                                                      
001724   ffe6                                                                                                               
001726   ec6b     CALL      0x44d6,0x0                                                                                      
001728   f022                                                                                                               
00172a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00172c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00172e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	// Now add each analog value                                                    E:\iro_svn\opensprints\FW\user\user.c
001730   6adf     CLRF      0xdf,0x0       	for (channel = 0; channel < AnalogEnable; channel++)                            E:\iro_svn\opensprints\FW\user\user.c
001732   500c     MOVF      0xc,0x0,0x0                                                                                     
001734   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
001736   e232     BC        0x179c                                                                                          
001798   2adf     INCF      0xdf,0x1,0x0                                                                                    
00179a   d7cb     BRA       0x1732                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		printf(                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           			(rom char *)",%04u"                                                           E:\iro_svn\opensprints\FW\user\user.c
001738   cfdf     MOVFF     0xfdf,0x2a     			,ISR_A_FIFO[channel][ISR_A_FIFO_out]                                          E:\iro_svn\opensprints\FW\user\user.c
00173a   f02a                                                                                                               
00173c   6a2b     CLRF      0x2b,0x0                                                                                        
00173e   be2a     BTFSC     0x2a,0x7,0x0                                                                                    
001740   682b     SETF      0x2b,0x0                                                                                        
001742   0e06     MOVLW     0x6                                                                                             
001744   022b     MULWF     0x2b,0x0                                                                                        
001746   cff3     MOVFF     0xff3,0x2b                                                                                      
001748   f02b                                                                                                               
00174a   0e06     MOVLW     0x6                                                                                             
00174c   022a     MULWF     0x2a,0x0                                                                                        
00174e   cff3     MOVFF     0xff3,0x2a                                                                                      
001750   f02a                                                                                                               
001752   50f4     MOVF      0xf4,0x0,0x0                                                                                    
001754   262b     ADDWF     0x2b,0x1,0x0                                                                                    
001756   0e00     MOVLW     0x0                                                                                             
001758   262a     ADDWF     0x2a,0x1,0x0                                                                                    
00175a   0e01     MOVLW     0x1                                                                                             
00175c   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
00175e   500a     MOVF      0xa,0x0,0x0                                                                                     
001760   0d02     MULLW     0x2                                                                                             
001762   502a     MOVF      0x2a,0x0,0x0                                                                                    
001764   24f3     ADDWF     0xf3,0x0,0x0                                                                                    
001766   6ee9     MOVWF     0xe9,0x0                                                                                        
001768   502b     MOVF      0x2b,0x0,0x0                                                                                    
00176a   20f4     ADDWFC    0xf4,0x0,0x0                                                                                    
00176c   6eea     MOVWF     0xea,0x0                                                                                        
001776   0e7a     MOVLW     0x7a                                                                                            
001778   6e2c     MOVWF     0x2c,0x0                                                                                        
00177a   0e41     MOVLW     0x41                                                                                            
00177c   6e2d     MOVWF     0x2d,0x0                                                                                        
00177e   6a2e     CLRF      0x2e,0x0                                                                                        
001780   c02c     MOVFF     0x2c,0xfe6                                                                                      
001782   ffe6                                                                                                               
001784   c02d     MOVFF     0x2d,0xfe6                                                                                      
001786   ffe6                                                                                                               
001788   c02e     MOVFF     0x2e,0xfe6                                                                                      
00178a   ffe6                                                                                                               
00176e   cfee     MOVFF     0xfee,0xfe6    		);                                                                             E:\iro_svn\opensprints\FW\user\user.c
001770   ffe6                                                                                                               
001772   cfef     MOVFF     0xfef,0xfe6                                                                                     
001774   ffe6                                                                                                               
00178c   ec6b     CALL      0x44d6,0x0                                                                                      
00178e   f022                                                                                                               
001790   6e2f     MOVWF     0x2f,0x0                                                                                        
001792   0e05     MOVLW     0x5                                                                                             
001794   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001796   502f     MOVF      0x2f,0x0,0x0                                                                                    
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	// Add \r\n and terminating zero.                                               E:\iro_svn\opensprints\FW\user\user.c
00179c   0e61     MOVLW     0x61           	printf ((rom char *)st_LFCR);                                                   E:\iro_svn\opensprints\FW\user\user.c
00179e   6e2a     MOVWF     0x2a,0x0                                                                                        
0017a0   0e47     MOVLW     0x47                                                                                            
0017a2   6e2b     MOVWF     0x2b,0x0                                                                                        
0017a4   6a2c     CLRF      0x2c,0x0                                                                                        
0017a6   c02a     MOVFF     0x2a,0xfe6                                                                                      
0017a8   ffe6                                                                                                               
0017aa   c02b     MOVFF     0x2b,0xfe6                                                                                      
0017ac   ffe6                                                                                                               
0017ae   c02c     MOVFF     0x2c,0xfe6                                                                                      
0017b0   ffe6                                                                                                               
0017b2   ec6b     CALL      0x44d6,0x0                                                                                      
0017b4   f022                                                                                                               
0017b6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017b8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017ba   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017bc   52e5     MOVF      0xe5,0x1,0x0   }                                                                                E:\iro_svn\opensprints\FW\user\user.c
0017be   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017c0   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0017c2   ffd9                                                                                                               
0017c4   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // MW is for Memory Write                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           // "MW,<location>,<value><CR>"                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           // <location> is a decimal value between 0 and 4096 indicating the RAM address to write to  E:\iro_svn\opensprints\FW\user\user.c
                                           // <value> is a decimal value between 0 and 255 that is the value to write       E:\iro_svn\opensprints\FW\user\user.c
0017c6   cfd9     MOVFF     0xfd9,0xfe6    void parse_MW_packet(void)                                                       E:\iro_svn\opensprints\FW\user\user.c
0017c8   ffe6                                                                                                               
0017ca   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0017cc   ffd9                                                                                                               
0017ce   0e03     MOVLW     0x3                                                                                             
0017d0   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned int location;                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char value;                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
0017d2   0e03     MOVLW     0x3            	location = extract_number (kUINT);                                              E:\iro_svn\opensprints\FW\user\user.c
0017d4   6ee6     MOVWF     0xe6,0x0                                                                                        
0017d6   ec28     CALL      0x2250,0x0                                                                                      
0017d8   f011                                                                                                               
0017da   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017dc   c01d     MOVFF     0x1d,0xfde                                                                                      
0017de   ffde                                                                                                               
0017e0   c01e     MOVFF     0x1e,0xfdd                                                                                      
0017e2   ffdd                                                                                                               
0017e4   0e01     MOVLW     0x1            	value = extract_number (kUCHAR);                                                E:\iro_svn\opensprints\FW\user\user.c
0017e6   6ee6     MOVWF     0xe6,0x0                                                                                        
0017e8   ec28     CALL      0x2250,0x0                                                                                      
0017ea   f011                                                                                                               
0017ec   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017ee   0e02     MOVLW     0x2                                                                                             
0017f0   c01d     MOVFF     0x1d,0xfdb                                                                                      
0017f2   ffdb                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iro_svn\opensprints\FW\user\user.c
0017f4   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iro_svn\opensprints\FW\user\user.c
0017f6   e001     BZ        0x17fa                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
0017f8   d011     BRA       0x181c         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check the address and write the byte in                                E:\iro_svn\opensprints\FW\user\user.c
0017fa   cfde     MOVFF     0xfde,0x2a     	if (location < 4096)                                                            E:\iro_svn\opensprints\FW\user\user.c
0017fc   f02a                                                                                                               
0017fe   cfdd     MOVFF     0xfdd,0x2b                                                                                      
001800   f02b                                                                                                               
001802   0e00     MOVLW     0x0                                                                                             
001804   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001806   0e10     MOVLW     0x10                                                                                            
001808   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
00180a   e207     BC        0x181a                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
00180c   cfde     MOVFF     0xfde,0xfe9    		*((unsigned char *)location) = value;                                          E:\iro_svn\opensprints\FW\user\user.c
00180e   ffe9                                                                                                               
001810   cfdd     MOVFF     0xfdd,0xfea                                                                                     
001812   ffea                                                                                                               
001814   0e02     MOVLW     0x2                                                                                             
001816   cfdb     MOVFF     0xfdb,0xfef                                                                                     
001818   ffef                                                                                                               
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
00181a   de1f     RCALL     0x145a         	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
00181c   0e03     MOVLW     0x3            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
00181e   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001820   e202     BC        0x1826                                                                                          
001822   6ae1     CLRF      0xe1,0x0                                                                                        
001824   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001826   6ee1     MOVWF     0xe1,0x0                                                                                        
001828   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00182a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00182c   ffd9                                                                                                               
00182e   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // MR is for Memory Read                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           // "MW,<location><CR>"                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           // <location> is a decimal value between 0 and 4096 indicating the RAM address to read from  E:\iro_svn\opensprints\FW\user\user.c
                                           // The UBW will then send a "MR,<value><CR>" packet back to the PC               E:\iro_svn\opensprints\FW\user\user.c
                                           // where <value> is the byte value read from the address                         E:\iro_svn\opensprints\FW\user\user.c
001830   cfd9     MOVFF     0xfd9,0xfe6    void parse_MR_packet(void)                                                       E:\iro_svn\opensprints\FW\user\user.c
001832   ffe6                                                                                                               
001834   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001836   ffd9                                                                                                               
001838   0e03     MOVLW     0x3                                                                                             
00183a   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned int location;                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char value;                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
00183c   0e03     MOVLW     0x3            	location = extract_number (kUINT);                                              E:\iro_svn\opensprints\FW\user\user.c
00183e   6ee6     MOVWF     0xe6,0x0                                                                                        
001840   ec28     CALL      0x2250,0x0                                                                                      
001842   f011                                                                                                               
001844   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001846   c01d     MOVFF     0x1d,0xfde                                                                                      
001848   ffde                                                                                                               
00184a   c01e     MOVFF     0x1e,0xfdd                                                                                      
00184c   ffdd                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iro_svn\opensprints\FW\user\user.c
00184e   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iro_svn\opensprints\FW\user\user.c
001850   e001     BZ        0x1854                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001852   d025     BRA       0x189e         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check the address and write the byte in                                E:\iro_svn\opensprints\FW\user\user.c
001854   cfde     MOVFF     0xfde,0x2a     	if (location < 4096)                                                            E:\iro_svn\opensprints\FW\user\user.c
001856   f02a                                                                                                               
001858   cfdd     MOVFF     0xfdd,0x2b                                                                                      
00185a   f02b                                                                                                               
00185c   0e00     MOVLW     0x0                                                                                             
00185e   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001860   0e10     MOVLW     0x10                                                                                            
001862   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
001864   e207     BC        0x1874                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001866   cfde     MOVFF     0xfde,0xfe9    		value = *((unsigned char *)location);                                          E:\iro_svn\opensprints\FW\user\user.c
001868   ffe9                                                                                                               
00186a   cfdd     MOVFF     0xfdd,0xfea                                                                                     
00186c   ffea                                                                                                               
00186e   0e02     MOVLW     0x2                                                                                             
001870   cfef     MOVFF     0xfef,0xfdb                                                                                     
001872   ffdb                                                                                                               
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	// Now send back the MR packet                                                  E:\iro_svn\opensprints\FW\user\user.c
                                           	printf (                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		(rom char *)"MR,%03u\r\n"                                                      E:\iro_svn\opensprints\FW\user\user.c
00187c   0e70     MOVLW     0x70           		,value                                                                         E:\iro_svn\opensprints\FW\user\user.c
00187e   6e2a     MOVWF     0x2a,0x0                                                                                        
001880   0e41     MOVLW     0x41                                                                                            
001882   6e2b     MOVWF     0x2b,0x0                                                                                        
001884   6a2c     CLRF      0x2c,0x0                                                                                        
001886   c02a     MOVFF     0x2a,0xfe6                                                                                      
001888   ffe6                                                                                                               
00188a   c02b     MOVFF     0x2b,0xfe6                                                                                      
00188c   ffe6                                                                                                               
00188e   c02c     MOVFF     0x2c,0xfe6                                                                                      
001890   ffe6                                                                                                               
001874   0e02     MOVLW     0x2            	);                                                                              E:\iro_svn\opensprints\FW\user\user.c
001876   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001878   ffe6                                                                                                               
00187a   6ae6     CLRF      0xe6,0x0                                                                                        
001892   ec6b     CALL      0x44d6,0x0                                                                                      
001894   f022                                                                                                               
001896   6e2d     MOVWF     0x2d,0x0                                                                                        
001898   0e05     MOVLW     0x5                                                                                             
00189a   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
00189c   502d     MOVF      0x2d,0x0,0x0                                                                                    
00189e   0e03     MOVLW     0x3            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
0018a0   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0018a2   e202     BC        0x18a8                                                                                          
0018a4   6ae1     CLRF      0xe1,0x0                                                                                        
0018a6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0018a8   6ee1     MOVWF     0xe1,0x0                                                                                        
0018aa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0018ac   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0018ae   ffd9                                                                                                               
0018b0   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // PD is for Pin Direction                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           // "PD,<port>,<pin>,<direction><CR>"                                             E:\iro_svn\opensprints\FW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                E:\iro_svn\opensprints\FW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to change direction on E:\iro_svn\opensprints\FW\user\user.c
                                           // <direction> is "1" for input, "0" for output                                  E:\iro_svn\opensprints\FW\user\user.c
0018b2   cfd9     MOVFF     0xfd9,0xfe6    void parse_PD_packet(void)                                                       E:\iro_svn\opensprints\FW\user\user.c
0018b4   ffe6                                                                                                               
0018b6   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0018b8   ffd9                                                                                                               
0018ba   0e03     MOVLW     0x3                                                                                             
0018bc   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char port;                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char pin;                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char direction;                                                        E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
0018be   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      E:\iro_svn\opensprints\FW\user\user.c
0018c0   6ee6     MOVWF     0xe6,0x0                                                                                        
0018c2   ec28     CALL      0x2250,0x0                                                                                      
0018c4   f011                                                                                                               
0018c6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0018c8   501d     MOVF      0x1d,0x0,0x0                                                                                    
0018ca   6edf     MOVWF     0xdf,0x0                                                                                        
0018cc   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  E:\iro_svn\opensprints\FW\user\user.c
0018ce   6ee6     MOVWF     0xe6,0x0                                                                                        
0018d0   ec28     CALL      0x2250,0x0                                                                                      
0018d2   f011                                                                                                               
0018d4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0018d6   0e01     MOVLW     0x1                                                                                             
0018d8   c01d     MOVFF     0x1d,0xfdb                                                                                      
0018da   ffdb                                                                                                               
0018dc   0e01     MOVLW     0x1            	direction = extract_number (kUCHAR);                                            E:\iro_svn\opensprints\FW\user\user.c
0018de   6ee6     MOVWF     0xe6,0x0                                                                                        
0018e0   ec28     CALL      0x2250,0x0                                                                                      
0018e2   f011                                                                                                               
0018e4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0018e6   0e02     MOVLW     0x2                                                                                             
0018e8   c01d     MOVFF     0x1d,0xfdb                                                                                      
0018ea   ffdb                                                                                                               
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iro_svn\opensprints\FW\user\user.c
0018ec   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iro_svn\opensprints\FW\user\user.c
0018ee   e001     BZ        0x18f2                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
0018f0   d072     BRA       0x19d6         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check the parameters                                                   E:\iro_svn\opensprints\FW\user\user.c
0018f2   0e02     MOVLW     0x2            	if (direction > 1)                                                              E:\iro_svn\opensprints\FW\user\user.c
0018f4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0018f6   0801     SUBLW     0x1                                                                                             
0018f8   e202     BC        0x18fe                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
0018fa   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iro_svn\opensprints\FW\user\user.c
0018fc   d06c     BRA       0x19d6         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
0018fe   0e01     MOVLW     0x1            	if (pin > 7)                                                                    E:\iro_svn\opensprints\FW\user\user.c
001900   50db     MOVF      0xdb,0x0,0x0                                                                                    
001902   0807     SUBLW     0x7                                                                                             
001904   e202     BC        0x190a                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001906   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iro_svn\opensprints\FW\user\user.c
001908   d066     BRA       0x19d6         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
00190a   0e41     MOVLW     0x41           	if ('A' == port)                                                                E:\iro_svn\opensprints\FW\user\user.c
00190c   6e2a     MOVWF     0x2a,0x0                                                                                        
00190e   50df     MOVF      0xdf,0x0,0x0                                                                                    
001910   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001912   e11c     BNZ       0x194c                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001914   0e02     MOVLW     0x2            		if (0 == direction)                                                            E:\iro_svn\opensprints\FW\user\user.c
001916   50db     MOVF      0xdb,0x0,0x0                                                                                    
001918   e10d     BNZ       0x1934                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
00191a   0e01     MOVLW     0x1            			bitclr (DDRA, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
00191c   6ef3     MOVWF     0xf3,0x0                                                                                        
00191e   0e01     MOVLW     0x1                                                                                             
001920   50db     MOVF      0xdb,0x0,0x0                                                                                    
001922   e004     BZ        0x192c                                                                                          
001924   90d8     BCF       0xd8,0x0,0x0                                                                                    
001926   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001928   06e8     DECF      0xe8,0x1,0x0                                                                                    
00192a   e1fc     BNZ       0x1924                                                                                          
00192c   50f3     MOVF      0xf3,0x0,0x0                                                                                    
00192e   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001930   1692     ANDWF     0x92,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
001932   d00b     BRA       0x194a         		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001934   0e01     MOVLW     0x1            			bitset (DDRA, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
001936   6ef3     MOVWF     0xf3,0x0                                                                                        
001938   0e01     MOVLW     0x1                                                                                             
00193a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00193c   e004     BZ        0x1946                                                                                          
00193e   90d8     BCF       0xd8,0x0,0x0                                                                                    
001940   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001942   06e8     DECF      0xe8,0x1,0x0                                                                                    
001944   e1fc     BNZ       0x193e                                                                                          
001946   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001948   1292     IORWF     0x92,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
00194a   d044     BRA       0x19d4         	else if ('B' == port)                                                           E:\iro_svn\opensprints\FW\user\user.c
00194c   0e42     MOVLW     0x42                                                                                            
00194e   6e2a     MOVWF     0x2a,0x0                                                                                        
001950   50df     MOVF      0xdf,0x0,0x0                                                                                    
001952   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001954   e11c     BNZ       0x198e                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001956   0e02     MOVLW     0x2            		if (0 == direction)                                                            E:\iro_svn\opensprints\FW\user\user.c
001958   50db     MOVF      0xdb,0x0,0x0                                                                                    
00195a   e10d     BNZ       0x1976                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
00195c   0e01     MOVLW     0x1            			bitclr (DDRB, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
00195e   6ef3     MOVWF     0xf3,0x0                                                                                        
001960   0e01     MOVLW     0x1                                                                                             
001962   50db     MOVF      0xdb,0x0,0x0                                                                                    
001964   e004     BZ        0x196e                                                                                          
001966   90d8     BCF       0xd8,0x0,0x0                                                                                    
001968   36f3     RLCF      0xf3,0x1,0x0                                                                                    
00196a   06e8     DECF      0xe8,0x1,0x0                                                                                    
00196c   e1fc     BNZ       0x1966                                                                                          
00196e   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001970   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001972   1693     ANDWF     0x93,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
001974   d00b     BRA       0x198c         		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001976   0e01     MOVLW     0x1            			bitset (DDRB, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
001978   6ef3     MOVWF     0xf3,0x0                                                                                        
00197a   0e01     MOVLW     0x1                                                                                             
00197c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00197e   e004     BZ        0x1988                                                                                          
001980   90d8     BCF       0xd8,0x0,0x0                                                                                    
001982   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001984   06e8     DECF      0xe8,0x1,0x0                                                                                    
001986   e1fc     BNZ       0x1980                                                                                          
001988   50f3     MOVF      0xf3,0x0,0x0                                                                                    
00198a   1293     IORWF     0x93,0x1,0x0                                                                                    
                                           		}		                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
00198c   d023     BRA       0x19d4         	else if ('C' == port)                                                           E:\iro_svn\opensprints\FW\user\user.c
00198e   0e43     MOVLW     0x43                                                                                            
001990   6e2a     MOVWF     0x2a,0x0                                                                                        
001992   50df     MOVF      0xdf,0x0,0x0                                                                                    
001994   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001996   e11c     BNZ       0x19d0                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001998   0e02     MOVLW     0x2            		if (0 == direction)                                                            E:\iro_svn\opensprints\FW\user\user.c
00199a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00199c   e10d     BNZ       0x19b8                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
00199e   0e01     MOVLW     0x1            			bitclr (DDRC, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
0019a0   6ef3     MOVWF     0xf3,0x0                                                                                        
0019a2   0e01     MOVLW     0x1                                                                                             
0019a4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0019a6   e004     BZ        0x19b0                                                                                          
0019a8   90d8     BCF       0xd8,0x0,0x0                                                                                    
0019aa   36f3     RLCF      0xf3,0x1,0x0                                                                                    
0019ac   06e8     DECF      0xe8,0x1,0x0                                                                                    
0019ae   e1fc     BNZ       0x19a8                                                                                          
0019b0   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0019b2   1ce8     COMF      0xe8,0x0,0x0                                                                                    
0019b4   1694     ANDWF     0x94,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
0019b6   d00b     BRA       0x19ce         		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
0019b8   0e01     MOVLW     0x1            			bitset (DDRC, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
0019ba   6ef3     MOVWF     0xf3,0x0                                                                                        
0019bc   0e01     MOVLW     0x1                                                                                             
0019be   50db     MOVF      0xdb,0x0,0x0                                                                                    
0019c0   e004     BZ        0x19ca                                                                                          
0019c2   90d8     BCF       0xd8,0x0,0x0                                                                                    
0019c4   36f3     RLCF      0xf3,0x1,0x0                                                                                    
0019c6   06e8     DECF      0xe8,0x1,0x0                                                                                    
0019c8   e1fc     BNZ       0x19c2                                                                                          
0019ca   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0019cc   1294     IORWF     0x94,0x1,0x0                                                                                    
                                           		}		                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	else if ('D' == port)                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		if (0 == direction)                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			bitclr (DDRD, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			bitset (DDRD, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}		                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	else if ('E' == port)                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		if (0 == direction)                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			bitclr (DDRE, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			bitset (DDRE, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}		                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\user\user.c
0019ce   d002     BRA       0x19d4         	else                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
0019d0   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iro_svn\opensprints\FW\user\user.c
0019d2   d001     BRA       0x19d6         		return;	                                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
0019d4   dd42     RCALL     0x145a         	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
0019d6   0e03     MOVLW     0x3            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
0019d8   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0019da   e202     BC        0x19e0                                                                                          
0019dc   6ae1     CLRF      0xe1,0x0                                                                                        
0019de   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0019e0   6ee1     MOVWF     0xe1,0x0                                                                                        
0019e2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0019e4   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0019e6   ffd9                                                                                                               
0019e8   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // PI is for Pin Input                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           // "PI,<port>,<pin><CR>"                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                E:\iro_svn\opensprints\FW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to read             E:\iro_svn\opensprints\FW\user\user.c
                                           // The command returns a "PI,<value><CR>" packet,                                E:\iro_svn\opensprints\FW\user\user.c
                                           // where <value> is the value (0 or 1 for digital, 0 to 1024 for Analog)         E:\iro_svn\opensprints\FW\user\user.c
                                           // value for that pin.                                                           E:\iro_svn\opensprints\FW\user\user.c
0019ea   cfd9     MOVFF     0xfd9,0xfe6    void parse_PI_packet(void)                                                       E:\iro_svn\opensprints\FW\user\user.c
0019ec   ffe6                                                                                                               
0019ee   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0019f0   ffd9                                                                                                               
0019f2   0e03     MOVLW     0x3                                                                                             
0019f4   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char port;                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char pin;                                                              E:\iro_svn\opensprints\FW\user\user.c
0019f6   0e02     MOVLW     0x2            	unsigned char value = 0;                                                        E:\iro_svn\opensprints\FW\user\user.c
0019f8   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
0019fa   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      E:\iro_svn\opensprints\FW\user\user.c
0019fc   6ee6     MOVWF     0xe6,0x0                                                                                        
0019fe   ec28     CALL      0x2250,0x0                                                                                      
001a00   f011                                                                                                               
001a02   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001a04   501d     MOVF      0x1d,0x0,0x0                                                                                    
001a06   6edf     MOVWF     0xdf,0x0                                                                                        
001a08   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  E:\iro_svn\opensprints\FW\user\user.c
001a0a   6ee6     MOVWF     0xe6,0x0                                                                                        
001a0c   ec28     CALL      0x2250,0x0                                                                                      
001a0e   f011                                                                                                               
001a10   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001a12   0e01     MOVLW     0x1                                                                                             
001a14   c01d     MOVFF     0x1d,0xfdb                                                                                      
001a16   ffdb                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iro_svn\opensprints\FW\user\user.c
001a18   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iro_svn\opensprints\FW\user\user.c
001a1a   e001     BZ        0x1a1e                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001a1c   d05c     BRA       0x1ad6         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check the parameters                                                   E:\iro_svn\opensprints\FW\user\user.c
001a1e   0e01     MOVLW     0x1            	if (pin > 7)                                                                    E:\iro_svn\opensprints\FW\user\user.c
001a20   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a22   0807     SUBLW     0x7                                                                                             
001a24   e202     BC        0x1a2a                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001a26   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iro_svn\opensprints\FW\user\user.c
001a28   d056     BRA       0x1ad6         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	// Then test the bit in question based upon port                                E:\iro_svn\opensprints\FW\user\user.c
001a2a   0e41     MOVLW     0x41           	if ('A' == port)                                                                E:\iro_svn\opensprints\FW\user\user.c
001a2c   6e2a     MOVWF     0x2a,0x0                                                                                        
001a2e   50df     MOVF      0xdf,0x0,0x0                                                                                    
001a30   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001a32   e110     BNZ       0x1a54                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001a34   0e01     MOVLW     0x1            		value = bittst (PORTA, pin);  	                                                E:\iro_svn\opensprints\FW\user\user.c
001a36   6ef3     MOVWF     0xf3,0x0                                                                                        
001a38   0e01     MOVLW     0x1                                                                                             
001a3a   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a3c   e004     BZ        0x1a46                                                                                          
001a3e   90d8     BCF       0xd8,0x0,0x0                                                                                    
001a40   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001a42   06e8     DECF      0xe8,0x1,0x0                                                                                    
001a44   e1fc     BNZ       0x1a3e                                                                                          
001a46   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001a48   1480     ANDWF     0x80,0x0,0x0                                                                                    
001a4a   6ee7     MOVWF     0xe7,0x0                                                                                        
001a4c   0e02     MOVLW     0x2                                                                                             
001a4e   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001a50   ffdb                                                                                                               
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
001a52   d02c     BRA       0x1aac         	else if ('B' == port)                                                           E:\iro_svn\opensprints\FW\user\user.c
001a54   0e42     MOVLW     0x42                                                                                            
001a56   6e2a     MOVWF     0x2a,0x0                                                                                        
001a58   50df     MOVF      0xdf,0x0,0x0                                                                                    
001a5a   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001a5c   e110     BNZ       0x1a7e                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001a5e   0e01     MOVLW     0x1            		value = bittst (PORTB, pin);  	                                                E:\iro_svn\opensprints\FW\user\user.c
001a60   6ef3     MOVWF     0xf3,0x0                                                                                        
001a62   0e01     MOVLW     0x1                                                                                             
001a64   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a66   e004     BZ        0x1a70                                                                                          
001a68   90d8     BCF       0xd8,0x0,0x0                                                                                    
001a6a   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001a6c   06e8     DECF      0xe8,0x1,0x0                                                                                    
001a6e   e1fc     BNZ       0x1a68                                                                                          
001a70   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001a72   1481     ANDWF     0x81,0x0,0x0                                                                                    
001a74   6ee7     MOVWF     0xe7,0x0                                                                                        
001a76   0e02     MOVLW     0x2                                                                                             
001a78   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001a7a   ffdb                                                                                                               
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
001a7c   d017     BRA       0x1aac         	else if ('C' == port)                                                           E:\iro_svn\opensprints\FW\user\user.c
001a7e   0e43     MOVLW     0x43                                                                                            
001a80   6e2a     MOVWF     0x2a,0x0                                                                                        
001a82   50df     MOVF      0xdf,0x0,0x0                                                                                    
001a84   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001a86   e110     BNZ       0x1aa8                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001a88   0e01     MOVLW     0x1            		value = bittst (PORTC, pin);  	                                                E:\iro_svn\opensprints\FW\user\user.c
001a8a   6ef3     MOVWF     0xf3,0x0                                                                                        
001a8c   0e01     MOVLW     0x1                                                                                             
001a8e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a90   e004     BZ        0x1a9a                                                                                          
001a92   90d8     BCF       0xd8,0x0,0x0                                                                                    
001a94   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001a96   06e8     DECF      0xe8,0x1,0x0                                                                                    
001a98   e1fc     BNZ       0x1a92                                                                                          
001a9a   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001a9c   1482     ANDWF     0x82,0x0,0x0                                                                                    
001a9e   6ee7     MOVWF     0xe7,0x0                                                                                        
001aa0   0e02     MOVLW     0x2                                                                                             
001aa2   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001aa4   ffdb                                                                                                               
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	else if ('D' == port)                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		value = bittst (PORTD, pin);  	                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	else if ('E' == port)                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		value = bittst (PORTE, pin);  	                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\user\user.c
001aa6   d002     BRA       0x1aac         	else                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001aa8   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iro_svn\opensprints\FW\user\user.c
001aaa   d015     BRA       0x1ad6         		return;	                                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	// Now send back our response                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           	printf(                                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           		 (rom char *)"PI,%1u\r\n"                                                      E:\iro_svn\opensprints\FW\user\user.c
001ab4   0e67     MOVLW     0x67           		,value                                                                         E:\iro_svn\opensprints\FW\user\user.c
001ab6   6e2a     MOVWF     0x2a,0x0                                                                                        
001ab8   0e41     MOVLW     0x41                                                                                            
001aba   6e2b     MOVWF     0x2b,0x0                                                                                        
001abc   6a2c     CLRF      0x2c,0x0                                                                                        
001abe   c02a     MOVFF     0x2a,0xfe6                                                                                      
001ac0   ffe6                                                                                                               
001ac2   c02b     MOVFF     0x2b,0xfe6                                                                                      
001ac4   ffe6                                                                                                               
001ac6   c02c     MOVFF     0x2c,0xfe6                                                                                      
001ac8   ffe6                                                                                                               
001aac   0e02     MOVLW     0x2            	);                                                                              E:\iro_svn\opensprints\FW\user\user.c
001aae   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001ab0   ffe6                                                                                                               
001ab2   6ae6     CLRF      0xe6,0x0                                                                                        
001aca   ec6b     CALL      0x44d6,0x0                                                                                      
001acc   f022                                                                                                               
001ace   6e2d     MOVWF     0x2d,0x0                                                                                        
001ad0   0e05     MOVLW     0x5                                                                                             
001ad2   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001ad4   502d     MOVF      0x2d,0x0,0x0                                                                                    
001ad6   0e03     MOVLW     0x3            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
001ad8   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001ada   e202     BC        0x1ae0                                                                                          
001adc   6ae1     CLRF      0xe1,0x0                                                                                        
001ade   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001ae0   6ee1     MOVWF     0xe1,0x0                                                                                        
001ae2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001ae4   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001ae6   ffd9                                                                                                               
001ae8   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // PO is for Pin Output                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           // "PO,<port>,<pin>,<value><CR>"                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                E:\iro_svn\opensprints\FW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to write out the value to E:\iro_svn\opensprints\FW\user\user.c
                                           // <value> is "1" or "0" and indicates the state to change the pin to            E:\iro_svn\opensprints\FW\user\user.c
001aea   cfd9     MOVFF     0xfd9,0xfe6    void parse_PO_packet(void)                                                       E:\iro_svn\opensprints\FW\user\user.c
001aec   ffe6                                                                                                               
001aee   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001af0   ffd9                                                                                                               
001af2   0e03     MOVLW     0x3                                                                                             
001af4   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char port;                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char pin;                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char value;                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
001af6   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      E:\iro_svn\opensprints\FW\user\user.c
001af8   6ee6     MOVWF     0xe6,0x0                                                                                        
001afa   dbaa     RCALL     0x2250                                                                                          
001afc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001afe   501d     MOVF      0x1d,0x0,0x0                                                                                    
001b00   6edf     MOVWF     0xdf,0x0                                                                                        
001b02   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  E:\iro_svn\opensprints\FW\user\user.c
001b04   6ee6     MOVWF     0xe6,0x0                                                                                        
001b06   dba4     RCALL     0x2250                                                                                          
001b08   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001b0a   0e01     MOVLW     0x1                                                                                             
001b0c   c01d     MOVFF     0x1d,0xfdb                                                                                      
001b0e   ffdb                                                                                                               
001b10   0e01     MOVLW     0x1            	value = extract_number (kUCHAR);                                                E:\iro_svn\opensprints\FW\user\user.c
001b12   6ee6     MOVWF     0xe6,0x0                                                                                        
001b14   db9d     RCALL     0x2250                                                                                          
001b16   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001b18   0e02     MOVLW     0x2                                                                                             
001b1a   c01d     MOVFF     0x1d,0xfdb                                                                                      
001b1c   ffdb                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iro_svn\opensprints\FW\user\user.c
001b1e   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iro_svn\opensprints\FW\user\user.c
001b20   e001     BZ        0x1b24                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001b22   d072     BRA       0x1c08         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check the parameters                                                   E:\iro_svn\opensprints\FW\user\user.c
001b24   0e02     MOVLW     0x2            	if (value > 1)                                                                  E:\iro_svn\opensprints\FW\user\user.c
001b26   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b28   0801     SUBLW     0x1                                                                                             
001b2a   e202     BC        0x1b30                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001b2c   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iro_svn\opensprints\FW\user\user.c
001b2e   d06c     BRA       0x1c08         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
001b30   0e01     MOVLW     0x1            	if (pin > 7)                                                                    E:\iro_svn\opensprints\FW\user\user.c
001b32   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b34   0807     SUBLW     0x7                                                                                             
001b36   e202     BC        0x1b3c                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001b38   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iro_svn\opensprints\FW\user\user.c
001b3a   d066     BRA       0x1c08         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
001b3c   0e41     MOVLW     0x41           	if ('A' == port)                                                                E:\iro_svn\opensprints\FW\user\user.c
001b3e   6e2a     MOVWF     0x2a,0x0                                                                                        
001b40   50df     MOVF      0xdf,0x0,0x0                                                                                    
001b42   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001b44   e11c     BNZ       0x1b7e                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001b46   0e02     MOVLW     0x2            		if (0 == value)                                                                E:\iro_svn\opensprints\FW\user\user.c
001b48   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b4a   e10d     BNZ       0x1b66                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001b4c   0e01     MOVLW     0x1            			bitclr (LATA, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
001b4e   6ef3     MOVWF     0xf3,0x0                                                                                        
001b50   0e01     MOVLW     0x1                                                                                             
001b52   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b54   e004     BZ        0x1b5e                                                                                          
001b56   90d8     BCF       0xd8,0x0,0x0                                                                                    
001b58   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001b5a   06e8     DECF      0xe8,0x1,0x0                                                                                    
001b5c   e1fc     BNZ       0x1b56                                                                                          
001b5e   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001b60   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001b62   1689     ANDWF     0x89,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
001b64   d00b     BRA       0x1b7c         		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001b66   0e01     MOVLW     0x1            			bitset (LATA, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
001b68   6ef3     MOVWF     0xf3,0x0                                                                                        
001b6a   0e01     MOVLW     0x1                                                                                             
001b6c   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b6e   e004     BZ        0x1b78                                                                                          
001b70   90d8     BCF       0xd8,0x0,0x0                                                                                    
001b72   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001b74   06e8     DECF      0xe8,0x1,0x0                                                                                    
001b76   e1fc     BNZ       0x1b70                                                                                          
001b78   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001b7a   1289     IORWF     0x89,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
001b7c   d044     BRA       0x1c06         	else if ('B' == port)                                                           E:\iro_svn\opensprints\FW\user\user.c
001b7e   0e42     MOVLW     0x42                                                                                            
001b80   6e2a     MOVWF     0x2a,0x0                                                                                        
001b82   50df     MOVF      0xdf,0x0,0x0                                                                                    
001b84   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001b86   e11c     BNZ       0x1bc0                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001b88   0e02     MOVLW     0x2            		if (0 == value)                                                                E:\iro_svn\opensprints\FW\user\user.c
001b8a   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b8c   e10d     BNZ       0x1ba8                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001b8e   0e01     MOVLW     0x1            			bitclr (LATB, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
001b90   6ef3     MOVWF     0xf3,0x0                                                                                        
001b92   0e01     MOVLW     0x1                                                                                             
001b94   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b96   e004     BZ        0x1ba0                                                                                          
001b98   90d8     BCF       0xd8,0x0,0x0                                                                                    
001b9a   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001b9c   06e8     DECF      0xe8,0x1,0x0                                                                                    
001b9e   e1fc     BNZ       0x1b98                                                                                          
001ba0   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001ba2   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001ba4   168a     ANDWF     0x8a,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
001ba6   d00b     BRA       0x1bbe         		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001ba8   0e01     MOVLW     0x1            			bitset (LATB, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
001baa   6ef3     MOVWF     0xf3,0x0                                                                                        
001bac   0e01     MOVLW     0x1                                                                                             
001bae   50db     MOVF      0xdb,0x0,0x0                                                                                    
001bb0   e004     BZ        0x1bba                                                                                          
001bb2   90d8     BCF       0xd8,0x0,0x0                                                                                    
001bb4   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001bb6   06e8     DECF      0xe8,0x1,0x0                                                                                    
001bb8   e1fc     BNZ       0x1bb2                                                                                          
001bba   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001bbc   128a     IORWF     0x8a,0x1,0x0                                                                                    
                                           		}		                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
001bbe   d023     BRA       0x1c06         	else if ('C' == port)                                                           E:\iro_svn\opensprints\FW\user\user.c
001bc0   0e43     MOVLW     0x43                                                                                            
001bc2   6e2a     MOVWF     0x2a,0x0                                                                                        
001bc4   50df     MOVF      0xdf,0x0,0x0                                                                                    
001bc6   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001bc8   e11c     BNZ       0x1c02                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001bca   0e02     MOVLW     0x2            		if (0 == value)                                                                E:\iro_svn\opensprints\FW\user\user.c
001bcc   50db     MOVF      0xdb,0x0,0x0                                                                                    
001bce   e10d     BNZ       0x1bea                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001bd0   0e01     MOVLW     0x1            			bitclr (LATC, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
001bd2   6ef3     MOVWF     0xf3,0x0                                                                                        
001bd4   0e01     MOVLW     0x1                                                                                             
001bd6   50db     MOVF      0xdb,0x0,0x0                                                                                    
001bd8   e004     BZ        0x1be2                                                                                          
001bda   90d8     BCF       0xd8,0x0,0x0                                                                                    
001bdc   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001bde   06e8     DECF      0xe8,0x1,0x0                                                                                    
001be0   e1fc     BNZ       0x1bda                                                                                          
001be2   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001be4   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001be6   168b     ANDWF     0x8b,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
001be8   d00b     BRA       0x1c00         		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001bea   0e01     MOVLW     0x1            			bitset (LATC, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
001bec   6ef3     MOVWF     0xf3,0x0                                                                                        
001bee   0e01     MOVLW     0x1                                                                                             
001bf0   50db     MOVF      0xdb,0x0,0x0                                                                                    
001bf2   e004     BZ        0x1bfc                                                                                          
001bf4   90d8     BCF       0xd8,0x0,0x0                                                                                    
001bf6   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001bf8   06e8     DECF      0xe8,0x1,0x0                                                                                    
001bfa   e1fc     BNZ       0x1bf4                                                                                          
001bfc   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001bfe   128b     IORWF     0x8b,0x1,0x0                                                                                    
                                           		}		                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	else if ('D' == port)                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		if (0 == value)                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			bitclr (LATD, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			bitset (LATD, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}		                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	else if ('E' == port)                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		if (0 == value)                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			bitclr (LATE, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			bitset (LATE, pin);  	                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           		}		                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           E:\iro_svn\opensprints\FW\user\user.c
001c00   d002     BRA       0x1c06         	else                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001c02   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iro_svn\opensprints\FW\user\user.c
001c04   d001     BRA       0x1c08         		return;	                                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
001c06   dc29     RCALL     0x145a         	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
001c08   0e03     MOVLW     0x3            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
001c0a   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001c0c   e202     BC        0x1c12                                                                                          
001c0e   6ae1     CLRF      0xe1,0x0                                                                                        
001c10   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001c12   6ee1     MOVWF     0xe1,0x0                                                                                        
001c14   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001c16   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001c18   ffd9                                                                                                               
001c1a   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // TX is for Serial Transmit                                                     E:\iro_svn\opensprints\FW\user\user.c
                                           // "TX,<data_length>,<variable_length_data><CR>"                                 E:\iro_svn\opensprints\FW\user\user.c
                                           // <data_length> is a count of the number of bytes in the <variable_length_data> field. E:\iro_svn\opensprints\FW\user\user.c
                                           // It must never be larger than the number of bytes that are currently free in the E:\iro_svn\opensprints\FW\user\user.c
                                           // software TX buffer or some data will get lost.                                E:\iro_svn\opensprints\FW\user\user.c
                                           // <variable_length_data> are the bytes that you want the UBW to send. It will store them E:\iro_svn\opensprints\FW\user\user.c
                                           // in its software TX buffer until there is time to send them out the TX pin.    E:\iro_svn\opensprints\FW\user\user.c
                                           // If you send in "0" for a <data_length" (and thus nothing for <variable_length_data> E:\iro_svn\opensprints\FW\user\user.c
                                           // then the UBW will send back a "TX,<free_buffer_space><CR>" packet,            E:\iro_svn\opensprints\FW\user\user.c
                                           // where <free_buffer_space> is the number of bytes currently available in the   E:\iro_svn\opensprints\FW\user\user.c
                                           // software TX buffer.                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_TX_packet(void)                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
001c1c   dc1e     RCALL     0x145a         	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
001c1e   0012     RETURN    0x0            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // RX is for Serial Receive                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           // "RX,<length_request><CR>"                                                     E:\iro_svn\opensprints\FW\user\user.c
                                           // <length_request> is the maximum number of characters that you want the UBW to send E:\iro_svn\opensprints\FW\user\user.c
                                           // back to you in the RX packet. If you use "0" for <length_request> then the UBW E:\iro_svn\opensprints\FW\user\user.c
                                           // will just send you the current number of bytes in it's RX buffer, and if      E:\iro_svn\opensprints\FW\user\user.c
                                           // there have been any buffer overruns since the last time a <length_request> of  E:\iro_svn\opensprints\FW\user\user.c
                                           // "0" was received by the UBW.                                                  E:\iro_svn\opensprints\FW\user\user.c
                                           // This command will send back a "RX,<length>,<variable_length_data><CR>"        E:\iro_svn\opensprints\FW\user\user.c
                                           // or "RX,<buffer_fullness>,<status><CR>" packet depending upon if you send      E:\iro_svn\opensprints\FW\user\user.c
                                           // "0" or something else for <length_request>                                    E:\iro_svn\opensprints\FW\user\user.c
                                           // <length> in the returning RX packet is a count of the number of bytes         E:\iro_svn\opensprints\FW\user\user.c
                                           // in the <variable_length_data> field. It will never be more than the           E:\iro_svn\opensprints\FW\user\user.c
                                           // <length_request> you sent in.                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           // <variable_length_data> is the data (in raw form - byte for byte what was received -  E:\iro_svn\opensprints\FW\user\user.c
                                           // i.e. not translated in any way, into ASCII values or anything else) that the UBW E:\iro_svn\opensprints\FW\user\user.c
                                           // received. This may include <CR>s and NULLs among any other bytes, so make sure E:\iro_svn\opensprints\FW\user\user.c
                                           // your PC application treates the RX packet coming back from the UBW in a speical way E:\iro_svn\opensprints\FW\user\user.c
                                           // so as not to screw up normal packet processing if any special caracters are received. E:\iro_svn\opensprints\FW\user\user.c
                                           // <buffer_fullness> is a valule between 0 and MAX_SERIAL_RX_BUFFER_SIZE that records E:\iro_svn\opensprints\FW\user\user.c
                                           // the total number of bytes, at that point in time, that the UBW is holding, waiting E:\iro_svn\opensprints\FW\user\user.c
                                           // to pass on to the PC.                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           // <status> has several bits.                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           //	Bit 0 = Software RX Buffer Overrun (1 means software RX buffer (on RX pin)    E:\iro_svn\opensprints\FW\user\user.c
                                           //		has been overrun and data has been lost) This will happen if you don't       E:\iro_svn\opensprints\FW\user\user.c
                                           //		read the data out of the UWB often enough and the data is coming in too fast. E:\iro_svn\opensprints\FW\user\user.c
                                           //	Bit 1 = Software TX Buffer Overrun (1 means software TX buffer (on TX pin)    E:\iro_svn\opensprints\FW\user\user.c
                                           //		as been overrun and data hs been lost. This will happen if you send too much E:\iro_svn\opensprints\FW\user\user.c
                                           //		data to the UBW and you have the serial port set to a low baud rate.         E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RX_packet(void)                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
001c20   dc1c     RCALL     0x145a         	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
001c22   0012     RETURN    0x0            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // CX is for setting up serial port parameters                                   E:\iro_svn\opensprints\FW\user\user.c
                                           // TBD                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CX_packet(void)                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
001c24   dc1a     RCALL     0x145a         	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
001c26   0012     RETURN    0x0            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // RC is for outputting RC servo pulses on a pin                                 E:\iro_svn\opensprints\FW\user\user.c
                                           // "RC,<port>,<pin>,<value><CR>"                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                E:\iro_svn\opensprints\FW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to output the new value on E:\iro_svn\opensprints\FW\user\user.c
                                           // <value> is an unsigned 16 bit number between 0 and 11890.                     E:\iro_svn\opensprints\FW\user\user.c
                                           // If <value> is "0" then the RC output on that pin is disabled.                 E:\iro_svn\opensprints\FW\user\user.c
                                           // Otherwise <value> = 1 means 1ms pulse, <value> = 11890 means 2ms pulse,       E:\iro_svn\opensprints\FW\user\user.c
                                           // any value inbetween means proportional pulse values between those two         E:\iro_svn\opensprints\FW\user\user.c
                                           // Note: The pin used for RC output must be set as an output, or not much will happen. E:\iro_svn\opensprints\FW\user\user.c
                                           // The RC command will continue to send out pulses at the last set value on      E:\iro_svn\opensprints\FW\user\user.c
                                           // each pin that has RC output with a repition rate of 1 pulse about every 19ms. E:\iro_svn\opensprints\FW\user\user.c
                                           // If you have RC output enabled on a pin, outputting a digital value to that pin E:\iro_svn\opensprints\FW\user\user.c
                                           // will be overwritten the next time the RC pulses. Make sure to turn off the RC E:\iro_svn\opensprints\FW\user\user.c
                                           // output if you want to use the pin for something else.                         E:\iro_svn\opensprints\FW\user\user.c
001c28   cfd9     MOVFF     0xfd9,0xfe6    void parse_RC_packet(void)                                                       E:\iro_svn\opensprints\FW\user\user.c
001c2a   ffe6                                                                                                               
001c2c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001c2e   ffd9                                                                                                               
001c30   0e04     MOVLW     0x4                                                                                             
001c32   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char port;                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char pin;                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned int value;                                                             E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
001c34   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      E:\iro_svn\opensprints\FW\user\user.c
001c36   6ee6     MOVWF     0xe6,0x0                                                                                        
001c38   db0b     RCALL     0x2250                                                                                          
001c3a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001c3c   501d     MOVF      0x1d,0x0,0x0                                                                                    
001c3e   6edf     MOVWF     0xdf,0x0                                                                                        
001c40   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  E:\iro_svn\opensprints\FW\user\user.c
001c42   6ee6     MOVWF     0xe6,0x0                                                                                        
001c44   db05     RCALL     0x2250                                                                                          
001c46   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001c48   0e01     MOVLW     0x1                                                                                             
001c4a   c01d     MOVFF     0x1d,0xfdb                                                                                      
001c4c   ffdb                                                                                                               
001c4e   0e03     MOVLW     0x3            	value = extract_number (kUINT);                                                 E:\iro_svn\opensprints\FW\user\user.c
001c50   6ee6     MOVWF     0xe6,0x0                                                                                        
001c52   dafe     RCALL     0x2250                                                                                          
001c54   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001c56   0e02     MOVLW     0x2                                                                                             
001c58   c01d     MOVFF     0x1d,0xfdb                                                                                      
001c5a   ffdb                                                                                                               
001c5c   0e03     MOVLW     0x3                                                                                             
001c5e   c01e     MOVFF     0x1e,0xfdb                                                                                      
001c60   ffdb                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iro_svn\opensprints\FW\user\user.c
001c62   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iro_svn\opensprints\FW\user\user.c
001c64   e001     BZ        0x1c68                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001c66   d07b     BRA       0x1d5e         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Max value user can input. (min is zero)                                      E:\iro_svn\opensprints\FW\user\user.c
001c68   50d9     MOVF      0xd9,0x0,0x0   	if (value > 11890)                                                              E:\iro_svn\opensprints\FW\user\user.c
001c6a   0f02     ADDLW     0x2                                                                                             
001c6c   6ee9     MOVWF     0xe9,0x0                                                                                        
001c6e   cfda     MOVFF     0xfda,0xfea                                                                                     
001c70   ffea                                                                                                               
001c72   0e72     MOVLW     0x72                                                                                            
001c74   80d8     BSF       0xd8,0x0,0x0                                                                                    
001c76   54ee     SUBFWB    0xee,0x0,0x0                                                                                    
001c78   0e2e     MOVLW     0x2e                                                                                            
001c7a   54ed     SUBFWB    0xed,0x0,0x0                                                                                    
001c7c   e202     BC        0x1c82                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001c7e   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iro_svn\opensprints\FW\user\user.c
001c80   d06e     BRA       0x1d5e         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	// Now get Value in the form that TMR0 needs it                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	// TMR0 needs to get filled with values from 65490 (1ms) to 53600 (2ms)         E:\iro_svn\opensprints\FW\user\user.c
001c82   50d9     MOVF      0xd9,0x0,0x0   	if (value != 0)                                                                 E:\iro_svn\opensprints\FW\user\user.c
001c84   0f02     ADDLW     0x2                                                                                             
001c86   6ee9     MOVWF     0xe9,0x0                                                                                        
001c88   cfda     MOVFF     0xfda,0xfea                                                                                     
001c8a   ffea                                                                                                               
001c8c   50ee     MOVF      0xee,0x0,0x0                                                                                    
001c8e   10ed     IORWF     0xed,0x0,0x0                                                                                    
001c90   e01f     BZ        0x1cd0                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001c92   682d     SETF      0x2d,0x0       		value = (65535 - (value + 45));                                                E:\iro_svn\opensprints\FW\user\user.c
001c94   682e     SETF      0x2e,0x0                                                                                        
001c96   6a2f     CLRF      0x2f,0x0                                                                                        
001c98   0e2d     MOVLW     0x2d                                                                                            
001c9a   6ee7     MOVWF     0xe7,0x0                                                                                        
001c9c   0e02     MOVLW     0x2                                                                                             
001c9e   cfdb     MOVFF     0xfdb,0x30                                                                                      
001ca0   f030                                                                                                               
001ca2   0e03     MOVLW     0x3                                                                                             
001ca4   cfdb     MOVFF     0xfdb,0x31                                                                                      
001ca6   f031                                                                                                               
001ca8   50e7     MOVF      0xe7,0x0,0x0                                                                                    
001caa   2630     ADDWF     0x30,0x1,0x0                                                                                    
001cac   0e00     MOVLW     0x0                                                                                             
001cae   2231     ADDWFC    0x31,0x1,0x0                                                                                    
001cb0   6a32     CLRF      0x32,0x0                                                                                        
001cb2   5030     MOVF      0x30,0x0,0x0                                                                                    
001cb4   5c2d     SUBWF     0x2d,0x0,0x0                                                                                    
001cb6   6e2a     MOVWF     0x2a,0x0                                                                                        
001cb8   5031     MOVF      0x31,0x0,0x0                                                                                    
001cba   582e     SUBWFB    0x2e,0x0,0x0                                                                                    
001cbc   6e2b     MOVWF     0x2b,0x0                                                                                        
001cbe   5032     MOVF      0x32,0x0,0x0                                                                                    
001cc0   582f     SUBWFB    0x2f,0x0,0x0                                                                                    
001cc2   6e2c     MOVWF     0x2c,0x0                                                                                        
001cc4   0e02     MOVLW     0x2                                                                                             
001cc6   c02a     MOVFF     0x2a,0xfdb                                                                                      
001cc8   ffdb                                                                                                               
001cca   0e03     MOVLW     0x3                                                                                             
001ccc   c02b     MOVFF     0x2b,0xfdb                                                                                      
001cce   ffdb                                                                                                               
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
001cd0   0e01     MOVLW     0x1            	if (pin > 7)                                                                    E:\iro_svn\opensprints\FW\user\user.c
001cd2   50db     MOVF      0xdb,0x0,0x0                                                                                    
001cd4   0807     SUBLW     0x7                                                                                             
001cd6   e202     BC        0x1cdc                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001cd8   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iro_svn\opensprints\FW\user\user.c
001cda   d041     BRA       0x1d5e         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
001cdc   0e41     MOVLW     0x41           	if ('A' == port)                                                                E:\iro_svn\opensprints\FW\user\user.c
001cde   6e2a     MOVWF     0x2a,0x0                                                                                        
001ce0   50df     MOVF      0xdf,0x0,0x0                                                                                    
001ce2   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001ce4   e102     BNZ       0x1cea                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001ce6   6adf     CLRF      0xdf,0x0       		port = 0;                                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
001ce8   d012     BRA       0x1d0e         	else if ('B' == port)                                                           E:\iro_svn\opensprints\FW\user\user.c
001cea   0e42     MOVLW     0x42                                                                                            
001cec   6e2a     MOVWF     0x2a,0x0                                                                                        
001cee   50df     MOVF      0xdf,0x0,0x0                                                                                    
001cf0   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001cf2   e103     BNZ       0x1cfa                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001cf4   0e08     MOVLW     0x8            		port = 8;                                                                      E:\iro_svn\opensprints\FW\user\user.c
001cf6   6edf     MOVWF     0xdf,0x0                                                                                        
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
001cf8   d00a     BRA       0x1d0e         	else if ('C' == port)                                                           E:\iro_svn\opensprints\FW\user\user.c
001cfa   0e43     MOVLW     0x43                                                                                            
001cfc   6e2a     MOVWF     0x2a,0x0                                                                                        
001cfe   50df     MOVF      0xdf,0x0,0x0                                                                                    
001d00   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001d02   e103     BNZ       0x1d0a                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001d04   0e10     MOVLW     0x10           		port = 16;                                                                     E:\iro_svn\opensprints\FW\user\user.c
001d06   6edf     MOVWF     0xdf,0x0                                                                                        
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
001d08   d002     BRA       0x1d0e         	else                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001d0a   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iro_svn\opensprints\FW\user\user.c
001d0c   d028     BRA       0x1d5e         		return;	                                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Store the new RC time value                                                  E:\iro_svn\opensprints\FW\user\user.c
001d0e   0e01     MOVLW     0x1            	g_RC_value[pin + port] = value;                                                 E:\iro_svn\opensprints\FW\user\user.c
001d10   50db     MOVF      0xdb,0x0,0x0                                                                                    
001d12   24df     ADDWF     0xdf,0x0,0x0                                                                                    
001d14   6ee9     MOVWF     0xe9,0x0                                                                                        
001d16   6aea     CLRF      0xea,0x0                                                                                        
001d18   90d8     BCF       0xd8,0x0,0x0                                                                                    
001d1a   36e9     RLCF      0xe9,0x1,0x0                                                                                    
001d1c   36ea     RLCF      0xea,0x1,0x0                                                                                    
001d1e   0e69     MOVLW     0x69                                                                                            
001d20   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
001d22   0e01     MOVLW     0x1                                                                                             
001d24   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001d26   0e02     MOVLW     0x2                                                                                             
001d28   cfdb     MOVFF     0xfdb,0xfee                                                                                     
001d2a   ffee                                                                                                               
001d2c   0e03     MOVLW     0x3                                                                                             
001d2e   cfdb     MOVFF     0xfdb,0xfed                                                                                     
001d30   ffed                                                                                                               
                                           	// Only set this state if we are off - if we are already running on             E:\iro_svn\opensprints\FW\user\user.c
                                           	// this pin, then the new value will be picked up next time around (19ms)       E:\iro_svn\opensprints\FW\user\user.c
001d32   0e01     MOVLW     0x1            	if (kOFF == g_RC_state[pin + port])                                             E:\iro_svn\opensprints\FW\user\user.c
001d34   50db     MOVF      0xdb,0x0,0x0                                                                                    
001d36   24df     ADDWF     0xdf,0x0,0x0                                                                                    
001d38   6aea     CLRF      0xea,0x0                                                                                        
001d3a   0f51     ADDLW     0x51                                                                                            
001d3c   6ee9     MOVWF     0xe9,0x0                                                                                        
001d3e   0e01     MOVLW     0x1                                                                                             
001d40   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001d42   04ef     DECF      0xef,0x0,0x0                                                                                    
001d44   e10a     BNZ       0x1d5a                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001d46   0e01     MOVLW     0x1            		g_RC_state[pin + port] = kWAITING;                                             E:\iro_svn\opensprints\FW\user\user.c
001d48   50db     MOVF      0xdb,0x0,0x0                                                                                    
001d4a   24df     ADDWF     0xdf,0x0,0x0                                                                                    
001d4c   6aea     CLRF      0xea,0x0                                                                                        
001d4e   0f51     ADDLW     0x51                                                                                            
001d50   6ee9     MOVWF     0xe9,0x0                                                                                        
001d52   0e01     MOVLW     0x1                                                                                             
001d54   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001d56   0e02     MOVLW     0x2                                                                                             
001d58   6eef     MOVWF     0xef,0x0                                                                                        
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
001d5a   ec2d     CALL      0x145a,0x0     	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
001d5c   f00a                                                                                                               
001d5e   0e04     MOVLW     0x4            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
001d60   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001d62   e202     BC        0x1d68                                                                                          
001d64   6ae1     CLRF      0xe1,0x0                                                                                        
001d66   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d68   6ee1     MOVWF     0xe1,0x0                                                                                        
001d6a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d6c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001d6e   ffd9                                                                                                               
001d70   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // BC is for Bulk Configure                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           // BC,<port A init>,<waitmask>,<wait delay>,<strobemask>,<strobe delay><CR>      E:\iro_svn\opensprints\FW\user\user.c
                                           // This command sets up the mask and strobe bits on port A for the               E:\iro_svn\opensprints\FW\user\user.c
                                           // BO (Bulk Output) command below. Also suck in wait delay, strobe delay, etc.   E:\iro_svn\opensprints\FW\user\user.c
001d72   cfd9     MOVFF     0xfd9,0xfe6    void parse_BC_packet(void)                                                       E:\iro_svn\opensprints\FW\user\user.c
001d74   ffe6                                                                                                               
001d76   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001d78   ffd9                                                                                                               
001d7a   0e05     MOVLW     0x5                                                                                             
001d7c   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_init;                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_strobe_mask;                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_wait_mask;                                                     E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_wait_delay;                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_strobe_delay;                                                  E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
001d7e   0e01     MOVLW     0x1            	BO_init = extract_number (kUCHAR);                                              E:\iro_svn\opensprints\FW\user\user.c
001d80   6ee6     MOVWF     0xe6,0x0                                                                                        
001d82   da66     RCALL     0x2250                                                                                          
001d84   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d86   501d     MOVF      0x1d,0x0,0x0                                                                                    
001d88   6edf     MOVWF     0xdf,0x0                                                                                        
001d8a   0e01     MOVLW     0x1            	BO_wait_mask = extract_number (kUCHAR);                                         E:\iro_svn\opensprints\FW\user\user.c
001d8c   6ee6     MOVWF     0xe6,0x0                                                                                        
001d8e   da60     RCALL     0x2250                                                                                          
001d90   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d92   0e02     MOVLW     0x2                                                                                             
001d94   c01d     MOVFF     0x1d,0xfdb                                                                                      
001d96   ffdb                                                                                                               
001d98   0e01     MOVLW     0x1            	BO_wait_delay = extract_number (kUCHAR);                                        E:\iro_svn\opensprints\FW\user\user.c
001d9a   6ee6     MOVWF     0xe6,0x0                                                                                        
001d9c   da59     RCALL     0x2250                                                                                          
001d9e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001da0   0e03     MOVLW     0x3                                                                                             
001da2   c01d     MOVFF     0x1d,0xfdb                                                                                      
001da4   ffdb                                                                                                               
001da6   0e01     MOVLW     0x1            	BO_strobe_mask = extract_number (kUCHAR);                                       E:\iro_svn\opensprints\FW\user\user.c
001da8   6ee6     MOVWF     0xe6,0x0                                                                                        
001daa   da52     RCALL     0x2250                                                                                          
001dac   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001dae   0e01     MOVLW     0x1                                                                                             
001db0   c01d     MOVFF     0x1d,0xfdb                                                                                      
001db2   ffdb                                                                                                               
001db4   0e01     MOVLW     0x1            	BO_strobe_delay = extract_number (kUCHAR);                                      E:\iro_svn\opensprints\FW\user\user.c
001db6   6ee6     MOVWF     0xe6,0x0                                                                                        
001db8   da4b     RCALL     0x2250                                                                                          
001dba   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001dbc   0e04     MOVLW     0x4                                                                                             
001dbe   c01d     MOVFF     0x1d,0xfdb                                                                                      
001dc0   ffdb                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iro_svn\opensprints\FW\user\user.c
001dc2   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iro_svn\opensprints\FW\user\user.c
001dc4   e001     BZ        0x1dc8                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001dc6   d012     BRA       0x1dec         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Copy over values to their gloabls                                            E:\iro_svn\opensprints\FW\user\user.c
001dc8   cfdf     MOVFF     0xfdf,0x199    	g_BO_init = BO_init;                                                            E:\iro_svn\opensprints\FW\user\user.c
001dca   f199                                                                                                               
001dcc   0e02     MOVLW     0x2            	g_BO_wait_mask = BO_wait_mask;                                                  E:\iro_svn\opensprints\FW\user\user.c
001dce   cfdb     MOVFF     0xfdb,0x19b                                                                                     
001dd0   f19b                                                                                                               
001dd2   0e01     MOVLW     0x1            	g_BO_strobe_mask = BO_strobe_mask;                                              E:\iro_svn\opensprints\FW\user\user.c
001dd4   cfdb     MOVFF     0xfdb,0x19a                                                                                     
001dd6   f19a                                                                                                               
001dd8   0e03     MOVLW     0x3            	g_BO_wait_delay = BO_wait_delay;                                                E:\iro_svn\opensprints\FW\user\user.c
001dda   cfdb     MOVFF     0xfdb,0x19c                                                                                     
001ddc   f19c                                                                                                               
001dde   0e04     MOVLW     0x4            	g_BO_strobe_delay = BO_strobe_delay;                                            E:\iro_svn\opensprints\FW\user\user.c
001de0   cfdb     MOVFF     0xfdb,0x19d                                                                                     
001de2   f19d                                                                                                               
                                           	// And initalize Port A                                                         E:\iro_svn\opensprints\FW\user\user.c
001de4   c199     MOVFF     0x199,0xf89    	LATA = g_BO_init;                                                               E:\iro_svn\opensprints\FW\user\user.c
001de6   ff89                                                                                                               
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
001de8   ec2d     CALL      0x145a,0x0     	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
001dea   f00a                                                                                                               
001dec   0e05     MOVLW     0x5            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
001dee   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001df0   e202     BC        0x1df6                                                                                          
001df2   6ae1     CLRF      0xe1,0x0                                                                                        
001df4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001df6   6ee1     MOVWF     0xe1,0x0                                                                                        
001df8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001dfa   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001dfc   ffd9                                                                                                               
001dfe   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // Bulk Output (BO)                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           // BO,4AF2C124<CR>                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           // After the inital comma, pull in hex values and spit them out to port A        E:\iro_svn\opensprints\FW\user\user.c
                                           // Note that the procedure here is as follows:                                   E:\iro_svn\opensprints\FW\user\user.c
                                           //	1) Write new value to PortB                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           //	2) Assert <strobemask>                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           //	3) Wait for <strobdelay> (if not zero)                                        E:\iro_svn\opensprints\FW\user\user.c
                                           //	4) Deassert <strobemask>                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           //	5) Wait for <waitmask> to be asserted                                         E:\iro_svn\opensprints\FW\user\user.c
                                           //	6) Wait for <waitmask> to be deasserted                                       E:\iro_svn\opensprints\FW\user\user.c
                                           //	7) If 5) or 6) takes longer than <waitdelay> then just move on to next byte   E:\iro_svn\opensprints\FW\user\user.c
                                           //	Repeat for each byte                                                          E:\iro_svn\opensprints\FW\user\user.c
001e00   cfd9     MOVFF     0xfd9,0xfe6    void parse_BO_packet(void)                                                       E:\iro_svn\opensprints\FW\user\user.c
001e02   ffe6                                                                                                               
001e04   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001e06   ffd9                                                                                                               
001e08   0e04     MOVLW     0x4                                                                                             
001e0a   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_data_byte;                                                     E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char new_port_A_value;                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char tmp;                                                              E:\iro_svn\opensprints\FW\user\user.c
001e0c   0e03     MOVLW     0x3            	unsigned char wait_count = 0;                                                   E:\iro_svn\opensprints\FW\user\user.c
001e0e   6adb     CLRF      0xdb,0x0                                                                                        
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for comma where ptr points                                             E:\iro_svn\opensprints\FW\user\user.c
001e10   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',')                                              E:\iro_svn\opensprints\FW\user\user.c
001e12   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001e14   6aea     CLRF      0xea,0x0                                                                                        
001e16   0f40     ADDLW     0x40                                                                                            
001e18   6ee9     MOVWF     0xe9,0x0                                                                                        
001e1a   0e02     MOVLW     0x2                                                                                             
001e1c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001e1e   50ef     MOVF      0xef,0x0,0x0                                                                                    
001e20   082c     SUBLW     0x2c                                                                                            
001e22   e01d     BZ        0x1e5e                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
001e24   0101     MOVLB     0x1            		printf ((rom char *)"!5 Err: Need comma next, found: '%c'\r\n", g_RX_buf[g_RX_buf_out]); E:\iro_svn\opensprints\FW\user\user.c
001e26   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001e28   6aea     CLRF      0xea,0x0                                                                                        
001e2a   0f40     ADDLW     0x40                                                                                            
001e2c   6ee9     MOVWF     0xe9,0x0                                                                                        
001e2e   0e02     MOVLW     0x2                                                                                             
001e30   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001e32   50ef     MOVF      0xef,0x0,0x0                                                                                    
001e34   6ee6     MOVWF     0xe6,0x0                                                                                        
001e36   6ae6     CLRF      0xe6,0x0                                                                                        
001e38   0e40     MOVLW     0x40                                                                                            
001e3a   6e2a     MOVWF     0x2a,0x0                                                                                        
001e3c   0e41     MOVLW     0x41                                                                                            
001e3e   6e2b     MOVWF     0x2b,0x0                                                                                        
001e40   6a2c     CLRF      0x2c,0x0                                                                                        
001e42   c02a     MOVFF     0x2a,0xfe6                                                                                      
001e44   ffe6                                                                                                               
001e46   c02b     MOVFF     0x2b,0xfe6                                                                                      
001e48   ffe6                                                                                                               
001e4a   c02c     MOVFF     0x2c,0xfe6                                                                                      
001e4c   ffe6                                                                                                               
001e4e   ec6b     CALL      0x44d6,0x0                                                                                      
001e50   f022                                                                                                               
001e52   6e2d     MOVWF     0x2d,0x0                                                                                        
001e54   0e05     MOVLW     0x5                                                                                             
001e56   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001e58   502d     MOVF      0x2d,0x0,0x0                                                                                    
001e5a   8a0d     BSF       0xd,0x5,0x0    		bitset (error_byte, kERROR_BYTE_PRINTED_ERROR);                                E:\iro_svn\opensprints\FW\user\user.c
001e5c   d10e     BRA       0x207a         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Move to the next character                                                   E:\iro_svn\opensprints\FW\user\user.c
001e5e   0101     MOVLB     0x1            	advance_RX_buf_out ();                                                          E:\iro_svn\opensprints\FW\user\user.c
001e60   2ba1     INCF      0xa1,0x1,0x1                                                                                    
001e62   0e40     MOVLW     0x40                                                                                            
001e64   0101     MOVLB     0x1                                                                                             
001e66   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001e68   e102     BNZ       0x1e6e                                                                                          
001e6a   0101     MOVLB     0x1                                                                                             
001e6c   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Make sure Port A is correct                                                  E:\iro_svn\opensprints\FW\user\user.c
001e6e   c199     MOVFF     0x199,0xf89    	LATA = g_BO_init;                                                               E:\iro_svn\opensprints\FW\user\user.c
001e70   ff89                                                                                                               
001e72   0101     MOVLB     0x1            	new_port_A_value = ((~LATA & g_BO_strobe_mask)) | (LATA & ~g_BO_strobe_mask);   E:\iro_svn\opensprints\FW\user\user.c
001e74   1d9a     COMF      0x9a,0x0,0x1                                                                                    
001e76   1489     ANDWF     0x89,0x0,0x0                                                                                    
001e78   6e2a     MOVWF     0x2a,0x0                                                                                        
001e7a   1c89     COMF      0x89,0x0,0x0                                                                                    
001e7c   0101     MOVLB     0x1                                                                                             
001e7e   159a     ANDWF     0x9a,0x0,0x1                                                                                    
001e80   102a     IORWF     0x2a,0x0,0x0                                                                                    
001e82   6ee7     MOVWF     0xe7,0x0                                                                                        
001e84   0e01     MOVLW     0x1                                                                                             
001e86   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001e88   ffdb                                                                                                               
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
001e8a   0101     MOVLB     0x1            	while (g_RX_buf[g_RX_buf_out] != 13)                                            E:\iro_svn\opensprints\FW\user\user.c
001e8c   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001e8e   6aea     CLRF      0xea,0x0                                                                                        
001e90   0f40     ADDLW     0x40                                                                                            
001e92   6ee9     MOVWF     0xe9,0x0                                                                                        
001e94   0e02     MOVLW     0x2                                                                                             
001e96   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001e98   50ef     MOVF      0xef,0x0,0x0                                                                                    
001e9a   080d     SUBLW     0xd                                                                                             
001e9c   e101     BNZ       0x1ea0                                                                                          
001e9e   d0eb     BRA       0x2076                                                                                          
002074   d70a     BRA       0x1e8a                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// Pull in a nibble from the input buffer                                      E:\iro_svn\opensprints\FW\user\user.c
001ea0   0101     MOVLB     0x1            		tmp = toupper (g_RX_buf[g_RX_buf_out]);                                        E:\iro_svn\opensprints\FW\user\user.c
001ea2   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001ea4   6aea     CLRF      0xea,0x0                                                                                        
001ea6   0f40     ADDLW     0x40                                                                                            
001ea8   6ee9     MOVWF     0xe9,0x0                                                                                        
001eaa   0e02     MOVLW     0x2                                                                                             
001eac   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001eae   50ef     MOVF      0xef,0x0,0x0                                                                                    
001eb0   6ee6     MOVWF     0xe6,0x0                                                                                        
001eb2   6ae6     CLRF      0xe6,0x0                                                                                        
001eb4   ec64     CALL      0x46c8,0x0                                                                                      
001eb6   f023                                                                                                               
001eb8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001eba   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001ebc   0e02     MOVLW     0x2                                                                                             
001ebe   cff3     MOVFF     0xff3,0xfdb                                                                                     
001ec0   ffdb                                                                                                               
001ec2   0e30     MOVLW     0x30           		if (tmp >= '0' && tmp <= '9')                                                  E:\iro_svn\opensprints\FW\user\user.c
001ec4   6ef3     MOVWF     0xf3,0x0                                                                                        
001ec6   0e02     MOVLW     0x2                                                                                             
001ec8   cfdb     MOVFF     0xfdb,0xff4                                                                                     
001eca   fff4                                                                                                               
001ecc   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001ece   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
001ed0   e30f     BNC       0x1ef0                                                                                          
001ed2   0e02     MOVLW     0x2                                                                                             
001ed4   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ed6   0839     SUBLW     0x39                                                                                            
001ed8   e30b     BNC       0x1ef0                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001eda   0e30     MOVLW     0x30           			tmp -= '0';	                                                                  E:\iro_svn\opensprints\FW\user\user.c
001edc   6e2a     MOVWF     0x2a,0x0                                                                                        
001ede   0e02     MOVLW     0x2                                                                                             
001ee0   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001ee2   ffe7                                                                                                               
001ee4   502a     MOVF      0x2a,0x0,0x0                                                                                    
001ee6   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001ee8   0e02     MOVLW     0x2                                                                                             
001eea   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001eec   ffdb                                                                                                               
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
001eee   d019     BRA       0x1f22         		else if (tmp >= 'A' && tmp <= 'F')                                             E:\iro_svn\opensprints\FW\user\user.c
001ef0   0e41     MOVLW     0x41                                                                                            
001ef2   6ef3     MOVWF     0xf3,0x0                                                                                        
001ef4   0e02     MOVLW     0x2                                                                                             
001ef6   cfdb     MOVFF     0xfdb,0xff4                                                                                     
001ef8   fff4                                                                                                               
001efa   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001efc   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
001efe   e30f     BNC       0x1f1e                                                                                          
001f00   0e02     MOVLW     0x2                                                                                             
001f02   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f04   0846     SUBLW     0x46                                                                                            
001f06   e30b     BNC       0x1f1e                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001f08   0e37     MOVLW     0x37           			tmp -= 55;                                                                    E:\iro_svn\opensprints\FW\user\user.c
001f0a   6e2a     MOVWF     0x2a,0x0                                                                                        
001f0c   0e02     MOVLW     0x2                                                                                             
001f0e   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001f10   ffe7                                                                                                               
001f12   502a     MOVF      0x2a,0x0,0x0                                                                                    
001f14   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001f16   0e02     MOVLW     0x2                                                                                             
001f18   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001f1a   ffdb                                                                                                               
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
001f1c   d002     BRA       0x1f22         		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001f1e   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     E:\iro_svn\opensprints\FW\user\user.c
001f20   d0ac     BRA       0x207a         			return;                                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
001f22   0e02     MOVLW     0x2            		BO_data_byte = tmp << 4;                                                       E:\iro_svn\opensprints\FW\user\user.c
001f24   38db     SWAPF     0xdb,0x0,0x0                                                                                    
001f26   0bf0     ANDLW     0xf0                                                                                            
001f28   6edf     MOVWF     0xdf,0x0                                                                                        
001f2a   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         E:\iro_svn\opensprints\FW\user\user.c
001f2c   2ba1     INCF      0xa1,0x1,0x1                                                                                    
001f2e   0e40     MOVLW     0x40                                                                                            
001f30   0101     MOVLB     0x1                                                                                             
001f32   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001f34   e102     BNZ       0x1f3a                                                                                          
001f36   0101     MOVLB     0x1                                                                                             
001f38   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		// Check for CR next                                                           E:\iro_svn\opensprints\FW\user\user.c
001f3a   0e0d     MOVLW     0xd            		if (kCR == g_RX_buf[g_RX_buf_out])                                             E:\iro_svn\opensprints\FW\user\user.c
001f3c   6e2a     MOVWF     0x2a,0x0                                                                                        
001f3e   0101     MOVLB     0x1                                                                                             
001f40   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001f42   6aea     CLRF      0xea,0x0                                                                                        
001f44   0f40     ADDLW     0x40                                                                                            
001f46   6ee9     MOVWF     0xe9,0x0                                                                                        
001f48   0e02     MOVLW     0x2                                                                                             
001f4a   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001f4c   50ef     MOVF      0xef,0x0,0x0                                                                                    
001f4e   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001f50   e102     BNZ       0x1f56                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001f52   880d     BSF       0xd,0x4,0x0    			bitset (error_byte, kERROR_BYTE_MISSING_PARAMETER);                           E:\iro_svn\opensprints\FW\user\user.c
001f54   d092     BRA       0x207a         			return;                                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
001f56   0101     MOVLB     0x1            		tmp =  toupper (g_RX_buf[g_RX_buf_out]);                                       E:\iro_svn\opensprints\FW\user\user.c
001f58   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001f5a   6aea     CLRF      0xea,0x0                                                                                        
001f5c   0f40     ADDLW     0x40                                                                                            
001f5e   6ee9     MOVWF     0xe9,0x0                                                                                        
001f60   0e02     MOVLW     0x2                                                                                             
001f62   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001f64   50ef     MOVF      0xef,0x0,0x0                                                                                    
001f66   6ee6     MOVWF     0xe6,0x0                                                                                        
001f68   6ae6     CLRF      0xe6,0x0                                                                                        
001f6a   ec64     CALL      0x46c8,0x0                                                                                      
001f6c   f023                                                                                                               
001f6e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001f70   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001f72   0e02     MOVLW     0x2                                                                                             
001f74   cff3     MOVFF     0xff3,0xfdb                                                                                     
001f76   ffdb                                                                                                               
001f78   0e30     MOVLW     0x30           		if (tmp >= '0' && tmp <= '9')                                                  E:\iro_svn\opensprints\FW\user\user.c
001f7a   6ef3     MOVWF     0xf3,0x0                                                                                        
001f7c   0e02     MOVLW     0x2                                                                                             
001f7e   cfdb     MOVFF     0xfdb,0xff4                                                                                     
001f80   fff4                                                                                                               
001f82   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001f84   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
001f86   e30f     BNC       0x1fa6                                                                                          
001f88   0e02     MOVLW     0x2                                                                                             
001f8a   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f8c   0839     SUBLW     0x39                                                                                            
001f8e   e30b     BNC       0x1fa6                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001f90   0e30     MOVLW     0x30           			tmp -= '0';	                                                                  E:\iro_svn\opensprints\FW\user\user.c
001f92   6e2a     MOVWF     0x2a,0x0                                                                                        
001f94   0e02     MOVLW     0x2                                                                                             
001f96   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001f98   ffe7                                                                                                               
001f9a   502a     MOVF      0x2a,0x0,0x0                                                                                    
001f9c   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001f9e   0e02     MOVLW     0x2                                                                                             
001fa0   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001fa2   ffdb                                                                                                               
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
001fa4   d019     BRA       0x1fd8         		else if (tmp >= 'A' && tmp <= 'F')                                             E:\iro_svn\opensprints\FW\user\user.c
001fa6   0e41     MOVLW     0x41                                                                                            
001fa8   6ef3     MOVWF     0xf3,0x0                                                                                        
001faa   0e02     MOVLW     0x2                                                                                             
001fac   cfdb     MOVFF     0xfdb,0xff4                                                                                     
001fae   fff4                                                                                                               
001fb0   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001fb2   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
001fb4   e30f     BNC       0x1fd4                                                                                          
001fb6   0e02     MOVLW     0x2                                                                                             
001fb8   50db     MOVF      0xdb,0x0,0x0                                                                                    
001fba   0846     SUBLW     0x46                                                                                            
001fbc   e30b     BNC       0x1fd4                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001fbe   0e37     MOVLW     0x37           			tmp -= 55;                                                                    E:\iro_svn\opensprints\FW\user\user.c
001fc0   6e2a     MOVWF     0x2a,0x0                                                                                        
001fc2   0e02     MOVLW     0x2                                                                                             
001fc4   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001fc6   ffe7                                                                                                               
001fc8   502a     MOVF      0x2a,0x0,0x0                                                                                    
001fca   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001fcc   0e02     MOVLW     0x2                                                                                             
001fce   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001fd0   ffdb                                                                                                               
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
001fd2   d002     BRA       0x1fd8         		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
001fd4   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     E:\iro_svn\opensprints\FW\user\user.c
001fd6   d051     BRA       0x207a         			return;                                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
001fd8   0e02     MOVLW     0x2            		BO_data_byte = BO_data_byte + tmp;                                             E:\iro_svn\opensprints\FW\user\user.c
001fda   50db     MOVF      0xdb,0x0,0x0                                                                                    
001fdc   24df     ADDWF     0xdf,0x0,0x0                                                                                    
001fde   6edf     MOVWF     0xdf,0x0                                                                                        
001fe0   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         E:\iro_svn\opensprints\FW\user\user.c
001fe2   2ba1     INCF      0xa1,0x1,0x1                                                                                    
001fe4   0e40     MOVLW     0x40                                                                                            
001fe6   0101     MOVLB     0x1                                                                                             
001fe8   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001fea   e102     BNZ       0x1ff0                                                                                          
001fec   0101     MOVLB     0x1                                                                                             
001fee   6ba1     CLRF      0xa1,0x1                                                                                        
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           		// Output the byte on Port B                                                   E:\iro_svn\opensprints\FW\user\user.c
001ff0   50df     MOVF      0xdf,0x0,0x0   		LATB = BO_data_byte;                                                           E:\iro_svn\opensprints\FW\user\user.c
001ff2   6e8a     MOVWF     0x8a,0x0                                                                                        
                                           		                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// And strobe the Port A bits that we're supposed to                           E:\iro_svn\opensprints\FW\user\user.c
001ff4   0e01     MOVLW     0x1            		LATA = new_port_A_value;                                                       E:\iro_svn\opensprints\FW\user\user.c
001ff6   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ff8   6e89     MOVWF     0x89,0x0                                                                                        
001ffa   0101     MOVLB     0x1            		if (g_BO_strobe_delay)                                                         E:\iro_svn\opensprints\FW\user\user.c
001ffc   519d     MOVF      0x9d,0x0,0x1                                                                                    
001ffe   e005     BZ        0x200a                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
002000   c19d     MOVFF     0x19d,0xfe6    			Delay10TCYx (g_BO_strobe_delay);                                              E:\iro_svn\opensprints\FW\user\user.c
002002   ffe6                                                                                                               
002004   ec03     CALL      0x4806,0x0                                                                                      
002006   f024                                                                                                               
002008   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
00200a   c199     MOVFF     0x199,0xf89    		LATA = g_BO_init;                                                              E:\iro_svn\opensprints\FW\user\user.c
00200c   ff89                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
00200e   0101     MOVLB     0x1            		if (g_BO_wait_delay)                                                           E:\iro_svn\opensprints\FW\user\user.c
002010   519c     MOVF      0x9c,0x0,0x1                                                                                    
002012   e030     BZ        0x2074                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Now we spin on the wait bit specified in WaitMask                          E:\iro_svn\opensprints\FW\user\user.c
                                           			// (Used for Busy Bits) We also have to wait here                             E:\iro_svn\opensprints\FW\user\user.c
                                           			// for a maximum of g_BO_wait_delay, which is in 10 clock units               E:\iro_svn\opensprints\FW\user\user.c
                                           			// First we wait for the wait mask to become asserted                         E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       E:\iro_svn\opensprints\FW\user\user.c
002014   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 E:\iro_svn\opensprints\FW\user\user.c
002016   c19c     MOVFF     0x19c,0xfdb                                                                                     
002018   ffdb                                                                                                               
002042   d7eb     BRA       0x201a         			while (                                                                       E:\iro_svn\opensprints\FW\user\user.c
00201a   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) == (PORTA & g_BO_wait_mask))                   E:\iro_svn\opensprints\FW\user\user.c
00201c   5199     MOVF      0x99,0x0,0x1                                                                                    
00201e   0101     MOVLB     0x1                                                                                             
002020   159b     ANDWF     0x9b,0x0,0x1                                                                                    
002022   6e2a     MOVWF     0x2a,0x0                                                                                        
002024   0101     MOVLB     0x1                                                                                             
002026   519b     MOVF      0x9b,0x0,0x1                                                                                    
002028   1480     ANDWF     0x80,0x0,0x0                                                                                    
00202a   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           E:\iro_svn\opensprints\FW\user\user.c
00202e   0e03     MOVLW     0x3            				(wait_count != 0)                                                            E:\iro_svn\opensprints\FW\user\user.c
002030   50db     MOVF      0xdb,0x0,0x0                                                                                    
00202c   e10b     BNZ       0x2044         			)                                                                             E:\iro_svn\opensprints\FW\user\user.c
002032   e008     BZ        0x2044                                                                                          
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
002034   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
002036   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
002038   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
00203a   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
00203c   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
00203e   0e03     MOVLW     0x3            				wait_count--;                                                                E:\iro_svn\opensprints\FW\user\user.c
002040   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       E:\iro_svn\opensprints\FW\user\user.c
002044   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 E:\iro_svn\opensprints\FW\user\user.c
002046   c19c     MOVFF     0x19c,0xfdb                                                                                     
002048   ffdb                                                                                                               
                                           			// Then we wait for the wait mask to become de-asserted                       E:\iro_svn\opensprints\FW\user\user.c
002072   d7eb     BRA       0x204a         			while (                                                                       E:\iro_svn\opensprints\FW\user\user.c
00204a   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) != (PORTA & g_BO_wait_mask))                   E:\iro_svn\opensprints\FW\user\user.c
00204c   5199     MOVF      0x99,0x0,0x1                                                                                    
00204e   0101     MOVLB     0x1                                                                                             
002050   159b     ANDWF     0x9b,0x0,0x1                                                                                    
002052   6e2a     MOVWF     0x2a,0x0                                                                                        
002054   0101     MOVLB     0x1                                                                                             
002056   519b     MOVF      0x9b,0x0,0x1                                                                                    
002058   1480     ANDWF     0x80,0x0,0x0                                                                                    
00205a   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           E:\iro_svn\opensprints\FW\user\user.c
00205e   0e03     MOVLW     0x3            				(wait_count != 0)                                                            E:\iro_svn\opensprints\FW\user\user.c
002060   50db     MOVF      0xdb,0x0,0x0                                                                                    
00205c   e00b     BZ        0x2074         			)                                                                             E:\iro_svn\opensprints\FW\user\user.c
002062   e008     BZ        0x2074                                                                                          
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
002064   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
002066   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
002068   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
00206a   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
00206c   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
00206e   0e03     MOVLW     0x3            				wait_count--;                                                                E:\iro_svn\opensprints\FW\user\user.c
002070   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
002076   ec2d     CALL      0x145a,0x0     	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
002078   f00a                                                                                                               
00207a   0e04     MOVLW     0x4            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
00207c   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00207e   e202     BC        0x2084                                                                                          
002080   6ae1     CLRF      0xe1,0x0                                                                                        
002082   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002084   6ee1     MOVWF     0xe1,0x0                                                                                        
002086   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002088   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00208a   ffd9                                                                                                               
00208c   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // Bulk Stream (BS) (he he, couldn't think of a better name)                     E:\iro_svn\opensprints\FW\user\user.c
                                           // BS,<count>,<binary_data><CR>                                                  E:\iro_svn\opensprints\FW\user\user.c
                                           // This command is extremely similar to the BO command                           E:\iro_svn\opensprints\FW\user\user.c
                                           // except that instead of ASCII HEX values, it actually                          E:\iro_svn\opensprints\FW\user\user.c
                                           // takes raw binary data.                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           // So in order for the UBW to know when the end of the stream                    E:\iro_svn\opensprints\FW\user\user.c
                                           // is, we need to have a <count> of bytes.                                       E:\iro_svn\opensprints\FW\user\user.c
                                           // <count> represents the number of bytes after the second comma                 E:\iro_svn\opensprints\FW\user\user.c
                                           // that will be the actual binary data to be streamed out port B.                E:\iro_svn\opensprints\FW\user\user.c
                                           // Then, <binary_data> must be exactly that length.                              E:\iro_svn\opensprints\FW\user\user.c
                                           // <count> must be between 1 and 56 (currently - in the future                   E:\iro_svn\opensprints\FW\user\user.c
                                           // it would be nice to extend the upper limit)                                   E:\iro_svn\opensprints\FW\user\user.c
                                           // The UBW will pull in one byte at a time within the <binary_data>              E:\iro_svn\opensprints\FW\user\user.c
                                           // section and output it to PORTB exactly as the BO command does.                E:\iro_svn\opensprints\FW\user\user.c
                                           // It will do this for <count> bytes. It will then pull in another               E:\iro_svn\opensprints\FW\user\user.c
                                           // byte (which must be a carrige return) and be done.                            E:\iro_svn\opensprints\FW\user\user.c
                                           // The whole point of this command is to improve data throughput                 E:\iro_svn\opensprints\FW\user\user.c
                                           // from the PC to the UBW. This form of data is also more efficient              E:\iro_svn\opensprints\FW\user\user.c
                                           // for the UBW to process.                                                       E:\iro_svn\opensprints\FW\user\user.c
00208e   cfd9     MOVFF     0xfd9,0xfe6    void parse_BS_packet(void)                                                       E:\iro_svn\opensprints\FW\user\user.c
002090   ffe6                                                                                                               
002092   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
002094   ffd9                                                                                                               
002096   0e05     MOVLW     0x5                                                                                             
002098   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_data_byte;                                                     E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char new_port_A_value;                                                 E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char tmp;                                                              E:\iro_svn\opensprints\FW\user\user.c
00209a   0e03     MOVLW     0x3            	unsigned char wait_count = 0;                                                   E:\iro_svn\opensprints\FW\user\user.c
00209c   6adb     CLRF      0xdb,0x0                                                                                        
00209e   0e04     MOVLW     0x4            	unsigned char byte_count = 0;	                                                  E:\iro_svn\opensprints\FW\user\user.c
0020a0   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Get byte_count                                                               E:\iro_svn\opensprints\FW\user\user.c
0020a2   0e01     MOVLW     0x1            	byte_count = extract_number (kUCHAR);                                           E:\iro_svn\opensprints\FW\user\user.c
0020a4   6ee6     MOVWF     0xe6,0x0                                                                                        
0020a6   d8d4     RCALL     0x2250                                                                                          
0020a8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0020aa   0e04     MOVLW     0x4                                                                                             
0020ac   c01d     MOVFF     0x1d,0xfdb                                                                                      
0020ae   ffdb                                                                                                               
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check it                                                               E:\iro_svn\opensprints\FW\user\user.c
0020b0   0e04     MOVLW     0x4            	if (0 == byte_count || byte_count > 56)                                         E:\iro_svn\opensprints\FW\user\user.c
0020b2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0020b4   e004     BZ        0x20be                                                                                          
0020b6   0e04     MOVLW     0x4                                                                                             
0020b8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0020ba   0838     SUBLW     0x38                                                                                            
0020bc   e202     BC        0x20c2                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
0020be   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iro_svn\opensprints\FW\user\user.c
0020c0   d098     BRA       0x21f2         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for comma where ptr points                                             E:\iro_svn\opensprints\FW\user\user.c
0020c2   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',')                                              E:\iro_svn\opensprints\FW\user\user.c
0020c4   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0020c6   6aea     CLRF      0xea,0x0                                                                                        
0020c8   0f40     ADDLW     0x40                                                                                            
0020ca   6ee9     MOVWF     0xe9,0x0                                                                                        
0020cc   0e02     MOVLW     0x2                                                                                             
0020ce   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0020d0   50ef     MOVF      0xef,0x0,0x0                                                                                    
0020d2   082c     SUBLW     0x2c                                                                                            
0020d4   e01d     BZ        0x2110                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
0020d6   0101     MOVLB     0x1            		printf ((rom char *)"!5 Err: Need comma next, found: '%c'\r\n", g_RX_buf[g_RX_buf_out]); E:\iro_svn\opensprints\FW\user\user.c
0020d8   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0020da   6aea     CLRF      0xea,0x0                                                                                        
0020dc   0f40     ADDLW     0x40                                                                                            
0020de   6ee9     MOVWF     0xe9,0x0                                                                                        
0020e0   0e02     MOVLW     0x2                                                                                             
0020e2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0020e4   50ef     MOVF      0xef,0x0,0x0                                                                                    
0020e6   6ee6     MOVWF     0xe6,0x0                                                                                        
0020e8   6ae6     CLRF      0xe6,0x0                                                                                        
0020ea   0e40     MOVLW     0x40                                                                                            
0020ec   6e2a     MOVWF     0x2a,0x0                                                                                        
0020ee   0e41     MOVLW     0x41                                                                                            
0020f0   6e2b     MOVWF     0x2b,0x0                                                                                        
0020f2   6a2c     CLRF      0x2c,0x0                                                                                        
0020f4   c02a     MOVFF     0x2a,0xfe6                                                                                      
0020f6   ffe6                                                                                                               
0020f8   c02b     MOVFF     0x2b,0xfe6                                                                                      
0020fa   ffe6                                                                                                               
0020fc   c02c     MOVFF     0x2c,0xfe6                                                                                      
0020fe   ffe6                                                                                                               
002100   ec6b     CALL      0x44d6,0x0                                                                                      
002102   f022                                                                                                               
002104   6e2d     MOVWF     0x2d,0x0                                                                                        
002106   0e05     MOVLW     0x5                                                                                             
002108   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
00210a   502d     MOVF      0x2d,0x0,0x0                                                                                    
00210c   8a0d     BSF       0xd,0x5,0x0    		bitset (error_byte, kERROR_BYTE_PRINTED_ERROR);                                E:\iro_svn\opensprints\FW\user\user.c
00210e   d071     BRA       0x21f2         		return;                                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Move to the next character                                                   E:\iro_svn\opensprints\FW\user\user.c
002110   0101     MOVLB     0x1            	advance_RX_buf_out ();                                                          E:\iro_svn\opensprints\FW\user\user.c
002112   2ba1     INCF      0xa1,0x1,0x1                                                                                    
002114   0e40     MOVLW     0x40                                                                                            
002116   0101     MOVLB     0x1                                                                                             
002118   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
00211a   e102     BNZ       0x2120                                                                                          
00211c   0101     MOVLB     0x1                                                                                             
00211e   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Make sure Port A is correct                                                  E:\iro_svn\opensprints\FW\user\user.c
002120   c199     MOVFF     0x199,0xf89    	LATA = g_BO_init;                                                               E:\iro_svn\opensprints\FW\user\user.c
002122   ff89                                                                                                               
002124   0101     MOVLB     0x1            	new_port_A_value = ((~LATA & g_BO_strobe_mask)) | (LATA & ~g_BO_strobe_mask);   E:\iro_svn\opensprints\FW\user\user.c
002126   1d9a     COMF      0x9a,0x0,0x1                                                                                    
002128   1489     ANDWF     0x89,0x0,0x0                                                                                    
00212a   6e2a     MOVWF     0x2a,0x0                                                                                        
00212c   1c89     COMF      0x89,0x0,0x0                                                                                    
00212e   0101     MOVLB     0x1                                                                                             
002130   159a     ANDWF     0x9a,0x0,0x1                                                                                    
002132   102a     IORWF     0x2a,0x0,0x0                                                                                    
002134   6ee7     MOVWF     0xe7,0x0                                                                                        
002136   0e01     MOVLW     0x1                                                                                             
002138   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
00213a   ffdb                                                                                                               
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
00213c   0e04     MOVLW     0x4            	while (byte_count != 0)                                                         E:\iro_svn\opensprints\FW\user\user.c
00213e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002140   e056     BZ        0x21ee                                                                                          
0021ec   d7a7     BRA       0x213c                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// Pull in a single byte from input buffer                                     E:\iro_svn\opensprints\FW\user\user.c
002142   0101     MOVLB     0x1            		BO_data_byte = g_RX_buf[g_RX_buf_out];                                         E:\iro_svn\opensprints\FW\user\user.c
002144   51a1     MOVF      0xa1,0x0,0x1                                                                                    
002146   6aea     CLRF      0xea,0x0                                                                                        
002148   0f40     ADDLW     0x40                                                                                            
00214a   6ee9     MOVWF     0xe9,0x0                                                                                        
00214c   0e02     MOVLW     0x2                                                                                             
00214e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002150   cfef     MOVFF     0xfef,0xfdf                                                                                     
002152   ffdf                                                                                                               
002154   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         E:\iro_svn\opensprints\FW\user\user.c
002156   2ba1     INCF      0xa1,0x1,0x1                                                                                    
002158   0e40     MOVLW     0x40                                                                                            
00215a   0101     MOVLB     0x1                                                                                             
00215c   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
00215e   e102     BNZ       0x2164                                                                                          
002160   0101     MOVLB     0x1                                                                                             
002162   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		// Count this byte                                                             E:\iro_svn\opensprints\FW\user\user.c
002164   0e04     MOVLW     0x4            		byte_count--;                                                                  E:\iro_svn\opensprints\FW\user\user.c
002166   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           		// Output the byte on Port B                                                   E:\iro_svn\opensprints\FW\user\user.c
002168   50df     MOVF      0xdf,0x0,0x0   		LATB = BO_data_byte;                                                           E:\iro_svn\opensprints\FW\user\user.c
00216a   6e8a     MOVWF     0x8a,0x0                                                                                        
                                           		                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// And strobe the Port A bits that we're supposed to                           E:\iro_svn\opensprints\FW\user\user.c
00216c   0e01     MOVLW     0x1            		LATA = new_port_A_value;                                                       E:\iro_svn\opensprints\FW\user\user.c
00216e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002170   6e89     MOVWF     0x89,0x0                                                                                        
002172   0101     MOVLB     0x1            		if (g_BO_strobe_delay)                                                         E:\iro_svn\opensprints\FW\user\user.c
002174   519d     MOVF      0x9d,0x0,0x1                                                                                    
002176   e005     BZ        0x2182                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
002178   c19d     MOVFF     0x19d,0xfe6    			Delay10TCYx (g_BO_strobe_delay);                                              E:\iro_svn\opensprints\FW\user\user.c
00217a   ffe6                                                                                                               
00217c   ec03     CALL      0x4806,0x0                                                                                      
00217e   f024                                                                                                               
002180   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
002182   c199     MOVFF     0x199,0xf89    		LATA = g_BO_init;                                                              E:\iro_svn\opensprints\FW\user\user.c
002184   ff89                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
002186   0101     MOVLB     0x1            		if (g_BO_wait_delay)                                                           E:\iro_svn\opensprints\FW\user\user.c
002188   519c     MOVF      0x9c,0x0,0x1                                                                                    
00218a   e030     BZ        0x21ec                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// Now we spin on the wait bit specified in WaitMask                          E:\iro_svn\opensprints\FW\user\user.c
                                           			// (Used for Busy Bits) We also have to wait here                             E:\iro_svn\opensprints\FW\user\user.c
                                           			// for a maximum of g_BO_wait_delay, which is in 10 clock units               E:\iro_svn\opensprints\FW\user\user.c
                                           			// First we wait for the wait mask to become asserted                         E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       E:\iro_svn\opensprints\FW\user\user.c
00218c   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 E:\iro_svn\opensprints\FW\user\user.c
00218e   c19c     MOVFF     0x19c,0xfdb                                                                                     
002190   ffdb                                                                                                               
0021ba   d7eb     BRA       0x2192         			while (                                                                       E:\iro_svn\opensprints\FW\user\user.c
002192   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) == (PORTA & g_BO_wait_mask))                   E:\iro_svn\opensprints\FW\user\user.c
002194   5199     MOVF      0x99,0x0,0x1                                                                                    
002196   0101     MOVLB     0x1                                                                                             
002198   159b     ANDWF     0x9b,0x0,0x1                                                                                    
00219a   6e2a     MOVWF     0x2a,0x0                                                                                        
00219c   0101     MOVLB     0x1                                                                                             
00219e   519b     MOVF      0x9b,0x0,0x1                                                                                    
0021a0   1480     ANDWF     0x80,0x0,0x0                                                                                    
0021a2   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           E:\iro_svn\opensprints\FW\user\user.c
0021a6   0e03     MOVLW     0x3            				(wait_count != 0)                                                            E:\iro_svn\opensprints\FW\user\user.c
0021a8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0021a4   e10b     BNZ       0x21bc         			)                                                                             E:\iro_svn\opensprints\FW\user\user.c
0021aa   e008     BZ        0x21bc                                                                                          
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
0021ac   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
0021ae   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
0021b0   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
0021b2   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
0021b4   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
0021b6   0e03     MOVLW     0x3            				wait_count--;                                                                E:\iro_svn\opensprints\FW\user\user.c
0021b8   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       E:\iro_svn\opensprints\FW\user\user.c
0021bc   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 E:\iro_svn\opensprints\FW\user\user.c
0021be   c19c     MOVFF     0x19c,0xfdb                                                                                     
0021c0   ffdb                                                                                                               
                                           			// Then we wait for the wait mask to become de-asserted                       E:\iro_svn\opensprints\FW\user\user.c
0021ea   d7eb     BRA       0x21c2         			while (                                                                       E:\iro_svn\opensprints\FW\user\user.c
0021c2   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) != (PORTA & g_BO_wait_mask))                   E:\iro_svn\opensprints\FW\user\user.c
0021c4   5199     MOVF      0x99,0x0,0x1                                                                                    
0021c6   0101     MOVLB     0x1                                                                                             
0021c8   159b     ANDWF     0x9b,0x0,0x1                                                                                    
0021ca   6e2a     MOVWF     0x2a,0x0                                                                                        
0021cc   0101     MOVLB     0x1                                                                                             
0021ce   519b     MOVF      0x9b,0x0,0x1                                                                                    
0021d0   1480     ANDWF     0x80,0x0,0x0                                                                                    
0021d2   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           E:\iro_svn\opensprints\FW\user\user.c
0021d6   0e03     MOVLW     0x3            				(wait_count != 0)                                                            E:\iro_svn\opensprints\FW\user\user.c
0021d8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0021d4   e00b     BZ        0x21ec         			)                                                                             E:\iro_svn\opensprints\FW\user\user.c
0021da   e008     BZ        0x21ec                                                                                          
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
0021dc   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
0021de   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
0021e0   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
0021e2   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
0021e4   0000     NOP                      				Delay1TCY ();                                                                E:\iro_svn\opensprints\FW\user\user.c
0021e6   0e03     MOVLW     0x3            				wait_count--;                                                                E:\iro_svn\opensprints\FW\user\user.c
0021e8   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
0021ee   ec2d     CALL      0x145a,0x0     	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
0021f0   f00a                                                                                                               
0021f2   0e05     MOVLW     0x5            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
0021f4   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0021f6   e202     BC        0x21fc                                                                                          
0021f8   6ae1     CLRF      0xe1,0x0                                                                                        
0021fa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0021fc   6ee1     MOVWF     0xe1,0x0                                                                                        
0021fe   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002200   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
002202   ffd9                                                                                                               
002204   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // SS Send SPI                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_SS_packet (void)                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
002206   ec2d     CALL      0x145a,0x0     	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
002208   f00a                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
00220a   0012     RETURN    0x0            }	                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // RS Receive SPI                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RS_packet (void)                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
00220c   ec2d     CALL      0x145a,0x0     	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
00220e   f00a                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
002210   0012     RETURN    0x0            }	                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // CS Configure SPI                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CS_packet (void)                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
002212   ec2d     CALL      0x145a,0x0     	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
002214   f00a                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
002216   0012     RETURN    0x0            }	                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // SI Send I2C                                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_SI_packet (void)                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
002218   ec2d     CALL      0x145a,0x0     	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
00221a   f00a                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
00221c   0012     RETURN    0x0            }	                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // RI Receive I2C                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RI_packet (void)                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
00221e   ec2d     CALL      0x145a,0x0     	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
002220   f00a                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
002222   0012     RETURN    0x0            }	                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // CI Configure I2C                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CI_packet (void)                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
002224   ec2d     CALL      0x145a,0x0     	print_ack ();                                                                   E:\iro_svn\opensprints\FW\user\user.c
002226   f00a                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
002228   0012     RETURN    0x0            }	                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_GO_packet (void)                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
00222a   0101     MOVLB     0x1            	is_racing = TRUE;				// make it possible to start monitoring sensors            E:\iro_svn\opensprints\FW\user\user.c
00222c   0e01     MOVLW     0x1                                                                                             
00222e   6fd6     MOVWF     0xd6,0x1                                                                                        
002230   ecd5     CALL      0xbaa,0x0      	RaceInit();                                                                     E:\iro_svn\opensprints\FW\user\user.c
002232   f005                                                                                                               
002234   0e0a     MOVLW     0xa            	ISR_D_RepeatRate = 10;                                                          E:\iro_svn\opensprints\FW\user\user.c
002236   6e02     MOVWF     0x2,0x0                                                                                         
002238   6a03     CLRF      0x3,0x0                                                                                         
00223a   0101     MOVLB     0x1            	raceTimeCentisecs=0;                                                            E:\iro_svn\opensprints\FW\user\user.c
00223c   6ba9     CLRF      0xa9,0x1                                                                                        
00223e   6baa     CLRF      0xaa,0x1                                                                                        
002240   0101     MOVLB     0x1            	raceTimeMins=0;                                                                 E:\iro_svn\opensprints\FW\user\user.c
002242   6ba7     CLRF      0xa7,0x1                                                                                        
002244   6ba8     CLRF      0xa8,0x1                                                                                        
002246   84ca     BSF       0xca,0x2,0x0   	T2CONbits.TMR2ON=1;                                                             E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// clear the tx buffer just in case there is some old data remaining            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
002248   0012     RETURN    0x0            }	                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           void parse_ST_packet (void)                                                      E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
00224a   0101     MOVLB     0x1            	is_racing = FALSE;				// stop monitoring sensors                                E:\iro_svn\opensprints\FW\user\user.c
00224c   6bd6     CLRF      0xd6,0x1                                                                                        
00224e   0012     RETURN    0x0            }	                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // Look at the string pointed to by ptr                                          E:\iro_svn\opensprints\FW\user\user.c
                                           // There should be a comma where ptr points to upon entry.                       E:\iro_svn\opensprints\FW\user\user.c
                                           // If not, throw a comma error.                                                  E:\iro_svn\opensprints\FW\user\user.c
                                           // If so, then look for up to three bytes after the                              E:\iro_svn\opensprints\FW\user\user.c
                                           // comma for numbers, and put them all into one                                  E:\iro_svn\opensprints\FW\user\user.c
                                           // byte (0-255). If the number is greater than 255, then                         E:\iro_svn\opensprints\FW\user\user.c
                                           // thow a range error.                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           // Advance the pointer to the byte after the last number                         E:\iro_svn\opensprints\FW\user\user.c
                                           // and return.                                                                   E:\iro_svn\opensprints\FW\user\user.c
002250   cfd9     MOVFF     0xfd9,0xfe6    signed short long extract_number(tExtractType type)                              E:\iro_svn\opensprints\FW\user\user.c
002252   ffe6                                                                                                               
002254   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
002256   ffd9                                                                                                               
002258   0e04     MOVLW     0x4                                                                                             
00225a   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	signed short long acc;                                                          E:\iro_svn\opensprints\FW\user\user.c
00225c   0e03     MOVLW     0x3            	unsigned char neg = FALSE;                                                      E:\iro_svn\opensprints\FW\user\user.c
00225e   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Check to see if we're already at the end                                     E:\iro_svn\opensprints\FW\user\user.c
002260   0e0d     MOVLW     0xd            	if (kCR == g_RX_buf[g_RX_buf_out])                                              E:\iro_svn\opensprints\FW\user\user.c
002262   6e2a     MOVWF     0x2a,0x0                                                                                        
002264   0101     MOVLB     0x1                                                                                             
002266   51a1     MOVF      0xa1,0x0,0x1                                                                                    
002268   6aea     CLRF      0xea,0x0                                                                                        
00226a   0f40     ADDLW     0x40                                                                                            
00226c   6ee9     MOVWF     0xe9,0x0                                                                                        
00226e   0e02     MOVLW     0x2                                                                                             
002270   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002272   50ef     MOVF      0xef,0x0,0x0                                                                                    
002274   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
002276   e105     BNZ       0x2282                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
002278   880d     BSF       0xd,0x4,0x0    		bitset (error_byte, kERROR_BYTE_MISSING_PARAMETER);                            E:\iro_svn\opensprints\FW\user\user.c
00227a   6a1d     CLRF      0x1d,0x0       		return (0);                                                                    E:\iro_svn\opensprints\FW\user\user.c
00227c   6a1e     CLRF      0x1e,0x0                                                                                        
00227e   6a1f     CLRF      0x1f,0x0                                                                                        
002280   d193     BRA       0x25a8                                                                                          
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for comma where ptr points                                             E:\iro_svn\opensprints\FW\user\user.c
002282   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',')                                              E:\iro_svn\opensprints\FW\user\user.c
002284   51a1     MOVF      0xa1,0x0,0x1                                                                                    
002286   6aea     CLRF      0xea,0x0                                                                                        
002288   0f40     ADDLW     0x40                                                                                            
00228a   6ee9     MOVWF     0xe9,0x0                                                                                        
00228c   0e02     MOVLW     0x2                                                                                             
00228e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002290   50ef     MOVF      0xef,0x0,0x0                                                                                    
002292   082c     SUBLW     0x2c                                                                                            
002294   e020     BZ        0x22d6                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
002296   0101     MOVLB     0x1            		printf ((rom char *)"!5 Err: Need comma next, found: '%c'\r\n", g_RX_buf[g_RX_buf_out]); E:\iro_svn\opensprints\FW\user\user.c
002298   51a1     MOVF      0xa1,0x0,0x1                                                                                    
00229a   6aea     CLRF      0xea,0x0                                                                                        
00229c   0f40     ADDLW     0x40                                                                                            
00229e   6ee9     MOVWF     0xe9,0x0                                                                                        
0022a0   0e02     MOVLW     0x2                                                                                             
0022a2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0022a4   50ef     MOVF      0xef,0x0,0x0                                                                                    
0022a6   6ee6     MOVWF     0xe6,0x0                                                                                        
0022a8   6ae6     CLRF      0xe6,0x0                                                                                        
0022aa   0e40     MOVLW     0x40                                                                                            
0022ac   6e2a     MOVWF     0x2a,0x0                                                                                        
0022ae   0e41     MOVLW     0x41                                                                                            
0022b0   6e2b     MOVWF     0x2b,0x0                                                                                        
0022b2   6a2c     CLRF      0x2c,0x0                                                                                        
0022b4   c02a     MOVFF     0x2a,0xfe6                                                                                      
0022b6   ffe6                                                                                                               
0022b8   c02b     MOVFF     0x2b,0xfe6                                                                                      
0022ba   ffe6                                                                                                               
0022bc   c02c     MOVFF     0x2c,0xfe6                                                                                      
0022be   ffe6                                                                                                               
0022c0   ec6b     CALL      0x44d6,0x0                                                                                      
0022c2   f022                                                                                                               
0022c4   6e2d     MOVWF     0x2d,0x0                                                                                        
0022c6   0e05     MOVLW     0x5                                                                                             
0022c8   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0022ca   502d     MOVF      0x2d,0x0,0x0                                                                                    
0022cc   8a0d     BSF       0xd,0x5,0x0    		bitset (error_byte, kERROR_BYTE_PRINTED_ERROR);                                E:\iro_svn\opensprints\FW\user\user.c
0022ce   6a1d     CLRF      0x1d,0x0       		return (0);                                                                    E:\iro_svn\opensprints\FW\user\user.c
0022d0   6a1e     CLRF      0x1e,0x0                                                                                        
0022d2   6a1f     CLRF      0x1f,0x0                                                                                        
0022d4   d169     BRA       0x25a8                                                                                          
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Move to the next character                                                   E:\iro_svn\opensprints\FW\user\user.c
0022d6   0101     MOVLB     0x1            	advance_RX_buf_out ();                                                          E:\iro_svn\opensprints\FW\user\user.c
0022d8   2ba1     INCF      0xa1,0x1,0x1                                                                                    
0022da   0e40     MOVLW     0x40                                                                                            
0022dc   0101     MOVLB     0x1                                                                                             
0022de   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
0022e0   e102     BNZ       0x22e6                                                                                          
0022e2   0101     MOVLB     0x1                                                                                             
0022e4   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Now check for a sign character if we're not looking for ASCII chars          E:\iro_svn\opensprints\FW\user\user.c
                                           	if (                                                                            E:\iro_svn\opensprints\FW\user\user.c
0022e6   0e2d     MOVLW     0x2d           		('-' == g_RX_buf[g_RX_buf_out])                                                E:\iro_svn\opensprints\FW\user\user.c
0022e8   6e2a     MOVWF     0x2a,0x0                                                                                        
0022ea   0101     MOVLB     0x1                                                                                             
0022ec   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0022ee   6aea     CLRF      0xea,0x0                                                                                        
0022f0   0f40     ADDLW     0x40                                                                                            
0022f2   6ee9     MOVWF     0xe9,0x0                                                                                        
0022f4   0e02     MOVLW     0x2                                                                                             
0022f6   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0022f8   50ef     MOVF      0xef,0x0,0x0                                                                                    
0022fa   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           		&&                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		(                                                                              E:\iro_svn\opensprints\FW\user\user.c
0022fe   0e04     MOVLW     0x4            			(kASCII_CHAR != type)                                                         E:\iro_svn\opensprints\FW\user\user.c
002300   6e2b     MOVWF     0x2b,0x0                                                                                        
002302   0efe     MOVLW     0xfe                                                                                            
002304   50db     MOVF      0xdb,0x0,0x0                                                                                    
002306   5c2b     SUBWF     0x2b,0x0,0x0                                                                                    
                                           			&&                                                                            E:\iro_svn\opensprints\FW\user\user.c
00230a   0e05     MOVLW     0x5            			(kUCASE_ASCII_CHAR != type)                                                   E:\iro_svn\opensprints\FW\user\user.c
00230c   6e2c     MOVWF     0x2c,0x0                                                                                        
00230e   0efe     MOVLW     0xfe                                                                                            
002310   50db     MOVF      0xdb,0x0,0x0                                                                                    
002312   5c2c     SUBWF     0x2c,0x0,0x0                                                                                    
002308   e022     BZ        0x234e         		)                                                                              E:\iro_svn\opensprints\FW\user\user.c
002314   e01c     BZ        0x234e                                                                                          
0022fc   e128     BNZ       0x234e         	)                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// It's an error if we see a negative sign on an unsigned value                E:\iro_svn\opensprints\FW\user\user.c
                                           		if (                                                                           E:\iro_svn\opensprints\FW\user\user.c
002316   0efe     MOVLW     0xfe           			(kUCHAR == type)                                                              E:\iro_svn\opensprints\FW\user\user.c
002318   04db     DECF      0xdb,0x0,0x0                                                                                    
                                           			||                                                                            E:\iro_svn\opensprints\FW\user\user.c
00231c   0e03     MOVLW     0x3            			(kUINT == type)                                                               E:\iro_svn\opensprints\FW\user\user.c
00231e   6e2a     MOVWF     0x2a,0x0                                                                                        
002320   0efe     MOVLW     0xfe                                                                                            
002322   50db     MOVF      0xdb,0x0,0x0                                                                                    
002324   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
00231a   e006     BZ        0x2328         		)                                                                              E:\iro_svn\opensprints\FW\user\user.c
002326   e106     BNZ       0x2334                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
002328   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     E:\iro_svn\opensprints\FW\user\user.c
00232a   6a1d     CLRF      0x1d,0x0       			return (0);                                                                   E:\iro_svn\opensprints\FW\user\user.c
00232c   6a1e     CLRF      0x1e,0x0                                                                                        
00232e   6a1f     CLRF      0x1f,0x0                                                                                        
002330   d13b     BRA       0x25a8                                                                                          
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
002332   d00d     BRA       0x234e         		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
002334   0e01     MOVLW     0x1            			neg = TRUE;                                                                   E:\iro_svn\opensprints\FW\user\user.c
002336   6ef3     MOVWF     0xf3,0x0                                                                                        
002338   0e03     MOVLW     0x3                                                                                             
00233a   cff3     MOVFF     0xff3,0xfdb                                                                                     
00233c   ffdb                                                                                                               
                                           			// Move to the next character                                                 E:\iro_svn\opensprints\FW\user\user.c
00233e   0101     MOVLB     0x1            			advance_RX_buf_out ();                                                        E:\iro_svn\opensprints\FW\user\user.c
002340   2ba1     INCF      0xa1,0x1,0x1                                                                                    
002342   0e40     MOVLW     0x40                                                                                            
002344   0101     MOVLB     0x1                                                                                             
002346   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
002348   e102     BNZ       0x234e                                                                                          
00234a   0101     MOVLB     0x1                                                                                             
00234c   6ba1     CLRF      0xa1,0x1                                                                                        
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// If we need to get a digit, go do that                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	if (                                                                            E:\iro_svn\opensprints\FW\user\user.c
00234e   0e04     MOVLW     0x4            		(kASCII_CHAR != type)                                                          E:\iro_svn\opensprints\FW\user\user.c
002350   6e2a     MOVWF     0x2a,0x0                                                                                        
002352   0efe     MOVLW     0xfe                                                                                            
002354   50db     MOVF      0xdb,0x0,0x0                                                                                    
002356   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           		&&                                                                             E:\iro_svn\opensprints\FW\user\user.c
00235a   0e05     MOVLW     0x5            		(kUCASE_ASCII_CHAR != type)                                                    E:\iro_svn\opensprints\FW\user\user.c
00235c   6e2b     MOVWF     0x2b,0x0                                                                                        
00235e   0efe     MOVLW     0xfe                                                                                            
002360   50db     MOVF      0xdb,0x0,0x0                                                                                    
002362   5c2b     SUBWF     0x2b,0x0,0x0                                                                                    
002358   e011     BZ        0x237c         	)                                                                               E:\iro_svn\opensprints\FW\user\user.c
002364   e00b     BZ        0x237c                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
002366   0e05     MOVLW     0x5            		extract_digit(&acc, 5);                                                        E:\iro_svn\opensprints\FW\user\user.c
002368   6ee6     MOVWF     0xe6,0x0                                                                                        
00236a   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
00236c   ffe6                                                                                                               
00236e   cfda     MOVFF     0xfda,0xfe6                                                                                     
002370   ffe6                                                                                                               
002372   d924     RCALL     0x25bc                                                                                          
002374   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002376   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002378   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
00237a   d03a     BRA       0x23f0         	else                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// Otherwise just copy the byte                                                E:\iro_svn\opensprints\FW\user\user.c
00237c   0101     MOVLB     0x1            		acc = g_RX_buf[g_RX_buf_out];                                                  E:\iro_svn\opensprints\FW\user\user.c
00237e   51a1     MOVF      0xa1,0x0,0x1                                                                                    
002380   6aea     CLRF      0xea,0x0                                                                                        
002382   0f40     ADDLW     0x40                                                                                            
002384   6ee9     MOVWF     0xe9,0x0                                                                                        
002386   0e02     MOVLW     0x2                                                                                             
002388   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00238a   cfef     MOVFF     0xfef,0x2a                                                                                      
00238c   f02a                                                                                                               
00238e   6a2b     CLRF      0x2b,0x0                                                                                        
002390   6a2c     CLRF      0x2c,0x0                                                                                        
002392   c02a     MOVFF     0x2a,0xfdf                                                                                      
002394   ffdf                                                                                                               
002396   0e01     MOVLW     0x1                                                                                             
002398   c02b     MOVFF     0x2b,0xfdb                                                                                      
00239a   ffdb                                                                                                               
00239c   0e02     MOVLW     0x2                                                                                             
00239e   c02c     MOVFF     0x2c,0xfdb                                                                                      
0023a0   ffdb                                                                                                               
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           		// Force uppercase if that's what type we have                                 E:\iro_svn\opensprints\FW\user\user.c
0023a2   0e05     MOVLW     0x5            		if (kUCASE_ASCII_CHAR == type)                                                 E:\iro_svn\opensprints\FW\user\user.c
0023a4   6e2a     MOVWF     0x2a,0x0                                                                                        
0023a6   0efe     MOVLW     0xfe                                                                                            
0023a8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0023aa   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0023ac   e119     BNZ       0x23e0                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
0023ae   0e00     MOVLW     0x0            			acc = toupper (acc);                                                          E:\iro_svn\opensprints\FW\user\user.c
0023b0   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0023b2   ffe6                                                                                                               
0023b4   0e01     MOVLW     0x1                                                                                             
0023b6   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0023b8   ffe6                                                                                                               
0023ba   ec64     CALL      0x46c8,0x0                                                                                      
0023bc   f023                                                                                                               
0023be   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0023c0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0023c2   cff3     MOVFF     0xff3,0x2a                                                                                      
0023c4   f02a                                                                                                               
0023c6   cff4     MOVFF     0xff4,0x2b                                                                                      
0023c8   f02b                                                                                                               
0023ca   6a2c     CLRF      0x2c,0x0                                                                                        
0023cc   be2b     BTFSC     0x2b,0x7,0x0                                                                                    
0023ce   682c     SETF      0x2c,0x0                                                                                        
0023d0   c02a     MOVFF     0x2a,0xfdf                                                                                      
0023d2   ffdf                                                                                                               
0023d4   0e01     MOVLW     0x1                                                                                             
0023d6   c02b     MOVFF     0x2b,0xfdb                                                                                      
0023d8   ffdb                                                                                                               
0023da   0e02     MOVLW     0x2                                                                                             
0023dc   c02c     MOVFF     0x2c,0xfdb                                                                                      
0023de   ffdb                                                                                                               
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           		// Move to the next character                                                  E:\iro_svn\opensprints\FW\user\user.c
0023e0   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         E:\iro_svn\opensprints\FW\user\user.c
0023e2   2ba1     INCF      0xa1,0x1,0x1                                                                                    
0023e4   0e40     MOVLW     0x40                                                                                            
0023e6   0101     MOVLB     0x1                                                                                             
0023e8   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
0023ea   e102     BNZ       0x23f0                                                                                          
0023ec   0101     MOVLB     0x1                                                                                             
0023ee   6ba1     CLRF      0xa1,0x1                                                                                        
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Handle the negative sign                                                     E:\iro_svn\opensprints\FW\user\user.c
0023f0   0e03     MOVLW     0x3            	if (neg)                                                                        E:\iro_svn\opensprints\FW\user\user.c
0023f2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0023f4   e021     BZ        0x2438                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
0023f6   cfdf     MOVFF     0xfdf,0x2a     		acc = -acc;                                                                    E:\iro_svn\opensprints\FW\user\user.c
0023f8   f02a                                                                                                               
0023fa   0e01     MOVLW     0x1                                                                                             
0023fc   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0023fe   f02b                                                                                                               
002400   0e02     MOVLW     0x2                                                                                             
002402   cfdb     MOVFF     0xfdb,0x2c                                                                                      
002404   f02c                                                                                                               
002406   6822     SETF      0x22,0x0                                                                                        
002408   6823     SETF      0x23,0x0                                                                                        
00240a   6824     SETF      0x24,0x0                                                                                        
00240c   c02a     MOVFF     0x2a,0x1d                                                                                       
00240e   f01d                                                                                                               
002410   c02b     MOVFF     0x2b,0x1e                                                                                       
002412   f01e                                                                                                               
002414   c02c     MOVFF     0x2c,0x1f                                                                                       
002416   f01f                                                                                                               
002418   ec3f     CALL      0x427e,0x0                                                                                      
00241a   f021                                                                                                               
00241c   c01a     MOVFF     0x1a,0x2a                                                                                       
00241e   f02a                                                                                                               
002420   c01b     MOVFF     0x1b,0x2b                                                                                       
002422   f02b                                                                                                               
002424   c01c     MOVFF     0x1c,0x2c                                                                                       
002426   f02c                                                                                                               
002428   c02a     MOVFF     0x2a,0xfdf                                                                                      
00242a   ffdf                                                                                                               
00242c   0e01     MOVLW     0x1                                                                                             
00242e   c02b     MOVFF     0x2b,0xfdb                                                                                      
002430   ffdb                                                                                                               
002432   0e02     MOVLW     0x2                                                                                             
002434   c02c     MOVFF     0x2c,0xfdb                                                                                      
002436   ffdb                                                                                                               
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	// Range check the new value                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           	if (                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           		(                                                                              E:\iro_svn\opensprints\FW\user\user.c
002438   0efe     MOVLW     0xfe           			kCHAR == type                                                                 E:\iro_svn\opensprints\FW\user\user.c
00243a   50db     MOVF      0xdb,0x0,0x0                                                                                    
                                           			&&                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           			(                                                                             E:\iro_svn\opensprints\FW\user\user.c
00243e   cfdf     MOVFF     0xfdf,0x2a     				(acc > 127)                                                                  E:\iro_svn\opensprints\FW\user\user.c
002440   f02a                                                                                                               
002442   0e01     MOVLW     0x1                                                                                             
002444   cfdb     MOVFF     0xfdb,0x2b                                                                                      
002446   f02b                                                                                                               
002448   0e02     MOVLW     0x2                                                                                             
00244a   cfdb     MOVFF     0xfdb,0x2c                                                                                      
00244c   f02c                                                                                                               
00244e   342c     RLCF      0x2c,0x0,0x0                                                                                    
002450   0e00     MOVLW     0x0                                                                                             
002452   182c     XORWF     0x2c,0x0,0x0                                                                                    
002454   e607     BN        0x2464                                                                                          
002456   80d8     BSF       0xd8,0x0,0x0                                                                                    
002458   0e7f     MOVLW     0x7f                                                                                            
00245a   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
00245c   0e00     MOVLW     0x0                                                                                             
00245e   542b     SUBFWB    0x2b,0x0,0x0                                                                                    
002460   0e00     MOVLW     0x0                                                                                             
002462   542c     SUBFWB    0x2c,0x0,0x0                                                                                    
                                           				||                                                                           E:\iro_svn\opensprints\FW\user\user.c
002468   cfd9     MOVFF     0xfd9,0xfe9    				(acc < -128)                                                                 E:\iro_svn\opensprints\FW\user\user.c
00246a   ffe9                                                                                                               
00246c   cfda     MOVFF     0xfda,0xfea                                                                                     
00246e   ffea                                                                                                               
002470   0e02     MOVLW     0x2                                                                                             
002472   80d8     BSF       0xd8,0x0,0x0                                                                                    
002474   50eb     MOVF      0xeb,0x0,0x0                                                                                    
002476   0aff     XORLW     0xff                                                                                            
002478   e606     BN        0x2486                                                                                          
00247a   0e80     MOVLW     0x80                                                                                            
00247c   5cee     SUBWF     0xee,0x0,0x0                                                                                    
00247e   0eff     MOVLW     0xff                                                                                            
002480   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
002482   0eff     MOVLW     0xff                                                                                            
002484   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
002464   e201     BC        0x2468         			)                                                                             E:\iro_svn\opensprints\FW\user\user.c
002466   d08c     BRA       0x2580                                                                                          
002486   e201     BC        0x248a                                                                                          
002488   d07b     BRA       0x2580                                                                                          
00243c   e126     BNZ       0x248a         		)                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		||                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		(                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			kUCHAR == type                                                                E:\iro_svn\opensprints\FW\user\user.c
00248a   0efe     MOVLW     0xfe           			&&                                                                            E:\iro_svn\opensprints\FW\user\user.c
00248c   04db     DECF      0xdb,0x0,0x0                                                                                    
                                           			(                                                                             E:\iro_svn\opensprints\FW\user\user.c
002490   cfdf     MOVFF     0xfdf,0x2d     				(acc > 255)                                                                  E:\iro_svn\opensprints\FW\user\user.c
002492   f02d                                                                                                               
002494   0e01     MOVLW     0x1                                                                                             
002496   cfdb     MOVFF     0xfdb,0x2e                                                                                      
002498   f02e                                                                                                               
00249a   0e02     MOVLW     0x2                                                                                             
00249c   cfdb     MOVFF     0xfdb,0x2f                                                                                      
00249e   f02f                                                                                                               
0024a0   342f     RLCF      0x2f,0x0,0x0                                                                                    
0024a2   0e00     MOVLW     0x0                                                                                             
0024a4   182f     XORWF     0x2f,0x0,0x0                                                                                    
0024a6   e607     BN        0x24b6                                                                                          
0024a8   80d8     BSF       0xd8,0x0,0x0                                                                                    
0024aa   0eff     MOVLW     0xff                                                                                            
0024ac   542d     SUBFWB    0x2d,0x0,0x0                                                                                    
0024ae   0e00     MOVLW     0x0                                                                                             
0024b0   542e     SUBFWB    0x2e,0x0,0x0                                                                                    
0024b2   0e00     MOVLW     0x0                                                                                             
0024b4   542f     SUBFWB    0x2f,0x0,0x0                                                                                    
                                           				||                                                                           E:\iro_svn\opensprints\FW\user\user.c
0024b8   cfd9     MOVFF     0xfd9,0xfe9    				(acc < 0)                                                                    E:\iro_svn\opensprints\FW\user\user.c
0024ba   ffe9                                                                                                               
0024bc   cfda     MOVFF     0xfda,0xfea                                                                                     
0024be   ffea                                                                                                               
0024c0   0e02     MOVLW     0x2                                                                                             
0024c2   90d8     BCF       0xd8,0x0,0x0                                                                                    
0024c4   50eb     MOVF      0xeb,0x0,0x0                                                                                    
0024c6   0a00     XORLW     0x0                                                                                             
0024c8   e606     BN        0x24d6                                                                                          
0024ca   0e00     MOVLW     0x0                                                                                             
0024cc   5cee     SUBWF     0xee,0x0,0x0                                                                                    
0024ce   0e00     MOVLW     0x0                                                                                             
0024d0   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
0024d2   0e00     MOVLW     0x0                                                                                             
0024d4   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
0024b6   e364     BNC       0x2580         			)                                                                             E:\iro_svn\opensprints\FW\user\user.c
0024d6   e354     BNC       0x2580                                                                                          
00248e   e124     BNZ       0x24d8         		)                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		||                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		(                                                                              E:\iro_svn\opensprints\FW\user\user.c
0024d8   0e02     MOVLW     0x2            			kINT == type                                                                  E:\iro_svn\opensprints\FW\user\user.c
0024da   6e30     MOVWF     0x30,0x0                                                                                        
0024dc   0efe     MOVLW     0xfe                                                                                            
0024de   50db     MOVF      0xdb,0x0,0x0                                                                                    
0024e0   5c30     SUBWF     0x30,0x0,0x0   			&&                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           			(                                                                             E:\iro_svn\opensprints\FW\user\user.c
0024e4   cfdf     MOVFF     0xfdf,0x31     				(acc > 32767)                                                                E:\iro_svn\opensprints\FW\user\user.c
0024e6   f031                                                                                                               
0024e8   0e01     MOVLW     0x1                                                                                             
0024ea   cfdb     MOVFF     0xfdb,0x32                                                                                      
0024ec   f032                                                                                                               
0024ee   0e02     MOVLW     0x2                                                                                             
0024f0   cfdb     MOVFF     0xfdb,0x33                                                                                      
0024f2   f033                                                                                                               
0024f4   3433     RLCF      0x33,0x0,0x0                                                                                    
0024f6   0e00     MOVLW     0x0                                                                                             
0024f8   1833     XORWF     0x33,0x0,0x0                                                                                    
0024fa   e607     BN        0x250a                                                                                          
0024fc   80d8     BSF       0xd8,0x0,0x0                                                                                    
0024fe   0eff     MOVLW     0xff                                                                                            
002500   5431     SUBFWB    0x31,0x0,0x0                                                                                    
002502   0e7f     MOVLW     0x7f                                                                                            
002504   5432     SUBFWB    0x32,0x0,0x0                                                                                    
002506   0e00     MOVLW     0x0                                                                                             
002508   5433     SUBFWB    0x33,0x0,0x0                                                                                    
                                           				||                                                                           E:\iro_svn\opensprints\FW\user\user.c
00250c   cfd9     MOVFF     0xfd9,0xfe9    				(acc < -32768)                                                               E:\iro_svn\opensprints\FW\user\user.c
00250e   ffe9                                                                                                               
002510   cfda     MOVFF     0xfda,0xfea                                                                                     
002512   ffea                                                                                                               
002514   0e02     MOVLW     0x2                                                                                             
002516   80d8     BSF       0xd8,0x0,0x0                                                                                    
002518   50eb     MOVF      0xeb,0x0,0x0                                                                                    
00251a   0aff     XORLW     0xff                                                                                            
00251c   e606     BN        0x252a                                                                                          
00251e   0e00     MOVLW     0x0                                                                                             
002520   5cee     SUBWF     0xee,0x0,0x0                                                                                    
002522   0e80     MOVLW     0x80                                                                                            
002524   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
002526   0eff     MOVLW     0xff                                                                                            
002528   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
00250a   e33a     BNC       0x2580         			)                                                                             E:\iro_svn\opensprints\FW\user\user.c
00252a   e32a     BNC       0x2580                                                                                          
0024e2   e124     BNZ       0x252c         		)                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           		||                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		(                                                                              E:\iro_svn\opensprints\FW\user\user.c
00252c   0e03     MOVLW     0x3            			kUINT == type                                                                 E:\iro_svn\opensprints\FW\user\user.c
00252e   6e34     MOVWF     0x34,0x0                                                                                        
002530   0efe     MOVLW     0xfe                                                                                            
002532   50db     MOVF      0xdb,0x0,0x0                                                                                    
002534   5c34     SUBWF     0x34,0x0,0x0   			&&                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           			(                                                                             E:\iro_svn\opensprints\FW\user\user.c
002538   cfdf     MOVFF     0xfdf,0x35     				(acc > 65535)                                                                E:\iro_svn\opensprints\FW\user\user.c
00253a   f035                                                                                                               
00253c   0e01     MOVLW     0x1                                                                                             
00253e   cfdb     MOVFF     0xfdb,0x36                                                                                      
002540   f036                                                                                                               
002542   0e02     MOVLW     0x2                                                                                             
002544   cfdb     MOVFF     0xfdb,0x37                                                                                      
002546   f037                                                                                                               
002548   3437     RLCF      0x37,0x0,0x0                                                                                    
00254a   0e00     MOVLW     0x0                                                                                             
00254c   1837     XORWF     0x37,0x0,0x0                                                                                    
00254e   e607     BN        0x255e                                                                                          
002550   80d8     BSF       0xd8,0x0,0x0                                                                                    
002552   0eff     MOVLW     0xff                                                                                            
002554   5435     SUBFWB    0x35,0x0,0x0                                                                                    
002556   0eff     MOVLW     0xff                                                                                            
002558   5436     SUBFWB    0x36,0x0,0x0                                                                                    
00255a   0e00     MOVLW     0x0                                                                                             
00255c   5437     SUBFWB    0x37,0x0,0x0                                                                                    
                                           				||                                                                           E:\iro_svn\opensprints\FW\user\user.c
002560   cfd9     MOVFF     0xfd9,0xfe9    				(acc < 0)                                                                    E:\iro_svn\opensprints\FW\user\user.c
002562   ffe9                                                                                                               
002564   cfda     MOVFF     0xfda,0xfea                                                                                     
002566   ffea                                                                                                               
002568   0e02     MOVLW     0x2                                                                                             
00256a   90d8     BCF       0xd8,0x0,0x0                                                                                    
00256c   50eb     MOVF      0xeb,0x0,0x0                                                                                    
00256e   0a00     XORLW     0x0                                                                                             
002570   e606     BN        0x257e                                                                                          
002572   0e00     MOVLW     0x0                                                                                             
002574   5cee     SUBWF     0xee,0x0,0x0                                                                                    
002576   0e00     MOVLW     0x0                                                                                             
002578   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
00257a   0e00     MOVLW     0x0                                                                                             
00257c   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
00255e   e310     BNC       0x2580         			)                                                                             E:\iro_svn\opensprints\FW\user\user.c
00257e   e205     BC        0x258a                                                                                          
002536   e129     BNZ       0x258a         		)                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	)                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
002580   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iro_svn\opensprints\FW\user\user.c
002582   6a1d     CLRF      0x1d,0x0       		return (0);                                                                    E:\iro_svn\opensprints\FW\user\user.c
002584   6a1e     CLRF      0x1e,0x0                                                                                        
002586   6a1f     CLRF      0x1f,0x0                                                                                        
002588   d00f     BRA       0x25a8                                                                                          
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
00258a   cfdf     MOVFF     0xfdf,0x2a     	return(acc);	                                                                   E:\iro_svn\opensprints\FW\user\user.c
00258c   f02a                                                                                                               
00258e   0e01     MOVLW     0x1                                                                                             
002590   cfdb     MOVFF     0xfdb,0x2b                                                                                      
002592   f02b                                                                                                               
002594   0e02     MOVLW     0x2                                                                                             
002596   cfdb     MOVFF     0xfdb,0x2c                                                                                      
002598   f02c                                                                                                               
00259a   c02a     MOVFF     0x2a,0x1d                                                                                       
00259c   f01d                                                                                                               
00259e   c02b     MOVFF     0x2b,0x1e                                                                                       
0025a0   f01e                                                                                                               
0025a2   c02c     MOVFF     0x2c,0x1f                                                                                       
0025a4   f01f                                                                                                               
0025a6   d000     BRA       0x25a8                                                                                          
0025a8   0e04     MOVLW     0x4            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
0025aa   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0025ac   e202     BC        0x25b2                                                                                          
0025ae   6ae1     CLRF      0xe1,0x0                                                                                        
0025b0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0025b2   6ee1     MOVWF     0xe1,0x0                                                                                        
0025b4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0025b6   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0025b8   ffd9                                                                                                               
0025ba   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // Loop 'digits' number of times, looking at the                                 E:\iro_svn\opensprints\FW\user\user.c
                                           // byte in input_buffer index *ptr, and if it is                                 E:\iro_svn\opensprints\FW\user\user.c
                                           // a digit, adding it to acc. Take care of                                       E:\iro_svn\opensprints\FW\user\user.c
                                           // powers of ten as well. If you hit a non-numerical                             E:\iro_svn\opensprints\FW\user\user.c
                                           // char, then return FALSE, otherwise return TRUE.                               E:\iro_svn\opensprints\FW\user\user.c
                                           // Store result as you go in *acc.                                               E:\iro_svn\opensprints\FW\user\user.c
0025bc   cfd9     MOVFF     0xfd9,0xfe6    signed char extract_digit(signed short long * acc,	unsigned char digits)         E:\iro_svn\opensprints\FW\user\user.c
0025be   ffe6                                                                                                               
0025c0   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0025c2   ffd9                                                                                                               
0025c4   0e02     MOVLW     0x2                                                                                             
0025c6   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char val;                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char digit_cnt;                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
0025c8   0efd     MOVLW     0xfd           	*acc = 0;                                                                       E:\iro_svn\opensprints\FW\user\user.c
0025ca   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0025cc   ffe9                                                                                                               
0025ce   0efe     MOVLW     0xfe                                                                                            
0025d0   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0025d2   ffea                                                                                                               
0025d4   6aee     CLRF      0xee,0x0                                                                                        
0025d6   6aee     CLRF      0xee,0x0                                                                                        
0025d8   6aee     CLRF      0xee,0x0                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
0025da   0e01     MOVLW     0x1            	for (digit_cnt = 0; digit_cnt < digits; digit_cnt++)                            E:\iro_svn\opensprints\FW\user\user.c
0025dc   6adb     CLRF      0xdb,0x0                                                                                        
0025de   0efc     MOVLW     0xfc                                                                                            
0025e0   50db     MOVF      0xdb,0x0,0x0                                                                                    
0025e2   6ef3     MOVWF     0xf3,0x0                                                                                        
0025e4   0e01     MOVLW     0x1                                                                                             
0025e6   cfdb     MOVFF     0xfdb,0xff4                                                                                     
0025e8   fff4                                                                                                               
0025ea   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0025ec   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
0025ee   e255     BC        0x269a                                                                                          
002694   0e01     MOVLW     0x1                                                                                             
002696   2adb     INCF      0xdb,0x1,0x0                                                                                    
002698   d7a2     BRA       0x25de                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
0025f0   0101     MOVLB     0x1            		val = g_RX_buf[g_RX_buf_out];                                                  E:\iro_svn\opensprints\FW\user\user.c
0025f2   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0025f4   6aea     CLRF      0xea,0x0                                                                                        
0025f6   0f40     ADDLW     0x40                                                                                            
0025f8   6ee9     MOVWF     0xe9,0x0                                                                                        
0025fa   0e02     MOVLW     0x2                                                                                             
0025fc   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0025fe   cfef     MOVFF     0xfef,0xfdf                                                                                     
002600   ffdf                                                                                                               
002602   0e30     MOVLW     0x30           		if ((val >= 48) && (val <= 57))                                                E:\iro_svn\opensprints\FW\user\user.c
002604   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002606   e344     BNC       0x2690                                                                                          
002608   50df     MOVF      0xdf,0x0,0x0                                                                                    
00260a   0839     SUBLW     0x39                                                                                            
00260c   e341     BNC       0x2690                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
00260e   0efd     MOVLW     0xfd           			*acc = (*acc * 10) + (val - 48);                                              E:\iro_svn\opensprints\FW\user\user.c
002610   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002612   ffe9                                                                                                               
002614   0efe     MOVLW     0xfe                                                                                            
002616   cfdb     MOVFF     0xfdb,0xfea                                                                                     
002618   ffea                                                                                                               
00261a   cfee     MOVFF     0xfee,0x2d                                                                                      
00261c   f02d                                                                                                               
00261e   cfee     MOVFF     0xfee,0x2e                                                                                      
002620   f02e                                                                                                               
002622   cfef     MOVFF     0xfef,0x2f                                                                                      
002624   f02f                                                                                                               
002626   0e0a     MOVLW     0xa                                                                                             
002628   6e22     MOVWF     0x22,0x0                                                                                        
00262a   6a23     CLRF      0x23,0x0                                                                                        
00262c   6a24     CLRF      0x24,0x0                                                                                        
00262e   c02d     MOVFF     0x2d,0x1d                                                                                       
002630   f01d                                                                                                               
002632   c02e     MOVFF     0x2e,0x1e                                                                                       
002634   f01e                                                                                                               
002636   c02f     MOVFF     0x2f,0x1f                                                                                       
002638   f01f                                                                                                               
00263a   ec3f     CALL      0x427e,0x0                                                                                      
00263c   f021                                                                                                               
00263e   c01a     MOVFF     0x1a,0x2d                                                                                       
002640   f02d                                                                                                               
002642   c01b     MOVFF     0x1b,0x2e                                                                                       
002644   f02e                                                                                                               
002646   c01c     MOVFF     0x1c,0x2f                                                                                       
002648   f02f                                                                                                               
00264a   0e30     MOVLW     0x30                                                                                            
00264c   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00264e   6e30     MOVWF     0x30,0x0                                                                                        
002650   6a31     CLRF      0x31,0x0                                                                                        
002652   6a32     CLRF      0x32,0x0                                                                                        
002654   502d     MOVF      0x2d,0x0,0x0                                                                                    
002656   2430     ADDWF     0x30,0x0,0x0                                                                                    
002658   6e2a     MOVWF     0x2a,0x0                                                                                        
00265a   502e     MOVF      0x2e,0x0,0x0                                                                                    
00265c   2031     ADDWFC    0x31,0x0,0x0                                                                                    
00265e   6e2b     MOVWF     0x2b,0x0                                                                                        
002660   502f     MOVF      0x2f,0x0,0x0                                                                                    
002662   2032     ADDWFC    0x32,0x0,0x0                                                                                    
002664   6e2c     MOVWF     0x2c,0x0                                                                                        
002666   0efd     MOVLW     0xfd                                                                                            
002668   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00266a   ffe9                                                                                                               
00266c   0efe     MOVLW     0xfe                                                                                            
00266e   cfdb     MOVFF     0xfdb,0xfea                                                                                     
002670   ffea                                                                                                               
002672   c02a     MOVFF     0x2a,0xfee                                                                                      
002674   ffee                                                                                                               
002676   c02b     MOVFF     0x2b,0xfee                                                                                      
002678   ffee                                                                                                               
00267a   c02c     MOVFF     0x2c,0xfee                                                                                      
00267c   ffee                                                                                                               
                                           			// Move to the next character                                                 E:\iro_svn\opensprints\FW\user\user.c
00267e   0101     MOVLB     0x1            			advance_RX_buf_out ();                                                        E:\iro_svn\opensprints\FW\user\user.c
002680   2ba1     INCF      0xa1,0x1,0x1                                                                                    
002682   0e40     MOVLW     0x40                                                                                            
002684   0101     MOVLB     0x1                                                                                             
002686   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
002688   e102     BNZ       0x268e                                                                                          
00268a   0101     MOVLB     0x1                                                                                             
00268c   6ba1     CLRF      0xa1,0x1                                                                                        
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
00268e   d002     BRA       0x2694         		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
002690   0e00     MOVLW     0x0            			return (FALSE);                                                               E:\iro_svn\opensprints\FW\user\user.c
002692   d005     BRA       0x269e                                                                                          
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
00269a   0e01     MOVLW     0x1            	return (TRUE);                                                                  E:\iro_svn\opensprints\FW\user\user.c
00269c   d000     BRA       0x269e                                                                                          
00269e   6e2a     MOVWF     0x2a,0x0       }                                                                                E:\iro_svn\opensprints\FW\user\user.c
0026a0   0e02     MOVLW     0x2                                                                                             
0026a2   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0026a4   e202     BC        0x26aa                                                                                          
0026a6   6ae1     CLRF      0xe1,0x0                                                                                        
0026a8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0026aa   6ee1     MOVWF     0xe1,0x0                                                                                        
0026ac   502a     MOVF      0x2a,0x0,0x0                                                                                    
0026ae   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0026b0   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0026b2   ffd9                                                                                                               
0026b4   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           // For debugging, this command will spit out a bunch of values.                  E:\iro_svn\opensprints\FW\user\user.c
                                           void print_status(void)                                                          E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           	printf(                                                                         E:\iro_svn\opensprints\FW\user\user.c
                                           		(rom char*)"Status=%i\r\n"                                                     E:\iro_svn\opensprints\FW\user\user.c
0026b6   5006     MOVF      0x6,0x0,0x0    		,ISR_D_FIFO_length                                                             E:\iro_svn\opensprints\FW\user\user.c
0026bc   0e34     MOVLW     0x34                                                                                            
0026be   6e2a     MOVWF     0x2a,0x0                                                                                        
0026c0   0e41     MOVLW     0x41                                                                                            
0026c2   6e2b     MOVWF     0x2b,0x0                                                                                        
0026c4   6a2c     CLRF      0x2c,0x0                                                                                        
0026c6   c02a     MOVFF     0x2a,0xfe6                                                                                      
0026c8   ffe6                                                                                                               
0026ca   c02b     MOVFF     0x2b,0xfe6                                                                                      
0026cc   ffe6                                                                                                               
0026ce   c02c     MOVFF     0x2c,0xfe6                                                                                      
0026d0   ffe6                                                                                                               
0026b8   6ee6     MOVWF     0xe6,0x0       	);                                                                              E:\iro_svn\opensprints\FW\user\user.c
0026ba   6ae6     CLRF      0xe6,0x0                                                                                        
0026d2   ec6b     CALL      0x44d6,0x0                                                                                      
0026d4   f022                                                                                                               
0026d6   6e2d     MOVWF     0x2d,0x0                                                                                        
0026d8   0e05     MOVLW     0x5                                                                                             
0026da   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0026dc   502d     MOVF      0x2d,0x0,0x0                                                                                    
0026de   0012     RETURN    0x0            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\user\user.c
                                            * Function:        void BlinkUSBStatus(void)                                    E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * Overview:        BlinkUSBStatus turns on and off LEDs corresponding to        E:\iro_svn\opensprints\FW\user\user.c
                                            *                  the USB device state.                                        E:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               E:\iro_svn\opensprints\FW\user\user.c
                                            * Note:            mLED macros can be found in io_cfg.h                         E:\iro_svn\opensprints\FW\user\user.c
                                            *                  usb_device_state is declared in usbmmap.c and is modified    E:\iro_svn\opensprints\FW\user\user.c
                                            *                  in usbdrv.c, usbctrltrf.c, and usb9.c                        E:\iro_svn\opensprints\FW\user\user.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\user\user.c
                                           void BlinkUSBStatus(void)                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                               static word LEDCount = 0;                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           	static unsigned char LEDState = 0;                                              E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                               if (                                                                         E:\iro_svn\opensprints\FW\user\user.c
0026e0   0101     MOVLB     0x1            		usb_device_state == DETACHED_STATE                                             E:\iro_svn\opensprints\FW\user\user.c
0026e2   51e8     MOVF      0xe8,0x0,0x1                                                                                    
                                                  	||                                                                       E:\iro_svn\opensprints\FW\user\user.c
0026e6   0e01     MOVLW     0x1                   	1 == UCONbits.SUSPND                                                     E:\iro_svn\opensprints\FW\user\user.c
0026e8   6e2a     MOVWF     0x2a,0x0                                                                                        
0026ea   506d     MOVF      0x6d,0x0,0x0                                                                                    
0026ec   0b02     ANDLW     0x2                                                                                             
0026ee   e001     BZ        0x26f2                                                                                          
0026f0   0e01     MOVLW     0x1                                                                                             
0026e4   e008     BZ        0x26f6             )                                                                            E:\iro_svn\opensprints\FW\user\user.c
0026f2   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0026f4   e102     BNZ       0x26fa                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\user\user.c
0026f6   908b     BCF       0x8b,0x0,0x0   		mLED_1_Off();                                                                  E:\iro_svn\opensprints\FW\user\user.c
                                               }                                                                            E:\iro_svn\opensprints\FW\user\user.c
0026f8   d05d     BRA       0x27b4             else if (                                                                    E:\iro_svn\opensprints\FW\user\user.c
                                           		usb_device_state == ATTACHED_STATE                                             E:\iro_svn\opensprints\FW\user\user.c
0026fa   0101     MOVLB     0x1            		||                                                                             E:\iro_svn\opensprints\FW\user\user.c
0026fc   05e8     DECF      0xe8,0x0,0x1                                                                                    
002700   0e02     MOVLW     0x2            		usb_device_state == POWERED_STATE		                                            E:\iro_svn\opensprints\FW\user\user.c
0026fe   e00c     BZ        0x2718         		||                                                                             E:\iro_svn\opensprints\FW\user\user.c
002702   0101     MOVLB     0x1                                                                                             
002704   5de8     SUBWF     0xe8,0x0,0x1                                                                                    
002706   e008     BZ        0x2718                                                                                          
002708   0e03     MOVLW     0x3            		usb_device_state == DEFAULT_STATE                                              E:\iro_svn\opensprints\FW\user\user.c
00270a   0101     MOVLB     0x1            		||                                                                             E:\iro_svn\opensprints\FW\user\user.c
00270c   5de8     SUBWF     0xe8,0x0,0x1                                                                                    
00270e   e004     BZ        0x2718                                                                                          
002710   0e05     MOVLW     0x5            		usb_device_state == ADDRESS_STATE                                              E:\iro_svn\opensprints\FW\user\user.c
002712   0101     MOVLB     0x1            	)                                                                               E:\iro_svn\opensprints\FW\user\user.c
002714   5de8     SUBWF     0xe8,0x0,0x1                                                                                    
002716   e102     BNZ       0x271c                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\user\user.c
002718   808b     BSF       0x8b,0x0,0x0           mLED_1_On();                                                             E:\iro_svn\opensprints\FW\user\user.c
                                               }                                                                            E:\iro_svn\opensprints\FW\user\user.c
00271a   d04c     BRA       0x27b4             else if (usb_device_state == CONFIGURED_STATE)                               E:\iro_svn\opensprints\FW\user\user.c
00271c   0e06     MOVLW     0x6                                                                                             
00271e   0101     MOVLB     0x1                                                                                             
002720   5de8     SUBWF     0xe8,0x0,0x1                                                                                    
002722   e148     BNZ       0x27b4                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\user\user.c
002724   0101     MOVLB     0x1            		LEDCount--;                                                                    E:\iro_svn\opensprints\FW\user\user.c
002726   07d8     DECF      0xd8,0x1,0x1                                                                                    
002728   0e00     MOVLW     0x0                                                                                             
00272a   5bd9     SUBWFB    0xd9,0x1,0x1                                                                                    
00272c   0101     MOVLB     0x1            		if (0 == LEDState)                                                             E:\iro_svn\opensprints\FW\user\user.c
00272e   51da     MOVF      0xda,0x0,0x1                                                                                    
002730   e10e     BNZ       0x274e                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
002732   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            E:\iro_svn\opensprints\FW\user\user.c
002734   51d8     MOVF      0xd8,0x0,0x1                                                                                    
002736   11d9     IORWF     0xd9,0x0,0x1                                                                                    
002738   e109     BNZ       0x274c                                                                                          
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
00273a   808b     BSF       0x8b,0x0,0x0   				mLED_1_On();                                                                 E:\iro_svn\opensprints\FW\user\user.c
00273c   0101     MOVLB     0x1            				LEDCount = 10000U;				                                                       E:\iro_svn\opensprints\FW\user\user.c
00273e   0e10     MOVLW     0x10                                                                                            
002740   6fd8     MOVWF     0xd8,0x1                                                                                        
002742   0e27     MOVLW     0x27                                                                                            
002744   6fd9     MOVWF     0xd9,0x1                                                                                        
002746   0101     MOVLB     0x1            				LEDState = 1;                                                                E:\iro_svn\opensprints\FW\user\user.c
002748   0e01     MOVLW     0x1                                                                                             
00274a   6fda     MOVWF     0xda,0x1                                                                                        
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
00274c   d033     BRA       0x27b4         		else if (1 == LEDState)                                                        E:\iro_svn\opensprints\FW\user\user.c
00274e   0101     MOVLB     0x1                                                                                             
002750   05da     DECF      0xda,0x0,0x1                                                                                    
002752   e10e     BNZ       0x2770                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
002754   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            E:\iro_svn\opensprints\FW\user\user.c
002756   51d8     MOVF      0xd8,0x0,0x1                                                                                    
002758   11d9     IORWF     0xd9,0x0,0x1                                                                                    
00275a   e109     BNZ       0x276e                                                                                          
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
00275c   908b     BCF       0x8b,0x0,0x0   				mLED_1_Off();                                                                E:\iro_svn\opensprints\FW\user\user.c
00275e   0101     MOVLB     0x1            				LEDCount = 10000U;				                                                       E:\iro_svn\opensprints\FW\user\user.c
002760   0e10     MOVLW     0x10                                                                                            
002762   6fd8     MOVWF     0xd8,0x1                                                                                        
002764   0e27     MOVLW     0x27                                                                                            
002766   6fd9     MOVWF     0xd9,0x1                                                                                        
002768   0101     MOVLB     0x1            				LEDState = 2;                                                                E:\iro_svn\opensprints\FW\user\user.c
00276a   0e02     MOVLW     0x2                                                                                             
00276c   6fda     MOVWF     0xda,0x1                                                                                        
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
00276e   d022     BRA       0x27b4         		else if (2 == LEDState)                                                        E:\iro_svn\opensprints\FW\user\user.c
002770   0e02     MOVLW     0x2                                                                                             
002772   0101     MOVLB     0x1                                                                                             
002774   5dda     SUBWF     0xda,0x0,0x1                                                                                    
002776   e10e     BNZ       0x2794                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
002778   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            E:\iro_svn\opensprints\FW\user\user.c
00277a   51d8     MOVF      0xd8,0x0,0x1                                                                                    
00277c   11d9     IORWF     0xd9,0x0,0x1                                                                                    
00277e   e109     BNZ       0x2792                                                                                          
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
002780   808b     BSF       0x8b,0x0,0x0   				mLED_1_On();                                                                 E:\iro_svn\opensprints\FW\user\user.c
002782   0101     MOVLB     0x1            				LEDCount = 100000U;				                                                      E:\iro_svn\opensprints\FW\user\user.c
002784   0ea0     MOVLW     0xa0                                                                                            
002786   6fd8     MOVWF     0xd8,0x1                                                                                        
002788   0e86     MOVLW     0x86                                                                                            
00278a   6fd9     MOVWF     0xd9,0x1                                                                                        
00278c   0101     MOVLB     0x1            				LEDState = 3;                                                                E:\iro_svn\opensprints\FW\user\user.c
00278e   0e03     MOVLW     0x3                                                                                             
002790   6fda     MOVWF     0xda,0x1                                                                                        
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
002792   d010     BRA       0x27b4         		else if (LEDState >= 3)                                                        E:\iro_svn\opensprints\FW\user\user.c
002794   0e03     MOVLW     0x3                                                                                             
002796   0101     MOVLB     0x1                                                                                             
002798   5dda     SUBWF     0xda,0x0,0x1                                                                                    
00279a   e30c     BNC       0x27b4                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
00279c   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            E:\iro_svn\opensprints\FW\user\user.c
00279e   51d8     MOVF      0xd8,0x0,0x1                                                                                    
0027a0   11d9     IORWF     0xd9,0x0,0x1                                                                                    
0027a2   e108     BNZ       0x27b4                                                                                          
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
0027a4   908b     BCF       0x8b,0x0,0x0   				mLED_1_Off();                                                                E:\iro_svn\opensprints\FW\user\user.c
0027a6   0101     MOVLB     0x1            				LEDCount = 10000U;				                                                       E:\iro_svn\opensprints\FW\user\user.c
0027a8   0e10     MOVLW     0x10                                                                                            
0027aa   6fd8     MOVWF     0xd8,0x1                                                                                        
0027ac   0e27     MOVLW     0x27                                                                                            
0027ae   6fd9     MOVWF     0xd9,0x1                                                                                        
0027b0   0101     MOVLB     0x1            				LEDState = 0;                                                                E:\iro_svn\opensprints\FW\user\user.c
0027b2   6bda     CLRF      0xda,0x1                                                                                        
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                               }                                                                            E:\iro_svn\opensprints\FW\user\user.c
0027b4   0012     RETURN    0x0            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           BOOL SwitchIsPressed(void)                                                       E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
0027b6   b482     BTFSC     0x82,0x2,0x0   	if( 0 == UserSW)                   	// If pressed                               E:\iro_svn\opensprints\FW\user\user.c
0027b8   d003     BRA       0x27c0                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
0027ba   0e01     MOVLW     0x1            	    return (TRUE);                	// Was pressed                               E:\iro_svn\opensprints\FW\user\user.c
0027bc   d003     BRA       0x27c4                                                                                          
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
0027be   d002     BRA       0x27c4         	else                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
0027c0   0e00     MOVLW     0x0            		return (FALSE);					// Was not pressed                                         E:\iro_svn\opensprints\FW\user\user.c
0027c2   d000     BRA       0x27c4                                                                                          
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
0027c4   0012     RETURN    0x0            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           /** Start Luke Orland code **************************************************/   E:\iro_svn\opensprints\FW\user\user.c
                                           BOOL justBegun = TRUE;                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int prevValueSensor0;                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int prevValueSensor1;                                                   E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int currentValueSensor0;                                                E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int currentValueSensor1;                                                E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int Sensor0PortApin=0;                                                  E:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int Sensor1PortApin=1;                                                  E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           void HallEffSensors(void)                                                        E:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                E:\iro_svn\opensprints\FW\user\user.c
0027c6   0101     MOVLB     0x1            	if(is_racing)                                                                   E:\iro_svn\opensprints\FW\user\user.c
0027c8   51d6     MOVF      0xd6,0x0,0x1                                                                                    
0027ca   e101     BNZ       0x27ce                                                                                          
0027cc   d0be     BRA       0x294a                                                                                          
                                           	{                                                                               E:\iro_svn\opensprints\FW\user\user.c
0027ce   0101     MOVLB     0x1            		if(justBegun)                                                                  E:\iro_svn\opensprints\FW\user\user.c
0027d0   51db     MOVF      0xdb,0x0,0x1                                                                                    
0027d2   e031     BZ        0x2836                                                                                          
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			// initialize the pins                                                        E:\iro_svn\opensprints\FW\user\user.c
0027d4   0e01     MOVLW     0x1            			bitset (DDRA, Sensor0PortApin);     // set Port A Pin x as input              E:\iro_svn\opensprints\FW\user\user.c
0027d6   c1dc     MOVFF     0x1dc,0xfe7                                                                                     
0027d8   ffe7                                                                                                               
0027da   52e7     MOVF      0xe7,0x1,0x0                                                                                    
0027dc   e004     BZ        0x27e6                                                                                          
0027de   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
0027e0   0bfe     ANDLW     0xfe                                                                                            
0027e2   06e7     DECF      0xe7,0x1,0x0                                                                                    
0027e4   e1fc     BNZ       0x27de                                                                                          
0027e6   1292     IORWF     0x92,0x1,0x0                                                                                    
0027e8   0e01     MOVLW     0x1            			bitset (DDRA, Sensor1PortApin);     // set Port A Pin x as input              E:\iro_svn\opensprints\FW\user\user.c
0027ea   c1de     MOVFF     0x1de,0xfe7                                                                                     
0027ec   ffe7                                                                                                               
0027ee   52e7     MOVF      0xe7,0x1,0x0                                                                                    
0027f0   e004     BZ        0x27fa                                                                                          
0027f2   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
0027f4   0bfe     ANDLW     0xfe                                                                                            
0027f6   06e7     DECF      0xe7,0x1,0x0                                                                                    
0027f8   e1fc     BNZ       0x27f2                                                                                          
0027fa   1292     IORWF     0x92,0x1,0x0                                                                                    
                                           			// read the pins                                                              E:\iro_svn\opensprints\FW\user\user.c
0027fc   0e01     MOVLW     0x1            			currentValueSensor0 = bittst (PORTA, Sensor0PortApin);  	// read Port A Pin x state E:\iro_svn\opensprints\FW\user\user.c
0027fe   c1dc     MOVFF     0x1dc,0xfe7                                                                                     
002800   ffe7                                                                                                               
002802   52e7     MOVF      0xe7,0x1,0x0                                                                                    
002804   e004     BZ        0x280e                                                                                          
002806   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
002808   0bfe     ANDLW     0xfe                                                                                            
00280a   06e7     DECF      0xe7,0x1,0x0                                                                                    
00280c   e1fc     BNZ       0x2806                                                                                          
00280e   1480     ANDWF     0x80,0x0,0x0                                                                                    
002810   0101     MOVLB     0x1                                                                                             
002812   6fb0     MOVWF     0xb0,0x1                                                                                        
002814   6bb1     CLRF      0xb1,0x1                                                                                        
002816   0e01     MOVLW     0x1            			currentValueSensor1 = bittst (PORTA, Sensor1PortApin);  	// read Port A Pin x state E:\iro_svn\opensprints\FW\user\user.c
002818   c1de     MOVFF     0x1de,0xfe7                                                                                     
00281a   ffe7                                                                                                               
00281c   52e7     MOVF      0xe7,0x1,0x0                                                                                    
00281e   e004     BZ        0x2828                                                                                          
002820   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
002822   0bfe     ANDLW     0xfe                                                                                            
002824   06e7     DECF      0xe7,0x1,0x0                                                                                    
002826   e1fc     BNZ       0x2820                                                                                          
002828   1480     ANDWF     0x80,0x0,0x0                                                                                    
00282a   0101     MOVLB     0x1                                                                                             
00282c   6fb2     MOVWF     0xb2,0x1                                                                                        
00282e   6bb3     CLRF      0xb3,0x1                                                                                        
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
002830   0101     MOVLB     0x1            			justBegun=0;                                                                  E:\iro_svn\opensprints\FW\user\user.c
002832   6bdb     CLRF      0xdb,0x1                                                                                        
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
002834   d08a     BRA       0x294a         		else                                                                           E:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           			//CheckRaceTimer();                                                           E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           			// remember previous state of pins                                            E:\iro_svn\opensprints\FW\user\user.c
002836   c1b0     MOVFF     0x1b0,0x1ac    			prevValueSensor0=currentValueSensor0;                                         E:\iro_svn\opensprints\FW\user\user.c
002838   f1ac                                                                                                               
00283a   c1b1     MOVFF     0x1b1,0x1ad                                                                                     
00283c   f1ad                                                                                                               
00283e   c1b2     MOVFF     0x1b2,0x1ae    			prevValueSensor1=currentValueSensor1;                                         E:\iro_svn\opensprints\FW\user\user.c
002840   f1ae                                                                                                               
002842   c1b3     MOVFF     0x1b3,0x1af                                                                                     
002844   f1af                                                                                                               
                                           	                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                           			// read the pins                                                              E:\iro_svn\opensprints\FW\user\user.c
002846   0e01     MOVLW     0x1            			currentValueSensor0 = bittst (PORTA, Sensor0PortApin);  	// read state of Port A Pin x E:\iro_svn\opensprints\FW\user\user.c
002848   c1dc     MOVFF     0x1dc,0xfe7                                                                                     
00284a   ffe7                                                                                                               
00284c   52e7     MOVF      0xe7,0x1,0x0                                                                                    
00284e   e004     BZ        0x2858                                                                                          
002850   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
002852   0bfe     ANDLW     0xfe                                                                                            
002854   06e7     DECF      0xe7,0x1,0x0                                                                                    
002856   e1fc     BNZ       0x2850                                                                                          
002858   1480     ANDWF     0x80,0x0,0x0                                                                                    
00285a   0101     MOVLB     0x1                                                                                             
00285c   6fb0     MOVWF     0xb0,0x1                                                                                        
00285e   6bb1     CLRF      0xb1,0x1                                                                                        
002860   0e01     MOVLW     0x1            			currentValueSensor1 = bittst (PORTA, Sensor1PortApin);  	// read state of Port A Pin x E:\iro_svn\opensprints\FW\user\user.c
002862   c1de     MOVFF     0x1de,0xfe7                                                                                     
002864   ffe7                                                                                                               
002866   52e7     MOVF      0xe7,0x1,0x0                                                                                    
002868   e004     BZ        0x2872                                                                                          
00286a   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
00286c   0bfe     ANDLW     0xfe                                                                                            
00286e   06e7     DECF      0xe7,0x1,0x0                                                                                    
002870   e1fc     BNZ       0x286a                                                                                          
002872   1480     ANDWF     0x80,0x0,0x0                                                                                    
002874   0101     MOVLB     0x1                                                                                             
002876   6fb2     MOVWF     0xb2,0x1                                                                                        
002878   6bb3     CLRF      0xb3,0x1                                                                                        
                                           		                                                                               E:\iro_svn\opensprints\FW\user\user.c
00287a   0101     MOVLB     0x1            			if((currentValueSensor0^prevValueSensor0)&~currentValueSensor0)               E:\iro_svn\opensprints\FW\user\user.c
00287c   0101     MOVLB     0x1                                                                                             
00287e   51b0     MOVF      0xb0,0x0,0x1                                                                                    
002880   0101     MOVLB     0x1                                                                                             
002882   19ac     XORWF     0xac,0x0,0x1                                                                                    
002884   6e2c     MOVWF     0x2c,0x0                                                                                        
002886   0101     MOVLB     0x1                                                                                             
002888   0101     MOVLB     0x1                                                                                             
00288a   51b1     MOVF      0xb1,0x0,0x1                                                                                    
00288c   0101     MOVLB     0x1                                                                                             
00288e   19ad     XORWF     0xad,0x0,0x1                                                                                    
002890   6e2d     MOVWF     0x2d,0x0                                                                                        
002892   c1b0     MOVFF     0x1b0,0x2e                                                                                      
002894   f02e                                                                                                               
002896   c1b1     MOVFF     0x1b1,0x2f                                                                                      
002898   f02f                                                                                                               
00289a   1e2e     COMF      0x2e,0x1,0x0                                                                                    
00289c   1e2f     COMF      0x2f,0x1,0x0                                                                                    
00289e   502c     MOVF      0x2c,0x0,0x0                                                                                    
0028a0   142e     ANDWF     0x2e,0x0,0x0                                                                                    
0028a2   6e2a     MOVWF     0x2a,0x0                                                                                        
0028a4   502d     MOVF      0x2d,0x0,0x0                                                                                    
0028a6   142f     ANDWF     0x2f,0x0,0x0                                                                                    
0028a8   6e2b     MOVWF     0x2b,0x0                                                                                        
0028aa   502a     MOVF      0x2a,0x0,0x0                                                                                    
0028ac   102b     IORWF     0x2b,0x0,0x0                                                                                    
0028ae   e019     BZ        0x28e2                                                                                          
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           				// get the current time                                                      E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           				// send a char string through USB packet stating that sensor x switched to high E:\iro_svn\opensprints\FW\user\user.c
0028b0   c1a9     MOVFF     0x1a9,0xfe6    				printf("1;%i:%i\r\n",raceTimeMins,raceTimeCentisecs);                        E:\iro_svn\opensprints\FW\user\user.c
0028b2   ffe6                                                                                                               
0028b4   c1aa     MOVFF     0x1aa,0xfe6                                                                                     
0028b6   ffe6                                                                                                               
0028b8   c1a7     MOVFF     0x1a7,0xfe6                                                                                     
0028ba   ffe6                                                                                                               
0028bc   c1a8     MOVFF     0x1a8,0xfe6                                                                                     
0028be   ffe6                                                                                                               
0028c0   0e2a     MOVLW     0x2a                                                                                            
0028c2   6e2a     MOVWF     0x2a,0x0                                                                                        
0028c4   0e41     MOVLW     0x41                                                                                            
0028c6   6e2b     MOVWF     0x2b,0x0                                                                                        
0028c8   6a2c     CLRF      0x2c,0x0                                                                                        
0028ca   c02a     MOVFF     0x2a,0xfe6                                                                                      
0028cc   ffe6                                                                                                               
0028ce   c02b     MOVFF     0x2b,0xfe6                                                                                      
0028d0   ffe6                                                                                                               
0028d2   c02c     MOVFF     0x2c,0xfe6                                                                                      
0028d4   ffe6                                                                                                               
0028d6   ec6b     CALL      0x44d6,0x0                                                                                      
0028d8   f022                                                                                                               
0028da   6e2d     MOVWF     0x2d,0x0                                                                                        
0028dc   0e07     MOVLW     0x7                                                                                             
0028de   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0028e0   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               E:\iro_svn\opensprints\FW\user\user.c
0028e2   0101     MOVLB     0x1            			if((currentValueSensor1^prevValueSensor1)&~currentValueSensor1)               E:\iro_svn\opensprints\FW\user\user.c
0028e4   0101     MOVLB     0x1                                                                                             
0028e6   51b2     MOVF      0xb2,0x0,0x1                                                                                    
0028e8   0101     MOVLB     0x1                                                                                             
0028ea   19ae     XORWF     0xae,0x0,0x1                                                                                    
0028ec   6e2c     MOVWF     0x2c,0x0                                                                                        
0028ee   0101     MOVLB     0x1                                                                                             
0028f0   0101     MOVLB     0x1                                                                                             
0028f2   51b3     MOVF      0xb3,0x0,0x1                                                                                    
0028f4   0101     MOVLB     0x1                                                                                             
0028f6   19af     XORWF     0xaf,0x0,0x1                                                                                    
0028f8   6e2d     MOVWF     0x2d,0x0                                                                                        
0028fa   c1b2     MOVFF     0x1b2,0x2e                                                                                      
0028fc   f02e                                                                                                               
0028fe   c1b3     MOVFF     0x1b3,0x2f                                                                                      
002900   f02f                                                                                                               
002902   1e2e     COMF      0x2e,0x1,0x0                                                                                    
002904   1e2f     COMF      0x2f,0x1,0x0                                                                                    
002906   502c     MOVF      0x2c,0x0,0x0                                                                                    
002908   142e     ANDWF     0x2e,0x0,0x0                                                                                    
00290a   6e2a     MOVWF     0x2a,0x0                                                                                        
00290c   502d     MOVF      0x2d,0x0,0x0                                                                                    
00290e   142f     ANDWF     0x2f,0x0,0x0                                                                                    
002910   6e2b     MOVWF     0x2b,0x0                                                                                        
002912   502a     MOVF      0x2a,0x0,0x0                                                                                    
002914   102b     IORWF     0x2b,0x0,0x0                                                                                    
002916   e019     BZ        0x294a                                                                                          
                                           			{                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           				// get the current time                                                      E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           				// send a char string through USB packet stating that sensor x switched to high E:\iro_svn\opensprints\FW\user\user.c
002918   c1a9     MOVFF     0x1a9,0xfe6    				printf("2;%i:%i\r\n",raceTimeMins,raceTimeCentisecs);                        E:\iro_svn\opensprints\FW\user\user.c
00291a   ffe6                                                                                                               
00291c   c1aa     MOVFF     0x1aa,0xfe6                                                                                     
00291e   ffe6                                                                                                               
002920   c1a7     MOVFF     0x1a7,0xfe6                                                                                     
002922   ffe6                                                                                                               
002924   c1a8     MOVFF     0x1a8,0xfe6                                                                                     
002926   ffe6                                                                                                               
002928   0e20     MOVLW     0x20                                                                                            
00292a   6e2a     MOVWF     0x2a,0x0                                                                                        
00292c   0e41     MOVLW     0x41                                                                                            
00292e   6e2b     MOVWF     0x2b,0x0                                                                                        
002930   6a2c     CLRF      0x2c,0x0                                                                                        
002932   c02a     MOVFF     0x2a,0xfe6                                                                                      
002934   ffe6                                                                                                               
002936   c02b     MOVFF     0x2b,0xfe6                                                                                      
002938   ffe6                                                                                                               
00293a   c02c     MOVFF     0x2c,0xfe6                                                                                      
00293c   ffe6                                                                                                               
00293e   ec6b     CALL      0x44d6,0x0                                                                                      
002940   f022                                                                                                               
002942   6e2d     MOVWF     0x2d,0x0                                                                                        
002944   0e07     MOVLW     0x7                                                                                             
002946   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
002948   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           			}                                                                             E:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              E:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               E:\iro_svn\opensprints\FW\user\user.c
00294a   0012     RETURN    0x0            }                                                                                E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            E:\iro_svn\opensprints\FW\user\user.c
                                           /** EOF user.c ***************************************************************/  E:\iro_svn\opensprints\FW\user\user.c
                                           /*********************************************************************           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *             Microchip USB C18 Firmware -  CDC Version 1.0                     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *********************************************************************           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * FileName:        cdc.c                                                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Processor:       PIC18                                                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Software License Agreement                                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * license.                                                                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Author               Date        Comment                                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Rawin Rojvanit       11/19/04    Original. RS-232 Emulation Subset            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            ********************************************************************/           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** I N C L U D E S **********************************************************/  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #include <p18cxxx.h>                                                             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #include "system\typedefs.h"                                                     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #include "system\usb\usb.h"                                                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #ifdef USB_USE_CDC                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** V A R I A B L E S ********************************************************/  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #pragma udata                                                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           byte cdc_rx_len;            // total rx length                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           byte cdc_trf_state;         // States are defined cdc.h                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           POINTER pCDCSrc;            // Dedicated source pointer                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           POINTER pCDCDst;            // Dedicated destination pointer                     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           byte cdc_tx_len;            // total tx length                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           byte cdc_mem_type;          // _ROM, _RAM                                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           LINE_CODING line_coding;    // Buffer to store line coding information           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           CONTROL_SIGNAL_BITMAP control_signal_bitmap;                                     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /*                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * SEND_ENCAPSULATED_COMMAND and GET_ENCAPSULATED_RESPONSE are required          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * requests according to the CDC specification.                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * However, it is not really being used here, therefore a dummy buffer is        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * used for conformance.                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            */                                                                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #define dummy_length    0x08                                                     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           byte dummy_encapsulated_cmd_response[dummy_length];                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** D E C L A R A T I O N S **************************************************/  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #pragma code                                                                     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** C L A S S  S P E C I F I C  R E Q ****************************************/  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        void USBCheckCDCRequest(void)                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        This routine checks the setup data packet to see if it       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  knows how to handle it                                       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           void USBCheckCDCRequest(void)                                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * If request recipient is not an interface then return                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00356e   0104     MOVLB     0x4                if(SetupPkt.Recipient != RCPT_INTF) return;                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003570   5120     MOVF      0x20,0x0,0x1                                                                                    
003572   0b1f     ANDLW     0x1f                                                                                            
003574   0801     SUBLW     0x1                                                                                             
003576   e001     BZ        0x357a                                                                                          
003578   d060     BRA       0x363a                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * If request type is not class-specific then return                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00357a   0104     MOVLB     0x4                if(SetupPkt.RequestType != CLASS) return;                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00357c   5120     MOVF      0x20,0x0,0x1                                                                                    
00357e   0b60     ANDLW     0x60                                                                                            
003580   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003582   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003584   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003586   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003588   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
00358a   0801     SUBLW     0x1                                                                                             
00358c   e001     BZ        0x3590                                                                                          
00358e   d055     BRA       0x363a                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Interface ID must match interface numbers associated with                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * CDC class, else return                                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003590   0104     MOVLB     0x4                if((SetupPkt.bIntfID != CDC_COMM_INTF_ID)&&                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003592   5124     MOVF      0x24,0x0,0x1                                                                                    
003594   e004     BZ        0x359e                (SetupPkt.bIntfID != CDC_DATA_INTF_ID)) return;                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003596   0104     MOVLB     0x4                                                                                             
003598   0524     DECF      0x24,0x0,0x1                                                                                    
00359a   e001     BZ        0x359e                                                                                          
00359c   d04e     BRA       0x363a                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00359e   0104     MOVLB     0x4                switch(SetupPkt.bRequest)                                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0035a0   5121     MOVF      0x21,0x0,0x1                                                                                    
0035a2   0a23     XORLW     0x23                                                                                            
0035a4   e048     BZ        0x3636                                                                                          
0035a6   0a01     XORLW     0x1                                                                                             
0035a8   e040     BZ        0x362a                                                                                          
0035aa   0a03     XORLW     0x3                                                                                             
0035ac   e030     BZ        0x360e                                                                                          
0035ae   0a01     XORLW     0x1                                                                                             
0035b0   e025     BZ        0x35fc                                                                                          
0035b2   0a24     XORLW     0x24                                                                                            
0035b4   e022     BZ        0x35fa                                                                                          
0035b6   0a07     XORLW     0x7                                                                                             
0035b8   e01f     BZ        0x35f8                                                                                          
0035ba   0a01     XORLW     0x1                                                                                             
0035bc   e01c     BZ        0x35f6                                                                                          
0035be   0a03     XORLW     0x3                                                                                             
0035c0   e011     BZ        0x35e4                                                                                          
0035c2   0a01     XORLW     0x1                                                                                             
0035c4   e001     BZ        0x35c8                                                                                          
0035c6   d038     BRA       0x3638                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case SEND_ENCAPSULATED_COMMAND:                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0035c8   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0035ca   0e03     MOVLW     0x3                                                                                             
0035cc   6fe1     MOVWF     0xe1,0x1                                                                                        
0035ce   0101     MOVLB     0x1                        pSrc.bRam = (byte*)&dummy_encapsulated_cmd_response;                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0035d0   0ec4     MOVLW     0xc4                                                                                            
0035d2   6fe2     MOVWF     0xe2,0x1                                                                                        
0035d4   0e01     MOVLW     0x1                                                                                             
0035d6   6fe3     MOVWF     0xe3,0x1                                                                                        
0035d8   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;                                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0035da   93e9     BCF       0xe9,0x1,0x1                                                                                    
0035dc   0101     MOVLB     0x1                        LSB(wCount) = dummy_length;                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0035de   0e08     MOVLW     0x8                                                                                             
0035e0   6fe6     MOVWF     0xe6,0x1                                                                                        
0035e2   d02b     BRA       0x363a                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case GET_ENCAPSULATED_RESPONSE:                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0035e4   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0035e6   0e03     MOVLW     0x3                                                                                             
0035e8   6fe1     MOVWF     0xe1,0x1                                                                                        
                                                       // Populate dummy_encapsulated_cmd_response first.                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0035ea   0101     MOVLB     0x1                        pDst.bRam = (byte*)&dummy_encapsulated_cmd_response;                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0035ec   0ec4     MOVLW     0xc4                                                                                            
0035ee   6fe4     MOVWF     0xe4,0x1                                                                                        
0035f0   0e01     MOVLW     0x1                                                                                             
0035f2   6fe5     MOVWF     0xe5,0x1                                                                                        
0035f4   d022     BRA       0x363a                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case SET_COMM_FEATURE:                  // Optional                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0035f6   d021     BRA       0x363a                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case GET_COMM_FEATURE:                  // Optional                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0035f8   d020     BRA       0x363a                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case CLEAR_COMM_FEATURE:                // Optional                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0035fa   d01f     BRA       0x363a                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case SET_LINE_CODING:                                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0035fc   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0035fe   0e03     MOVLW     0x3                                                                                             
003600   6fe1     MOVWF     0xe1,0x1                                                                                        
003602   0101     MOVLB     0x1                        pDst.bRam = (byte*)&line_coding;    // Set destination               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003604   0ebc     MOVLW     0xbc                                                                                            
003606   6fe4     MOVWF     0xe4,0x1                                                                                        
003608   0e01     MOVLW     0x1                                                                                             
00360a   6fe5     MOVWF     0xe5,0x1                                                                                        
00360c   d016     BRA       0x363a                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case GET_LINE_CODING:                                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00360e   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003610   0e03     MOVLW     0x3                                                                                             
003612   6fe1     MOVWF     0xe1,0x1                                                                                        
003614   0101     MOVLB     0x1                        pSrc.bRam = (byte*)&line_coding;    // Set source                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003616   0ebc     MOVLW     0xbc                                                                                            
003618   6fe2     MOVWF     0xe2,0x1                                                                                        
00361a   0e01     MOVLW     0x1                                                                                             
00361c   6fe3     MOVWF     0xe3,0x1                                                                                        
00361e   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;       // Set memory type               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003620   93e9     BCF       0xe9,0x1,0x1                                                                                    
003622   0101     MOVLB     0x1                        LSB(wCount) = LINE_CODING_LENGTH;   // Set data count                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003624   0e07     MOVLW     0x7                                                                                             
003626   6fe6     MOVWF     0xe6,0x1                                                                                        
003628   d008     BRA       0x363a                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case SET_CONTROL_LINE_STATE:                                             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00362a   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00362c   0e03     MOVLW     0x3                                                                                             
00362e   6fe1     MOVWF     0xe1,0x1                                                                                        
003630   c422     MOVFF     0x422,0x1c3                control_signal_bitmap._byte = LSB(SetupPkt.W_Value);                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003632   f1c3                                                                                                               
003634   d002     BRA       0x363a                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case SEND_BREAK:                        // Optional                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003636   d001     BRA       0x363a                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   default:                                                                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003638   d000     BRA       0x363a                     break;                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               }//end switch(SetupPkt.bRequest)                                             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00363a   0012     RETURN    0x0            }//end USBCheckCDCRequest                                                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** U S E R  A P I ***********************************************************/  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        void CDCInitEP(void)                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        CDCInitEP initializes CDC endpoints, buffer descriptors,     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  internal state-machine, and variables.                       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  It should be called after the USB host has sent out a        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  SET_CONFIGURATION request.                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  See USBStdSetCfgHandler() in usb9.c for examples.            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           void CDCInitEP(void)                                                             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               //Abstract line coding information                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00363c   0101     MOVLB     0x1                line_coding.dwDTERate._dword = 115200;      // baud rate                     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00363e   6bbc     CLRF      0xbc,0x1                                                                                        
003640   0ec2     MOVLW     0xc2                                                                                            
003642   6fbd     MOVWF     0xbd,0x1                                                                                        
003644   0e01     MOVLW     0x1                                                                                             
003646   6fbe     MOVWF     0xbe,0x1                                                                                        
003648   6bbf     CLRF      0xbf,0x1                                                                                        
00364a   0101     MOVLB     0x1                line_coding.bCharFormat = 0x00;             // 1 stop bit                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00364c   6bc0     CLRF      0xc0,0x1                                                                                        
00364e   0101     MOVLB     0x1                line_coding.bParityType = 0x00;             // None                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003650   6bc1     CLRF      0xc1,0x1                                                                                        
003652   0101     MOVLB     0x1                line_coding.bDataBits = 0x08;               // 5,6,7,8, or 16                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003654   0e08     MOVLW     0x8                                                                                             
003656   6fc2     MOVWF     0xc2,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003658   0101     MOVLB     0x1                cdc_trf_state = CDC_TX_READY;                                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00365a   6bb5     CLRF      0xb5,0x1                                                                                        
00365c   0101     MOVLB     0x1                cdc_rx_len = 0;                                                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00365e   6bb4     CLRF      0xb4,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003660   0e1a     MOVLW     0x1a               CDC_COMM_UEP = EP_IN|HSHK_EN;               // Enable 1 Comm pipe            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003662   6e72     MOVWF     0x72,0x0                                                                                        
003664   0e1e     MOVLW     0x1e               CDC_DATA_UEP = EP_OUT_IN|HSHK_EN;           // Enable 2 data pipes           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003666   6e73     MOVWF     0x73,0x0                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Do not have to init Cnt of IN pipes here.                                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Reason:  Number of bytes to send to the host                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          varies from one transaction to                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          another. Cnt should equal the exact                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          number of bytes to transmit for                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          a given IN transaction.                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          This number of bytes will only                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          be known right before the data is                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          sent.                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003668   0104     MOVLB     0x4                CDC_INT_BD_IN.ADR = (byte*)&cdc_notice;     // Set buffer address            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00366a   0e00     MOVLW     0x0                                                                                             
00366c   6f16     MOVWF     0x16,0x1                                                                                        
00366e   0e05     MOVLW     0x5                                                                                             
003670   6f17     MOVWF     0x17,0x1                                                                                        
003672   0104     MOVLB     0x4                CDC_INT_BD_IN.Stat._byte = _UCPU|_DAT1;     // Set status                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003674   0e40     MOVLW     0x40                                                                                            
003676   6f14     MOVWF     0x14,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003678   0104     MOVLB     0x4                CDC_BULK_BD_OUT.Cnt = sizeof(cdc_data_rx);  // Set buffer size               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00367a   0e40     MOVLW     0x40                                                                                            
00367c   6f19     MOVWF     0x19,0x1                                                                                        
00367e   0104     MOVLB     0x4                CDC_BULK_BD_OUT.ADR = (byte*)&cdc_data_rx;  // Set buffer address            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003680   0e08     MOVLW     0x8                                                                                             
003682   6f1a     MOVWF     0x1a,0x1                                                                                        
003684   0e05     MOVLW     0x5                                                                                             
003686   6f1b     MOVWF     0x1b,0x1                                                                                        
003688   0104     MOVLB     0x4                CDC_BULK_BD_OUT.Stat._byte = _USIE|_DAT0|_DTSEN;// Set status                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00368a   0e88     MOVLW     0x88                                                                                            
00368c   6f18     MOVWF     0x18,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00368e   0104     MOVLB     0x4                CDC_BULK_BD_IN.ADR = (byte*)&cdc_data_tx;   // Set buffer size               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003690   0e48     MOVLW     0x48                                                                                            
003692   6f1e     MOVWF     0x1e,0x1                                                                                        
003694   0e05     MOVLW     0x5                                                                                             
003696   6f1f     MOVWF     0x1f,0x1                                                                                        
003698   0104     MOVLB     0x4                CDC_BULK_BD_IN.Stat._byte = _UCPU|_DAT1;    // Set buffer address            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00369a   0e40     MOVLW     0x40                                                                                            
00369c   6f1c     MOVWF     0x1c,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00369e   0012     RETURN    0x0            }//end CDCInitEP                                                                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        byte getsUSBUSART(char *buffer,                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                    byte len)                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    Value of input argument 'len' should be smaller than the     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  maximum endpoint size responsible for receiving bulk         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  data from USB host for CDC class.                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  Input argument 'buffer' should point to a buffer area that   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  is bigger or equal to the size specified by 'len'.           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           buffer  : Pointer to where received bytes are to be stored   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  len     : The number of bytes expected.                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          The number of bytes copied to buffer.                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    Publicly accessible variable cdc_rx_len is updated with      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  the number of bytes copied to buffer.                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  Once getsUSBUSART is called, subsequent retrieval of         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  cdc_rx_len can be done by calling macro mCDCGetRxLength().   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        getsUSBUSART copies a string of bytes received through       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  USB CDC Bulk OUT endpoint to a user's specified location.    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  It is a non-blocking function. It does not wait              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  for data if there is no data available. Instead it returns   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  '0' to notify the caller that there is no data available.    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            If the actual number of bytes received is larger than the    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  number of bytes expected (len), only the expected number     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  of bytes specified will be copied to buffer.                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  If the actual number of bytes received is smaller than the   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  number of bytes expected (len), only the actual number       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  of bytes received will be copied to buffer.                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036a0   cfd9     MOVFF     0xfd9,0xfe6    byte getsUSBUSART(unsigned char *buffer, byte len)                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036a2   ffe6                                                                                                               
0036a4   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0036a6   ffd9                                                                                                               
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036a8   0101     MOVLB     0x1                cdc_rx_len = 0;                                                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036aa   6bb4     CLRF      0xb4,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036ac   0104     MOVLB     0x4                if(!mCDCUsartRxIsBusy())                                                     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036ae   bf18     BTFSC     0x18,0x7,0x1                                                                                    
0036b0   d039     BRA       0x3724                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Adjust the expected number of bytes to equal                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * the actual number of bytes received.                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036b2   0efc     MOVLW     0xfc                   if(len > CDC_BULK_BD_OUT.Cnt)                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036b4   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0036b6   f02a                                                                                                               
0036b8   0104     MOVLB     0x4                                                                                             
0036ba   5119     MOVF      0x19,0x0,0x1                                                                                    
0036bc   80d8     BSF       0xd8,0x0,0x0                                                                                    
0036be   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
0036c0   e203     BC        0x36c8                                                                                          
0036c2   0efc     MOVLW     0xfc                       len = CDC_BULK_BD_OUT.Cnt;                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036c4   c419     MOVFF     0x419,0xfdb                                                                                     
0036c6   ffdb                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Copy data from dual-ram buffer to user's buffer                       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036c8   0101     MOVLB     0x1                    for(cdc_rx_len = 0; cdc_rx_len < len; cdc_rx_len++)                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036ca   6bb4     CLRF      0xb4,0x1                                                                                        
0036cc   0efc     MOVLW     0xfc                                                                                            
0036ce   50db     MOVF      0xdb,0x0,0x0                                                                                    
0036d0   0101     MOVLB     0x1                                                                                             
0036d2   5db4     SUBWF     0xb4,0x0,0x1                                                                                    
0036d4   e21c     BC        0x370e                                                                                          
003708   0101     MOVLB     0x1                                                                                             
00370a   2bb4     INCF      0xb4,0x1,0x1                                                                                    
00370c   d7df     BRA       0x36cc                                                                                          
0036d6   0101     MOVLB     0x1                        buffer[cdc_rx_len] = cdc_data_rx[cdc_rx_len];                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036d8   51b4     MOVF      0xb4,0x0,0x1                                                                                    
0036da   6aea     CLRF      0xea,0x0                                                                                        
0036dc   0f08     ADDLW     0x8                                                                                             
0036de   6ee9     MOVWF     0xe9,0x0                                                                                        
0036e0   0e05     MOVLW     0x5                                                                                             
0036e2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0036e4   50ef     MOVF      0xef,0x0,0x0                                                                                    
0036e6   6ee6     MOVWF     0xe6,0x0                                                                                        
0036e8   0101     MOVLB     0x1                                                                                             
0036ea   51b4     MOVF      0xb4,0x0,0x1                                                                                    
0036ec   6ee7     MOVWF     0xe7,0x0                                                                                        
0036ee   0efd     MOVLW     0xfd                                                                                            
0036f0   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0036f2   ffe9                                                                                                               
0036f4   0efe     MOVLW     0xfe                                                                                            
0036f6   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0036f8   ffea                                                                                                               
0036fa   50e7     MOVF      0xe7,0x0,0x0                                                                                    
0036fc   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
0036fe   0e00     MOVLW     0x0                                                                                             
003700   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
003702   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003704   50e7     MOVF      0xe7,0x0,0x0                                                                                    
003706   6eef     MOVWF     0xef,0x0                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Prepare dual-ram buffer for next OUT transaction                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00370e   0104     MOVLB     0x4                    CDC_BULK_BD_OUT.Cnt = sizeof(cdc_data_rx);                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003710   0e40     MOVLW     0x40                                                                                            
003712   6f19     MOVWF     0x19,0x1                                                                                        
003714   0e40     MOVLW     0x40                   mUSBBufferReady(CDC_BULK_BD_OUT);                                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003716   0104     MOVLB     0x4                                                                                             
003718   1718     ANDWF     0x18,0x1,0x1                                                                                    
00371a   0104     MOVLB     0x4                                                                                             
00371c   7d18     BTG       0x18,0x6,0x1                                                                                    
00371e   0e88     MOVLW     0x88                                                                                            
003720   0104     MOVLB     0x4                                                                                             
003722   1318     IORWF     0x18,0x1,0x1                                                                                    
                                               }//end if                                                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003724   0101     MOVLB     0x1                return cdc_rx_len;                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003726   51b4     MOVF      0xb4,0x0,0x1                                                                                    
003728   d000     BRA       0x372a                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00372a   52e5     MOVF      0xe5,0x1,0x0   }//end getsUSBUSART                                                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00372c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00372e   ffd9                                                                                                               
003730   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        void putsUSBUSART(char *data)                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    cdc_trf_state must be in the CDC_TX_READY state.             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  The string of characters pointed to by 'data' must equal     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  to or smaller than 255 bytes.                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           data    : Pointer to a null-terminated string of data.       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                            If a null character is not found, 255 bytes        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                            of data will be transferred to the host.           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        putsUSBUSART writes a string of data to the USB including    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  the null character. Use this version, 'puts', to transfer    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  data located in data memory.                                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            The transfer mechanism for device-to-host(put) is more       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  flexible than host-to-device(get). It can handle             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  a string of data larger than the maximum size of bulk IN     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  endpoint. A state machine is used to transfer a long         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  string of data over multiple USB transactions.               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  See CDCTxService() for more details.                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003732   cfd9     MOVFF     0xfd9,0xfe6    void putsUSBUSART(unsigned char *data)                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003734   ffe6                                                                                                               
003736   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003738   ffd9                                                                                                               
00373a   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               byte len;                                                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * User should have checked that cdc_trf_state is in CDC_TX_READY state      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * before calling this function.                                             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * As a safety precaution, this fuction checks the state one more time       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * to make sure it does not override any pending transactions.               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Currently it just quits the routine without reporting any errors back     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * to the user.                                                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Bottomline: User MUST make sure that mUSBUSARTIsTxTrfReady()==1           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *             before calling this function!                                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Example:                                                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * if(mUSBUSARTIsTxTrfReady())                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * IMPORTANT: Never use the following blocking while loop to wait:           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * while(!mUSBUSARTIsTxTrfReady())                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * The whole firmware framework is written based on cooperative              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * multi-tasking and a blocking code is not acceptable.                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Use a state machine instead.                                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00373c   0101     MOVLB     0x1                if(cdc_trf_state != CDC_TX_READY) return;                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00373e   51b5     MOVF      0xb5,0x0,0x1                                                                                    
003740   e001     BZ        0x3744                                                                                          
003742   d031     BRA       0x37a6                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * While loop counts the number of bytes to send including the               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * null character.                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003744   6adf     CLRF      0xdf,0x0           len = 0;                                                                     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               do                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003746   2adf     INCF      0xdf,0x1,0x0           len++;                                                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003748   50df     MOVF      0xdf,0x0,0x0           if(len == 256) break;       // Break loop once max len is reached.       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00374a   6e2a     MOVWF     0x2a,0x0                                                                                        
00374c   6a2b     CLRF      0x2b,0x0                                                                                        
00374e   502a     MOVF      0x2a,0x0,0x0                                                                                    
003750   e102     BNZ       0x3756                                                                                          
003752   0e01     MOVLW     0x1                                                                                             
003754   182b     XORWF     0x2b,0x0,0x0                                                                                    
003756   e101     BNZ       0x375a                                                                                          
003758   d00b     BRA       0x3770                                                                                          
00375a   0efd     MOVLW     0xfd               }while(*data++);                                                             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00375c   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00375e   ffe9                                                                                                               
003760   2adb     INCF      0xdb,0x1,0x0                                                                                    
003762   0efe     MOVLW     0xfe                                                                                            
003764   cfdb     MOVFF     0xfdb,0xfea                                                                                     
003766   ffea                                                                                                               
003768   e301     BNC       0x376c                                                                                          
00376a   2adb     INCF      0xdb,0x1,0x0                                                                                    
00376c   50ef     MOVF      0xef,0x0,0x0                                                                                    
00376e   e1eb     BNZ       0x3746                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Re-adjust pointer to its initial location                                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003770   50df     MOVF      0xdf,0x0,0x0       data-=len;                                                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003772   6e2a     MOVWF     0x2a,0x0                                                                                        
003774   6a2b     CLRF      0x2b,0x0                                                                                        
003776   50d9     MOVF      0xd9,0x0,0x0                                                                                    
003778   0ffd     ADDLW     0xfd                                                                                            
00377a   6ee9     MOVWF     0xe9,0x0                                                                                        
00377c   0eff     MOVLW     0xff                                                                                            
00377e   20da     ADDWFC    0xda,0x0,0x0                                                                                    
003780   6eea     MOVWF     0xea,0x0                                                                                        
003782   502a     MOVF      0x2a,0x0,0x0                                                                                    
003784   5eee     SUBWF     0xee,0x1,0x0                                                                                    
003786   502b     MOVF      0x2b,0x0,0x0                                                                                    
003788   5aed     SUBWFB    0xed,0x1,0x0                                                                                    
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           	// BPS - 05/04/2006 I don't want the NULL at the end.                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00378a   06df     DECF      0xdf,0x1,0x0   	len--;                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Second piece of information (length of data to send) is ready.            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Call mUSBUSARTTxRam to setup the transfer.                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * The actual transfer process will be handled by CDCTxService(),            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * which should be called once per Main Program loop.                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00378c   0efd     MOVLW     0xfd               mUSBUSARTTxRam((byte*)data,len);     // See cdc.h                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00378e   cfdb     MOVFF     0xfdb,0x1b6                                                                                     
003790   f1b6                                                                                                               
003792   0efe     MOVLW     0xfe                                                                                            
003794   cfdb     MOVFF     0xfdb,0x1b7                                                                                     
003796   f1b7                                                                                                               
003798   cfdf     MOVFF     0xfdf,0x1ba                                                                                     
00379a   f1ba                                                                                                               
00379c   0101     MOVLB     0x1                                                                                             
00379e   6bbb     CLRF      0xbb,0x1                                                                                        
0037a0   0101     MOVLB     0x1                                                                                             
0037a2   0e01     MOVLW     0x1                                                                                             
0037a4   6fb5     MOVWF     0xb5,0x1                                                                                        
0037a6   52e5     MOVF      0xe5,0x1,0x0   }//end putsUSBUSART                                                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037a8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0037aa   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0037ac   ffd9                                                                                                               
0037ae   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        void putrsUSBUSART(const rom char *data)                     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    cdc_trf_state must be in the CDC_TX_READY state.             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  The string of characters pointed to by 'data' must equal     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  to or smaller than 255 bytes.                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           data    : Pointer to a null-terminated string of data.       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                            If a null character is not found, 255 bytes        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                            of data will be transferred to the host.           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        putrsUSBUSART writes a string of data to the USB including   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  the null character. Use this version, 'putrs', to transfer   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  data literals and data located in program memory.            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            The transfer mechanism for device-to-host(put) is more       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  flexible than host-to-device(get). It can handle             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  a string of data larger than the maximum size of bulk IN     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  endpoint. A state machine is used to transfer a long         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  string of data over multiple USB transactions.               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  See CDCTxService() for more details.                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037b0   cfd9     MOVFF     0xfd9,0xfe6    void putrsUSBUSART(const rom unsigned char *data)                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037b2   ffe6                                                                                                               
0037b4   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0037b6   ffd9                                                                                                               
0037b8   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               byte len;                                                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * User should have checked that cdc_trf_state is in CDC_TX_READY state      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * before calling this function.                                             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * As a safety precaution, this fuction checks the state one more time       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * to make sure it does not override any pending transactions.               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Currently it just quits the routine without reporting any errors back     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * to the user.                                                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Bottomline: User MUST make sure that mUSBUSARTIsTxTrfReady()              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *             before calling this function!                                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Example:                                                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * if(mUSBUSARTIsTxTrfReady())                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * IMPORTANT: Never use the following blocking while loop to wait:           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * while(cdc_trf_state != CDC_TX_READY)                                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * The whole firmware framework is written based on cooperative              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * multi-tasking and a blocking code is not acceptable.                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Use a state machine instead.                                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037ba   0101     MOVLB     0x1                if(cdc_trf_state != CDC_TX_READY) return;                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037bc   51b5     MOVF      0xb5,0x0,0x1                                                                                    
0037be   e001     BZ        0x37c2                                                                                          
0037c0   d033     BRA       0x3828                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * While loop counts the number of bytes to send including the               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * null character.                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037c2   6adf     CLRF      0xdf,0x0           len = 0;                                                                     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               do                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037c4   2adf     INCF      0xdf,0x1,0x0           len++;                                                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037c6   50df     MOVF      0xdf,0x0,0x0           if(len == 255) break;       // Break loop once max len is reached.       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037c8   6e2a     MOVWF     0x2a,0x0                                                                                        
0037ca   6a2b     CLRF      0x2b,0x0                                                                                        
0037cc   0eff     MOVLW     0xff                                                                                            
0037ce   182a     XORWF     0x2a,0x0,0x0                                                                                    
0037d0   e101     BNZ       0x37d4                                                                                          
0037d2   502b     MOVF      0x2b,0x0,0x0                                                                                    
0037d4   e101     BNZ       0x37d8                                                                                          
0037d6   d00c     BRA       0x37f0                                                                                          
0037d8   0efd     MOVLW     0xfd               }while(*data++);                                                             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037da   cfdb     MOVFF     0xfdb,0xff6                                                                                     
0037dc   fff6                                                                                                               
0037de   2adb     INCF      0xdb,0x1,0x0                                                                                    
0037e0   0efe     MOVLW     0xfe                                                                                            
0037e2   cfdb     MOVFF     0xfdb,0xff7                                                                                     
0037e4   fff7                                                                                                               
0037e6   e301     BNC       0x37ea                                                                                          
0037e8   2adb     INCF      0xdb,0x1,0x0                                                                                    
0037ea   0008     TBLRD                                                                                                     
0037ec   50f5     MOVF      0xf5,0x0,0x0                                                                                    
0037ee   e1ea     BNZ       0x37c4                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Re-adjust pointer to its initial location                                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037f0   50df     MOVF      0xdf,0x0,0x0       data-=len;                                                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037f2   6e2a     MOVWF     0x2a,0x0                                                                                        
0037f4   6a2b     CLRF      0x2b,0x0                                                                                        
0037f6   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0037f8   0ffd     ADDLW     0xfd                                                                                            
0037fa   6ee9     MOVWF     0xe9,0x0                                                                                        
0037fc   0eff     MOVLW     0xff                                                                                            
0037fe   20da     ADDWFC    0xda,0x0,0x0                                                                                    
003800   6eea     MOVWF     0xea,0x0                                                                                        
003802   502a     MOVF      0x2a,0x0,0x0                                                                                    
003804   5eee     SUBWF     0xee,0x1,0x0                                                                                    
003806   502b     MOVF      0x2b,0x0,0x0                                                                                    
003808   5aed     SUBWFB    0xed,0x1,0x0                                                                                    
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           	// BPS - 05/04/2006 I don't want the NULL at the end.                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00380a   06df     DECF      0xdf,0x1,0x0   	len--;                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Second piece of information (length of data to send) is ready.            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Call mUSBUSARTTxRom to setup the transfer.                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * The actual transfer process will be handled by CDCTxService(),            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * which should be called once per Main Program loop.                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * (BPS 5/16/2006) Don't add the zero byte at the end. Send len-1            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * bytes intead of len bytes.                                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00380c   0efd     MOVLW     0xfd               mUSBUSARTTxRom((rom byte*)data,len); // See cdc.h                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00380e   cfdb     MOVFF     0xfdb,0x1b6                                                                                     
003810   f1b6                                                                                                               
003812   0efe     MOVLW     0xfe                                                                                            
003814   cfdb     MOVFF     0xfdb,0x1b7                                                                                     
003816   f1b7                                                                                                               
003818   cfdf     MOVFF     0xfdf,0x1ba                                                                                     
00381a   f1ba                                                                                                               
00381c   0101     MOVLB     0x1                                                                                             
00381e   0e01     MOVLW     0x1                                                                                             
003820   6fbb     MOVWF     0xbb,0x1                                                                                        
003822   0101     MOVLB     0x1                                                                                             
003824   0e01     MOVLW     0x1                                                                                             
003826   6fb5     MOVWF     0xb5,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003828   52e5     MOVF      0xe5,0x1,0x0   }//end putrsUSBUSART                                                             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00382a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00382c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00382e   ffd9                                                                                                               
003830   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        void CDCTxService(void)                                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        CDCTxService handles device-to-host transaction(s).          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  This function should be called once per Main Program loop.   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            None                                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003832   cfd9     MOVFF     0xfd9,0xfe6    void CDCTxService(void)                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003834   ffe6                                                                                                               
003836   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003838   ffd9                                                                                                               
00383a   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               byte byte_to_send;                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00383c   0104     MOVLB     0x4                if(mCDCUsartTxIsBusy()) return;                                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00383e   bf1c     BTFSC     0x1c,0x7,0x1                                                                                    
003840   d07d     BRA       0x393c                                                                                          
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Completing stage is necessary while [ mCDCUSartTxIsBusy()==1 ].           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * By having this stage, user can always check cdc_trf_state,                E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * and not having to call mCDCUsartTxIsBusy() directly.                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003842   0e03     MOVLW     0x3                if(cdc_trf_state == CDC_TX_COMPLETING)                                       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003844   0101     MOVLB     0x1                                                                                             
003846   5db5     SUBWF     0xb5,0x0,0x1                                                                                    
003848   e102     BNZ       0x384e                                                                                          
00384a   0101     MOVLB     0x1                    cdc_trf_state = CDC_TX_READY;                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00384c   6bb5     CLRF      0xb5,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * If CDC_TX_READY state, nothing to do, just return.                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00384e   0101     MOVLB     0x1                if(cdc_trf_state == CDC_TX_READY) return;                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003850   51b5     MOVF      0xb5,0x0,0x1                                                                                    
003852   e101     BNZ       0x3856                                                                                          
003854   d073     BRA       0x393c                                                                                          
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * If CDC_TX_BUSY_ZLP state, send zero length packet                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003856   0e02     MOVLW     0x2                if(cdc_trf_state == CDC_TX_BUSY_ZLP)                                         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003858   0101     MOVLB     0x1                                                                                             
00385a   5db5     SUBWF     0xb5,0x0,0x1                                                                                    
00385c   e106     BNZ       0x386a                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00385e   0104     MOVLB     0x4                    CDC_BULK_BD_IN.Cnt = 0;                                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003860   6b1d     CLRF      0x1d,0x1                                                                                        
003862   0101     MOVLB     0x1                    cdc_trf_state = CDC_TX_COMPLETING;                                       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003864   0e03     MOVLW     0x3                                                                                             
003866   6fb5     MOVWF     0xb5,0x1                                                                                        
                                               }                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003868   d061     BRA       0x392c             else if(cdc_trf_state == CDC_TX_BUSY)                                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00386a   0101     MOVLB     0x1                                                                                             
00386c   05b5     DECF      0xb5,0x0,0x1                                                                                    
00386e   e15e     BNZ       0x392c                                                                                          
                                               {                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * First, have to figure out how many byte of data to send.              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003870   0e40     MOVLW     0x40               	if(cdc_tx_len > sizeof(cdc_data_tx))                                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003872   6e2a     MOVWF     0x2a,0x0                                                                                        
003874   6a2b     CLRF      0x2b,0x0                                                                                        
003876   0101     MOVLB     0x1                                                                                             
003878   51ba     MOVF      0xba,0x0,0x1                                                                                    
00387a   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
00387c   0e00     MOVLW     0x0                                                                                             
00387e   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
003880   e203     BC        0x3888                                                                                          
003882   0e40     MOVLW     0x40               	    byte_to_send = sizeof(cdc_data_tx);                                     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003884   6edf     MOVWF     0xdf,0x0                                                                                        
003886   d002     BRA       0x388c             	else                                                                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003888   c1ba     MOVFF     0x1ba,0xfdf        	    byte_to_send = cdc_tx_len;                                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00388a   ffdf                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Next, load the number of bytes to send to Cnt in buffer descriptor    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00388c   cfdf     MOVFF     0xfdf,0x41d            CDC_BULK_BD_IN.Cnt = byte_to_send;                                       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00388e   f41d                                                                                                               
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Subtract the number of bytes just about to be sent from the total.    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003890   50df     MOVF      0xdf,0x0,0x0       	cdc_tx_len = cdc_tx_len - byte_to_send;                                     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003892   0101     MOVLB     0x1                                                                                             
003894   5dba     SUBWF     0xba,0x0,0x1                                                                                    
003896   0101     MOVLB     0x1                                                                                             
003898   6fba     MOVWF     0xba,0x1                                                                                        
                                               	                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00389a   0101     MOVLB     0x1                    pCDCDst.bRam = (byte*)&cdc_data_tx; // Set destination pointer           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00389c   0e48     MOVLW     0x48                                                                                            
00389e   6fb8     MOVWF     0xb8,0x1                                                                                        
0038a0   0e05     MOVLW     0x5                                                                                             
0038a2   6fb9     MOVWF     0xb9,0x1                                                                                        
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038a4   0101     MOVLB     0x1                    if(cdc_mem_type == _ROM)            // Determine type of memory source   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038a6   05bb     DECF      0xbb,0x0,0x1                                                                                    
0038a8   e118     BNZ       0x38da                                                                                          
                                                   {                                                                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038aa   50df     MOVF      0xdf,0x0,0x0               while(byte_to_send)                                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038ac   e015     BZ        0x38d8                                                                                          
0038d6   d7e9     BRA       0x38aa                                                                                          
                                                       {                                                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038ae   c1b6     MOVFF     0x1b6,0xff6                    *pCDCDst.bRam = *pCDCSrc.bRom;                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038b0   fff6                                                                                                               
0038b2   c1b7     MOVFF     0x1b7,0xff7                                                                                     
0038b4   fff7                                                                                                               
0038b6   0008     TBLRD                                                                                                     
0038b8   50f5     MOVF      0xf5,0x0,0x0                                                                                    
0038ba   c1b8     MOVFF     0x1b8,0xfe9                                                                                     
0038bc   ffe9                                                                                                               
0038be   c1b9     MOVFF     0x1b9,0xfea                                                                                     
0038c0   ffea                                                                                                               
0038c2   6eef     MOVWF     0xef,0x0                                                                                        
0038c4   0101     MOVLB     0x1                            pCDCDst.bRam++;                                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038c6   2bb8     INCF      0xb8,0x1,0x1                                                                                    
0038c8   0e00     MOVLW     0x0                                                                                             
0038ca   23b9     ADDWFC    0xb9,0x1,0x1                                                                                    
0038cc   0101     MOVLB     0x1                            pCDCSrc.bRom++;                                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038ce   2bb6     INCF      0xb6,0x1,0x1                                                                                    
0038d0   0e00     MOVLW     0x0                                                                                             
0038d2   23b7     ADDWFC    0xb7,0x1,0x1                                                                                    
0038d4   06df     DECF      0xdf,0x1,0x0                   byte_to_send--;                                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                       }//end while(byte_to_send)                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   }                                                                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038d8   d016     BRA       0x3906                 else // _RAM                                                             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   {                                                                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038da   50df     MOVF      0xdf,0x0,0x0               while(byte_to_send)                                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038dc   e014     BZ        0x3906                                                                                          
003904   d7ea     BRA       0x38da                                                                                          
                                                       {                                                                    E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038de   c1b6     MOVFF     0x1b6,0xfe9                    *pCDCDst.bRam = *pCDCSrc.bRam;                                   E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038e0   ffe9                                                                                                               
0038e2   c1b7     MOVFF     0x1b7,0xfea                                                                                     
0038e4   ffea                                                                                                               
0038e6   50ef     MOVF      0xef,0x0,0x0                                                                                    
0038e8   c1b8     MOVFF     0x1b8,0xfe9                                                                                     
0038ea   ffe9                                                                                                               
0038ec   c1b9     MOVFF     0x1b9,0xfea                                                                                     
0038ee   ffea                                                                                                               
0038f0   6eef     MOVWF     0xef,0x0                                                                                        
0038f2   0101     MOVLB     0x1                            pCDCDst.bRam++;                                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038f4   2bb8     INCF      0xb8,0x1,0x1                                                                                    
0038f6   0e00     MOVLW     0x0                                                                                             
0038f8   23b9     ADDWFC    0xb9,0x1,0x1                                                                                    
0038fa   0101     MOVLB     0x1                            pCDCSrc.bRam++;                                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038fc   2bb6     INCF      0xb6,0x1,0x1                                                                                    
0038fe   0e00     MOVLW     0x0                                                                                             
003900   23b7     ADDWFC    0xb7,0x1,0x1                                                                                    
003902   06df     DECF      0xdf,0x1,0x0                   byte_to_send--;                                                  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                       }//end while(byte_to_send._word)                                     E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   }//end if(cdc_mem_type...)                                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Lastly, determine if a zero length packet state is necessary.         E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * See explanation in USB Specification 2.0: Section 5.8.3               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003906   0101     MOVLB     0x1                    if(cdc_tx_len == 0)                                                      E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003908   51ba     MOVF      0xba,0x0,0x1                                                                                    
00390a   e110     BNZ       0x392c                                                                                          
                                                   {                                                                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00390c   0104     MOVLB     0x4                        if(CDC_BULK_BD_IN.Cnt == sizeof(cdc_data_tx))                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00390e   511d     MOVF      0x1d,0x0,0x1                                                                                    
003910   6e2a     MOVWF     0x2a,0x0                                                                                        
003912   6a2b     CLRF      0x2b,0x0                                                                                        
003914   0e40     MOVLW     0x40                                                                                            
003916   182a     XORWF     0x2a,0x0,0x0                                                                                    
003918   e101     BNZ       0x391c                                                                                          
00391a   502b     MOVF      0x2b,0x0,0x0                                                                                    
00391c   e104     BNZ       0x3926                                                                                          
00391e   0101     MOVLB     0x1                            cdc_trf_state = CDC_TX_BUSY_ZLP;                                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003920   0e02     MOVLW     0x2                                                                                             
003922   6fb5     MOVWF     0xb5,0x1                                                                                        
003924   d003     BRA       0x392c                     else                                                                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003926   0101     MOVLB     0x1                            cdc_trf_state = CDC_TX_COMPLETING;                               E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003928   0e03     MOVLW     0x3                                                                                             
00392a   6fb5     MOVWF     0xb5,0x1                                                                                        
                                                   }//end if(cdc_tx_len...)                                                 E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               }//end if(cdc_tx_sate == CDC_TX_BUSY)                                        E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Both CDC_TX_BUSY and CDC_TX_BUSY_ZLP states use the following macro       E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00392c   0e40     MOVLW     0x40               mUSBBufferReady(CDC_BULK_BD_IN);                                             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00392e   0104     MOVLB     0x4                                                                                             
003930   171c     ANDWF     0x1c,0x1,0x1                                                                                    
003932   0104     MOVLB     0x4                                                                                             
003934   7d1c     BTG       0x1c,0x6,0x1                                                                                    
003936   0e88     MOVLW     0x88                                                                                            
003938   0104     MOVLB     0x4                                                                                             
00393a   131c     IORWF     0x1c,0x1,0x1                                                                                    
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00393c   52e5     MOVF      0xe5,0x1,0x0   }//end CDCTxService                                                              E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00393e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003940   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003942   ffd9                                                                                                               
003944   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #endif //USB_USE_CDC                                                             E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** EOF cdc.c ****************************************************************/  E:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   LIST P=18F2455                                                           C:\MCC18\SRC\TRADIT~1\PROC\p18f2455.asm
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\PROC\p18f2455.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\PROC\p18f2455.asm
                                           #include "p18cxxx.inc"                                                           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                   LIST                                                                     C:\MCC18\MPASM\p18cxxx.inc
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\p18cxxx.inc
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                                                                                                            C:\MCC18\MPASM\p18cxxx.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;/********************************************************************           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Function Name: Delay10TCYx                                      *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Return Value:  void                                             *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Parameters:    unit:                                            *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Description:   This routine delays for multiples of 10          *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  instruction cycles that is specified in unit.    *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Special Note:  This routine provides multiples of 10 Tcy.       *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  A value of 1 to 255 provides 10 to 2550   Tcy    *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  delay.  A value of 0 will provide a delay of     *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  2560 Tcy.                                        *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;********************************************************************/           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           D10TCYXCODE CODE                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           Delay10TCYx                                                                      C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004806   0eff     MOVLW     0xff               movlw   0xff                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004808   50e3     MOVF      0xe3,0x0,0x0       movf    PLUSW1,0                                                             C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00480a   4ee8     DCFSNZ    0xe8,0x1,0x0       dcfsnz  WREG,1                                                               C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00480c   0012     RETURN    0x0                return                                                                       C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           D10x                                                                             C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00480e   0000     NOP                          nop                                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004810   d000     BRA       0x4812             bra     $+2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004812   d000     BRA       0x4814             bra     $+2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004814   d000     BRA       0x4816             bra     $+2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           D10_1                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004816   2ee8     DECFSZ    0xe8,0x1,0x0       decfsz  WREG,1                                                               C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004818   d7fa     BRA       0x480e             bra     D10x                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00481a   0012     RETURN    0x0                return                                                                       C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                               GLOBAL  Delay10TCYx                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                               END                                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;	RCS Header $Id: fxm2424u.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <P18CXXX.INC>		; general Golden Gate definitions                        C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <CMATH18.INC>		; Math library definitions                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: cmath18.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                               LIST                                                                         C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ; CMATH18.INC  v1.0  Microchip Technology, Inc. / F.J. Testa                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <AARG.INC>		; AARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: aarg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN	__AARGB0, __AARGB1, __AARGB2, __AARGB3                                   C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                   EXTERN  __AARGB4, __AARGB5, __AARGB6, __AARGB7                           C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __AEXP                                                                  C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __REMB3, __REMB2, __REMB1, __REMB0                                      C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <BARG.INC>		; BARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: barg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BARGB3, __BARGB2, __BARGB1, __BARGB0                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BEXP                                                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <TEMPARG.INC>		; TEMPARG declarations                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: temparg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                   EXTERN  __TEMPB3, __TEMPB2, __TEMPB1, __TEMPB0, __TEMP                   C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       24x24 Bit Unsigned Fixed Point Multiply 24 x 24 -> 48                    C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Input:  24 bit unsigned fixed point multiplicand in AARGB0, AARGB1,      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               AARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               24 bit unsigned fixed point multiplier in BARGB0, BARGB1,        C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               BARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Use:    CALL    FXM2424U                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Output: 48 bit unsigned fixed point product in AARGB0, AARGB1,           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               AARGB2, AARGB3, AARGB4, AARGB5                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Result: AARG  <--  AARG * BARG                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Max Timing:     65 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Min Timing:     65 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       PM: 64              DM: 12                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           PROG	CODE                                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           FXM2424U                                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           		GLOBAL	FXM2424U                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00427e   c01f     MOVFF     0x1f,0x29      		MOVFF	__AARGB0,__TEMPB0	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004280   f029                                                                                                               
004282   c01e     MOVFF     0x1e,0x28      		MOVFF	__AARGB1,__TEMPB1	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004284   f028                                                                                                               
004286   c01d     MOVFF     0x1d,0x27      		MOVFF	__AARGB2,__TEMPB2	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004288   f027                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00428a   501d     MOVF      0x1d,0x0,0x0   		MOVF	__AARGB2,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00428c   0222     MULWF     0x22,0x0       		MULWF	__BARGB2                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00428e   cff4     MOVFF     0xff4,0x1b     		MOVFF	PRODH,__AARGB4                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004290   f01b                                                                                                               
004292   cff3     MOVFF     0xff3,0x1a     		MOVFF	PRODL,__AARGB5                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004294   f01a                                                                                                               
                                           		                                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004296   501e     MOVF      0x1e,0x0,0x0   		MOVF	__AARGB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004298   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00429a   cff4     MOVFF     0xff4,0x1d     		MOVFF	PRODH,__AARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00429c   f01d                                                                                                               
00429e   cff3     MOVFF     0xff3,0x1c     		MOVFF	PRODL,__AARGB3                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042a0   f01c                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042a2   0222     MULWF     0x22,0x0       		MULWF	__BARGB2                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042a4   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042a6   261b     ADDWF     0x1b,0x1,0x0   		ADDWF	__AARGB4,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042a8   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042aa   221c     ADDWFC    0x1c,0x1,0x0   		ADDWFC	__AARGB3,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042ac   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042ae   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042b0   5027     MOVF      0x27,0x0,0x0   		MOVF	__TEMPB2,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042b2   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042b4   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042b6   261b     ADDWF     0x1b,0x1,0x0   		ADDWF	__AARGB4,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042b8   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042ba   221c     ADDWFC    0x1c,0x1,0x0   		ADDWFC	__AARGB3,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042bc   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042be   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042c0   501f     MOVF      0x1f,0x0,0x0   		MOVF	__AARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042c2   0222     MULWF     0x22,0x0       		MULWF	__BARGB2                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042c4   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042c6   261c     ADDWF     0x1c,0x1,0x0   		ADDWF	__AARGB3,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042c8   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042ca   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042cc   501f     MOVF      0x1f,0x0,0x0   		MOVF	__AARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042ce   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042d0   6a1e     CLRF      0x1e,0x0       		CLRF	__AARGB1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042d2   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042d4   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042d6   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042d8   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042da   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042dc   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042de   5027     MOVF      0x27,0x0,0x0   		MOVF	__TEMPB2,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042e0   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042e2   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042e4   261c     ADDWF     0x1c,0x1,0x0   		ADDWF	__AARGB3,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042e6   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042e8   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042ea   6a1f     CLRF      0x1f,0x0       		CLRF	__AARGB0                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042ec   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042ee   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042f0   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042f2   5028     MOVF      0x28,0x0,0x0   		MOVF	__TEMPB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042f4   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042f6   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042f8   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042fa   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042fc   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0042fe   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004300   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004302   5029     MOVF      0x29,0x0,0x0   		MOVF	__TEMPB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004304   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004306   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004308   261e     ADDWF     0x1e,0x1,0x0   		ADDWF	__AARGB1,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00430a   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00430c   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00430e   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           		END                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: cmath18.asm,v 1.5 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           SIGN		RES 1       ; save location for sign in MSB                                C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           __FPFLAGSbits                                                                    C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           __FPFLAGS		RES 1       ; floating point library exception flags                  C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                   GLOBAL  SIGN, __FPFLAGS, __FPFLAGSbits                                   C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;	RCS Header $Id: aarg.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB3                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB7		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB2                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB6		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB1                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB5		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB0                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB4		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB3		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB2		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB1		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB0		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AEXP		RES 1       ; 8 bit biased exponent for argument A                       C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           	GLOBAL	__AARGB0, __AARGB1, __AARGB2, __AARGB3                                   C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                   GLOBAL  __AARGB4, __AARGB5, __AARGB6, __AARGB7                           C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           	GLOBAL  __AEXP                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           	GLOBAL  __REMB3, __REMB2, __REMB1, __REMB0                                      C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;	RCS Header $Id: barg.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB3		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB2		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB1		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB0		RES 1       ; most significant byte of argument B                      C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BEXP		RES 1       ; 8 bit biased exponent for argument B                       C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                   GLOBAL  __BARGB3, __BARGB2, __BARGB1, __BARGB0                           C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                   GLOBAL  __BEXP                                                           C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;	RCS Header $Id: temparg.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB3		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB2		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB1		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMP                                                                           C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB0		RES 1       ; temporary storage                                        C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                   GLOBAL  __TEMPB3, __TEMPB2, __TEMPB1, __TEMPB0, __TEMP                   C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                           /* printf() is a wrapper function which calls vfprintf() with stdout as the      C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                              destination output stream. EOF is returned on error, else the number          C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                              of characters output. */                                                      C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                           int                                                                              C:\MCC18\src\TRADIT~1\stdclib\printf.c
0044d6   cfd9     MOVFF     0xfd9,0xfe6    printf (const rom char *fmt, ...)                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
0044d8   ffe6                                                                                                               
0044da   cfda     MOVFF     0xfda,0xfe6                                                                                     
0044dc   ffe6                                                                                                               
0044de   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0044e0   ffd9                                                                                                               
0044e2   cfe2     MOVFF     0xfe2,0xfda                                                                                     
0044e4   ffda                                                                                                               
0044e6   52e6     MOVF      0xe6,0x1,0x0                                                                                    
0044e8   52e6     MOVF      0xe6,0x1,0x0                                                                                    
0044ea   52e6     MOVF      0xe6,0x1,0x0                                                                                    
0044ec   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                             va_list ap;                                                                    C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                             int n;                                                                         C:\MCC18\src\TRADIT~1\stdclib\printf.c
0044ee   50d9     MOVF      0xd9,0x0,0x0     va_start (ap, fmt);                                                            C:\MCC18\src\TRADIT~1\stdclib\printf.c
0044f0   0ffb     ADDLW     0xfb                                                                                            
0044f2   6e2a     MOVWF     0x2a,0x0                                                                                        
0044f4   0eff     MOVLW     0xff                                                                                            
0044f6   20da     ADDWFC    0xda,0x0,0x0                                                                                    
0044f8   6e2b     MOVWF     0x2b,0x0                                                                                        
0044fa   c02a     MOVFF     0x2a,0xfde                                                                                      
0044fc   ffde                                                                                                               
0044fe   6edd     MOVWF     0xdd,0x0                                                                                        
004500   cfde     MOVFF     0xfde,0xfe6      n = vfprintf (stdout, fmt, ap);                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
004502   ffe6                                                                                                               
004504   cfdd     MOVFF     0xfdd,0xfe6                                                                                     
004506   ffe6                                                                                                               
004508   0efb     MOVLW     0xfb                                                                                            
00450a   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00450c   ffe6                                                                                                               
00450e   0efc     MOVLW     0xfc                                                                                            
004510   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
004512   ffe6                                                                                                               
004514   0efd     MOVLW     0xfd                                                                                            
004516   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
004518   ffe6                                                                                                               
00451a   c1ee     MOVFF     0x1ee,0xfe6                                                                                     
00451c   ffe6                                                                                                               
00451e   c1ef     MOVFF     0x1ef,0xfe6                                                                                     
004520   ffe6                                                                                                               
004522   ecbc     CALL      0x2978,0x0                                                                                      
004524   f014                                                                                                               
004526   6e2a     MOVWF     0x2a,0x0                                                                                        
004528   0e07     MOVLW     0x7                                                                                             
00452a   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00452c   e202     BC        0x4532                                                                                          
00452e   6ae1     CLRF      0xe1,0x0                                                                                        
004530   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004532   6ee1     MOVWF     0xe1,0x0                                                                                        
004534   502a     MOVF      0x2a,0x0,0x0                                                                                    
004536   0e02     MOVLW     0x2                                                                                             
004538   cff3     MOVFF     0xff3,0xfdb                                                                                     
00453a   ffdb                                                                                                               
00453c   0e03     MOVLW     0x3                                                                                             
00453e   cff4     MOVFF     0xff4,0xfdb                                                                                     
004540   ffdb                                                                                                               
                                             va_end (ap);                                                                   C:\MCC18\src\TRADIT~1\stdclib\printf.c
004542   0e02     MOVLW     0x2              return n;                                                                      C:\MCC18\src\TRADIT~1\stdclib\printf.c
004544   cfdb     MOVFF     0xfdb,0x2a                                                                                      
004546   f02a                                                                                                               
004548   0e03     MOVLW     0x3                                                                                             
00454a   cfdb     MOVFF     0xfdb,0x2b                                                                                      
00454c   f02b                                                                                                               
00454e   c02a     MOVFF     0x2a,0xff3                                                                                      
004550   fff3                                                                                                               
004552   c02b     MOVFF     0x2b,0xff4                                                                                      
004554   fff4                                                                                                               
004556   0e04     MOVLW     0x4            }                                                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
004558   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00455a   e202     BC        0x4560                                                                                          
00455c   6ae1     CLRF      0xe1,0x0                                                                                        
00455e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004560   6ee1     MOVWF     0xe1,0x0                                                                                        
004562   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004564   cfe5     MOVFF     0xfe5,0xfda                                                                                     
004566   ffda                                                                                                               
004568   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00456a   ffd9                                                                                                               
00456c   0012     RETURN    0x0                                                                                             
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                           /* by default stdout issues to the USART */                                      C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                           FILE *stdout = _H_USART;                                                         C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; @name toupper                                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;The {\bf toupper} function converts a lower case character to the               C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;corresponding upper case character.                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;@return If {\bf islower} is true for the value of {\bf c}, the corresponding    C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;upper case equivalent is returned, else the value of {\bf c} is returned        C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;unchanged.                                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; int toupper (int c);                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           CTYPE CODE                                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           toupper                                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             global toupper                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; Proceedure: Use FSR0 as pointer to 'c'                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;         Return with result in PROD                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Set FSR0 = FSR1 - 2 ( location of 'c') after checking upper byte for 0       C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0046c8   0eff     MOVLW     0xff                     StkSetPtrToOffset FSR0L,-1                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0046ca   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
0046cc   6ee9     MOVWF     0xe9,0x0                                                                                        
0046ce   0eff     MOVLW     0xff                                                                                            
0046d0   20e2     ADDWFC    0xe2,0x0,0x0                                                                                    
0046d2   6eea     MOVWF     0xea,0x0                                                                                        
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Copy 'c' into target location                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0046d4   cfed     MOVFF     0xfed,0xff4    	  movff POSTDEC0, PRODH                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0046d6   fff4                                                                                                               
0046d8   cfef     MOVFF     0xfef,0xff3    	  movff INDF0, PRODL                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0046da   fff3                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0046dc   66f4     TSTFSZ    0xf4,0x0                 tstfsz    PRODH,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0046de   d007     BRA       0x46ee                   bra       jNoMatch            ; upper byte must be 0                   C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Test for lower case condition                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0046e0   0e60     MOVLW     0x60                     jmpFleL   PRODL,ACCESS,'a'-1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0046e2   64f3     CPFSGT    0xf3,0x0                                                                                        
0046e4   d004     BRA       0x46ee                                                                                          
0046e6   0e7b     MOVLW     0x7b                     jmpFgeL   PRODL,ACCESS,'z'+1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0046e8   60f3     CPFSLT    0xf3,0x0                                                                                        
0046ea   d001     BRA       0x46ee                                                                                          
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Convert char from lower to upper by clearing bit 5                           C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0046ec   9af3     BCF       0xf3,0x5,0x0             bcf       PRODL,5,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           jNoMatch:                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0046ee   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #include <ctype.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #include <string.h>                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_MINUS 0x1                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_PLUS  0x2                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_SPACE 0x4                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_OCTO  0x8                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_ZERO  0x10                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_SIGNED 0x80                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           static const rom char s_digits[] = "0123456789abcdef";                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           static unsigned char                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00294c   ece2     CALL      0x33c4,0x0     s_put_n_chars (FILE * handle, unsigned char n, char c)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00294e   f019                                                                                                               
0033c4   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
0033c6   ffe6                                                                                                               
0033c8   cfda     MOVFF     0xfda,0xfe6                                                                                     
0033ca   ffe6                                                                                                               
0033cc   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0033ce   ffd9                                                                                                               
0033d0   cfe2     MOVFF     0xfe2,0xfda                                                                                     
0033d2   ffda                                                                                                               
0033d4   0012     RETURN    0x0                                                                                             
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002950   0efb     MOVLW     0xfb             while (n--)                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002952   cfdb     MOVFF     0xfdb,0xff3                                                                                     
002954   fff3                                                                                                               
002956   06db     DECF      0xdb,0x1,0x0                                                                                    
002958   50f3     MOVF      0xf3,0x0,0x0                                                                                    
00295a   0900     IORLW     0x0                                                                                             
00295c   e00a     BZ        0x2972                                                                                          
00295e   ec30     CALL      0x3460,0x0         if (putc (c, handle) == EOF)                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002960   f01a                                                                                                               
002962   0efa     MOVLW     0xfa                                                                                            
002964   ec9b     CALL      0x3536,0x0                                                                                      
002966   f01a                                                                                                               
002968   e1f3     BNZ       0x2950                                                                                          
00296a   1c2b     COMF      0x2b,0x0,0x0                                                                                    
00296c   e1f1     BNZ       0x2950                                                                                          
00296e   0e01     MOVLW     0x1                  return 1;                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002970   d001     BRA       0x2974                                                                                          
002972   0e00     MOVLW     0x0              return 0;                                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002974   ef11     GOTO      0x3422         }                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002976   f01a                                                                                                               
003422   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003424   cfe5     MOVFF     0xfe5,0xfda                                                                                     
003426   ffda                                                                                                               
003428   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00342a   ffd9                                                                                                               
00342c   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_UNSPECIFIED 0                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_LONG 1                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_SHLONG 2                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_BYTE   3                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           int                                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002978   ece2     CALL      0x33c4,0x0     vfprintf (auto FILE *handle, auto const rom char *f, auto va_list ap)            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00297a   f019                                                                                                               
00297c   0e3b     MOVLW     0x3b                                                                                            
00297e   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
002980   e302     BNC       0x2986                                                                                          
002982   68e1     SETF      0xe1,0x0                                                                                        
002984   52e6     MOVF      0xe6,0x1,0x0                                                                                    
002986   6ee1     MOVWF     0xe1,0x0                                                                                        
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                             unsigned char c;                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002988   0e01     MOVLW     0x1              int count = 0;                                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00298a   6adb     CLRF      0xdb,0x0                                                                                        
00298c   0e02     MOVLW     0x2                                                                                             
00298e   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002990   0ef9     MOVLW     0xf9             for (c = *f; c; c = *++f)                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002992   cfdb     MOVFF     0xfdb,0xff6                                                                                     
002994   fff6                                                                                                               
002996   0efa     MOVLW     0xfa                                                                                            
002998   cfdb     MOVFF     0xfdb,0xff7                                                                                     
00299a   fff7                                                                                                               
00299c   0efb     MOVLW     0xfb                                                                                            
00299e   cfdb     MOVFF     0xfdb,0xff8                                                                                     
0029a0   fff8                                                                                                               
0029a2   0008     TBLRD                                                                                                     
0029a4   50f5     MOVF      0xf5,0x0,0x0                                                                                    
0029a6   6edf     MOVWF     0xdf,0x0                                                                                        
0029a8   50df     MOVF      0xdf,0x0,0x0                                                                                    
0029aa   e102     BNZ       0x29b0                                                                                          
0029ac   ef35     GOTO      0x326a                                                                                          
0029ae   f019                                                                                                               
003264   d979     RCALL     0x3558                                                                                          
003266   efd1     GOTO      0x29a2                                                                                          
003268   f014                                                                                                               
003558   50d9     MOVF      0xd9,0x0,0x0                                                                                    
00355a   0ff9     ADDLW     0xf9                                                                                            
00355c   6ee9     MOVWF     0xe9,0x0                                                                                        
00355e   0eff     MOVLW     0xff                                                                                            
003560   ef45     GOTO      0x348a                                                                                          
003562   f01a                                                                                                               
                                               {                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029b0   0e25     MOVLW     0x25                 if (c == '%')                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029b2   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0029b4   e002     BZ        0x29ba                                                                                          
0029b6   ef28     GOTO      0x3250                                                                                          
0029b8   f019                                                                                                               
                                                   {                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029ba   0e03     MOVLW     0x3                      unsigned char flags = 0;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029bc   6adb     CLRF      0xdb,0x0                                                                                        
0029be   0e04     MOVLW     0x4                      unsigned char width = 0;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029c0   6adb     CLRF      0xdb,0x0                                                                                        
0029c2   0e05     MOVLW     0x5                      unsigned char precision = 0;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029c4   6adb     CLRF      0xdb,0x0                                                                                        
0029c6   0e06     MOVLW     0x6                      unsigned char have_precision = 0;                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029c8   6adb     CLRF      0xdb,0x0                                                                                        
0029ca   0e07     MOVLW     0x7                      unsigned char size = 0;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029cc   6adb     CLRF      0xdb,0x0                                                                                        
                                                     unsigned char space_cnt;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     unsigned char cval;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     unsigned long larg;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     far rom char *romstring;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     char *ramstring;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     int n;                                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* get the first character of the conversion specifier */              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029ce   ec4a     CALL      0x3294,0x0               c = *++f;                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029d0   f019                                                                                                               
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /**  The conversion specification has, after the '%' character:        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         7.9.6.1                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * Zero or more flags (in any order) that modify the meaning of the  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specification.                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * An optional minimum field width. If the converted value has       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          fewer characters than the field width, it will be padded with     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          spaces (by default) on the left (or right, if the left            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          adjustment flag, described later, has been given) to the field    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          width. The field width takes the form of an asterisk *            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          (described later) or a decimal integer.                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * An optional precision that gives the minimum number of digits     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          to appear for the d, i, o, u, x, and X conversions, the           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          maximum number of digits to appear after the decimal point        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          character for e, E, and f conversions, the maximum number         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          of significant digits for the g and G conversions, or the         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          maximum number of characters to be written from a string in       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          s conversion. The precision takes the form of a period (.)        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          followed by an asterisk * (described later) or by an optional     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          decimal integer; if only the period is specified, the precision   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          is taken as zero. If a precision appears with any other           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specifier, the behaviour is undefined.                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * An optional h specifying that a following d, i, o, u, x, or X     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specifier applies to a short int or unsigned short     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          int argument (the argument will have been promoted according      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          to the integer promotions, and its value shall be converted       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          to short int or unsigned short int before printing); an           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          optional h specifying that a following n conversion specifier     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          applies to a pointer to a short int argument; an optional l       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          (ell) specifying that a following d, i, o, u, x, or X             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specifier applies to a long int or unsigned long int   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          argument; or an optional L specifying that a following e, E,      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          f, g, or G conversion specifier applies to a long double          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          argument. If an h, l, or L appears with any other conversion      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          specifier, the behaviour is undefined.                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * A character that specifies the type of conversion to be applied.  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       */                                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /** check for a flag.                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        7.9.6.1                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        The flag characters and their meanings are:                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        - The result of the conversion will be left-justified within        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          the field. (It will be right justified if this flag is not        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          specified.)                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        + The result of a signed conversion will always begin with a        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          plus or a minus sign. (It will begin with a sign only when        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          a negative value is converted if this flag is not specified.)     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        space  If the first character of a signed conversion is not a       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          sign, or if a signed conversion results in no characters, a       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          space will be prefixed to the result. If the space and + flags    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          both appear, the space flag will be ignored.                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        # The result is to be converted to an "alternate form." For o       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion, it increases the precision to force the first digit   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          of the result to be a zero. For x (or X) conversion, a nonzero    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          result will have 0x (or 0X) prefixed to it. For e, E, f, g,       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          and G conversions, the result will always contain a decimal-      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          point character, even if no digits follow it. (Normally, a        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          decimal point character appears in the result of these            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversions only if a digit follows it.) For g and G              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversions, trailing zeros will not be removed from the          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          result. For other conversions the behaviour is undefined.         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        0 For d, i, o, u, x, X, e, E, f, g, and G conversions, leading      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          zeros (following any indication of sign or base) are used to      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          pad to the field width; no space padding is performed. If         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          the 0 and - flags both appear, the 0 flag will be ignored.        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          For other conversions, the behaviour is undefined.                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       */                                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029d2   0e2d     MOVLW     0x2d                     while (c == '-' || c == '+' || c == ' ' || c == '#'                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029d4   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0029d6   e00c     BZ        0x29f0                                                                                          
0029d8   0e2b     MOVLW     0x2b                                                                                            
0029da   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0029dc   e009     BZ        0x29f0                                                                                          
0029de   0e20     MOVLW     0x20                                                                                            
0029e0   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0029e2   e006     BZ        0x29f0                                                                                          
0029e4   0e23     MOVLW     0x23                                                                                            
002a22   d7d5     BRA       0x29ce                                                                                          
0029e6   5cdf     SUBWF     0xdf,0x0,0x0                    || c == '0')                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029e8   e003     BZ        0x29f0                                                                                          
0029ea   0e30     MOVLW     0x30                                                                                            
0029ec   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0029ee   e11a     BNZ       0x2a24                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029f0   50df     MOVF      0xdf,0x0,0x0                 switch (c)                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029f2   0a30     XORLW     0x30                                                                                            
0029f4   e014     BZ        0x2a1e                                                                                          
0029f6   0a13     XORLW     0x13                                                                                            
0029f8   e00f     BZ        0x2a18                                                                                          
0029fa   0a03     XORLW     0x3                                                                                             
0029fc   e00a     BZ        0x2a12                                                                                          
0029fe   0a0b     XORLW     0xb                                                                                             
002a00   e005     BZ        0x2a0c                                                                                          
002a02   0a06     XORLW     0x6                                                                                             
002a04   e1e4     BNZ       0x29ce                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '-':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a06   0e03     MOVLW     0x3                              flags |= _FLAG_MINUS;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a08   80db     BSF       0xdb,0x0,0x0                                                                                    
002a0a   d7e1     BRA       0x29ce                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '+':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a0c   0e03     MOVLW     0x3                              flags |= _FLAG_PLUS;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a0e   82db     BSF       0xdb,0x1,0x0                                                                                    
002a10   d7de     BRA       0x29ce                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case ' ':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a12   0e03     MOVLW     0x3                              flags |= _FLAG_SPACE;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a14   84db     BSF       0xdb,0x2,0x0                                                                                    
002a16   d7db     BRA       0x29ce                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '#':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a18   0e03     MOVLW     0x3                              flags |= _FLAG_OCTO;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a1a   86db     BSF       0xdb,0x3,0x0                                                                                    
002a1c   d7d8     BRA       0x29ce                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '0':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a1e   0e03     MOVLW     0x3                              flags |= _FLAG_ZERO;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a20   88db     BSF       0xdb,0x4,0x0                                                                                    
                                                             break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the optional width field is next */                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a24   0e2a     MOVLW     0x2a                     if (c == '*')                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a26   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a28   e11b     BNZ       0x2a60                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a2a   ec46     CALL      0x328c,0x0                   n = va_arg (ap, int);                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a2c   f019                                                                                                               
002a2e   ec94     CALL      0x3328,0x0                                                                                      
002a30   f019                                                                                                               
003328   0e13     MOVLW     0x13                                                                                            
00332a   cfee     MOVFF     0xfee,0xfdb                                                                                     
00332c   ffdb                                                                                                               
00332e   0e14     MOVLW     0x14                                                                                            
003330   cfed     MOVFF     0xfed,0xfdb                                                                                     
003332   ffdb                                                                                                               
002a32   e010     BZ        0x2a54                       if (n < 0)                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003334   0e13     MOVLW     0x13                                                                                            
003336   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003338   f02a                                                                                                               
00333a   0e14     MOVLW     0x14                                                                                            
00333c   cfdb     MOVFF     0xfdb,0x2b                                                                                      
00333e   f02b                                                                                                               
003340   0100     MOVLB     0x0                                                                                             
003342   0e80     MOVLW     0x80                                                                                            
003344   142b     ANDWF     0x2b,0x0,0x0                                                                                    
003346   0012     RETURN    0x0                                                                                             
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a34   0e03     MOVLW     0x3                              flags |= _FLAG_MINUS;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a36   80db     BSF       0xdb,0x0,0x0                                                                                    
002a38   681e     SETF      0x1e,0x0                         width = -n;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a3a   681f     SETF      0x1f,0x0                                                                                        
002a3c   0e13     MOVLW     0x13                                                                                            
002a3e   cfdb     MOVFF     0xfdb,0x23                                                                                      
002a40   f023                                                                                                               
002a42   0e14     MOVLW     0x14                                                                                            
002a44   cfdb     MOVFF     0xfdb,0x24                                                                                      
002a46   f024                                                                                                               
002a48   ec88     CALL      0x4310,0x0                                                                                      
002a4a   f021                                                                                                               
002a4c   0e04     MOVLW     0x4                                                                                             
002a4e   c01c     MOVFF     0x1c,0xfdb                                                                                      
002a50   ffdb                                                                                                               
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a52   d003     BRA       0x2a5a                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a54   0e13     MOVLW     0x13                           width = n;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a56   ec7d     CALL      0x32fa,0x0                                                                                      
002a58   f019                                                                                                               
002a5a   ec4a     CALL      0x3294,0x0                   c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a5c   f019                                                                                                               
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a5e   d00b     BRA       0x2a76                   else                                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a60   0e09     MOVLW     0x9                          cval = 0;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a62   6adb     CLRF      0xdb,0x0                                                                                        
002a64   eceb     CALL      0x33d6,0x0                   while ((unsigned char) isdigit (c))                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a66   f019                                                                                                               
002a68   e003     BZ        0x2a70                                                                                          
002a6e   d7fa     BRA       0x2a64                                                                                          
0033d6   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
0033d8   ffe6                                                                                                               
0033da   6ae6     CLRF      0xe6,0x0                                                                                        
0033dc   ec78     CALL      0x46f0,0x0                                                                                      
0033de   f023                                                                                                               
0033e0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0033e2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0033e4   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0033e6   0012     RETURN    0x0                                                                                             
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a6a   ec5f     CALL      0x34be,0x0                       cval = cval * 10 + c - '0';                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a6c   f01a                                                                                                               
0034be   0e09     MOVLW     0x9                                                                                             
0034c0   50db     MOVF      0xdb,0x0,0x0                                                                                    
0034c2   0d0a     MULLW     0xa                                                                                             
0034c4   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0034c6   24df     ADDWF     0xdf,0x0,0x0                                                                                    
0034c8   0fd0     ADDLW     0xd0                                                                                            
0034ca   6ee7     MOVWF     0xe7,0x0                                                                                        
0034cc   0e09     MOVLW     0x9                                                                                             
0034ce   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0034d0   ffdb                                                                                                               
0034d2   ef4a     GOTO      0x3294                           c = *++f;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0034d4   f019                                                                                                               
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a70   0e09     MOVLW     0x9                          width = cval;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a72   ec7d     CALL      0x32fa,0x0                                                                                      
002a74   f019                                                                                                               
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* if '-' is specified, '0' is ignored */                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a76   0e03     MOVLW     0x3                      if (flags & _FLAG_MINUS)                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a78   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
002a7a   98db     BCF       0xdb,0x4,0x0               flags &= ~_FLAG_ZERO;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the optional precision field is next */                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a7c   0e2e     MOVLW     0x2e                     if (c == '.')                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a7e   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a80   e11b     BNZ       0x2ab8                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a82   ec4a     CALL      0x3294,0x0                   c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a84   f019                                                                                                               
002a86   0e2a     MOVLW     0x2a                         if (c == '*')                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a88   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a8a   e10b     BNZ       0x2aa2                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a8c   ec46     CALL      0x328c,0x0                       n = va_arg (ap, int);                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a8e   f019                                                                                                               
002a90   ec94     CALL      0x3328,0x0                                                                                      
002a92   f019                                                                                                               
00328c   d929     RCALL     0x34e0                                                                                          
00328e   0e02     MOVLW     0x2                                                                                             
003290   ef37     GOTO      0x346e                                                                                          
003292   f01a                                                                                                               
00346e   5e2a     SUBWF     0x2a,0x1,0x0                                                                                    
003470   0e00     MOVLW     0x0                                                                                             
003472   5a2b     SUBWFB    0x2b,0x1,0x0                                                                                    
003474   0ef7     MOVLW     0xf7                                                                                            
003476   c02a     MOVFF     0x2a,0xfdb                                                                                      
003478   ffdb                                                                                                               
00347a   0ef8     MOVLW     0xf8                                                                                            
00347c   c02b     MOVFF     0x2b,0xfdb                                                                                      
00347e   ffdb                                                                                                               
003480   c02a     MOVFF     0x2a,0xfe9                                                                                      
003482   ffe9                                                                                                               
003484   c02b     MOVFF     0x2b,0xfea                                                                                      
003486   ffea                                                                                                               
003488   0012     RETURN    0x0                                                                                             
0034e0   0ef7     MOVLW     0xf7                                                                                            
0034e2   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0034e4   f02a                                                                                                               
0034e6   0ef8     MOVLW     0xf8                                                                                            
0034e8   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0034ea   f02b                                                                                                               
0034ec   0012     RETURN    0x0                                                                                             
002a94   e103     BNZ       0x2a9c                           if (n >= 0)                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               {                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a96   0e13     MOVLW     0x13                                 precision = n;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a98   eccf     CALL      0x339e,0x0                                                                                      
002a9a   f019                                                                                                               
00339e   50db     MOVF      0xdb,0x0,0x0                                                                                    
0033a0   d8ce     RCALL     0x353e                                                                                          
00353e   6ee7     MOVWF     0xe7,0x0                                                                                        
003540   0e05     MOVLW     0x5                                                                                             
003542   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
003544   ffdb                                                                                                               
003546   0012     RETURN    0x0                                                                                             
0033a2   0e01     MOVLW     0x1                                  have_precision = 1;                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0033a4   6ef3     MOVWF     0xf3,0x0                                                                                        
0033a6   0e06     MOVLW     0x6                                                                                             
0033a8   cff3     MOVFF     0xff3,0xfdb                                                                                     
0033aa   ffdb                                                                                                               
0033ac   0012     RETURN    0x0                                                                                             
                                                               }                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a9c   ec4a     CALL      0x3294,0x0                       c = *++f;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a9e   f019                                                                                                               
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aa0   d00b     BRA       0x2ab8                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aa2   0e09     MOVLW     0x9                              cval = 0;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aa4   6adb     CLRF      0xdb,0x0                                                                                        
002aa6   eceb     CALL      0x33d6,0x0                       while ((unsigned char) isdigit (c))                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aa8   f019                                                                                                               
002aaa   e003     BZ        0x2ab2                                                                                          
002ab0   d7fa     BRA       0x2aa6                                                                                          
                                                               {                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aac   ec5f     CALL      0x34be,0x0                           cval = cval * 10 + c - '0';                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aae   f01a                                                                                                               
                                                                 c = *++f;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               }                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ab2   0e09     MOVLW     0x9                              precision = cval;                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ab4   eccf     CALL      0x339e,0x0                                                                                      
002ab6   f019                                                                                                               
                                                             have_precision = 1;                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the optional 'h' specifier. since int and short int are             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        the same size for MPLAB C18, this is a NOP for us. */               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ab8   0e68     MOVLW     0x68                     if (c == 'h')                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aba   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002abc   e107     BNZ       0x2acc                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002abe   ec4a     CALL      0x3294,0x0                   c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ac0   f019                                                                                                               
                                                         /* if 'c' is another 'h' character, this is an 'hh'                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specifier and the size is 8 bits */                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ac2   0e68     MOVLW     0x68                         if (c == 'h')                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ac4   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002ac6   e11d     BNZ       0x2b02                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ac8   0e03     MOVLW     0x3                              size = _FMT_BYTE;                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             c = *++f;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* 'z' and 't' are both 16-bit and so are NOPs */                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aca   d018     BRA       0x2afc                   else if (c == 't' || c == 'z')                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002acc   0e74     MOVLW     0x74                                                                                            
002ace   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002ad0   e017     BZ        0x2b00                                                                                          
002ad2   0e7a     MOVLW     0x7a                                                                                            
002ad4   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002ad6   e014     BZ        0x2b00                                                                                          
                                                       c = *++f;                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the 'H' specifier tells us to deal with 24-bit integers.            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        the 'T' and 'Z' specifiers are also 24 bit */                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ad8   0e48     MOVLW     0x48                     else if (c == 'H' || c == 'T' || c == 'Z')                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ada   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002adc   e006     BZ        0x2aea                                                                                          
002ade   0e54     MOVLW     0x54                                                                                            
002ae0   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002ae2   e003     BZ        0x2aea                                                                                          
002ae4   0e5a     MOVLW     0x5a                                                                                            
002ae6   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002ae8   e102     BNZ       0x2aee                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aea   0e02     MOVLW     0x2                          size = _FMT_SHLONG;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the 'l' specifier tells us to deal with 32-bit integers             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        'j' specifies intmax_t (long in our case). */                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aec   d007     BRA       0x2afc                   else if (c == 'l' || c == 'j')                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aee   0e6c     MOVLW     0x6c                                                                                            
002af0   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002af2   e003     BZ        0x2afa                                                                                          
002af4   0e6a     MOVLW     0x6a                                                                                            
002af6   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002af8   e104     BNZ       0x2b02                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002afa   0e01     MOVLW     0x1                          size = _FMT_LONG;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002afc   ec22     CALL      0x3444,0x0                                                                                      
002afe   f01a                                                                                                               
002b00   dbc9     RCALL     0x3294                       c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003294   d961     RCALL     0x3558                                                                                          
003296   0008     TBLRD                                                                                                     
003298   50f5     MOVF      0xf5,0x0,0x0                                                                                    
00329a   6edf     MOVWF     0xdf,0x0                                                                                        
00329c   0012     RETURN    0x0                                                                                             
00348a   20da     ADDWFC    0xda,0x0,0x0                                                                                    
00348c   6eea     MOVWF     0xea,0x0                                                                                        
00348e   2aef     INCF      0xef,0x1,0x0                                                                                    
003490   cfee     MOVFF     0xfee,0xff6                                                                                     
003492   fff6                                                                                                               
003494   0e00     MOVLW     0x0                                                                                             
003496   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
003498   cfee     MOVFF     0xfee,0xff7                                                                                     
00349a   fff7                                                                                                               
00349c   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
00349e   cfee     MOVFF     0xfee,0xff8                                                                                     
0034a0   fff8                                                                                                               
0034a2   0012     RETURN    0x0                                                                                             
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b02   50df     MOVF      0xdf,0x0,0x0             switch (c)                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b04   0a6e     XORLW     0x6e                                                                                            
002b06   e101     BNZ       0x2b0a                                                                                          
002b08   d37f     BRA       0x3208                                                                                          
002b0a   0a1e     XORLW     0x1e                                                                                            
002b0c   e101     BNZ       0x2b10                                                                                          
002b0e   d192     BRA       0x2e34                                                                                          
002b10   0a20     XORLW     0x20                                                                                            
002b12   e101     BNZ       0x2b16                                                                                          
002b14   d18f     BRA       0x2e34                                                                                          
002b16   0a3f     XORLW     0x3f                                                                                            
002b18   e101     BNZ       0x2b1c                                                                                          
002b1a   d149     BRA       0x2dae                                                                                          
002b1c   0a1a     XORLW     0x1a                                                                                            
002b1e   e101     BNZ       0x2b22                                                                                          
002b20   d146     BRA       0x2dae                                                                                          
002b22   0a0d     XORLW     0xd                                                                                             
002b24   e101     BNZ       0x2b28                                                                                          
002b26   d143     BRA       0x2dae                                                                                          
002b28   0a20     XORLW     0x20                                                                                            
002b2a   e101     BNZ       0x2b2e                                                                                          
002b2c   d140     BRA       0x2dae                                                                                          
002b2e   0a3a     XORLW     0x3a                                                                                            
002b30   e101     BNZ       0x2b34                                                                                          
002b32   d13d     BRA       0x2dae                                                                                          
002b34   0a20     XORLW     0x20                                                                                            
002b36   e101     BNZ       0x2b3a                                                                                          
002b38   d13a     BRA       0x2dae                                                                                          
002b3a   0a26     XORLW     0x26                                                                                            
002b3c   e101     BNZ       0x2b40                                                                                          
002b3e   d135     BRA       0x2daa                                                                                          
002b40   0a0d     XORLW     0xd                                                                                             
002b42   e101     BNZ       0x2b46                                                                                          
002b44   d132     BRA       0x2daa                                                                                          
002b46   0a1a     XORLW     0x1a                                                                                            
002b48   e101     BNZ       0x2b4c                                                                                          
002b4a   d0d9     BRA       0x2cfe                                                                                          
002b4c   0a20     XORLW     0x20                                                                                            
002b4e   e04a     BZ        0x2be4                                                                                          
002b50   0a30     XORLW     0x30                                                                                            
002b52   e01f     BZ        0x2b92                                                                                          
002b54   0a46     XORLW     0x46                                                                                            
002b56   e00e     BZ        0x2b74                                                                                          
002b58   0a25     XORLW     0x25                                                                                            
002b5a   e001     BZ        0x2b5e                                                                                          
002b5c   d383     BRA       0x3264                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case '\0':                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* this is undefined behaviour. we have a trailing '%' character   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            in the string, perhaps with some flags, width, precision        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            stuff as well, but no format specifier. We'll, arbitrarily,     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            back up a character so that the loop will terminate             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            properly when it loops back and we'll output a '%'              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            character. */                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b5e   50d9     MOVF      0xd9,0x0,0x0                 --f;                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b60   0ff9     ADDLW     0xf9                                                                                            
002b62   6ee9     MOVWF     0xe9,0x0                                                                                        
002b64   0eff     MOVLW     0xff                                                                                            
002b66   20da     ADDWFC    0xda,0x0,0x0                                                                                    
002b68   6eea     MOVWF     0xea,0x0                                                                                        
002b6a   0e01     MOVLW     0x1                                                                                             
002b6c   5eee     SUBWF     0xee,0x1,0x0                                                                                    
002b6e   0e00     MOVLW     0x0                                                                                             
002b70   5aee     SUBWFB    0xee,0x1,0x0                                                                                    
002b72   5aee     SUBWFB    0xee,0x1,0x0                                                                                    
                                                         /* fallthrough */                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case '%':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b74   ec30     CALL      0x3460,0x0                   if (putc ('%', handle) == EOF)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b76   f01a                                                                                                               
002b78   0e25     MOVLW     0x25                                                                                            
002b7a   6ee6     MOVWF     0xe6,0x0                                                                                        
002b7c   db95     RCALL     0x32a8                                                                                          
002b7e   e103     BNZ       0x2b86                                                                                          
002b80   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002b82   e101     BNZ       0x2b86                                                                                          
002b84   d369     BRA       0x3258                                                                                          
                                                           return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b86   ec2c     CALL      0x3458,0x0                   ++count;                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b88   f01a                                                                                                               
002b8a   e201     BC        0x2b8e                                                                                          
002b8c   d36b     BRA       0x3264                                                                                          
002b8e   2adb     INCF      0xdb,0x1,0x0                                                                                    
002b90   d369     BRA       0x3264                       break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'c':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b92   0e08     MOVLW     0x8                          space_cnt = 0;                                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b94   6adb     CLRF      0xdb,0x0                                                                                        
002b96   0e04     MOVLW     0x4                          if (width > 1)                                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b98   50db     MOVF      0xdb,0x0,0x0                                                                                    
002b9a   0801     SUBLW     0x1                                                                                             
002b9c   e206     BC        0x2baa                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b9e   0e04     MOVLW     0x4                              space_cnt = width - 1;                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ba0   04db     DECF      0xdb,0x0,0x0                                                                                    
002ba2   ecf4     CALL      0x33e8,0x0                                                                                      
002ba4   f019                                                                                                               
002ba6   50db     MOVF      0xdb,0x0,0x0                     count += space_cnt;                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ba8   db8b     RCALL     0x32c0                                                                                          
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002baa   0e08     MOVLW     0x8                          if (space_cnt && !(flags & _FLAG_MINUS))                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bac   50db     MOVF      0xdb,0x0,0x0                                                                                    
002bae   e009     BZ        0x2bc2                                                                                          
002bb0   0e03     MOVLW     0x3                                                                                             
002bb2   50db     MOVF      0xdb,0x0,0x0                                                                                    
002bb4   0b01     ANDLW     0x1                                                                                             
002bb6   e105     BNZ       0x2bc2                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bb8   db72     RCALL     0x329e                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bba   e001     BZ        0x2bbe                                                                                          
002bbc   d34d     BRA       0x3258                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bbe   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bc0   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bc2   db64     RCALL     0x328c                       c = va_arg (ap, int);                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bc4   cfef     MOVFF     0xfef,0xfdf                                                                                     
002bc6   ffdf                                                                                                               
002bc8   eca4     CALL      0x3548,0x0                   if (putc (c, handle) == EOF)                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bca   f01a                                                                                                               
002bcc   e103     BNZ       0x2bd4                                                                                          
002bce   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002bd0   e101     BNZ       0x2bd4                                                                                          
002bd2   d342     BRA       0x3258                                                                                          
                                                           return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bd4   ec2c     CALL      0x3458,0x0                   ++count;                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bd6   f01a                                                                                                               
002bd8   e301     BNC       0x2bdc                                                                                          
002bda   2adb     INCF      0xdb,0x1,0x0                                                                                    
002bdc   db60     RCALL     0x329e                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bde   e101     BNZ       0x2be2                                                                                          
002be0   d341     BRA       0x3264                                                                                          
002be2   d33a     BRA       0x3258                         return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'S':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002be4   0e07     MOVLW     0x7                          if (size == _FMT_SHLONG)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002be6   50db     MOVF      0xdb,0x0,0x0                                                                                    
002be8   0802     SUBLW     0x2                                                                                             
002bea   e10f     BNZ       0x2c0a                                                                                          
002bec   ec70     CALL      0x34e0,0x0                     romstring = va_arg (ap, rom far char *);                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bee   f01a                                                                                                               
002bf0   0e03     MOVLW     0x3                                                                                             
002bf2   ec37     CALL      0x346e,0x0                                                                                      
002bf4   f01a                                                                                                               
002bf6   0e0e     MOVLW     0xe                                                                                             
002bf8   cfee     MOVFF     0xfee,0xfdb                                                                                     
002bfa   ffdb                                                                                                               
002bfc   0e0f     MOVLW     0xf                                                                                             
002bfe   cfee     MOVFF     0xfee,0xfdb                                                                                     
002c00   ffdb                                                                                                               
002c02   0e10     MOVLW     0x10                                                                                            
002c04   cfee     MOVFF     0xfee,0xfdb                                                                                     
002c06   ffdb                                                                                                               
002c08   d020     BRA       0x2c4a                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c0a   0ef7     MOVLW     0xf7                           romstring = (far rom char*)va_arg (ap, rom near char *);         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c0c   cfdb     MOVFF     0xfdb,0x2d                                                                                      
002c0e   f02d                                                                                                               
002c10   0ef8     MOVLW     0xf8                                                                                            
002c12   cfdb     MOVFF     0xfdb,0x2e                                                                                      
002c14   f02e                                                                                                               
002c16   0e02     MOVLW     0x2                                                                                             
002c18   5e2d     SUBWF     0x2d,0x1,0x0                                                                                    
002c1a   0e00     MOVLW     0x0                                                                                             
002c1c   5a2e     SUBWFB    0x2e,0x1,0x0                                                                                    
002c1e   0ef7     MOVLW     0xf7                                                                                            
002c20   c02d     MOVFF     0x2d,0xfdb                                                                                      
002c22   ffdb                                                                                                               
002c24   0ef8     MOVLW     0xf8                                                                                            
002c26   c02e     MOVFF     0x2e,0xfdb                                                                                      
002c28   ffdb                                                                                                               
002c2a   c02d     MOVFF     0x2d,0xfe9                                                                                      
002c2c   ffe9                                                                                                               
002c2e   c02e     MOVFF     0x2e,0xfea                                                                                      
002c30   ffea                                                                                                               
002c32   ec27     CALL      0x344e,0x0                                                                                      
002c34   f01a                                                                                                               
002c36   6a2c     CLRF      0x2c,0x0                                                                                        
002c38   0e0e     MOVLW     0xe                                                                                             
002c3a   c02a     MOVFF     0x2a,0xfdb                                                                                      
002c3c   ffdb                                                                                                               
002c3e   0e0f     MOVLW     0xf                                                                                             
002c40   c02b     MOVFF     0x2b,0xfdb                                                                                      
002c42   ffdb                                                                                                               
002c44   0e10     MOVLW     0x10                                                                                            
002c46   c02c     MOVFF     0x2c,0xfdb                                                                                      
002c48   ffdb                                                                                                               
002c4a   0e0e     MOVLW     0xe                          n = strlenpgm (romstring);                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c4c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002c4e   ffe6                                                                                                               
002c50   0e0f     MOVLW     0xf                                                                                             
002c52   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002c54   ffe6                                                                                                               
002c56   0e10     MOVLW     0x10                                                                                            
002c58   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002c5a   ffe6                                                                                                               
002c5c   ec3f     CALL      0x467e,0x0                                                                                      
002c5e   f023                                                                                                               
002c60   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002c62   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002c64   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002c66   0e13     MOVLW     0x13                                                                                            
002c68   c01d     MOVFF     0x1d,0xfdb                                                                                      
002c6a   ffdb                                                                                                               
002c6c   0e14     MOVLW     0x14                                                                                            
002c6e   c01e     MOVFF     0x1e,0xfdb                                                                                      
002c70   ffdb                                                                                                               
                                                         /* Normalize the width based on the length of the actual           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string and the precision. */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c72   0e06     MOVLW     0x6                          if (have_precision && precision < (unsigned char) n)               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c74   50db     MOVF      0xdb,0x0,0x0                                                                                    
002c76   e005     BZ        0x2c82                                                                                          
002c78   0e13     MOVLW     0x13                                                                                            
002c7a   ec6b     CALL      0x34d6,0x0                                                                                      
002c7c   f01a                                                                                                               
002c7e   e201     BC        0x2c82                                                                                          
002c80   db6a     RCALL     0x3356                         n = precision;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003356   0e05     MOVLW     0x5                                                                                             
003358   50db     MOVF      0xdb,0x0,0x0                                                                                    
00335a   6ee6     MOVWF     0xe6,0x0                                                                                        
00335c   50d9     MOVF      0xd9,0x0,0x0                                                                                    
00335e   0f13     ADDLW     0x13                                                                                            
003360   d901     RCALL     0x3564                                                                                          
003362   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003364   50e7     MOVF      0xe7,0x0,0x0                                                                                    
003366   6eee     MOVWF     0xee,0x0                                                                                        
003368   6aed     CLRF      0xed,0x0                                                                                        
00336a   0012     RETURN    0x0                                                                                             
002c82   ec8f     CALL      0x351e,0x0                   if (width < (unsigned char) n)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c84   f01a                                                                                                               
002c86   e202     BC        0x2c8c                                                                                          
00351e   0e13     MOVLW     0x13                                                                                            
003520   50db     MOVF      0xdb,0x0,0x0                                                                                    
003522   6ef3     MOVWF     0xf3,0x0                                                                                        
003524   0e04     MOVLW     0x4                                                                                             
003526   ef78     GOTO      0x32f0                                                                                          
003528   f019                                                                                                               
002c88   0e13     MOVLW     0x13                           width = n;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c8a   db37     RCALL     0x32fa                                                                                          
002c8c   ec52     CALL      0x34a4,0x0                   space_cnt = width - (unsigned char) n;                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c8e   f01a                                                                                                               
0034a4   0e04     MOVLW     0x4                                                                                             
0034a6   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0034a8   ffe6                                                                                                               
0034aa   0e13     MOVLW     0x13                                                                                            
0034ac   50db     MOVF      0xdb,0x0,0x0                                                                                    
0034ae   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0034b0   5ce7     SUBWF     0xe7,0x0,0x0                                                                                    
0034b2   df9a     RCALL     0x33e8                                                                                          
0034b4   50db     MOVF      0xdb,0x0,0x0                 count += space_cnt;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0034b6   df04     RCALL     0x32c0                                                                                          
                                                         /* we've already calculated the space count that the width         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            will require. now we want the width field to have the           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            number of character to display from the string itself,          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            limited by the length of the actual string and the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specified precision. */                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c90   e006     BZ        0x2c9e                       if (have_precision && precision < width)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c92   0e04     MOVLW     0x4                                                                                             
002c94   ec6b     CALL      0x34d6,0x0                                                                                      
002c96   f01a                                                                                                               
002c98   e202     BC        0x2c9e                                                                                          
0034b8   0e06     MOVLW     0x6                                                                                             
0034ba   50db     MOVF      0xdb,0x0,0x0                                                                                    
0034bc   0012     RETURN    0x0                                                                                             
002c9a   0e05     MOVLW     0x5                            width = precision;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c9c   db2e     RCALL     0x32fa                                                                                          
                                                         /* if right justified, we print the spaces before the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string */                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c9e   0e03     MOVLW     0x3                          if (!(flags & _FLAG_MINUS))                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ca0   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
002ca2   d005     BRA       0x2cae                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ca4   dafc     RCALL     0x329e                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ca6   e001     BZ        0x2caa                                                                                          
002ca8   d2d7     BRA       0x3258                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002caa   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cac   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cae   0e09     MOVLW     0x9                          cval = 0;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cb0   6adb     CLRF      0xdb,0x0                                                                                        
002cb2   0e0e     MOVLW     0xe                          for (c = *romstring; c && cval < width; c = *++romstring)          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cb4   cfdb     MOVFF     0xfdb,0xff6                                                                                     
002cb6   fff6                                                                                                               
002cb8   0e0f     MOVLW     0xf                                                                                             
002cba   cfdb     MOVFF     0xfdb,0xff7                                                                                     
002cbc   fff7                                                                                                               
002cbe   0e10     MOVLW     0x10                                                                                            
002cc0   cfdb     MOVFF     0xfdb,0xff8                                                                                     
002cc2   fff8                                                                                                               
002cc4   0008     TBLRD                                                                                                     
002cc6   50f5     MOVF      0xf5,0x0,0x0                                                                                    
002cc8   6edf     MOVWF     0xdf,0x0                                                                                        
002cca   50df     MOVF      0xdf,0x0,0x0                                                                                    
002ccc   e014     BZ        0x2cf6                                                                                          
002cce   ec95     CALL      0x352a,0x0                                                                                      
002cd0   f01a                                                                                                               
002cd2   e211     BC        0x2cf6                                                                                          
002cea   50d9     MOVF      0xd9,0x0,0x0                                                                                    
002cec   0f0e     ADDLW     0xe                                                                                             
002cee   6ee9     MOVWF     0xe9,0x0                                                                                        
002cf0   0e00     MOVLW     0x0                                                                                             
002cf2   dbcb     RCALL     0x348a                                                                                          
002cf4   d7e7     BRA       0x2cc4                                                                                          
00352a   0e04     MOVLW     0x4                                                                                             
00352c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00352e   6ef3     MOVWF     0xf3,0x0                                                                                        
003530   0e09     MOVLW     0x9                                                                                             
003532   ef78     GOTO      0x32f0                                                                                          
003534   f019                                                                                                               
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cd4   eca4     CALL      0x3548,0x0                       if (putc (c, handle) == EOF)                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cd6   f01a                                                                                                               
002cd8   e103     BNZ       0x2ce0                                                                                          
002cda   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002cdc   e101     BNZ       0x2ce0                                                                                          
002cde   d2bc     BRA       0x3258                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ce0   dbbb     RCALL     0x3458                           ++count;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ce2   e301     BNC       0x2ce6                                                                                          
002ce4   2adb     INCF      0xdb,0x1,0x0                                                                                    
002ce6   0e09     MOVLW     0x9                              ++cval;                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ce8   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* If there are spaces left, it's left justified.                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            Either way, calling the function unconditionally                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            is smaller code. */                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cf6   dad3     RCALL     0x329e                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cf8   e101     BNZ       0x2cfc                                                                                          
002cfa   d2b4     BRA       0x3264                                                                                          
002cfc   d2ad     BRA       0x3258                         return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 's':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cfe   dac6     RCALL     0x328c                       ramstring = va_arg (ap, char *);                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d00   0e11     MOVLW     0x11                                                                                            
002d02   cfee     MOVFF     0xfee,0xfdb                                                                                     
002d04   ffdb                                                                                                               
002d06   0e12     MOVLW     0x12                                                                                            
002d08   cfed     MOVFF     0xfed,0xfdb                                                                                     
002d0a   ffdb                                                                                                               
002d0c   0e11     MOVLW     0x11                         n = strlen (ramstring);                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d0e   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002d10   ffe6                                                                                                               
002d12   0e12     MOVLW     0x12                                                                                            
002d14   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002d16   ffe6                                                                                                               
002d18   ec31     CALL      0x4662,0x0                                                                                      
002d1a   f023                                                                                                               
002d1c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d1e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d20   0e13     MOVLW     0x13                                                                                            
002d22   cff3     MOVFF     0xff3,0xfdb                                                                                     
002d24   ffdb                                                                                                               
002d26   0e14     MOVLW     0x14                                                                                            
002d28   cff4     MOVFF     0xff4,0xfdb                                                                                     
002d2a   ffdb                                                                                                               
                                                         /* Normalize the width based on the length of the actual           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string and the precision. */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d2c   0e06     MOVLW     0x6                          if (have_precision && precision < (unsigned char) n)               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d2e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002d30   e004     BZ        0x2d3a                                                                                          
002d32   0e13     MOVLW     0x13                                                                                            
002d34   dbd0     RCALL     0x34d6                                                                                          
002d36   e201     BC        0x2d3a                                                                                          
002d38   db0e     RCALL     0x3356                         n = precision;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d3a   ec8f     CALL      0x351e,0x0                   if (width < (unsigned char) n)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d3c   f01a                                                                                                               
002d3e   e202     BC        0x2d44                                                                                          
002d40   0e13     MOVLW     0x13                           width = n;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d42   dadb     RCALL     0x32fa                                                                                          
002d44   dbaf     RCALL     0x34a4                       space_cnt = width - (unsigned char) n;                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0033e8   6ee7     MOVWF     0xe7,0x0                                                                                        
0033ea   0e08     MOVLW     0x8                                                                                             
0033ec   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0033ee   ffdb                                                                                                               
0033f0   0012     RETURN    0x0                                                                                             
                                                         count += space_cnt;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* we've already calculated the space count that the width         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            will require. now we want the width field to have the           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            number of character to display from the string itself,          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            limited by the length of the actual string and the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specified precision. */                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d46   e005     BZ        0x2d52                       if (have_precision && precision < width)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d48   0e04     MOVLW     0x4                                                                                             
002d4a   dbc5     RCALL     0x34d6                                                                                          
002d4c   e202     BC        0x2d52                                                                                          
0034d6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0034d8   6ef3     MOVWF     0xf3,0x0                                                                                        
0034da   0e05     MOVLW     0x5                                                                                             
0034dc   ef78     GOTO      0x32f0                                                                                          
0034de   f019                                                                                                               
002d4e   0e05     MOVLW     0x5                            width = precision;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d50   dad4     RCALL     0x32fa                                                                                          
0032fa   50db     MOVF      0xdb,0x0,0x0                                                                                    
0032fc   6ee7     MOVWF     0xe7,0x0                                                                                        
0032fe   0e04     MOVLW     0x4                                                                                             
003300   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
003302   ffdb                                                                                                               
003304   0012     RETURN    0x0                                                                                             
                                                         /* if right justified, we print the spaces before the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string */                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d52   0e03     MOVLW     0x3                          if (!(flags & _FLAG_MINUS))                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d54   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
002d56   d005     BRA       0x2d62                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d58   daa2     RCALL     0x329e                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d5a   e001     BZ        0x2d5e                                                                                          
002d5c   d27d     BRA       0x3258                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d5e   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d60   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d62   0e09     MOVLW     0x9                          cval = 0;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d64   6adb     CLRF      0xdb,0x0                                                                                        
002d66   0e11     MOVLW     0x11                         for (c = *ramstring; c && cval < width; c = *++ramstring)          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d68   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002d6a   ffe9                                                                                                               
002d6c   0e12     MOVLW     0x12                                                                                            
002d6e   cfdb     MOVFF     0xfdb,0xfea                                                                                     
002d70   ffea                                                                                                               
002d72   cfef     MOVFF     0xfef,0xfdf                                                                                     
002d74   ffdf                                                                                                               
002d76   50df     MOVF      0xdf,0x0,0x0                                                                                    
002d78   e014     BZ        0x2da2                                                                                          
002d7a   dbd7     RCALL     0x352a                                                                                          
002d7c   e212     BC        0x2da2                                                                                          
002d92   0e11     MOVLW     0x11                                                                                            
002d94   2adb     INCF      0xdb,0x1,0x0                                                                                    
002d96   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002d98   ffe9                                                                                                               
002d9a   0e12     MOVLW     0x12                                                                                            
002d9c   e3e8     BNC       0x2d6e                                                                                          
002d9e   2adb     INCF      0xdb,0x1,0x0                                                                                    
002da0   d7e6     BRA       0x2d6e                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d7e   dbe4     RCALL     0x3548                           if (putc (c, handle) == EOF)                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d80   e103     BNZ       0x2d88                                                                                          
002d82   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002d84   e101     BNZ       0x2d88                                                                                          
002d86   d268     BRA       0x3258                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d88   db67     RCALL     0x3458                           ++count;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d8a   e301     BNC       0x2d8e                                                                                          
002d8c   2adb     INCF      0xdb,0x1,0x0                                                                                    
002d8e   0e09     MOVLW     0x9                              ++cval;                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d90   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* If there are spaces left, it's left justified.                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            Either way, calling the function unconditionally                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            is smaller code. */                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002da2   da7d     RCALL     0x329e                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002da4   e101     BNZ       0x2da8                                                                                          
002da6   d25e     BRA       0x3264                                                                                          
002da8   d257     BRA       0x3258                         return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'd':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'i':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002daa   0e03     MOVLW     0x3                          flags |= _FLAG_SIGNED;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dac   8edb     BSF       0xdb,0x7,0x0                                                                                    
                                                         /* fall through */                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'o':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'u':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'x':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'X':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'b':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'B':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* This is a bit of a sneaky trick. The 'l' and 'hh' size          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specifiers are valid only for the integer conversions,          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            not the 'p' or 'P' conversions, and are ignored for the         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            latter. By jumping over the additional size specifier           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            checks here we get the best code size since we can              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            limit the size checks in the remaining code. */                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dae   0e07     MOVLW     0x7                          if (size == _FMT_LONG)                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002db0   04db     DECF      0xdb,0x0,0x0                                                                                    
002db2   e110     BNZ       0x2dd4                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002db4   db95     RCALL     0x34e0                           larg = va_arg (ap, long int);                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002db6   0e04     MOVLW     0x4                                                                                             
002db8   db5a     RCALL     0x346e                                                                                          
002dba   0e0a     MOVLW     0xa                                                                                             
002dbc   cfee     MOVFF     0xfee,0xfdb                                                                                     
002dbe   ffdb                                                                                                               
002dc0   0e0b     MOVLW     0xb                                                                                             
002dc2   cfee     MOVFF     0xfee,0xfdb                                                                                     
002dc4   ffdb                                                                                                               
002dc6   0e0c     MOVLW     0xc                                                                                             
002dc8   cfee     MOVFF     0xfee,0xfdb                                                                                     
002dca   ffdb                                                                                                               
002dcc   0e0d     MOVLW     0xd                                                                                             
002dce   cfee     MOVFF     0xfee,0xfdb                                                                                     
002dd0   ffdb                                                                                                               
002dd2   d06c     BRA       0x2eac                           goto _do_integer_conversion;                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dd4   0e07     MOVLW     0x7                          else if (size == _FMT_BYTE)                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dd6   50db     MOVF      0xdb,0x0,0x0                                                                                    
002dd8   0803     SUBLW     0x3                                                                                             
002dda   e12c     BNZ       0x2e34                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ddc   0e03     MOVLW     0x3                              if (flags & _FLAG_SIGNED)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dde   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
002de0   d00d     BRA       0x2dfc                                                                                          
002de2   dab2     RCALL     0x3348                             larg = (signed char) va_arg (ap, int);                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002de4   0e02     MOVLW     0x2                                                                                             
002de6   da76     RCALL     0x32d4                                                                                          
002de8   cfef     MOVFF     0xfef,0x2a                                                                                      
002dea   f02a                                                                                                               
002dec   6a2b     CLRF      0x2b,0x0                                                                                        
002dee   6a2c     CLRF      0x2c,0x0                                                                                        
002df0   6a2d     CLRF      0x2d,0x0                                                                                        
002df2   ae2a     BTFSS     0x2a,0x7,0x0                                                                                    
002df4   d039     BRA       0x2e68                                                                                          
002df6   682b     SETF      0x2b,0x0                                                                                        
002df8   682c     SETF      0x2c,0x0                                                                                        
002dfa   d035     BRA       0x2e66                           else                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dfc   0ef7     MOVLW     0xf7                               larg = (unsigned char) va_arg (ap, unsigned int);            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dfe   cfdb     MOVFF     0xfdb,0x2b                                                                                      
002e00   f02b                                                                                                               
002e02   0ef8     MOVLW     0xf8                                                                                            
002e04   cfdb     MOVFF     0xfdb,0x2c                                                                                      
002e06   f02c                                                                                                               
002e08   0e02     MOVLW     0x2                                                                                             
002e0a   5e2b     SUBWF     0x2b,0x1,0x0                                                                                    
002e0c   0e00     MOVLW     0x0                                                                                             
002e0e   5a2c     SUBWFB    0x2c,0x1,0x0                                                                                    
002e10   0ef7     MOVLW     0xf7                                                                                            
002e12   c02b     MOVFF     0x2b,0xfdb                                                                                      
002e14   ffdb                                                                                                               
002e16   0ef8     MOVLW     0xf8                                                                                            
002e18   c02c     MOVFF     0x2c,0xfdb                                                                                      
002e1a   ffdb                                                                                                               
002e1c   c02b     MOVFF     0x2b,0xfe9                                                                                      
002e1e   ffe9                                                                                                               
002e20   c02c     MOVFF     0x2c,0xfea                                                                                      
002e22   ffea                                                                                                               
002e24   cfef     MOVFF     0xfef,0x2a                                                                                      
002e26   f02a                                                                                                               
002e28   0e0a     MOVLW     0xa                                                                                             
002e2a   c02a     MOVFF     0x2a,0xfdb                                                                                      
002e2c   ffdb                                                                                                               
002e2e   0e0b     MOVLW     0xb                                                                                             
002e30   6adb     CLRF      0xdb,0x0                                                                                        
002e32   d038     BRA       0x2ea4                           goto _do_integer_conversion;                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* fall through */                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'p':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'P':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e34   0e07     MOVLW     0x7                          if (size == _FMT_SHLONG)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e36   50db     MOVF      0xdb,0x0,0x0                                                                                    
002e38   0802     SUBLW     0x2                                                                                             
002e3a   e109     BNZ       0x2e4e                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e3c   0e03     MOVLW     0x3                              if (flags & _FLAG_SIGNED)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e3e   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
002e40   d004     BRA       0x2e4a                                                                                          
002e42   db59     RCALL     0x34f6                             larg = va_arg (ap, short long int);                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e44   ae2c     BTFSS     0x2c,0x7,0x0                                                                                    
002e46   d010     BRA       0x2e68                                                                                          
0033f2   cfee     MOVFF     0xfee,0x2a                                                                                      
0033f4   f02a                                                                                                               
0033f6   cfee     MOVFF     0xfee,0x2b                                                                                      
0033f8   f02b                                                                                                               
0033fa   cfef     MOVFF     0xfef,0x2c                                                                                      
0033fc   f02c                                                                                                               
0033fe   6a2d     CLRF      0x2d,0x0                                                                                        
003400   0012     RETURN    0x0                                                                                             
0034f6   df28     RCALL     0x3348                                                                                          
0034f8   0e03     MOVLW     0x3                                                                                             
0034fa   deec     RCALL     0x32d4                                                                                          
0034fc   eff9     GOTO      0x33f2                                                                                          
0034fe   f019                                                                                                               
002e48   d00e     BRA       0x2e66                           else                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e4a   db55     RCALL     0x34f6                             larg = va_arg (ap, unsigned short long int);                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e4c   d00d     BRA       0x2e68                       else if (flags & _FLAG_SIGNED)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e4e   0e03     MOVLW     0x3                                                                                             
002e50   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
002e52   d012     BRA       0x2e78                                                                                          
002e54   da79     RCALL     0x3348                         larg = va_arg (ap, int);                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e56   0e02     MOVLW     0x2                                                                                             
002e58   da3d     RCALL     0x32d4                                                                                          
002e5a   daf9     RCALL     0x344e                                                                                          
002e5c   6a2c     CLRF      0x2c,0x0                                                                                        
002e5e   6a2d     CLRF      0x2d,0x0                                                                                        
002e60   ae2b     BTFSS     0x2b,0x7,0x0                                                                                    
002e62   d002     BRA       0x2e68                                                                                          
002e64   682c     SETF      0x2c,0x0                                                                                        
002e66   682d     SETF      0x2d,0x0                                                                                        
002e68   dae2     RCALL     0x342e                                                                                          
002e6a   0e0c     MOVLW     0xc                                                                                             
002e6c   c02c     MOVFF     0x2c,0xfdb                                                                                      
002e6e   ffdb                                                                                                               
002e70   0e0d     MOVLW     0xd                                                                                             
002e72   c02d     MOVFF     0x2d,0xfdb                                                                                      
002e74   ffdb                                                                                                               
0032d4   5e2e     SUBWF     0x2e,0x1,0x0                                                                                    
0032d6   0e00     MOVLW     0x0                                                                                             
0032d8   5a2f     SUBWFB    0x2f,0x1,0x0                                                                                    
0032da   0ef7     MOVLW     0xf7                                                                                            
0032dc   c02e     MOVFF     0x2e,0xfdb                                                                                      
0032de   ffdb                                                                                                               
0032e0   0ef8     MOVLW     0xf8                                                                                            
0032e2   c02f     MOVFF     0x2f,0xfdb                                                                                      
0032e4   ffdb                                                                                                               
0032e6   c02e     MOVFF     0x2e,0xfe9                                                                                      
0032e8   ffe9                                                                                                               
0032ea   c02f     MOVFF     0x2f,0xfea                                                                                      
0032ec   ffea                                                                                                               
0032ee   0012     RETURN    0x0                                                                                             
003348   0ef7     MOVLW     0xf7                                                                                            
00334a   cfdb     MOVFF     0xfdb,0x2e                                                                                      
00334c   f02e                                                                                                               
00334e   0ef8     MOVLW     0xf8                                                                                            
003350   cfdb     MOVFF     0xfdb,0x2f                                                                                      
003352   f02f                                                                                                               
003354   0012     RETURN    0x0                                                                                             
00342e   0e0a     MOVLW     0xa                                                                                             
003430   c02a     MOVFF     0x2a,0xfdb                                                                                      
003432   ffdb                                                                                                               
003434   0e0b     MOVLW     0xb                                                                                             
003436   c02b     MOVFF     0x2b,0xfdb                                                                                      
003438   ffdb                                                                                                               
00343a   0012     RETURN    0x0                                                                                             
00344e   cfee     MOVFF     0xfee,0x2a                                                                                      
003450   f02a                                                                                                               
003452   cfef     MOVFF     0xfef,0x2b                                                                                      
003454   f02b                                                                                                               
003456   0012     RETURN    0x0                                                                                             
002e76   d01a     BRA       0x2eac                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e78   0ef7     MOVLW     0xf7                           larg = va_arg (ap, unsigned int);                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e7a   cfdb     MOVFF     0xfdb,0x2c                                                                                      
002e7c   f02c                                                                                                               
002e7e   0ef8     MOVLW     0xf8                                                                                            
002e80   cfdb     MOVFF     0xfdb,0x2d                                                                                      
002e82   f02d                                                                                                               
002e84   0e02     MOVLW     0x2                                                                                             
002e86   5e2c     SUBWF     0x2c,0x1,0x0                                                                                    
002e88   0e00     MOVLW     0x0                                                                                             
002e8a   5a2d     SUBWFB    0x2d,0x1,0x0                                                                                    
002e8c   0ef7     MOVLW     0xf7                                                                                            
002e8e   c02c     MOVFF     0x2c,0xfdb                                                                                      
002e90   ffdb                                                                                                               
002e92   0ef8     MOVLW     0xf8                                                                                            
002e94   c02d     MOVFF     0x2d,0xfdb                                                                                      
002e96   ffdb                                                                                                               
002e98   c02c     MOVFF     0x2c,0xfe9                                                                                      
002e9a   ffe9                                                                                                               
002e9c   c02d     MOVFF     0x2d,0xfea                                                                                      
002e9e   ffea                                                                                                               
002ea0   dad6     RCALL     0x344e                                                                                          
002ea2   dac5     RCALL     0x342e                                                                                          
002ea4   0e0c     MOVLW     0xc                                                                                             
002ea6   6adb     CLRF      0xdb,0x0                                                                                        
002ea8   0e0d     MOVLW     0xd                                                                                             
002eaa   6adb     CLRF      0xdb,0x0                                                                                        
                                                       _do_integer_conversion:                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* default precision is 1 */                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eac   0e06     MOVLW     0x6                          if (!have_precision)                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eae   50db     MOVF      0xdb,0x0,0x0                                                                                    
002eb0   e105     BNZ       0x2ebc                                                                                          
002eb2   0e01     MOVLW     0x1                            precision = 1;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eb4   6ef3     MOVWF     0xf3,0x0                                                                                        
002eb6   0e05     MOVLW     0x5                                                                                             
002eb8   cff3     MOVFF     0xff3,0xfdb                                                                                     
002eba   ffdb                                                                                                               
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         {                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ebc   0e15     MOVLW     0x15                           unsigned char digit_cnt = 0;                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ebe   6adb     CLRF      0xdb,0x0                                                                                        
002ec0   0e16     MOVLW     0x16                           unsigned char prefix_cnt = 0;                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ec2   6adb     CLRF      0xdb,0x0                                                                                        
                                                           unsigned char sign_char;                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* A 32 bit number will require at most 32 digits in the         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              string representation (binary format). */                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           char buf[33];                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* Start storing digits least-significant first */               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ec4   50d9     MOVF      0xd9,0x0,0x0                   char *q = &buf[31];                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ec6   0f37     ADDLW     0x37                                                                                            
002ec8   6e2a     MOVWF     0x2a,0x0                                                                                        
002eca   0e00     MOVLW     0x0                                                                                             
002ecc   20da     ADDWFC    0xda,0x0,0x0                                                                                    
002ece   6e2b     MOVWF     0x2b,0x0                                                                                        
002ed0   0e39     MOVLW     0x39                                                                                            
002ed2   c02a     MOVFF     0x2a,0xfdb                                                                                      
002ed4   ffdb                                                                                                               
002ed6   0e3a     MOVLW     0x3a                                                                                            
002ed8   c02b     MOVFF     0x2b,0xfdb                                                                                      
002eda   ffdb                                                                                                               
                                                           /* null terminate the string */                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002edc   0e38     MOVLW     0x38                           buf[32] = '\0';                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ede   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ee0   0e08     MOVLW     0x8                            space_cnt = 0;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ee2   6adb     CLRF      0xdb,0x0                                                                                        
002ee4   0e0a     MOVLW     0xa                            size = 10;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ee6   daae     RCALL     0x3444                                                                                          
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ee8   50df     MOVF      0xdf,0x0,0x0                   switch (c)                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eea   0a78     XORLW     0x78                                                                                            
002eec   e012     BZ        0x2f12                                                                                          
002eee   0a20     XORLW     0x20                                                                                            
002ef0   e010     BZ        0x2f12                                                                                          
002ef2   0a28     XORLW     0x28                                                                                            
002ef4   e00c     BZ        0x2f0e                                                                                          
002ef6   0a20     XORLW     0x20                                                                                            
002ef8   e00a     BZ        0x2f0e                                                                                          
002efa   0a3f     XORLW     0x3f                                                                                            
002efc   e006     BZ        0x2f0a                                                                                          
002efe   0a0d     XORLW     0xd                                                                                             
002f00   e002     BZ        0x2f06                                                                                          
002f02   0a20     XORLW     0x20                                                                                            
002f04   e108     BNZ       0x2f16                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'b':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'B':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f06   0e02     MOVLW     0x2                                size = 2;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f08   d005     BRA       0x2f14                             break;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'o':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f0a   0e08     MOVLW     0x8                                size = 8;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f0c   d003     BRA       0x2f14                             break;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'p':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'P':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               /* from here on out, treat 'p' conversions just              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                  like 'x' conversions. */                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f0e   0e08     MOVLW     0x8                                c += 'x' - 'p';                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f10   26df     ADDWF     0xdf,0x1,0x0                                                                                    
                                                               /* fall through */                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'x':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'X':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f12   0e10     MOVLW     0x10                               size = 16;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f14   da97     RCALL     0x3444                                                                                          
003444   6ef3     MOVWF     0xf3,0x0                                                                                        
003446   0e07     MOVLW     0x7                                                                                             
003448   cff3     MOVFF     0xff3,0xfdb                                                                                     
00344a   ffdb                                                                                                               
00344c   0012     RETURN    0x0                                                                                             
                                                               break;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if it's an unsigned conversion, we should ignore the          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              ' ' and '+' flags */                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f16   0e03     MOVLW     0x3                            if (!(flags & _FLAG_SIGNED))                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f18   bedb     BTFSC     0xdb,0x7,0x0                                                                                    
002f1a   d002     BRA       0x2f20                                                                                          
002f1c   92db     BCF       0xdb,0x1,0x0                     flags &= ~(_FLAG_PLUS | _FLAG_SPACE);                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f1e   94db     BCF       0xdb,0x2,0x0                                                                                    
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if it's a negative value, we need to negate the               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              unsigned version before we convert to text. Using             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              unsigned for this allows us to (ab)use the 2's                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              complement system to avoid overflow and be able to            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              adequately handle LONG_MIN.                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              We'll figure out what sign character to print, if             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              any, here as well. */                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f20   50db     MOVF      0xdb,0x0,0x0                   if (flags & _FLAG_SIGNED && ((long) larg < 0))                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f22   0b80     ANDLW     0x80                                                                                            
002f24   e024     BZ        0x2f6e                                                                                          
002f26   da8a     RCALL     0x343c                                                                                          
002f28   90d8     BCF       0xd8,0x0,0x0                                                                                    
002f2a   0e03     MOVLW     0x3                                                                                             
002f2c   50eb     MOVF      0xeb,0x0,0x0                                                                                    
002f2e   0a00     XORLW     0x0                                                                                             
002f30   e608     BN        0x2f42                                                                                          
002f32   0e00     MOVLW     0x0                                                                                             
002f34   5cee     SUBWF     0xee,0x0,0x0                                                                                    
002f36   0e00     MOVLW     0x0                                                                                             
002f38   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
002f3a   0e00     MOVLW     0x0                                                                                             
002f3c   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
002f3e   0e00     MOVLW     0x0                                                                                             
002f40   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
002f42   e215     BC        0x2f6e                                                                                          
00343c   50d9     MOVF      0xd9,0x0,0x0                                                                                    
00343e   0f0a     ADDLW     0xa                                                                                             
003440   efb2     GOTO      0x3564                                                                                          
003442   f01a                                                                                                               
003564   6ee9     MOVWF     0xe9,0x0                                                                                        
003566   0e00     MOVLW     0x0                                                                                             
003568   20da     ADDWFC    0xda,0x0,0x0                                                                                    
00356a   6eea     MOVWF     0xea,0x0                                                                                        
00356c   0012     RETURN    0x0                                                                                             
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f44   da13     RCALL     0x336c                             larg = -(long) larg;                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f46   6821     SETF      0x21,0x0                                                                                        
002f48   6822     SETF      0x22,0x0                                                                                        
002f4a   6823     SETF      0x23,0x0                                                                                        
002f4c   6824     SETF      0x24,0x0                                                                                        
002f4e   ecf9     CALL      0x45f2,0x0                                                                                      
002f50   f022                                                                                                               
002f52   0e0a     MOVLW     0xa                                                                                             
002f54   c018     MOVFF     0x18,0xfdb                                                                                      
002f56   ffdb                                                                                                               
002f58   0e0b     MOVLW     0xb                                                                                             
002f5a   c019     MOVFF     0x19,0xfdb                                                                                      
002f5c   ffdb                                                                                                               
002f5e   0e0c     MOVLW     0xc                                                                                             
002f60   c01a     MOVFF     0x1a,0xfdb                                                                                      
002f62   ffdb                                                                                                               
002f64   0e0d     MOVLW     0xd                                                                                             
002f66   c01b     MOVFF     0x1b,0xfdb                                                                                      
002f68   ffdb                                                                                                               
00336c   0e0a     MOVLW     0xa                                                                                             
00336e   cfdb     MOVFF     0xfdb,0x1c                                                                                      
003370   f01c                                                                                                               
003372   0e0b     MOVLW     0xb                                                                                             
003374   cfdb     MOVFF     0xfdb,0x1d                                                                                      
003376   f01d                                                                                                               
003378   0e0c     MOVLW     0xc                                                                                             
00337a   cfdb     MOVFF     0xfdb,0x1e                                                                                      
00337c   f01e                                                                                                               
00337e   0e0d     MOVLW     0xd                                                                                             
003380   cfdb     MOVFF     0xfdb,0x1f                                                                                      
003382   f01f                                                                                                               
003384   0012     RETURN    0x0                                                                                             
002f6a   0e2d     MOVLW     0x2d                               sign_char = '-';                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               ++digit_cnt;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f6c   d008     BRA       0x2f7e                         else if (flags & _FLAG_PLUS)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f6e   0e03     MOVLW     0x3                                                                                             
002f70   a2db     BTFSS     0xdb,0x1,0x0                                                                                    
002f72   d002     BRA       0x2f78                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f74   0e2b     MOVLW     0x2b                               sign_char = '+';                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               ++digit_cnt;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f76   d003     BRA       0x2f7e                         else if (flags & _FLAG_SPACE)                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f78   a4db     BTFSS     0xdb,0x2,0x0                                                                                    
002f7a   d008     BRA       0x2f8c                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f7c   0e20     MOVLW     0x20                               sign_char = ' ';                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f7e   6ef3     MOVWF     0xf3,0x0                                                                                        
002f80   0e17     MOVLW     0x17                                                                                            
002f82   cff3     MOVFF     0xff3,0xfdb                                                                                     
002f84   ffdb                                                                                                               
002f86   0e15     MOVLW     0x15                               ++digit_cnt;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f88   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f8a   d002     BRA       0x2f90                         else                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f8c   0e17     MOVLW     0x17                             sign_char = '\0';                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f8e   6adb     CLRF      0xdb,0x0                                                                                        
                                                           /* get the digits for the actual number. If the                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              precision is zero and the value is zero, the result           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              is no characters. */                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f90   0e05     MOVLW     0x5                            if (precision || larg)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f92   50db     MOVF      0xdb,0x0,0x0                                                                                    
002f94   e103     BNZ       0x2f9c                                                                                          
002f96   d9b7     RCALL     0x3306                                                                                          
002f98   e101     BNZ       0x2f9c                                                                                          
002f9a   d089     BRA       0x30ae                                                                                          
003306   0e0a     MOVLW     0xa                                                                                             
003308   cfdb     MOVFF     0xfdb,0x2a                                                                                      
00330a   f02a                                                                                                               
00330c   0e0b     MOVLW     0xb                                                                                             
00330e   cfdb     MOVFF     0xfdb,0x2b                                                                                      
003310   f02b                                                                                                               
003312   0e0c     MOVLW     0xc                                                                                             
003314   cfdb     MOVFF     0xfdb,0x2c                                                                                      
003316   f02c                                                                                                               
003318   0e0d     MOVLW     0xd                                                                                             
00331a   cfdb     MOVFF     0xfdb,0x2d                                                                                      
00331c   f02d                                                                                                               
00331e   502a     MOVF      0x2a,0x0,0x0                                                                                    
003320   102b     IORWF     0x2b,0x0,0x0                                                                                    
003322   102c     IORWF     0x2c,0x0,0x0                                                                                    
003324   102d     IORWF     0x2d,0x0,0x0                                                                                    
003326   0012     RETURN    0x0                                                                                             
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               do                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                 {                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f9c   0e1c     MOVLW     0x1c                                   cval = s_digits[larg % size];                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f9e   6e2a     MOVWF     0x2a,0x0                                                                                        
002fa0   0e48     MOVLW     0x48                                                                                            
002fa2   6e2b     MOVWF     0x2b,0x0                                                                                        
002fa4   0e00     MOVLW     0x0                                                                                             
002fa6   6e2c     MOVWF     0x2c,0x0                                                                                        
002fa8   0e07     MOVLW     0x7                                                                                             
002faa   cfdb     MOVFF     0xfdb,0x2d                                                                                      
002fac   f02d                                                                                                               
002fae   6a2e     CLRF      0x2e,0x0                                                                                        
002fb0   6a2f     CLRF      0x2f,0x0                                                                                        
002fb2   6a30     CLRF      0x30,0x0                                                                                        
002fb4   c02d     MOVFF     0x2d,0x21                                                                                       
002fb6   f021                                                                                                               
002fb8   c02e     MOVFF     0x2e,0x22                                                                                       
002fba   f022                                                                                                               
002fbc   c02f     MOVFF     0x2f,0x23                                                                                       
002fbe   f023                                                                                                               
002fc0   c030     MOVFF     0x30,0x24                                                                                       
002fc2   f024                                                                                                               
002fc4   d9d3     RCALL     0x336c                                                                                          
002fc6   ec8a     CALL      0x4714,0x0                                                                                      
002fc8   f023                                                                                                               
002fca   502a     MOVF      0x2a,0x0,0x0                                                                                    
002fcc   2418     ADDWF     0x18,0x0,0x0                                                                                    
002fce   6ef3     MOVWF     0xf3,0x0                                                                                        
002fd0   502b     MOVF      0x2b,0x0,0x0                                                                                    
002fd2   2019     ADDWFC    0x19,0x0,0x0                                                                                    
002fd4   6ef4     MOVWF     0xf4,0x0                                                                                        
002fd6   502c     MOVF      0x2c,0x0,0x0                                                                                    
002fd8   201a     ADDWFC    0x1a,0x0,0x0                                                                                    
002fda   6ef8     MOVWF     0xf8,0x0                                                                                        
002fdc   cff4     MOVFF     0xff4,0xff7                                                                                     
002fde   fff7                                                                                                               
002fe0   cff3     MOVFF     0xff3,0xff6                                                                                     
002fe2   fff6                                                                                                               
002fe4   0008     TBLRD                                                                                                     
002fe6   0e09     MOVLW     0x9                                                                                             
002fe8   cff5     MOVFF     0xff5,0xfdb                                                                                     
002fea   ffdb                                                                                                               
002fec   0e58     MOVLW     0x58                                   if (c == 'X' && cval >= 'a')                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fee   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002ff0   e10f     BNZ       0x3010                                                                                          
002ff2   0e61     MOVLW     0x61                                                                                            
002ff4   6ef3     MOVWF     0xf3,0x0                                                                                        
002ff6   0e09     MOVLW     0x9                                                                                             
002ff8   d97b     RCALL     0x32f0                                                                                          
002ffa   e30a     BNC       0x3010                                                                                          
0032f0   cfdb     MOVFF     0xfdb,0xff4                                                                                     
0032f2   fff4                                                                                                               
0032f4   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0032f6   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
0032f8   0012     RETURN    0x0                                                                                             
002ffc   0e20     MOVLW     0x20                                     cval -= 'a' - 'A';                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ffe   6e2a     MOVWF     0x2a,0x0                                                                                        
003000   0e09     MOVLW     0x9                                                                                             
003002   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
003004   ffe7                                                                                                               
003006   502a     MOVF      0x2a,0x0,0x0                                                                                    
003008   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
00300a   0e09     MOVLW     0x9                                                                                             
00300c   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
00300e   ffdb                                                                                                               
003010   0e07     MOVLW     0x7                                    larg /= size;                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003012   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003014   f02a                                                                                                               
003016   6a2b     CLRF      0x2b,0x0                                                                                        
003018   6a2c     CLRF      0x2c,0x0                                                                                        
00301a   6a2d     CLRF      0x2d,0x0                                                                                        
00301c   da0f     RCALL     0x343c                                                                                          
00301e   c02a     MOVFF     0x2a,0x21                                                                                       
003020   f021                                                                                                               
003022   c02b     MOVFF     0x2b,0x22                                                                                       
003024   f022                                                                                                               
003026   c02c     MOVFF     0x2c,0x23                                                                                       
003028   f023                                                                                                               
00302a   c02d     MOVFF     0x2d,0x24                                                                                       
00302c   f024                                                                                                               
00302e   cfee     MOVFF     0xfee,0x1c                                                                                      
003030   f01c                                                                                                               
003032   cfee     MOVFF     0xfee,0x1d                                                                                      
003034   f01d                                                                                                               
003036   cfee     MOVFF     0xfee,0x1e                                                                                      
003038   f01e                                                                                                               
00303a   cfef     MOVFF     0xfef,0x1f                                                                                      
00303c   f01f                                                                                                               
00303e   ec8a     CALL      0x4714,0x0                                                                                      
003040   f023                                                                                                               
003042   c01f     MOVFF     0x1f,0xfed                                                                                      
003044   ffed                                                                                                               
003046   c01e     MOVFF     0x1e,0xfed                                                                                      
003048   ffed                                                                                                               
00304a   c01d     MOVFF     0x1d,0xfed                                                                                      
00304c   ffed                                                                                                               
00304e   c01c     MOVFF     0x1c,0xfef                                                                                      
003050   ffef                                                                                                               
003052   0e39     MOVLW     0x39                                   *q-- = cval;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003054   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
003056   ffe9                                                                                                               
003058   06db     DECF      0xdb,0x1,0x0                                                                                    
00305a   0e3a     MOVLW     0x3a                                                                                            
00305c   cfdb     MOVFF     0xfdb,0xfea                                                                                     
00305e   ffea                                                                                                               
003060   e201     BC        0x3064                                                                                          
003062   06db     DECF      0xdb,0x1,0x0                                                                                    
003064   0e09     MOVLW     0x9                                                                                             
003066   cfdb     MOVFF     0xfdb,0xfef                                                                                     
003068   ffef                                                                                                               
00306a   0e15     MOVLW     0x15                                   ++digit_cnt;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00306c   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                                 }                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00306e   d94b     RCALL     0x3306                             while (larg);                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003070   e195     BNZ       0x2f9c                                                                                          
                                                               /* if the '#' flag was specified and we're dealing           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                  with an 'o', 'b', 'B', 'x', or 'X' conversion,            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                  we need a bit more. */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003072   0e03     MOVLW     0x3                                if (flags & _FLAG_OCTO)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003074   a6db     BTFSS     0xdb,0x3,0x0                                                                                    
003076   d01d     BRA       0x30b2                                                                                          
                                                                 {                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003078   0e6f     MOVLW     0x6f                                   if (c == 'o')                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00307a   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00307c   e106     BNZ       0x308a                                                                                          
                                                                     {                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                       /* per the standard, for octal, the '#' flag         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                          makes the precision be at least one more          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                          than the number of digits in the number */        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00307e   d9c1     RCALL     0x3402                                     if (precision <= digit_cnt)                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003080   e318     BNC       0x30b2                                                                                          
003402   0e05     MOVLW     0x5                                                                                             
003404   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003406   f02a                                                                                                               
003408   0e15     MOVLW     0x15                                                                                            
00340a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00340c   80d8     BSF       0xd8,0x0,0x0                                                                                    
00340e   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
003410   0012     RETURN    0x0                                                                                             
003082   0e15     MOVLW     0x15                                         precision = digit_cnt + 1;                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003084   28db     INCF      0xdb,0x0,0x0                                                                                    
003086   da5b     RCALL     0x353e                                                                                          
                                                                     }                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003088   d014     BRA       0x30b2                                 else if (c == 'x'                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00308a   0e78     MOVLW     0x78                                                                                            
00308c   5cdf     SUBWF     0xdf,0x0,0x0                                    || c == 'X' || c == 'b' || c == 'B')            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00308e   e009     BZ        0x30a2                                                                                          
003090   0e58     MOVLW     0x58                                                                                            
003092   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
003094   e006     BZ        0x30a2                                                                                          
003096   0e62     MOVLW     0x62                                                                                            
003098   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00309a   e003     BZ        0x30a2                                                                                          
00309c   0e42     MOVLW     0x42                                                                                            
00309e   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0030a0   e108     BNZ       0x30b2                                                                                          
0030a2   0e02     MOVLW     0x2                                      prefix_cnt = 2;                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030a4   6ef3     MOVWF     0xf3,0x0                                                                                        
0030a6   0e16     MOVLW     0x16                                                                                            
0030a8   cff3     MOVFF     0xff3,0xfdb                                                                                     
0030aa   ffdb                                                                                                               
                                                                 }                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030ac   d002     BRA       0x30b2                         else                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030ae   0e15     MOVLW     0x15                             digit_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030b0   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* The leading zero count depends on whether the '0'             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              flag was specified or not. If it was not, then the            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              count is the difference between the specified                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              precision and the number of digits (including the             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              sign character, if any) to be printed; otherwise,             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              it's as if the precision were equal to the max of             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              the specified precision and the field width. If a             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              precision was specified, the '0' flag is ignored,             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              however. */                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030b2   0e03     MOVLW     0x3                            if ((flags & _FLAG_ZERO) && (width > precision)                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030b4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0030b6   0b10     ANDLW     0x10                                                                                            
0030ba   0e04     MOVLW     0x4                                                                                             
0030bc   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0030be   f02a                                                                                                               
0030c0   0e05     MOVLW     0x5                                                                                             
0030c2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0030c4   80d8     BSF       0xd8,0x0,0x0                                                                                    
0030c6   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
0030b8   e00e     BZ        0x30d6                             && !have_precision)                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030c8   e206     BC        0x30d6                                                                                          
0030ca   0e06     MOVLW     0x6                                                                                             
0030cc   50db     MOVF      0xdb,0x0,0x0                                                                                    
0030ce   e103     BNZ       0x30d6                                                                                          
0030d0   0e04     MOVLW     0x4                              precision = width;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030d2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0030d4   da34     RCALL     0x353e                                                                                          
                                                           /* for the rest of the processing, precision contains            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              the leading zero count for the conversion. */                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030d6   d995     RCALL     0x3402                         if (precision > digit_cnt)                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030d8   e20a     BC        0x30ee                                                                                          
0030da   0e05     MOVLW     0x5                              precision -= digit_cnt;                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030dc   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
0030de   ffe7                                                                                                               
0030e0   0e15     MOVLW     0x15                                                                                            
0030e2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0030e4   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
0030e6   0e05     MOVLW     0x5                                                                                             
0030e8   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0030ea   ffdb                                                                                                               
0030ec   d002     BRA       0x30f2                         else                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030ee   0e05     MOVLW     0x5                              precision = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030f0   6adb     CLRF      0xdb,0x0                                                                                        
                                                           /* the space count is the difference between the field           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              width and the digit count plus the leading zero               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              count. If the width is less than the digit count              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              plus the leading zero count, the space count is               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              zero. */                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030f2   0e04     MOVLW     0x4                            if (width > precision + digit_cnt + prefix_cnt)                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030f4   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0030f6   f02a                                                                                                               
0030f8   0e16     MOVLW     0x16                                                                                            
0030fa   d945     RCALL     0x3386                                                                                          
0030fc   80d8     BSF       0xd8,0x0,0x0                                                                                    
0030fe   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
003100   e214     BC        0x312a                                                                                          
003386   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003388   ffe6                                                                                                               
00338a   0e15     MOVLW     0x15                                                                                            
00338c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00338e   ffe6                                                                                                               
003390   0e05     MOVLW     0x5                                                                                             
003392   50db     MOVF      0xdb,0x0,0x0                                                                                    
003394   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003396   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
003398   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00339a   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
00339c   0012     RETURN    0x0                                                                                             
                                                             space_cnt =                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003102   0e16     MOVLW     0x16                               width - precision - digit_cnt - prefix_cnt;                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003104   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003106   ffe6                                                                                                               
003108   0e15     MOVLW     0x15                                                                                            
00310a   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00310c   ffe6                                                                                                               
00310e   0e04     MOVLW     0x4                                                                                             
003110   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003112   ffe6                                                                                                               
003114   0e05     MOVLW     0x5                                                                                             
003116   50db     MOVF      0xdb,0x0,0x0                                                                                    
003118   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00311a   5ce7     SUBWF     0xe7,0x0,0x0                                                                                    
00311c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00311e   80d8     BSF       0xd8,0x0,0x0                                                                                    
003120   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
003122   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003124   80d8     BSF       0xd8,0x0,0x0                                                                                    
003126   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
003128   d95f     RCALL     0x33e8                                                                                          
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* for output, we check the justification, if it's               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              right justified and the space count is positive, we           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              emit the space characters first. */                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00312a   0e03     MOVLW     0x3                            if (!(flags & _FLAG_MINUS) && space_cnt)                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00312c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00312e   0b01     ANDLW     0x1                                                                                             
003130   e10b     BNZ       0x3148                                                                                          
003132   0e08     MOVLW     0x8                                                                                             
003134   50db     MOVF      0xdb,0x0,0x0                                                                                    
003136   e008     BZ        0x3148                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003138   d8b2     RCALL     0x329e                             if (s_put_n_chars (handle, space_cnt, ' '))                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00313a   e001     BZ        0x313e                                                                                          
00313c   d08d     BRA       0x3258                                                                                          
                                                                 return EOF;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00313e   0e08     MOVLW     0x8                                count += space_cnt;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003140   50db     MOVF      0xdb,0x0,0x0                                                                                    
003142   d8be     RCALL     0x32c0                                                                                          
003144   0e08     MOVLW     0x8                                space_cnt = 0;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003146   6adb     CLRF      0xdb,0x0                                                                                        
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if we have a sign character to print, that comes              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              next */                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003148   0e17     MOVLW     0x17                           if (sign_char)                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00314a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00314c   e007     BZ        0x315c                                                                                          
00314e   d988     RCALL     0x3460                           if (putc (sign_char, handle) == EOF)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003150   0e17     MOVLW     0x17                                                                                            
003152   d9f1     RCALL     0x3536                                                                                          
003154   e103     BNZ       0x315c                                                                                          
003156   1c2b     COMF      0x2b,0x0,0x0                                                                                    
003158   e101     BNZ       0x315c                                                                                          
00315a   d07e     BRA       0x3258                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if we have a prefix (0b, 0B, 0x or 0X), that's next */        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00315c   0e16     MOVLW     0x16                           if (prefix_cnt)                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00315e   50db     MOVF      0xdb,0x0,0x0                                                                                    
003160   e016     BZ        0x318e                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003162   d97e     RCALL     0x3460                             if (putc ('0', handle) == EOF)                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003164   0e30     MOVLW     0x30                                                                                            
003166   6ee6     MOVWF     0xe6,0x0                                                                                        
003168   d89f     RCALL     0x32a8                                                                                          
00316a   e102     BNZ       0x3170                                                                                          
00316c   1c2b     COMF      0x2b,0x0,0x0                                                                                    
00316e   e074     BZ        0x3258                                                                                          
                                                                 return EOF;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003170   d977     RCALL     0x3460                             if (putc (c, handle) == EOF)                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003172   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
003174   ffe6                                                                                                               
003176   ecb7     CALL      0x456e,0x0                                                                                      
003178   f022                                                                                                               
00317a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00317c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00317e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003180   cff4     MOVFF     0xff4,0x2b                                                                                      
003182   f02b                                                                                                               
003184   0100     MOVLB     0x0                                                                                             
003186   1cf3     COMF      0xf3,0x0,0x0                                                                                    
003188   e102     BNZ       0x318e                                                                                          
00318a   1c2b     COMF      0x2b,0x0,0x0                                                                                    
00318c   e065     BZ        0x3258                                                                                          
                                                                 return EOF;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if we have leading zeros, they follow. the prefix, if any     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              is included in the number of digits when determining how      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              many leading zeroes are needed. */                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00318e   0e05     MOVLW     0x5                            if (precision > prefix_cnt)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003190   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003192   f02a                                                                                                               
003194   0e16     MOVLW     0x16                                                                                            
003196   50db     MOVF      0xdb,0x0,0x0                                                                                    
003198   80d8     BSF       0xd8,0x0,0x0                                                                                    
00319a   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
00319c   e209     BC        0x31b0                                                                                          
00319e   0e05     MOVLW     0x5                              precision -= prefix_cnt;                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031a0   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
0031a2   ffe7                                                                                                               
0031a4   0e16     MOVLW     0x16                                                                                            
0031a6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0031a8   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
0031aa   0e05     MOVLW     0x5                                                                                             
0031ac   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0031ae   ffdb                                                                                                               
0031b0   0e30     MOVLW     0x30                           if (s_put_n_chars (handle, precision, '0'))                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031b2   6ee6     MOVWF     0xe6,0x0                                                                                        
0031b4   0e05     MOVLW     0x5                                                                                             
0031b6   d9cb     RCALL     0x354e                                                                                          
0031b8   e14f     BNZ       0x3258                                                                                          
003500   eca6     CALL      0x294c,0x0                                                                                      
003502   f014                                                                                                               
003504   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003506   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003508   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00350a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00350c   0900     IORLW     0x0                                                                                             
00350e   0012     RETURN    0x0                                                                                             
00354e   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003550   ffe6                                                                                                               
003552   df86     RCALL     0x3460                                                                                          
003554   ef80     GOTO      0x3500                                                                                          
003556   f01a                                                                                                               
                                                             return EOF;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* print the actual number */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031ba   0e39     MOVLW     0x39                           for (cval = *++q; cval; cval = *++q)                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031bc   2adb     INCF      0xdb,0x1,0x0                                                                                    
0031be   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0031c0   ffe9                                                                                                               
0031c2   0e3a     MOVLW     0x3a                                                                                            
0031c4   e301     BNC       0x31c8                                                                                          
0031c6   2adb     INCF      0xdb,0x1,0x0                                                                                    
0031c8   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0031ca   ffea                                                                                                               
0031cc   0e09     MOVLW     0x9                                                                                             
0031ce   cfef     MOVFF     0xfef,0xfdb                                                                                     
0031d0   ffdb                                                                                                               
0031d2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0031d4   e00e     BZ        0x31f2                                                                                          
0031e2   0e39     MOVLW     0x39                                                                                            
0031e4   2adb     INCF      0xdb,0x1,0x0                                                                                    
0031e6   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0031e8   ffe9                                                                                                               
0031ea   0e3a     MOVLW     0x3a                                                                                            
0031ec   e3ed     BNC       0x31c8                                                                                          
0031ee   2adb     INCF      0xdb,0x1,0x0                                                                                    
0031f0   d7eb     BRA       0x31c8                                                                                          
0031d6   d944     RCALL     0x3460                           if (putc (cval, handle) == EOF)                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031d8   0e09     MOVLW     0x9                                                                                             
0031da   d9ad     RCALL     0x3536                                                                                          
0031dc   e102     BNZ       0x31e2                                                                                          
0031de   1c2b     COMF      0x2b,0x0,0x0                                                                                    
0031e0   e03b     BZ        0x3258                                                                                          
003536   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003538   ffe6                                                                                                               
00353a   ef54     GOTO      0x32a8                                                                                          
00353c   f019                                                                                                               
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if there are any spaces left, they go to right-pad            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              the field */                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031f2   d855     RCALL     0x329e                         if (s_put_n_chars (handle, space_cnt, ' '))                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031f4   e131     BNZ       0x3258                                                                                          
00329e   0e20     MOVLW     0x20                                                                                            
0032a0   6ee6     MOVWF     0xe6,0x0                                                                                        
0032a2   0e08     MOVLW     0x8                                                                                             
0032a4   efa7     GOTO      0x354e                                                                                          
0032a6   f01a                                                                                                               
003460   0efc     MOVLW     0xfc                                                                                            
003462   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003464   ffe6                                                                                                               
003466   0efd     MOVLW     0xfd                                                                                            
003468   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00346a   ffe6                                                                                                               
00346c   0012     RETURN    0x0                                                                                             
                                                             return EOF;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031f6   0e16     MOVLW     0x16                           count += precision + digit_cnt + space_cnt + prefix_cnt;         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031f8   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0031fa   ffe6                                                                                                               
0031fc   0e08     MOVLW     0x8                                                                                             
0031fe   d8c3     RCALL     0x3386                                                                                          
003200   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003202   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
003204   d85d     RCALL     0x32c0                                                                                          
0032c0   6e2a     MOVWF     0x2a,0x0                                                                                        
0032c2   6a2b     CLRF      0x2b,0x0                                                                                        
0032c4   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0032c6   0f01     ADDLW     0x1                                                                                             
0032c8   d94d     RCALL     0x3564                                                                                          
0032ca   502a     MOVF      0x2a,0x0,0x0                                                                                    
0032cc   26ee     ADDWF     0xee,0x1,0x0                                                                                    
0032ce   502b     MOVF      0x2b,0x0,0x0                                                                                    
0032d0   22ed     ADDWFC    0xed,0x1,0x0                                                                                    
0032d2   0012     RETURN    0x0                                                                                             
                                                         }                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003206   d02e     BRA       0x3264                       break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'n':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003208   0e07     MOVLW     0x7                          switch (size)                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00320a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00320c   0a03     XORLW     0x3                                                                                             
00320e   e01c     BZ        0x3248                                                                                          
003210   0a01     XORLW     0x1                                                                                             
003212   e014     BZ        0x323c                                                                                          
003214   0a03     XORLW     0x3                                                                                             
003216   e007     BZ        0x3226                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case _FMT_LONG:                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003226   d8f5     RCALL     0x3412                           *(long *) va_arg (ap, long *) = count;                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003228   6a2f     CLRF      0x2f,0x0                                                                                        
00322a   ae2d     BTFSS     0x2d,0x7,0x0                                                                                    
00322c   d002     BRA       0x3232                                                                                          
00322e   682e     SETF      0x2e,0x0                                                                                        
003230   682f     SETF      0x2f,0x0                                                                                        
003232   d82c     RCALL     0x328c                                                                                          
003234   d8bc     RCALL     0x33ae                                                                                          
003236   c02f     MOVFF     0x2f,0xfee                                                                                      
003238   ffee                                                                                                               
0033ae   50ee     MOVF      0xee,0x0,0x0                                                                                    
0033b0   cfef     MOVFF     0xfef,0xfea                                                                                     
0033b2   ffea                                                                                                               
0033b4   6ee9     MOVWF     0xe9,0x0                                                                                        
0033b6   c02c     MOVFF     0x2c,0xfee                                                                                      
0033b8   ffee                                                                                                               
0033ba   c02d     MOVFF     0x2d,0xfee                                                                                      
0033bc   ffee                                                                                                               
0033be   c02e     MOVFF     0x2e,0xfee                                                                                      
0033c0   ffee                                                                                                               
0033c2   0012     RETURN    0x0                                                                                             
003412   0e01     MOVLW     0x1                                                                                             
003414   cfdb     MOVFF     0xfdb,0x2c                                                                                      
003416   f02c                                                                                                               
003418   0e02     MOVLW     0x2                                                                                             
00341a   cfdb     MOVFF     0xfdb,0x2d                                                                                      
00341c   f02d                                                                                                               
00341e   6a2e     CLRF      0x2e,0x0                                                                                        
003420   0012     RETURN    0x0                                                                                             
00323a   d014     BRA       0x3264                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case _FMT_SHLONG:                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00323c   d8ea     RCALL     0x3412                           *(short long *) va_arg (ap, short long *) = count;             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00323e   be2d     BTFSC     0x2d,0x7,0x0                                                                                    
003240   682e     SETF      0x2e,0x0                                                                                        
003242   d824     RCALL     0x328c                                                                                          
003244   d8b4     RCALL     0x33ae                                                                                          
003246   d00e     BRA       0x3264                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case _FMT_BYTE:                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003248   d963     RCALL     0x3510                           *(signed char *) va_arg (ap, signed char *) = count;           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00324a   cfdb     MOVFF     0xfdb,0xfef                                                                                     
00324c   ffef                                                                                                               
00324e   d00a     BRA       0x3264                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           default:                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003218   d97b     RCALL     0x3510                           *(int *) va_arg (ap, int *) = count;                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00321a   cfdb     MOVFF     0xfdb,0xfee                                                                                     
00321c   ffee                                                                                                               
00321e   0e02     MOVLW     0x2                                                                                             
003220   cfdb     MOVFF     0xfdb,0xfed                                                                                     
003222   ffed                                                                                                               
003510   debd     RCALL     0x328c                                                                                          
003512   50ee     MOVF      0xee,0x0,0x0                                                                                    
003514   cfef     MOVFF     0xfef,0xfea                                                                                     
003516   ffea                                                                                                               
003518   6ee9     MOVWF     0xe9,0x0                                                                                        
00351a   0e01     MOVLW     0x1                                                                                             
00351c   0012     RETURN    0x0                                                                                             
                                                             break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003224   d01f     BRA       0x3264                       break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       default:                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* undefined behaviour. we do nothing */                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                   }                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                 else                                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                   {                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003250   d97b     RCALL     0x3548                   if (putc (c, handle) == EOF)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003252   e105     BNZ       0x325e                                                                                          
003254   1c2b     COMF      0x2b,0x0,0x0                                                                                    
003256   e103     BNZ       0x325e                                                                                          
0032a8   ecb7     CALL      0x456e,0x0                                                                                      
0032aa   f022                                                                                                               
0032ac   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0032ae   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0032b0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0032b2   cff3     MOVFF     0xff3,0x2a                                                                                      
0032b4   f02a                                                                                                               
0032b6   cff4     MOVFF     0xff4,0x2b                                                                                      
0032b8   f02b                                                                                                               
0032ba   0100     MOVLB     0x0                                                                                             
0032bc   1cf3     COMF      0xf3,0x0,0x0                                                                                    
0032be   0012     RETURN    0x0                                                                                             
0034ee   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
0034f0   ffe6                                                                                                               
0034f2   ef54     GOTO      0x32a8                                                                                          
0034f4   f019                                                                                                               
003548   df8b     RCALL     0x3460                                                                                          
00354a   ef77     GOTO      0x34ee                                                                                          
00354c   f01a                                                                                                               
003258   68f3     SETF      0xf3,0x0                   return EOF;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00325a   68f4     SETF      0xf4,0x0                                                                                        
00325c   d010     BRA       0x327e                                                                                          
00325e   d8fc     RCALL     0x3458                   ++count;                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003260   e301     BNC       0x3264                                                                                          
003262   2adb     INCF      0xdb,0x1,0x0                                                                                    
003458   0e01     MOVLW     0x1                                                                                             
00345a   2adb     INCF      0xdb,0x1,0x0                                                                                    
00345c   0e02     MOVLW     0x2                                                                                             
00345e   0012     RETURN    0x0                                                                                             
                                                   }                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                               }                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00326a   0e01     MOVLW     0x1              return count;                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00326c   cfdb     MOVFF     0xfdb,0x2a                                                                                      
00326e   f02a                                                                                                               
003270   0e02     MOVLW     0x2                                                                                             
003272   cfdb     MOVFF     0xfdb,0x2b                                                                                      
003274   f02b                                                                                                               
003276   c02a     MOVFF     0x2a,0xff3                                                                                      
003278   fff3                                                                                                               
00327a   c02b     MOVFF     0x2b,0xff4                                                                                      
00327c   fff4                                                                                                               
00327e   0e3b     MOVLW     0x3b           }                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003280   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
003282   e202     BC        0x3288                                                                                          
003284   6ae1     CLRF      0xe1,0x0                                                                                        
003286   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003288   6ee1     MOVWF     0xe1,0x0                                                                                        
00328a   d0cb     BRA       0x3422                                                                                          
                                           /*** Unsigned Integer Division: 32-bit by 32-bit                                 C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***                                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            *** Optimized: Dec. 21, 2000                                                    C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***        by: Daniel R. Madill, Quanser Consulting Inc.                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***       for: Saved (for the worst case) at least 8*32 = 256 instruction cycles C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***            over the code supplied with MCC18 v1.00.12                       C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***/                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           void  FXD3232U(void/* ulong aarg, ulong barg */)                                 C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           {                                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                             // use INDF1 for the counter...                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               _asm                                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               // REM = 0                                                                   C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004714   6a1b     CLRF      0x1b,0x0           clrf __REMB0, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004716   6a1a     CLRF      0x1a,0x0           clrf __REMB1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004718   6a19     CLRF      0x19,0x0           clrf __REMB2, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00471a   6a18     CLRF      0x18,0x0           clrf __REMB3, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               // INDF1 = 32                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00471c   0e20     MOVLW     0x20               movlw 32                                                                     C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00471e   6ee7     MOVWF     0xe7,0x0           movwf INDF1, 0                                                               C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               // Clear the carry                                                           C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004720   90d8     BCF       0xd8,0x0,0x0       bcf STATUS, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           loop:                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	//AARG32 <<= 1; The carry is always clear at the top of the loop.               C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004722   361c     RLCF      0x1c,0x1,0x0   	rlcf __AARGB3, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004724   361d     RLCF      0x1d,0x1,0x0   	rlcf __AARGB2, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004726   361e     RLCF      0x1e,0x1,0x0   	rlcf __AARGB1, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004728   361f     RLCF      0x1f,0x1,0x0   	rlcf __AARGB0, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	//REM32 = (REM32 << 1) | (AARG32 >> 32)                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00472a   3618     RLCF      0x18,0x1,0x0   	rlcf __REMB3, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00472c   3619     RLCF      0x19,0x1,0x0   	rlcf __REMB2, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00472e   361a     RLCF      0x1a,0x1,0x0   	rlcf __REMB1, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004730   361b     RLCF      0x1b,0x1,0x0   	rlcf __REMB0, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	                                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	//if (PROD >= BARG32)                                                           C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004732   5021     MOVF      0x21,0x0,0x0   	movf __BARGB3, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004734   5c18     SUBWF     0x18,0x0,0x0   	subwf __REMB3, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004736   5022     MOVF      0x22,0x0,0x0   	movf __BARGB2, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004738   5819     SUBWFB    0x19,0x0,0x0   	subwfb __REMB2, 0, 0                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00473a   5023     MOVF      0x23,0x0,0x0   	movf __BARGB1, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00473c   581a     SUBWFB    0x1a,0x0,0x0   	subwfb __REMB1, 0, 0                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00473e   5024     MOVF      0x24,0x0,0x0   	movf __BARGB0, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004740   581b     SUBWFB    0x1b,0x0,0x0   	subwfb __REMB0, 0, 0                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004742   e309     BNC       0x4756         	bnc _false                                                                      C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               //{                                                                          C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	    //REM32-= BARG32;                                                           C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004744   5021     MOVF      0x21,0x0,0x0   	    movf __BARGB3, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004746   5e18     SUBWF     0x18,0x1,0x0   	    subwf __REMB3, 1, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004748   5022     MOVF      0x22,0x0,0x0   	    movf __BARGB2, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00474a   5a19     SUBWFB    0x19,0x1,0x0   	    subwfb __REMB2, 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00474c   5023     MOVF      0x23,0x0,0x0   	    movf __BARGB1, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00474e   5a1a     SUBWFB    0x1a,0x1,0x0   	    subwfb __REMB1, 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004750   5024     MOVF      0x24,0x0,0x0   	    movf __BARGB0, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004752   5a1b     SUBWFB    0x1b,0x1,0x0   	    subwfb __REMB0, 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	    //++AARG32; Since AARG32 was shift to the left above, we only need to set   C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                   //          the lowest bit. Use incf so that the carry flag will also be cleared. C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                   //          Thus, the carry will always be clear at the top of the loop. C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004754   2a1c     INCF      0x1c,0x1,0x0   	    incf __AARGB3, 1, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               //}                                                                          C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           _false:                                                                          C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004756   2ee7     DECFSZ    0xe7,0x1,0x0       decfsz INDF1, 1, 0    // does not affect the carry bit                       C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004758   d7e4     BRA       0x4722             bra loop                                                                     C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                             /* result in AARG already... */                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                             _endasm                                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00475a   0012     RETURN    0x0            }                                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           ;	RCS Header $Id: fxm1616s.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <P18CXXX.INC>		; general Golden Gate definitions                        C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <CMATH18.INC>		; Math library definitions                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: cmath18.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                               LIST                                                                         C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ; CMATH18.INC  v1.0  Microchip Technology, Inc. / F.J. Testa                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <AARG.INC>		; AARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: aarg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN	__AARGB0, __AARGB1, __AARGB2, __AARGB3                                   C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                   EXTERN  __AARGB4, __AARGB5, __AARGB6, __AARGB7                           C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __AEXP                                                                  C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __REMB3, __REMB2, __REMB1, __REMB0                                      C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <BARG.INC>		; BARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: barg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BARGB3, __BARGB2, __BARGB1, __BARGB0                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BEXP                                                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <TEMPARG.INC>		; TEMPARG declarations                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: temparg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                   EXTERN  __TEMPB3, __TEMPB2, __TEMPB1, __TEMPB0, __TEMP                   C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       16x16 Bit Signed Fixed Point Multiply 16 x 16 -> 32                      C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Input:  16 bit signed fixed point multiplicand in AARGB0, AARGB1         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;               16 bit signed fixed point multiplier in BARGB0, BARGB1           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Use:    CALL    FXM1616S                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Output: 32 bit signed fixed point product in AARGB0, AARGB1,             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;               AARGB2, AARGB3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Result: AARG  <--  AARG * BARG                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Max Timing:     39 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Min Timing:     31 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       PM: 38              DM: 8                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           PROG	CODE                                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           FXM1616S                                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           		GLOBAL	FXM1616S                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004310   c01f     MOVFF     0x1f,0x29      		MOVFF	__AARGB0,__TEMPB0                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004312   f029                                                                                                               
004314   c01e     MOVFF     0x1e,0x28      		MOVFF	__AARGB1,__TEMPB1	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004316   f028                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004318   501e     MOVF      0x1e,0x0,0x0   		MOVF	__AARGB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00431a   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00431c   cff4     MOVFF     0xff4,0x1d     		MOVFF	PRODH,__AARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00431e   f01d                                                                                                               
004320   cff3     MOVFF     0xff3,0x1c     		MOVFF	PRODL,__AARGB3                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004322   f01c                                                                                                               
                                           		                                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004324   501f     MOVF      0x1f,0x0,0x0   		MOVF	__AARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004326   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004328   cff4     MOVFF     0xff4,0x1f     		MOVFF	PRODH,__AARGB0                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00432a   f01f                                                                                                               
00432c   cff3     MOVFF     0xff3,0x1e     		MOVFF	PRODL,__AARGB1                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00432e   f01e                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004330   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004332   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004334   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004336   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004338   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00433a   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00433c   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00433e   5028     MOVF      0x28,0x0,0x0   		MOVF	__TEMPB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004340   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004342   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004344   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004346   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004348   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00434a   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00434c   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00434e   ae24     BTFSS     0x24,0x7,0x0   		BTFSS	__BARGB0,MSB                                                             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004350   efae     GOTO      0x435c         		GOTO	TSIGN1616A                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004352   f021                                                                                                               
004354   5028     MOVF      0x28,0x0,0x0   		MOVF	__TEMPB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004356   5e1e     SUBWF     0x1e,0x1,0x0   		SUBWF	__AARGB1,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004358   5029     MOVF      0x29,0x0,0x0   		MOVF	__TEMPB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00435a   5a1f     SUBWFB    0x1f,0x1,0x0   		SUBWFB	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           TSIGN1616A                                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00435c   ae29     BTFSS     0x29,0x7,0x0   		BTFSS	__TEMPB0,MSB                                                             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00435e   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004360   5023     MOVF      0x23,0x0,0x0   		MOVF	__BARGB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004362   5e1e     SUBWF     0x1e,0x1,0x0   		SUBWF	__AARGB1,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004364   5024     MOVF      0x24,0x0,0x0   		MOVF	__BARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004366   5a1f     SUBWFB    0x1f,0x1,0x0   		SUBWFB	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           		                                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004368   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           		END                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           /* a signed multiply is only different from an unsigned multiply                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                            * if the upper bytes of the result matter, which for us they                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                            * don't.                                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                            */                                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           #define PRODH	(PRODL + 1)                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           extern near unsigned char __AARGB3, __BARGB3;                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           extern near unsigned char __AARGB7;                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           void FXM3232 (void)                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           {                                                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                             _asm                                                                           C:\MCC18\src\TRADIT~1\math\fxm3232.c
0045f2   501c     MOVF      0x1c,0x0,0x0       movf __AARGB3, 0, 0                                                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
0045f4   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // low byte of both operands, so result adds into the low order              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // result bytes                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
0045f6   cff3     MOVFF     0xff3,0x18         movff PRODL, __AARGB7                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
0045f8   f018                                                                                                               
0045fa   cff4     MOVFF     0xff4,0x19         movff PRODH, __AARGB7 + 1                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
0045fc   f019                                                                                                               
                                               // W still contains AARGB3                                                   C:\MCC18\src\TRADIT~1\math\fxm3232.c
0045fe   0222     MULWF     0x22,0x0           mulwf __BARGB3 + 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // BARGB3[1], so result adds into AARGB7[1,2]                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
004600   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004602   2619     ADDWF     0x19,0x1,0x0       addwf __AARGB7 + 1, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
004604   0e00     MOVLW     0x0                movlw 0                                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004606   20f4     ADDWFC    0xf4,0x0,0x0       addwfc PRODH, 0, 0                                                           C:\MCC18\src\TRADIT~1\math\fxm3232.c
004608   6e1a     MOVWF     0x1a,0x0           movwf __AARGB7 + 2, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3 to continue                                                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
00460a   501c     MOVF      0x1c,0x0,0x0       movf __AARGB3, 0, 0                                                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
00460c   0223     MULWF     0x23,0x0           mulwf __BARGB3 + 2, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // BARGB3[2], so result adds into AARGB7[2,3]                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
00460e   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004610   261a     ADDWF     0x1a,0x1,0x0       addwf __AARGB7 + 2, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
004612   0e00     MOVLW     0x0                movlw 0                                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004614   20f4     ADDWFC    0xf4,0x0,0x0       addwfc PRODH, 0, 0                                                           C:\MCC18\src\TRADIT~1\math\fxm3232.c
004616   6e1b     MOVWF     0x1b,0x0           movwf __AARGB7 + 3, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3 to continue                                                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
004618   501c     MOVF      0x1c,0x0,0x0       movf __AARGB3, 0, 0                                                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
00461a   0224     MULWF     0x24,0x0           mulwf __BARGB3 + 3, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // BARGB3[3], so result adds into AARGB7[3].                                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\MCC18\src\TRADIT~1\math\fxm3232.c
00461c   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
00461e   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // that's the end of all terms involving AARGB3[0].                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // load AARGB3[1] to continue                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
004620   501d     MOVF      0x1d,0x0,0x0       movf __AARGB3 + 1, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004622   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[1], so result adds into AARGB7[1,2]                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
004624   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004626   2619     ADDWF     0x19,0x1,0x0       addwf __AARGB7 + 1, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
004628   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
00462a   221a     ADDWFC    0x1a,0x1,0x0       addwfc __AARGB7 + 2, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
00462c   0e00     MOVLW     0x0                movlw 0                                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
00462e   221b     ADDWFC    0x1b,0x1,0x0       addwfc __AARGB7 + 3, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3[1] to continue                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
004630   501d     MOVF      0x1d,0x0,0x0       movf __AARGB3 + 1, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004632   0222     MULWF     0x22,0x0           mulwf __BARGB3 + 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[1] and BARGB3[1], so result adds into AARGB7[2,3]                  C:\MCC18\src\TRADIT~1\math\fxm3232.c
004634   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004636   261a     ADDWF     0x1a,0x1,0x0       addwf __AARGB7 + 2, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
004638   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
00463a   221b     ADDWFC    0x1b,0x1,0x0       addwfc __AARGB7 + 3, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3[1] to continue                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
00463c   501d     MOVF      0x1d,0x0,0x0       movf __AARGB3 + 1, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
00463e   0223     MULWF     0x23,0x0           mulwf __BARGB3 + 2, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[1] and BARGB3[2], so result adds into AARGB7[3]                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004640   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004642   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // all bytes of the term from the product of AARGB3[1] and BARGB3[3] are     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // above our 32-bit result, don't even need to bother calculating            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // that term.                                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // load AARGB3[2] to continue                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
004644   501e     MOVF      0x1e,0x0,0x0       movf __AARGB3 + 2, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004646   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[2] and BARGB3[0], so result adds into AARGB7[2,3]                  C:\MCC18\src\TRADIT~1\math\fxm3232.c
004648   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
00464a   261a     ADDWF     0x1a,0x1,0x0       addwf __AARGB7 + 2, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
00464c   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
00464e   221b     ADDWFC    0x1b,0x1,0x0       addwfc __AARGB7 + 3, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3[2] to continue                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
004650   501e     MOVF      0x1e,0x0,0x0       movf __AARGB3 + 2, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004652   0222     MULWF     0x22,0x0           mulwf __BARGB3 + 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[2] and BARGB3[1], so result adds into AARGB7[3]                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004654   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004656   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // all bytes of the termsfrom the products of AARGB3[2] and BARGB3[2,3] are  C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // above our 32-bit result, don't even need to bother calculating            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // those terms.                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // load AARGB3[3] to continue                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
004658   501f     MOVF      0x1f,0x0,0x0       movf __AARGB3 + 3, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
00465a   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[3] and BARGB3[0], so result adds into AARGB7[3]                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
00465c   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
00465e   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               _endasm;                                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
004660   0012     RETURN    0x0            }                                                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; @name isdigit                                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;The {\bf isdigit} function tests the value of {\bf c} to determine if it        C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;is a digit character. A digit character is defined as any decimal digit         C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;character (0, 1, 2, 3, 4, 5, 6, 7, 8, 9).                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; int isdigit (int c);                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           CTYPE CODE                                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           isdigit                                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             global isdigit                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; Proceedure: Use FSR0 as pointer to 'c'                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;         Return with result in PROD                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             ; Clear out result                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
0046f0   6af3     CLRF      0xf3,0x0                 clrf      PRODL, ACCESS                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
0046f2   6af4     CLRF      0xf4,0x0       	  clrf      PRODH, ACCESS                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             ; Set FSR0 = FSR1 - 2 ( location of 'c')                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
0046f4   0eff     MOVLW     0xff                     StkSetPtrToOffset FSR0L,-1                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
0046f6   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
0046f8   6ee9     MOVWF     0xe9,0x0                                                                                        
0046fa   0eff     MOVLW     0xff                                                                                            
0046fc   20e2     ADDWFC    0xe2,0x0,0x0                                                                                    
0046fe   6eea     MOVWF     0xea,0x0                                                                                        
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004700   66ed     TSTFSZ    0xed,0x0                 tstfsz    POSTDEC0,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004702   d007     BRA       0x4712                   bra       jNoMatch            ; upper byte must be 0 to match          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             ; Test for condition                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004704   0e2f     MOVLW     0x2f                     jmpFleL   INDF0,ACCESS,'0'-1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004706   64ef     CPFSGT    0xef,0x0                                                                                        
004708   d004     BRA       0x4712                                                                                          
00470a   0e3a     MOVLW     0x3a                     jmpFgeL   INDF0,ACCESS,'9'+1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
00470c   60ef     CPFSLT    0xef,0x0                                                                                        
00470e   d001     BRA       0x4712                                                                                          
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           jMatch:                                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004710   2af3     INCF      0xf3,0x1,0x0             incf      PRODL,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           jNoMatch:                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004712   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                           int _user_putc (char c);                                                         C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                           int _usart_putc (char c);                                                        C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                           int                                                                              C:\MCC18\src\TRADIT~1\stdclib\putc.c
00456e   cfd9     MOVFF     0xfd9,0xfe6    putc (char c, FILE * f)                                                          C:\MCC18\src\TRADIT~1\stdclib\putc.c
004570   ffe6                                                                                                               
004572   cfda     MOVFF     0xfda,0xfe6                                                                                     
004574   ffe6                                                                                                               
004576   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
004578   ffd9                                                                                                               
00457a   cfe2     MOVFF     0xfe2,0xfda                                                                                     
00457c   ffda                                                                                                               
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                             /* if the handle > 0 then it's a pointer to a string buffer address.           C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                specifically, a pointer to a pointer referencing the next available         C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                byte in the buffer, to which the character will be stored. */               C:\MCC18\src\TRADIT~1\stdclib\putc.c
00457e   0efb     MOVLW     0xfb             if ((int) f >= 0)                                                              C:\MCC18\src\TRADIT~1\stdclib\putc.c
004580   cfdb     MOVFF     0xfdb,0x2a                                                                                      
004582   f02a                                                                                                               
004584   0efc     MOVLW     0xfc                                                                                            
004586   cfdb     MOVFF     0xfdb,0x2b                                                                                      
004588   f02b                                                                                                               
00458a   0100     MOVLB     0x0                                                                                             
00458c   0e80     MOVLW     0x80                                                                                            
00458e   142b     ANDWF     0x2b,0x0,0x0                                                                                    
004590   e11a     BNZ       0x45c6                                                                                          
004592   0efb     MOVLW     0xfb               return (unsigned char) (*(*(char **) f)++ = c);                              C:\MCC18\src\TRADIT~1\stdclib\putc.c
004594   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
004596   ffe9                                                                                                               
004598   0efc     MOVLW     0xfc                                                                                            
00459a   cfdb     MOVFF     0xfdb,0xfea                                                                                     
00459c   ffea                                                                                                               
00459e   cfee     MOVFF     0xfee,0xff3                                                                                     
0045a0   fff3                                                                                                               
0045a2   cfed     MOVFF     0xfed,0xff4                                                                                     
0045a4   fff4                                                                                                               
0045a6   2aee     INCF      0xee,0x1,0x0                                                                                    
0045a8   0e00     MOVLW     0x0                                                                                             
0045aa   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
0045ac   cff3     MOVFF     0xff3,0xfe9                                                                                     
0045ae   ffe9                                                                                                               
0045b0   cff4     MOVFF     0xff4,0xfea                                                                                     
0045b2   ffea                                                                                                               
0045b4   0efd     MOVLW     0xfd                                                                                            
0045b6   cfdb     MOVFF     0xfdb,0xfef                                                                                     
0045b8   ffef                                                                                                               
0045ba   50ef     MOVF      0xef,0x0,0x0                                                                                    
0045bc   6a2b     CLRF      0x2b,0x0                                                                                        
0045be   6ef3     MOVWF     0xf3,0x0                                                                                        
0045c0   c02b     MOVFF     0x2b,0xff4                                                                                      
0045c2   fff4                                                                                                               
0045c4   d010     BRA       0x45e6                                                                                          
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
0045c6   0efb     MOVLW     0xfb             if ((signed char) f == (signed char) _H_USART)                                 C:\MCC18\src\TRADIT~1\stdclib\putc.c
0045c8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0045ca   08fe     SUBLW     0xfe                                                                                            
0045cc   e106     BNZ       0x45da                                                                                          
                                               {                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                 /* the invocation of the USART function is direct, as it's our             C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    default value and we want it to work without needing any                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    direct initialization from the user */                                  C:\MCC18\src\TRADIT~1\stdclib\putc.c
0045ce   0efd     MOVLW     0xfd                 return _usart_putc (c);                                                    C:\MCC18\src\TRADIT~1\stdclib\putc.c
0045d0   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0045d2   ffe6                                                                                                               
0045d4   ece9     CALL      0x47d2,0x0                                                                                      
0045d6   f023                                                                                                               
0045d8   d005     BRA       0x45e4                                                                                          
                                               }                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                             else                                                                           C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                               {                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                 /* the invocation of the user function is direct, not via a                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    function pointer. We just put an empty definition of the                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    function in the library and if the user specifies their own             C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    version it will be found first and the library definition will          C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    be ignored. We do it this way because it's generally better to          C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    spend 2 bytes of program memory for the RETURN instruction of           C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    the empty function than three bytes of data memory for the              C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    function pointer. */                                                    C:\MCC18\src\TRADIT~1\stdclib\putc.c
0045da   0efd     MOVLW     0xfd                 return _user_putc (c);                                                     C:\MCC18\src\TRADIT~1\stdclib\putc.c
0045dc   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0045de   ffe6                                                                                                               
0045e0   ecf2     CALL      0xfe4,0x0                                                                                       
0045e2   f007                                                                                                               
0045e4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                               }                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
0045e6   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\MCC18\src\TRADIT~1\stdclib\putc.c
0045e8   cfe5     MOVFF     0xfe5,0xfda                                                                                     
0045ea   ffda                                                                                                               
0045ec   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0045ee   ffd9                                                                                                               
0045f0   0012     RETURN    0x0                                                                                             
                                             include <P18CXXX.INC>                                                          C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\p18F2455.INC
                                                                                                                            C:\MCC18\MPASM\p18F2455.INC
                                           ;==========================================================================      C:\MCC18\MPASM\p18F2455.INC
                                           ;  MPASM PIC18F2455 processor include                                            C:\MCC18\MPASM\p18F2455.INC
                                           ;                                                                                C:\MCC18\MPASM\p18F2455.INC
                                           ;  (c) Copyright 1999-2007 Microchip Technology, All rights reserved             C:\MCC18\MPASM\p18F2455.INC
                                           ;==========================================================================      C:\MCC18\MPASM\p18F2455.INC
                                                                                                                            C:\MCC18\MPASM\p18F2455.INC
                                                   LIST                                                                     C:\MCC18\MPASM\p18F2455.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1220                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1230                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1231                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1320                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1330                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1331                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                             GLOBAL _usart_putc                                                             C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           STDIO CODE                                                                       C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           _usart_putc                                                                      C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0047d2   0eff     MOVLW     0xff                         MOVLW     0xff                                                     C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0047d4   50e3     MOVF      0xe3,0x0,0x0                 MOVF      PLUSW1, w                                                C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0047d6   baac     BTFSC     0xac,0x5,0x0                 BTFSC     TXSTA, 0x5                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0047d8   d004     BRA       0x47e2                       BRA       loop                                                     C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0047da   6aaf     CLRF      0xaf,0x0                     CLRF      SPBRG                                                    C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0047dc   8eab     BSF       0xab,0x7,0x0                 BSF       RCSTA, 0x7                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0047de   8aac     BSF       0xac,0x5,0x0                 BSF       TXSTA, 0x5                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __USE_PORTB                                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                         BCF       TRISB, 0x1                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #else                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0047e0   9c94     BCF       0x94,0x6,0x0                 BCF       TRISC, 0x6                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0047e2   a2ac     BTFSS     0xac,0x1,0x0   loop:         BTFSS     TXSTA, 0x1                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0047e4   d7fe     BRA       0x47e2                       BRA       loop                                                     C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0047e6   6ead     MOVWF     0xad,0x0                     MOVWF     TXREG                                                    C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0047e8   6ef3     MOVWF     0xf3,0x0                     MOVWF     PRODL                                                    C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0047ea   6af4     CLRF      0xf4,0x0                     CLRF      PRODL + 1                                                C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0047ec   0012     RETURN    0x0                          RETURN                                                             C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                               END                                                                          C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           ; $Id: strlen.asm,v 1.1 2003/12/09 22:53:20 GrosbaJ Exp $                        C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; @name strlen                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;``The {\bf strlen} function computes the length of the string pointed           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;to by {\bf s}.''                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;Stack usage: 2 bytes. Re-entrant.                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;@param s pointer to the string                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;@return ``The {\bf strlen} function returns the number of characters            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;that precede the terminating null character.''                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; size_t strlen (const char *s);                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           STRING CODE                                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           strlen                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             global strlen                                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; Proceedure: Use FSR0 for 's' and use PROD for 'n'.                             C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Load FSR0 by copying 's' off stack into FSR0.                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004662   0efe     MOVLW     0xfe                     Stk2CpyToReg -2,FSR0L                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004664   cfe3     MOVFF     0xfe3,0xfe9                                                                                     
004666   ffe9                                                                                                               
004668   0eff     MOVLW     0xff                                                                                            
00466a   cfe3     MOVFF     0xfe3,0xfea                                                                                     
00466c   ffea                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Clear PROD                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
00466e   6af3     CLRF      0xf3,0x0                 clrf      PRODL,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004670   6af4     CLRF      0xf4,0x0                 clrf      PRODH,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Test for '\0'                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004672   52ee     MOVF      0xee,0x1,0x0             movf      POSTINC0,F,ACCESS   ; set Z flag                             C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004674   e003     BZ        0x467c                   bz        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Count it                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004676   4af3     INFSNZ    0xf3,0x1,0x0   	  infsnz    PRODL, F, ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004678   2af4     INCF      0xf4,0x1,0x0   	  incf      PRODH, F, ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
00467a   d7fb     BRA       0x4672                   bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           jEnd                                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
00467c   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; $Id: slenpgm.asm,v 1.4 2006/02/04 00:06:53 nairnj Exp $                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; @name strlenpgm                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;``The {\bf strlenpgm} function computes the length of the string pointed        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;to by {\bf s}.''                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;@param s pointer to the string                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;@return ``The {\bf strlenpgm} function returns the number of characters         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;that precede the terminating null character.''                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; sizerom_t strlenpgm (const rom char *s);                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             extern __AARGB2                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           STRING CODE                                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           strlenpgm                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             global strlenpgm                                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #ifdef __SMALL__                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                            messg "strlenpgm - SMALL"                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; Procedure: Use TBLPTR for 's' and create 'n' on stack.  Return 'n' in          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; __AARGB0:__AARGB1:__AARGB2.                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Load TBLPTR by POPing 's' off stack.                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk2PopToReg TBLPTRL                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTDEC1,ACCESS    ; provide extra byte below stack          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Push 3 bytes of 0 onto stack. This is initial value of 'n'.                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Test for '\0'                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     tblrd     *+                  ; read & increment                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     movf      TABLAT, F, ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     bz        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Count it                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk3Inc   -3                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jEnd                                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk3CpyToReg -3, __AARGB2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #else                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #ifdef __LARGE__                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                            messg "strlenpgm - LARGE"                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; Procedure: Use TBLPTR for 's' and create 'n' on stack.  Return 'n' in          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; __AARGB0:__AARGB1:__AARGB2.                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Load TBLPTR by POPing 's' off stack.                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
00467e   0eff     MOVLW     0xff                     Stk3PopToReg TBLPTRL                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
004680   cfe3     MOVFF     0xfe3,0xff8                                                                                     
004682   fff8                                                                                                               
004684   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004686   0eff     MOVLW     0xff                                                                                            
004688   cfe3     MOVFF     0xfe3,0xff7                                                                                     
00468a   fff7                                                                                                               
00468c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00468e   0eff     MOVLW     0xff                                                                                            
004690   cfe3     MOVFF     0xfe3,0xff6                                                                                     
004692   fff6                                                                                                               
004694   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Push 3 bytes of 0 onto stack. This is initial value of 'n'.                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
004696   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
004698   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
00469a   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Test for '\0'                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
00469c   0009     TBLRDPOSTINC                       tblrd     *+                  ; read & increment                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
00469e   52f5     MOVF      0xf5,0x1,0x0             movf      TABLAT, F, ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0046a0   e009     BZ        0x46b4                   bz        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Count it                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0046a2   0efd     MOVLW     0xfd                     Stk3Inc   -3                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0046a4   2ae3     INCF      0xe3,0x1,0x0                                                                                    
0046a6   e105     BNZ       0x46b2                                                                                          
0046a8   0efe     MOVLW     0xfe                                                                                            
0046aa   2ae3     INCF      0xe3,0x1,0x0                                                                                    
0046ac   e102     BNZ       0x46b2                                                                                          
0046ae   0eff     MOVLW     0xff                                                                                            
0046b0   2ae3     INCF      0xe3,0x1,0x0                                                                                    
0046b2   d7f4     BRA       0x469c                   bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jEnd                                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0046b4   0efd     MOVLW     0xfd                     Stk3CpyToReg -3, __AARGB2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0046b6   cfe3     MOVFF     0xfe3,0x1d                                                                                      
0046b8   f01d                                                                                                               
0046ba   0efe     MOVLW     0xfe                                                                                            
0046bc   cfe3     MOVFF     0xfe3,0x1e                                                                                      
0046be   f01e                                                                                                               
0046c0   0eff     MOVLW     0xff                                                                                            
0046c2   cfe3     MOVFF     0xfe3,0x1f                                                                                      
0046c4   f01f                                                                                                               
0046c6   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #else                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                            error "No Model Specified"                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
