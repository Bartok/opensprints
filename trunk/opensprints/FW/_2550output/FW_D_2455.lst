MP2COD 4.12, COFF to COD File Converter
Copyright (c) 2007 Microchip Technology Inc.
Listing File Generated: Tue Aug 28 19:20:37 2007


Address  Value    Disassembly              Source                                                                           File
-------  -------  -----------------------  -------------------------------------------------------------------------------  -----
                                           /*********************************************************************           E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            *                Microchip USB C18 Firmware Version 1.0                         E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            *********************************************************************           E:\iroFW\main.c
                                            * FileName:        main.c                                                       E:\iroFW\main.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iroFW\main.c
                                            * Processor:       PIC18                                                        E:\iroFW\main.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iroFW\main.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Software License Agreement                                                    E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iroFW\main.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iroFW\main.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iroFW\main.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iroFW\main.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iroFW\main.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iroFW\main.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iroFW\main.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iroFW\main.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iroFW\main.c
                                            * license.                                                                      E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iroFW\main.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iroFW\main.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iroFW\main.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iroFW\main.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iroFW\main.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Author               Date        Comment                                      E:\iroFW\main.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           E:\iroFW\main.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    E:\iroFW\main.c
                                            ********************************************************************/           E:\iroFW\main.c
                                                                                                                            E:\iroFW\main.c
                                           /** I N C L U D E S **********************************************************/  E:\iroFW\main.c
                                           #include <p18cxxx.h>                                                             E:\iroFW\main.c
                                           #include "system\typedefs.h"                        // Required                  E:\iroFW\main.c
                                           #include "system\usb\usb.h"                         // Required                  E:\iroFW\main.c
                                           #include "io_cfg.h"                                 // Required                  E:\iroFW\main.c
                                                                                                                            E:\iroFW\main.c
                                           #include "system\usb\usb_compile_time_validation.h" // Optional                  E:\iroFW\main.c
                                           #include "user\user.h"                              // Modifiable                E:\iroFW\main.c
                                                                                                                            E:\iroFW\main.c
                                           /** V A R I A B L E S ********************************************************/  E:\iroFW\main.c
                                           #pragma udata                                                                    E:\iroFW\main.c
                                                                                                                            E:\iroFW\main.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  E:\iroFW\main.c
                                           static void InitializeSystem(void);                                              E:\iroFW\main.c
                                           void USBTasks(void);                                                             E:\iroFW\main.c
                                                                                                                            E:\iroFW\main.c
                                           #pragma code high_vector_section = 0x000808                                      E:\iroFW\main.c
                                           void high_vector (void)                                                          E:\iroFW\main.c
                                           {                                                                                E:\iroFW\main.c
000808   efbb     GOTO      0xb76              _asm goto high_ISR _endasm                                                   E:\iroFW\main.c
00080a   f005                                                                                                               
00080c   0012     RETURN    0x0            }                                                                                E:\iroFW\main.c
                                           #pragma code low_vector_section = 0x000818                                       E:\iroFW\main.c
                                           void low_vector (void)                                                           E:\iroFW\main.c
                                           {                                                                                E:\iroFW\main.c
000818   ef22     GOTO      0x844              _asm goto low_ISR _endasm                                                    E:\iroFW\main.c
00081a   f004                                                                                                               
00081c   0012     RETURN    0x0            }                                                                                E:\iroFW\main.c
                                           #pragma code                                                                     E:\iroFW\main.c
                                                                                                                            E:\iroFW\main.c
                                           /** D E C L A R A T I O N S **************************************************/  E:\iroFW\main.c
                                           #pragma code                                                                     E:\iroFW\main.c
                                           /******************************************************************************  E:\iroFW\main.c
                                            * Function:        void main(void)                                              E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * PreCondition:    None                                                         E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Input:           None                                                         E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Output:          None                                                         E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Side Effects:    None                                                         E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Overview:        Main program entry point.                                    E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Note:            None                                                         E:\iroFW\main.c
                                            *****************************************************************************/  E:\iroFW\main.c
                                           void main(void)                                                                  E:\iroFW\main.c
                                           {                                                                                E:\iroFW\main.c
0046da   d805     RCALL     0x46e6             InitializeSystem();                                                          E:\iroFW\main.c
0046e2   d7fc     BRA       0x46dc         	while(1)                                                                        E:\iroFW\main.c
                                               {                                                                            E:\iroFW\main.c
0046dc   d811     RCALL     0x4700                 USBTasks();         // USB Tasks                                         E:\iroFW\main.c
0046de   ec8f     CALL      0xd1e,0x0              ProcessIO();        // See user.c and user.h                             E:\iroFW\main.c
0046e0   f006                                                                                                               
                                               }//end while                                                                 E:\iroFW\main.c
0046e4   0012     RETURN    0x0            }//end main                                                                      E:\iroFW\main.c
                                                                                                                            E:\iroFW\main.c
                                           /******************************************************************************  E:\iroFW\main.c
                                            * Function:        static void InitializeSystem(void)                           E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * PreCondition:    None                                                         E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Input:           None                                                         E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Output:          None                                                         E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Side Effects:    None                                                         E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Overview:        InitializeSystem is a centralize initialization routine.     E:\iroFW\main.c
                                            *                  All required USB initialization routines are called from     E:\iroFW\main.c
                                            *                  here.                                                        E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            *                  User application initialization routine should also be       E:\iroFW\main.c
                                            *                  called from here.                                            E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Note:            None                                                         E:\iroFW\main.c
                                            *****************************************************************************/  E:\iroFW\main.c
                                           static void InitializeSystem(void)                                               E:\iroFW\main.c
                                           {                                                                                E:\iroFW\main.c
0046e6   0e0f     MOVLW     0xf                ADCON1 |= 0x0F;                 // Default all pins to digital               E:\iroFW\main.c
0046e8   12c1     IORWF     0xc1,0x1,0x0                                                                                    
                                                                                                                            E:\iroFW\main.c
0046ea   0e14     MOVLW     0x14               mInitializeUSBDriver();         // See usbdrv.h                              E:\iroFW\main.c
0046ec   6e6f     MOVWF     0x6f,0x0                                                                                        
0046ee   0101     MOVLB     0x1                                                                                             
0046f0   6be9     CLRF      0xe9,0x1                                                                                        
0046f2   0101     MOVLB     0x1                                                                                             
0046f4   6bea     CLRF      0xea,0x1                                                                                        
0046f6   0101     MOVLB     0x1                                                                                             
0046f8   6beb     CLRF      0xeb,0x1                                                                                        
                                                                                                                            E:\iroFW\main.c
0046fa   ecc4     CALL      0xb88,0x0          UserInit();                     // See user.c & .h                           E:\iroFW\main.c
0046fc   f005                                                                                                               
                                                                                                                            E:\iroFW\main.c
0046fe   0012     RETURN    0x0            }//end InitializeSystem                                                          E:\iroFW\main.c
                                                                                                                            E:\iroFW\main.c
                                           /******************************************************************************  E:\iroFW\main.c
                                            * Function:        void USBTasks(void)                                          E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * PreCondition:    InitializeSystem has been called.                            E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Input:           None                                                         E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Output:          None                                                         E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Side Effects:    None                                                         E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Overview:        Service loop for USB tasks.                                  E:\iroFW\main.c
                                            *                                                                               E:\iroFW\main.c
                                            * Note:            None                                                         E:\iroFW\main.c
                                            *****************************************************************************/  E:\iroFW\main.c
                                           void USBTasks(void)                                                              E:\iroFW\main.c
                                           {                                                                                E:\iroFW\main.c
                                               /*                                                                           E:\iroFW\main.c
                                                * Servicing Hardware                                                        E:\iroFW\main.c
                                                */                                                                          E:\iroFW\main.c
004700   ec75     CALL      0x3eea,0x0         USBCheckBusStatus();                    // Must use polling method           E:\iroFW\main.c
004702   f01f                                                                                                               
004704   be6f     BTFSC     0x6f,0x7,0x0       if(UCFGbits.UTEYE!=1)                                                        E:\iroFW\main.c
004706   d002     BRA       0x470c                                                                                          
004708   ec95     CALL      0x3f2a,0x0             USBDriverService();                 // Interrupt or polling method       E:\iroFW\main.c
00470a   f01f                                                                                                               
                                                                                                                            E:\iroFW\main.c
                                               #if defined(USB_USE_CDC)                                                     E:\iroFW\main.c
00470c   ecbf     CALL      0x377e,0x0         CDCTxService();                                                              E:\iroFW\main.c
00470e   f01b                                                                                                               
                                               #endif                                                                       E:\iroFW\main.c
                                                                                                                            E:\iroFW\main.c
004710   0012     RETURN    0x0            }// end USBTasks                                                                 E:\iroFW\main.c
                                                                                                                            E:\iroFW\main.c
                                           /** EOF main.c ***************************************************************/  E:\iroFW\main.c
                                           /*********************************************************************           E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            *                Microchip USB C18 Firmware Version 1.0                         E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            *********************************************************************           E:\iroFW\system\usb\usbmmap.c
                                            * FileName:        usbmmap.c                                                    E:\iroFW\system\usb\usbmmap.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iroFW\system\usb\usbmmap.c
                                            * Processor:       PIC18                                                        E:\iroFW\system\usb\usbmmap.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iroFW\system\usb\usbmmap.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * Software License Agreement                                                    E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iroFW\system\usb\usbmmap.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iroFW\system\usb\usbmmap.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iroFW\system\usb\usbmmap.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iroFW\system\usb\usbmmap.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iroFW\system\usb\usbmmap.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iroFW\system\usb\usbmmap.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iroFW\system\usb\usbmmap.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iroFW\system\usb\usbmmap.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iroFW\system\usb\usbmmap.c
                                            * license.                                                                      E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iroFW\system\usb\usbmmap.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iroFW\system\usb\usbmmap.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iroFW\system\usb\usbmmap.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iroFW\system\usb\usbmmap.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iroFW\system\usb\usbmmap.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * Author               Date        Comment                                      E:\iroFW\system\usb\usbmmap.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           E:\iroFW\system\usb\usbmmap.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    E:\iroFW\system\usb\usbmmap.c
                                            ********************************************************************/           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbmmap.c
                                            * -usbmmap.c-                                                                   E:\iroFW\system\usb\usbmmap.c
                                            * USB Memory Map                                                                E:\iroFW\system\usb\usbmmap.c
                                            * This file is the USB memory manager; it serves as a compile-time memory       E:\iroFW\system\usb\usbmmap.c
                                            * allocator for the USB endpoints. It uses the compile time options passed      E:\iroFW\system\usb\usbmmap.c
                                            * from usbcfg.h to instantiate endpoints and endpoint buffer.                   E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * Each endpoint requires to have a set of Buffer Descriptor registers(BDT).     E:\iroFW\system\usb\usbmmap.c
                                            * A BDT is 4-byte long and has a specific RAM location for each endpoint.       E:\iroFW\system\usb\usbmmap.c
                                            * The BDT for endpoint 0 out is located at address 0x400 to 0x403.              E:\iroFW\system\usb\usbmmap.c
                                            * The BDT for endpoint 0 in is located at address 0x404 to 0x407.               E:\iroFW\system\usb\usbmmap.c
                                            * The BDT for endpoint 1 out is located at address 0x408 to 0x40B.              E:\iroFW\system\usb\usbmmap.c
                                            * and so on... The above allocation assumes the Ping-Pong Buffer Mode 0 is      E:\iroFW\system\usb\usbmmap.c
                                            * used. These locations are already hard-wired in the silicon. The point        E:\iroFW\system\usb\usbmmap.c
                                            * of doing instantiation, i.e. volatile far BDT ep0Bo;, is to provide the       E:\iroFW\system\usb\usbmmap.c
                                            * C compiler a way to address each variable directly. This is very important    E:\iroFW\system\usb\usbmmap.c
                                            * because when a register can be accessed directly, it saves execution time     E:\iroFW\system\usb\usbmmap.c
                                            * and reduces program size.                                                     E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * Endpoints are defined using the endpoint number and the direction             E:\iroFW\system\usb\usbmmap.c
                                            * of transfer. For simplicity, usbmmap.c only uses the endpoint number          E:\iroFW\system\usb\usbmmap.c
                                            * in the BDT register allocation scheme. This means if the usbcfg.h states      E:\iroFW\system\usb\usbmmap.c
                                            * that the MAX_EP_NUMBER is number 1, then four BDTs will be                    E:\iroFW\system\usb\usbmmap.c
                                            * instantiated: one each for endpoint0 in and endpoint0 out, which must         E:\iroFW\system\usb\usbmmap.c
                                            * always be instantiated for control transfer by default, and one each sets     E:\iroFW\system\usb\usbmmap.c
                                            * for endpoint1 in and endpoint1 out. The naming convention for instantiating   E:\iroFW\system\usb\usbmmap.c
                                            * BDT is                                                                        E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * ep<#>B<d>                                                                     E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * where # is the endpoint number, and d is the direction of                     E:\iroFW\system\usb\usbmmap.c
                                            * transfer, which could be either <i> or <o>.                                   E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * The USB memory manager uses MAX_EP_NUMBER, as defined in usbcfg.h, to define  E:\iroFW\system\usb\usbmmap.c
                                            * the endpoints to be instantiated. This represents the highest endpoint        E:\iroFW\system\usb\usbmmap.c
                                            * number to be allocated, not how many endpoints are used. Since the BDTs for   E:\iroFW\system\usb\usbmmap.c
                                            * endpoints have hardware-assigned addresses in Bank 4, setting this value too  E:\iroFW\system\usb\usbmmap.c
                                            * high may lead to inefficient use of data RAM. For example, if an application  E:\iroFW\system\usb\usbmmap.c
                                            * uses only endpoints EP0 and EP4, then the MAX_EP_NUMBER is 4, and not 2.      E:\iroFW\system\usb\usbmmap.c
                                            * The in-between endpoint BDTs in this example (EP1, EP2, and EP3) go unused,   E:\iroFW\system\usb\usbmmap.c
                                            * and the 24 bytes of memory associated with them are wasted. It does not make  E:\iroFW\system\usb\usbmmap.c
                                            * much sense to skip endpoints, but the final decision lies with the user.      E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * The next step is to assign the instantiated BDTs to different                 E:\iroFW\system\usb\usbmmap.c
                                            * USB functions. The firmware framework fundamentally assumes that every USB    E:\iroFW\system\usb\usbmmap.c
                                            * function should know which endpoint it is using, i.e., the default control    E:\iroFW\system\usb\usbmmap.c
                                            * transfer should know that it is using endpoint 0 in and endpoint 0 out.       E:\iroFW\system\usb\usbmmap.c
                                            * A HID class can choose which endpoint it wants to use, but once chosen, it    E:\iroFW\system\usb\usbmmap.c
                                            * should always know the number of the endpoint.                                E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * The assignment of endpoints to USB functions is managed centrally             E:\iroFW\system\usb\usbmmap.c
                                            * in usbcfg.h. This helps prevent the mistake of having more                    E:\iroFW\system\usb\usbmmap.c
                                            * than one USB function using the same endpoint. The "Endpoint Allocation"      E:\iroFW\system\usb\usbmmap.c
                                            * section in usbcfg.h provides examples for how to map USB endpoints to USB     E:\iroFW\system\usb\usbmmap.c
                                            * functions.                                                                    E:\iroFW\system\usb\usbmmap.c
                                            * Quite a few things can be mapped in that section. There is no                 E:\iroFW\system\usb\usbmmap.c
                                            * one correct way to do the mapping and the user has the choice to              E:\iroFW\system\usb\usbmmap.c
                                            * choose a method that is most suitable to the application.                     E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * Typically, however, a user will want to map the following for a given         E:\iroFW\system\usb\usbmmap.c
                                            * USB interface function:                                                       E:\iroFW\system\usb\usbmmap.c
                                            * 1. The USB interface ID                                                       E:\iroFW\system\usb\usbmmap.c
                                            * 2. The endpoint control registers (UEPn)                                      E:\iroFW\system\usb\usbmmap.c
                                            * 3. The BDT registers (ep<#>B<d>)                                              E:\iroFW\system\usb\usbmmap.c
                                            * 4. The endpoint size                                                          E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * Example: Assume a USB device class "foo", which uses one out endpoint         E:\iroFW\system\usb\usbmmap.c
                                            *          of size 64-byte and one in endpoint of size 64-byte, then:           E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * #define FOO_INTF_ID          0x00                                             E:\iroFW\system\usb\usbmmap.c
                                            * #define FOO_UEP              UEP1                                             E:\iroFW\system\usb\usbmmap.c
                                            * #define FOO_BD_OUT           ep1Bo                                            E:\iroFW\system\usb\usbmmap.c
                                            * #define FOO_BD_IN            ep1Bi                                            E:\iroFW\system\usb\usbmmap.c
                                            * #define FOO_EP_SIZE          64                                               E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * The mapping above has chosen class "foo" to use endpoint 1.                   E:\iroFW\system\usb\usbmmap.c
                                            * The names are arbitrary and can be anything other than FOO_??????.            E:\iroFW\system\usb\usbmmap.c
                                            * For abstraction, the code for class "foo" should use the abstract             E:\iroFW\system\usb\usbmmap.c
                                            * definitions of FOO_BD_OUT,FOO_BD_IN, and not ep1Bo or ep1Bi.                  E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * Note that the endpoint size defined in the usbcfg.h file is again             E:\iroFW\system\usb\usbmmap.c
                                            * used in the usbmmap.c file. This shows that the relationship between          E:\iroFW\system\usb\usbmmap.c
                                            * the two files are tightly related.                                            E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * The endpoint buffer for each USB function must be located in the              E:\iroFW\system\usb\usbmmap.c
                                            * dual-port RAM area and has to come after all the BDTs have been               E:\iroFW\system\usb\usbmmap.c
                                            * instantiated. An example declaration is:                                      E:\iroFW\system\usb\usbmmap.c
                                            * volatile far unsigned char[FOO_EP_SIZE] data;                                 E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * The 'volatile' keyword tells the compiler not to perform any code             E:\iroFW\system\usb\usbmmap.c
                                            * optimization on this variable because its content could be modified           E:\iroFW\system\usb\usbmmap.c
                                            * by the hardware. The 'far' keyword tells the compiler that this variable      E:\iroFW\system\usb\usbmmap.c
                                            * is not located in the Access RAM area (0x000 - 0x05F).                        E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * For the variable to be globally accessible by other files, it should be       E:\iroFW\system\usb\usbmmap.c
                                            * declared in the header file usbmmap.h as an extern definition, such as        E:\iroFW\system\usb\usbmmap.c
                                            * extern volatile far unsigned char[FOO_EP_SIZE] data;                          E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * Conclusion:                                                                   E:\iroFW\system\usb\usbmmap.c
                                            * In a short summary, the dependencies between usbcfg and usbmmap can           E:\iroFW\system\usb\usbmmap.c
                                            * be shown as:                                                                  E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * usbcfg[MAX_EP_NUMBER] -> usbmmap                                              E:\iroFW\system\usb\usbmmap.c
                                            * usbmmap[ep<#>B<d>] -> usbcfg                                                  E:\iroFW\system\usb\usbmmap.c
                                            * usbcfg[EP size] -> usbmmap                                                    E:\iroFW\system\usb\usbmmap.c
                                            * usbcfg[abstract ep definitions] -> usb9/hid/cdc/etc class code                E:\iroFW\system\usb\usbmmap.c
                                            * usbmmap[endpoint buffer variable] -> usb9/hid/cdc/etc class code              E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * Data mapping provides a means for direct addressing of BDT and endpoint       E:\iroFW\system\usb\usbmmap.c
                                            * buffer. This means less usage of pointers, which equates to a faster and      E:\iroFW\system\usb\usbmmap.c
                                            * smaller program code.                                                         E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           /** I N C L U D E S **********************************************************/  E:\iroFW\system\usb\usbmmap.c
                                           #include "system\typedefs.h"                                                     E:\iroFW\system\usb\usbmmap.c
                                           #include "system\usb\usb.h"                                                      E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           /** U S B  G L O B A L  V A R I A B L E S ************************************/  E:\iroFW\system\usb\usbmmap.c
                                           #pragma udata                                                                    E:\iroFW\system\usb\usbmmap.c
                                           byte usb_device_state;          // Device States: DETACHED, ATTACHED, ...        E:\iroFW\system\usb\usbmmap.c
                                           USB_DEVICE_STATUS usb_stat;     // Global USB flags                              E:\iroFW\system\usb\usbmmap.c
                                           byte usb_active_cfg;            // Value of current configuration                E:\iroFW\system\usb\usbmmap.c
                                           byte usb_alt_intf[MAX_NUM_INT]; // Array to keep track of the current alternate  E:\iroFW\system\usb\usbmmap.c
                                                                           // setting for each interface ID                 E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           /** U S B  F I X E D  L O C A T I O N  V A R I A B L E S *********************/  E:\iroFW\system\usb\usbmmap.c
                                           #pragma udata usbram4=0x400     //See Linker Script,usb4:0x400-0x4FF(256-byte)   E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbmmap.c
                                            * Section A: Buffer Descriptor Table                                            E:\iroFW\system\usb\usbmmap.c
                                            * - 0x400 - 0x4FF(max)                                                          E:\iroFW\system\usb\usbmmap.c
                                            * - MAX_EP_NUMBER is defined in autofiles\usbcfg.h                              E:\iroFW\system\usb\usbmmap.c
                                            * - BDT data type is defined in system\usb\usbmmap.h                            E:\iroFW\system\usb\usbmmap.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(0 <= MAX_EP_NUMBER)                                                          E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep0Bo;         //Endpoint #0 BD Out                             E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep0Bi;         //Endpoint #0 BD In                              E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(1 <= MAX_EP_NUMBER)                                                          E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep1Bo;         //Endpoint #1 BD Out                             E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep1Bi;         //Endpoint #1 BD In                              E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(2 <= MAX_EP_NUMBER)                                                          E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep2Bo;         //Endpoint #2 BD Out                             E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep2Bi;         //Endpoint #2 BD In                              E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(3 <= MAX_EP_NUMBER)                                                          E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep3Bo;         //Endpoint #3 BD Out                             E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep3Bi;         //Endpoint #3 BD In                              E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(4 <= MAX_EP_NUMBER)                                                          E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep4Bo;         //Endpoint #4 BD Out                             E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep4Bi;         //Endpoint #4 BD In                              E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(5 <= MAX_EP_NUMBER)                                                          E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep5Bo;         //Endpoint #5 BD Out                             E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep5Bi;         //Endpoint #5 BD In                              E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(6 <= MAX_EP_NUMBER)                                                          E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep6Bo;         //Endpoint #6 BD Out                             E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep6Bi;         //Endpoint #6 BD In                              E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(7 <= MAX_EP_NUMBER)                                                          E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep7Bo;         //Endpoint #7 BD Out                             E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep7Bi;         //Endpoint #7 BD In                              E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(8 <= MAX_EP_NUMBER)                                                          E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep8Bo;         //Endpoint #8 BD Out                             E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep8Bi;         //Endpoint #8 BD In                              E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(9 <= MAX_EP_NUMBER)                                                          E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep9Bo;         //Endpoint #9 BD Out                             E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep9Bi;         //Endpoint #9 BD In                              E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(10 <= MAX_EP_NUMBER)                                                         E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep10Bo;        //Endpoint #10 BD Out                            E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep10Bi;        //Endpoint #10 BD In                             E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(11 <= MAX_EP_NUMBER)                                                         E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep11Bo;        //Endpoint #11 BD Out                            E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep11Bi;        //Endpoint #11 BD In                             E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(12 <= MAX_EP_NUMBER)                                                         E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep12Bo;        //Endpoint #12 BD Out                            E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep12Bi;        //Endpoint #12 BD In                             E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(13 <= MAX_EP_NUMBER)                                                         E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep13Bo;        //Endpoint #13 BD Out                            E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep13Bi;        //Endpoint #13 BD In                             E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(14 <= MAX_EP_NUMBER)                                                         E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep14Bo;        //Endpoint #14 BD Out                            E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep14Bi;        //Endpoint #14 BD In                             E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           #if(15 <= MAX_EP_NUMBER)                                                         E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep15Bo;        //Endpoint #15 BD Out                            E:\iroFW\system\usb\usbmmap.c
                                           volatile far BDT ep15Bi;        //Endpoint #15 BD In                             E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbmmap.c
                                            * Section B: EP0 Buffer Space                                                   E:\iroFW\system\usb\usbmmap.c
                                            ******************************************************************************  E:\iroFW\system\usb\usbmmap.c
                                            * - Two buffer areas are defined:                                               E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            *   A. CTRL_TRF_SETUP                                                           E:\iroFW\system\usb\usbmmap.c
                                            *      - Size = EP0_BUFF_SIZE as defined in autofiles\usbcfg.h                  E:\iroFW\system\usb\usbmmap.c
                                            *      - Detailed data structure allows direct adddressing of bits and bytes.   E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            *   B. CTRL_TRF_DATA                                                            E:\iroFW\system\usb\usbmmap.c
                                            *      - Size = EP0_BUFF_SIZE as defined in autofiles\usbcfg.h                  E:\iroFW\system\usb\usbmmap.c
                                            *      - Data structure allows direct adddressing of the first 8 bytes.         E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            * - Both data types are defined in system\usb\usbdefs\usbdefs_ep0_buff.h        E:\iroFW\system\usb\usbmmap.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbmmap.c
                                           volatile far CTRL_TRF_SETUP SetupPkt;                                            E:\iroFW\system\usb\usbmmap.c
                                           volatile far CTRL_TRF_DATA CtrlTrfData;                                          E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbmmap.c
                                            * Section C: CDC Buffer                                                         E:\iroFW\system\usb\usbmmap.c
                                            ******************************************************************************  E:\iroFW\system\usb\usbmmap.c
                                            *                                                                               E:\iroFW\system\usb\usbmmap.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbmmap.c
                                           #pragma udata usbram5a=0x500    //See Linker Script,usb5:0x500-...               E:\iroFW\system\usb\usbmmap.c
                                           #if defined(USB_USE_CDC)                                                         E:\iroFW\system\usb\usbmmap.c
                                           volatile far unsigned char cdc_notice[CDC_INT_EP_SIZE];                          E:\iroFW\system\usb\usbmmap.c
                                           volatile far unsigned char cdc_data_rx[CDC_BULK_OUT_EP_SIZE];                    E:\iroFW\system\usb\usbmmap.c
                                           volatile far unsigned char cdc_data_tx[CDC_BULK_IN_EP_SIZE];                     E:\iroFW\system\usb\usbmmap.c
                                           #endif                                                                           E:\iroFW\system\usb\usbmmap.c
                                           #pragma udata                                                                    E:\iroFW\system\usb\usbmmap.c
                                                                                                                            E:\iroFW\system\usb\usbmmap.c
                                           /** EOF usbmmap.c ************************************************************/  E:\iroFW\system\usb\usbmmap.c
                                           /*********************************************************************           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                Microchip USB C18 Firmware Version 1.0                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *********************************************************************           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * FileName:        usbdrv.c                                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Processor:       PIC18                                                        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Software License Agreement                                                    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * license.                                                                      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Author               Date        Comment                                      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            ********************************************************************/           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /** I N C L U D E S **********************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           #include <p18cxxx.h>                                                             E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           #include "system\typedefs.h"                                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           #include "system\usb\usb.h"                                                      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           #include "io_cfg.h"             // Required for USBCheckBusStatus()              E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /** V A R I A B L E S ********************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           #pragma udata                                                                    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleEnable(void);                                                      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleDisable(void);                                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBSuspend(void);                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBWakeFromSuspend(void);                                                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBProtocolResetHandler(void);                                              E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USB_SOF_Handler(void);                                                      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBStallHandler(void);                                                      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBErrorHandler(void);                                                      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /** D E C L A R A T I O N S **************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           #pragma code                                                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBCheckBusStatus(void)                                 E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine enables/disables the USB module by monitoring   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  the USB power signal.                                        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBCheckBusStatus(void)                                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /**************************************************************************  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * Bus Attachment & Detachment Detection                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * usb_bus_sense is an i/o pin defined in io_cfg.h                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                *************************************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               #define USB_BUS_ATTACHED    1                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               #define USB_BUS_DETACHED    0                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               if(usb_bus_sense == USB_BUS_ATTACHED)       // Is USB bus attached?          E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               {                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
003eea   a66d     BTFSS     0x6d,0x3,0x0           if(UCONbits.USBEN == 0)                 // Is the module off?            E:\iroFW\system\usb\usbdrv\usbdrv.c
003eec   d810     RCALL     0x3f0e                     USBModuleEnable();                  // Is off, enable it             E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               }                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
003eee   d002     BRA       0x3ef4             else                                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               {                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
003ef0   b66d     BTFSC     0x6d,0x3,0x0           if(UCONbits.USBEN == 1)                 // Is the module on?             E:\iroFW\system\usb\usbdrv\usbdrv.c
003ef2   d814     RCALL     0x3f1c                     USBModuleDisable();                 // Is on, disable it             E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               }//end if(usb_bus_sense...)                                                  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * After enabling the USB module, it takes some time for the voltage         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * on the D+ or D- line to rise high enough to get out of the SE0 condition. E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * The USB Reset interrupt should not be unmasked until the SE0 condition is E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * cleared. This helps preventing the firmware from misinterpreting this     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * unique event as a USB bus reset from the USB host.                        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003ef4   0101     MOVLB     0x1                if(usb_device_state == ATTACHED_STATE)                                       E:\iroFW\system\usb\usbdrv\usbdrv.c
003ef6   05e9     DECF      0xe9,0x0,0x1                                                                                    
003ef8   e109     BNZ       0x3f0c                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
003efa   ba6d     BTFSC     0x6d,0x5,0x0           if(!UCONbits.SE0)                                                        E:\iroFW\system\usb\usbdrv\usbdrv.c
003efc   d007     BRA       0x3f0c                                                                                          
                                                   {                                                                        E:\iroFW\system\usb\usbdrv\usbdrv.c
003efe   6a68     CLRF      0x68,0x0                   UIR = 0;                        // Clear all USB interrupts          E:\iroFW\system\usb\usbdrv\usbdrv.c
003f00   6a69     CLRF      0x69,0x0                   UIE = 0;                        // Mask all USB interrupts           E:\iroFW\system\usb\usbdrv\usbdrv.c
003f02   8069     BSF       0x69,0x0,0x0               UIEbits.URSTIE = 1;             // Unmask RESET interrupt            E:\iroFW\system\usb\usbdrv\usbdrv.c
003f04   8869     BSF       0x69,0x4,0x0               UIEbits.IDLEIE = 1;             // Unmask IDLE interrupt             E:\iroFW\system\usb\usbdrv\usbdrv.c
003f06   0101     MOVLB     0x1                        usb_device_state = POWERED_STATE;                                    E:\iroFW\system\usb\usbdrv\usbdrv.c
003f08   0e02     MOVLW     0x2                                                                                             
003f0a   6fe9     MOVWF     0xe9,0x1                                                                                        
                                                   }//end if                           // else wait until SE0 is cleared    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               }//end if(usb_device_state == ATTACHED_STATE)                                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
003f0c   0012     RETURN    0x0            }//end USBCheckBusStatus                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBModuleEnable(void)                                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine enables the USB module.                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  An end designer should never have to call this routine       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  manually. This routine should only be called from            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  USBCheckBusStatus().                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Note:            See USBCheckBusStatus() for more information.                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleEnable(void)                                                       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
003f0e   6a6d     CLRF      0x6d,0x0           UCON = 0;                                                                    E:\iroFW\system\usb\usbdrv\usbdrv.c
003f10   6a69     CLRF      0x69,0x0           UIE = 0;                                // Mask all USB interrupts           E:\iroFW\system\usb\usbdrv\usbdrv.c
003f12   866d     BSF       0x6d,0x3,0x0       UCONbits.USBEN = 1;                     // Enable module & attach to bus     E:\iroFW\system\usb\usbdrv\usbdrv.c
003f14   0101     MOVLB     0x1                usb_device_state = ATTACHED_STATE;      // Defined in usbmmap.c & .h         E:\iroFW\system\usb\usbdrv\usbdrv.c
003f16   0e01     MOVLW     0x1                                                                                             
003f18   6fe9     MOVWF     0xe9,0x1                                                                                        
003f1a   0012     RETURN    0x0            }//end USBModuleEnable                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBModuleDisable(void)                                  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine disables the USB module.                        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  An end designer should never have to call this routine       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  manually. This routine should only be called from            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  USBCheckBusStatus().                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Note:            See USBCheckBusStatus() for more information.                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleDisable(void)                                                      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
003f1c   6a6d     CLRF      0x6d,0x0           UCON = 0;                               // Disable module & detach from bus  E:\iroFW\system\usb\usbdrv\usbdrv.c
003f1e   6a69     CLRF      0x69,0x0           UIE = 0;                                // Mask all USB interrupts           E:\iroFW\system\usb\usbdrv\usbdrv.c
003f20   0101     MOVLB     0x1                usb_device_state = DETACHED_STATE;      // Defined in usbmmap.c & .h         E:\iroFW\system\usb\usbdrv\usbdrv.c
003f22   6be9     CLRF      0xe9,0x1                                                                                        
003f24   0012     RETURN    0x0            }//end USBModuleDisable                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBSoftDetach(void)                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    The device will have to be re-enumerated to function again.  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        USBSoftDetach electrically disconnects the device from       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  the bus. This is done by stop supplying Vusb voltage to      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  pull-up resistor. The pull-down resistors on the host        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  side will pull both differential signal lines low and        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  the host registers the event as a disconnect.                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  Since the USB cable is not physically disconnected, the      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  power supply through the cable can still be sensed by        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  the device. The next time USBCheckBusStatus() function       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  is called, it will reconnect the device back to the bus.     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBSoftDetach(void)                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
003f26   dffa     RCALL     0x3f1c             USBModuleDisable();                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003f28   0012     RETURN    0x0            }//end USBSoftDetach                                                             E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBDriverService(void)                                  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine is the heart of this firmware. It manages       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  all USB interrupts.                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Note:            Device state transitions through the following stages:       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  DETACHED -> ATTACHED -> POWERED -> DEFAULT ->                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  ADDRESS_PENDING -> ADDRESSED -> CONFIGURED -> READY          E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBDriverService(void)                                                      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * Pointless to continue servicing if USB cable is not even attached.        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003f2a   0101     MOVLB     0x1                if(usb_device_state == DETACHED_STATE) return;                               E:\iroFW\system\usb\usbdrv\usbdrv.c
003f2c   51e9     MOVF      0xe9,0x0,0x1                                                                                    
003f2e   e101     BNZ       0x3f32                                                                                          
003f30   d03a     BRA       0x3fa6                                                                                          
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * Task A: Service USB Activity Interrupt                                    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
003f32   5068     MOVF      0x68,0x0,0x0       if(UIRbits.ACTVIF && UIEbits.ACTVIE)    USBWakeFromSuspend();                E:\iroFW\system\usb\usbdrv\usbdrv.c
003f34   0b04     ANDLW     0x4                                                                                             
003f36   e004     BZ        0x3f40                                                                                          
003f38   5069     MOVF      0x69,0x0,0x0                                                                                    
003f3a   0b04     ANDLW     0x4                                                                                             
003f3c   e001     BZ        0x3f40                                                                                          
003f3e   d83c     RCALL     0x3fb8                                                                                          
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * Pointless to continue servicing if the device is in suspend mode.         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003f40   b26d     BTFSC     0x6d,0x1,0x0       if(UCONbits.SUSPND==1) return;                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
003f42   d031     BRA       0x3fa6                                                                                          
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * Task B: Service USB Bus Reset Interrupt.                                  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * When bus reset is received during suspend, ACTVIF will be set first,      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * once the UCONbits.SUSPND is clear, then the URSTIF bit will be asserted.  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * This is why URSTIF is checked after ACTVIF.                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003f44   5068     MOVF      0x68,0x0,0x0       if(UIRbits.URSTIF && UIEbits.URSTIE)    USBProtocolResetHandler();           E:\iroFW\system\usb\usbdrv\usbdrv.c
003f46   0b01     ANDLW     0x1                                                                                             
003f48   e004     BZ        0x3f52                                                                                          
003f4a   5069     MOVF      0x69,0x0,0x0                                                                                    
003f4c   0b01     ANDLW     0x1                                                                                             
003f4e   e001     BZ        0x3f52                                                                                          
003f50   d856     RCALL     0x3ffe                                                                                          
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * Task C: Service other USB interrupts                                      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003f52   5068     MOVF      0x68,0x0,0x0       if(UIRbits.IDLEIF && UIEbits.IDLEIE)    USBSuspend();                        E:\iroFW\system\usb\usbdrv\usbdrv.c
003f54   0b10     ANDLW     0x10                                                                                            
003f56   e004     BZ        0x3f60                                                                                          
003f58   5069     MOVF      0x69,0x0,0x0                                                                                    
003f5a   0b10     ANDLW     0x10                                                                                            
003f5c   e001     BZ        0x3f60                                                                                          
003f5e   d824     RCALL     0x3fa8                                                                                          
003f60   5068     MOVF      0x68,0x0,0x0       if(UIRbits.SOFIF && UIEbits.SOFIE)      USB_SOF_Handler();                   E:\iroFW\system\usb\usbdrv\usbdrv.c
003f62   0b40     ANDLW     0x40                                                                                            
003f64   e004     BZ        0x3f6e                                                                                          
003f66   5069     MOVF      0x69,0x0,0x0                                                                                    
003f68   0b40     ANDLW     0x40                                                                                            
003f6a   e001     BZ        0x3f6e                                                                                          
003f6c   d83d     RCALL     0x3fe8                                                                                          
003f6e   5068     MOVF      0x68,0x0,0x0       if(UIRbits.STALLIF && UIEbits.STALLIE)  USBStallHandler();                   E:\iroFW\system\usb\usbdrv\usbdrv.c
003f70   0b20     ANDLW     0x20                                                                                            
003f72   e004     BZ        0x3f7c                                                                                          
003f74   5069     MOVF      0x69,0x0,0x0                                                                                    
003f76   0b20     ANDLW     0x20                                                                                            
003f78   e001     BZ        0x3f7c                                                                                          
003f7a   d838     RCALL     0x3fec                                                                                          
003f7c   5068     MOVF      0x68,0x0,0x0       if(UIRbits.UERRIF && UIEbits.UERRIE)    USBErrorHandler();                   E:\iroFW\system\usb\usbdrv\usbdrv.c
003f7e   0b02     ANDLW     0x2                                                                                             
003f80   e004     BZ        0x3f8a                                                                                          
003f82   5069     MOVF      0x69,0x0,0x0                                                                                    
003f84   0b02     ANDLW     0x2                                                                                             
003f86   e001     BZ        0x3f8a                                                                                          
003f88   d838     RCALL     0x3ffa                                                                                          
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * Pointless to continue servicing if the host has not sent a bus reset.     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * Once bus reset is received, the device transitions into the DEFAULT       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * state and is ready for communication.                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003f8a   0e03     MOVLW     0x3                if(usb_device_state < DEFAULT_STATE) return;                                 E:\iroFW\system\usb\usbdrv\usbdrv.c
003f8c   0101     MOVLB     0x1                                                                                             
003f8e   5de9     SUBWF     0xe9,0x0,0x1                                                                                    
003f90   e201     BC        0x3f94                                                                                          
003f92   d009     BRA       0x3fa6                                                                                          
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * Task D: Servicing USB Transaction Complete Interrupt                      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003f94   5068     MOVF      0x68,0x0,0x0       if(UIRbits.TRNIF && UIEbits.TRNIE)                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
003f96   0b08     ANDLW     0x8                                                                                             
003f98   e006     BZ        0x3fa6                                                                                          
003f9a   5069     MOVF      0x69,0x0,0x0                                                                                    
003f9c   0b08     ANDLW     0x8                                                                                             
003f9e   e003     BZ        0x3fa6                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                   /*                                                                       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                    * USBCtrlEPService only services transactions over EP0.                 E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                    * It ignores all other EP transactions.                                 E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                    */                                                                      E:\iroFW\system\usb\usbdrv\usbdrv.c
003fa0   ec49     CALL      0x3892,0x0             USBCtrlEPService();                                                      E:\iroFW\system\usb\usbdrv\usbdrv.c
003fa2   f01c                                                                                                               
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                   /*                                                                       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                    * Other EP can be serviced later by responsible device class firmware.  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                    * Each device driver knows when an OUT or IN transaction is ready by    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                    * checking the buffer ownership bit.                                    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                    * An OUT EP should always be owned by SIE until the data is ready.      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                    * An IN EP should always be owned by CPU until the data is ready.       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                    *                                                                       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                    * Because of this logic, it is not necessary to save the USTAT value    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                    * of non-EP0 transactions.                                              E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                    */                                                                      E:\iroFW\system\usb\usbdrv\usbdrv.c
003fa4   9668     BCF       0x68,0x3,0x0           UIRbits.TRNIF = 0;                                                       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               }//end if(UIRbits.TRNIF && UIEbits.TRNIE)                                    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
003fa6   0012     RETURN    0x0            }//end USBDriverService                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBSuspend(void)                                        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Overview:                                                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBSuspend(void)                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * NOTE: Do not clear UIRbits.ACTVIF here!                                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * Reason:                                                                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * ACTVIF is only generated once an IDLEIF has been generated.               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * This is a 1:1 ratio interrupt generation.                                 E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * For every IDLEIF, there will be only one ACTVIF regardless of             E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * the number of subsequent bus transitions.                                 E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                *                                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * If the ACTIF is cleared here, a problem could occur when:                 E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * [       IDLE       ][bus activity ->                                      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * <--- 3 ms ----->     ^                                                    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                *                ^     ACTVIF=1                                             E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                *                IDLEIF=1                                                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                *  #           #           #           #   (#=Program polling flags)        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                *                          ^                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                *                          This polling loop will see both                  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                *                          IDLEIF=1 and ACTVIF=1.                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                *                          However, the program services IDLEIF first       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                *                          because ACTIVIE=0.                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                *                          If this routine clears the only ACTIVIF,         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                *                          then it can never get out of the suspend         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                *                          mode.                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003fa8   8469     BSF       0x69,0x2,0x0       UIEbits.ACTVIE = 1;                     // Enable bus activity interrupt     E:\iroFW\system\usb\usbdrv\usbdrv.c
003faa   9868     BCF       0x68,0x4,0x0       UIRbits.IDLEIF = 0;                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003fac   826d     BSF       0x6d,0x1,0x0       UCONbits.SUSPND = 1;                    // Put USB module in power conserve  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                       // mode, SIE clock inactive          E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * At this point the PIC can go into sleep,idle, or                          E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * switch to a slower clock, etc.                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /* Modifiable Section */                                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
003fae   9aa1     BCF       0xa1,0x5,0x0       PIR2bits.USBIF = 0;                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003fb0   8aa0     BSF       0xa0,0x5,0x0       PIE2bits.USBIE = 1;                     // Set USB wakeup source             E:\iroFW\system\usb\usbdrv\usbdrv.c
003fb2   0003     SLEEP                        Sleep();                                // Goto sleep                        E:\iroFW\system\usb\usbdrv\usbdrv.c
003fb4   9aa0     BCF       0xa0,0x5,0x0       PIE2bits.USBIE = 0;                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /* End Modifiable Section */                                                 E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
003fb6   0012     RETURN    0x0            }//end USBSuspend                                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBWakeFromSuspend(void)                                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Overview:                                                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBWakeFromSuspend(void)                                                    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * If using clock switching, this is the place to restore the                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * original clock frequency.                                                 E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003fb8   926d     BCF       0x6d,0x1,0x0       UCONbits.SUSPND = 0;                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
003fba   9469     BCF       0x69,0x2,0x0       UIEbits.ACTVIE = 0;                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003fbc   9468     BCF       0x68,0x2,0x0       UIRbits.ACTVIF = 0;                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003fbe   0012     RETURN    0x0            }//end USBWakeFromSuspend                                                        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBRemoteWakeup(void)                                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This function should be called by user when the device       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  is waken up by an external stimulus other than ACTIVIF.      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  Please read the note below to understand the limitations.    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Note:            The modifiable section in this routine should be changed     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  to meet the application needs. Current implementation        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  temporary blocks other functions from executing for a        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  period of 1-13 ms depending on the core frequency.           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  According to USB 2.0 specification section 7.1.7.7,          E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  "The remote wakeup device must hold the resume signaling     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  for at lest 1 ms but for no more than 15 ms."                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  The idea here is to use a delay counter loop, using a        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  common value that would work over a wide range of core       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  frequencies.                                                 E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  That value selected is 1800. See table below:                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  ==========================================================   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  Core Freq(MHz)      MIP         RESUME Signal Period (ms)    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  ==========================================================   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                      48              12          1.05                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                       4              1           12.6                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  ==========================================================   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  * These timing could be incorrect when using code            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                    optimization or extended instruction mode,                 E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                    or when having other interrupts enabled.                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                    Make sure to verify using the MPLAB SIM's Stopwatch        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBRemoteWakeup(void)                                                       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               static word delay_count;                                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
003fc0   0101     MOVLB     0x1                if(usb_stat.RemoteWakeup == 1)          // Check if RemoteWakeup function    E:\iroFW\system\usb\usbdrv\usbdrv.c
003fc2   a1ea     BTFSS     0xea,0x0,0x1                                                                                    
003fc4   d010     BRA       0x3fe6                                                                                          
                                               {                                       // has been enabled by the host.     E:\iroFW\system\usb\usbdrv\usbdrv.c
003fc6   dff8     RCALL     0x3fb8                 USBWakeFromSuspend();               // Unsuspend USB modue               E:\iroFW\system\usb\usbdrv\usbdrv.c
003fc8   846d     BSF       0x6d,0x2,0x0           UCONbits.RESUME = 1;                // Start RESUME signaling            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                   /* Modifiable Section */                                                 E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
003fca   0101     MOVLB     0x1                    delay_count = 1800U;                // Set RESUME line for 1-13 ms       E:\iroFW\system\usb\usbdrv\usbdrv.c
003fcc   0e08     MOVLW     0x8                                                                                             
003fce   6fed     MOVWF     0xed,0x1                                                                                        
003fd0   0e07     MOVLW     0x7                                                                                             
003fd2   6fee     MOVWF     0xee,0x1                                                                                        
                                                   do                                                                       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                   {                                                                        E:\iroFW\system\usb\usbdrv\usbdrv.c
003fd4   0101     MOVLB     0x1                        delay_count--;                                                       E:\iroFW\system\usb\usbdrv\usbdrv.c
003fd6   07ed     DECF      0xed,0x1,0x1                                                                                    
003fd8   0e00     MOVLW     0x0                                                                                             
003fda   5bee     SUBWFB    0xee,0x1,0x1                                                                                    
003fdc   0101     MOVLB     0x1                    }while(delay_count);                                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
003fde   51ed     MOVF      0xed,0x0,0x1                                                                                    
003fe0   11ee     IORWF     0xee,0x0,0x1                                                                                    
003fe2   e1f8     BNZ       0x3fd4                                                                                          
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                   /* End Modifiable Section */                                             E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
003fe4   946d     BCF       0x6d,0x2,0x0           UCONbits.RESUME = 0;                                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               }//endif                                                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
003fe6   0012     RETURN    0x0            }//end USBRemoteWakeup                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USB_SOF_Handler(void)                                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        The USB host sends out a SOF packet to full-speed devices    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  every 1 ms. This interrupt may be useful for isochronous     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  pipes. End designers should implement callback routine       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  as necessary.                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USB_SOF_Handler(void)                                                       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /* Callback routine here */                                                  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
003fe8   9c68     BCF       0x68,0x6,0x0       UIRbits.SOFIF = 0;                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
003fea   0012     RETURN    0x0            }//end USB_SOF_Handler                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBStallHandler(void)                                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    A STALL packet is sent to the host by the SIE.               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        The STALLIF is set anytime the SIE sends out a STALL         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  packet regardless of which endpoint causes it.               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  A Setup transaction overrides the STALL function. A stalled  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  endpoint stops stalling once it receives a setup packet.     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  In this case, the SIE will accepts the Setup packet and      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  set the TRNIF flag to notify the firmware. STALL function    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  for that particular endpoint pipe will be automatically      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  disabled (direction specific).                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  There are a few reasons for an endpoint to be stalled.       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  1. When a non-supported USB request is received.             E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                     Example: GET_DESCRIPTOR(DEVICE_QUALIFIER)                 E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  2. When an endpoint is currently halted.                     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  3. When the device class specifies that an endpoint must     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                     stall in response to a specific event.                    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                     Example: Mass Storage Device Class                        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                              If the CBW is not valid, the device shall        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                              STALL the Bulk-In pipe.                          E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                              See USB Mass Storage Class Bulk-only Transport   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                              Specification for more details.                  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Note:            UEPn.EPSTALL can be scanned to see which endpoint causes     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  the stall event.                                             E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  If                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBStallHandler(void)                                                       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * Does not really have to do anything here,                                 E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * even for the control endpoint.                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * All BDs of Endpoint 0 are owned by SIE right now,                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * but once a Setup Transaction is received, the ownership                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * for EP0_OUT will be returned to CPU.                                      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * When the Setup Transaction is serviced, the ownership                     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                * for EP0_IN will then be forced back to CPU by firmware.                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003fec   a070     BTFSS     0x70,0x0,0x0       if(UEP0bits.EPSTALL == 1)                                                    E:\iroFW\system\usb\usbdrv\usbdrv.c
003fee   d003     BRA       0x3ff6                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
003ff0   ecd6     CALL      0x3bac,0x0             USBPrepareForNextSetupTrf();        // Firmware work-around              E:\iroFW\system\usb\usbdrv\usbdrv.c
003ff2   f01d                                                                                                               
003ff4   9070     BCF       0x70,0x0,0x0           UEP0bits.EPSTALL = 0;                                                    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                               }                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
003ff6   9a68     BCF       0x68,0x5,0x0       UIRbits.STALLIF = 0;                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
003ff8   0012     RETURN    0x0            }//end USBStallHandler                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBErrorHandler(void)                                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        The purpose of this interrupt is mainly for debugging        E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  during development. Check UEIR to see which error causes     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  the interrupt.                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBErrorHandler(void)                                                       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
003ffa   9268     BCF       0x68,0x1,0x0       UIRbits.UERRIF = 0;                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
003ffc   0012     RETURN    0x0            }//end USBErrorHandler                                                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBProtocolResetHandler(void)                           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    A USB bus reset is received from the host.                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    Currently, this routine flushes any pending USB              E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  transactions. It empties out the USTAT FIFO. This action     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  might not be desirable in some applications.                 E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        Once a USB bus reset is received from the host, this         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  routine should be called. It resets the device address to    E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  zero, disables all non-EP0 endpoints, initializes EP0 to     E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  be ready for default communication, clears all USB           E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  interrupt flags, unmasks applicable USB interrupts, and      E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                  reinitializes internal state-machine variables.              E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           void USBProtocolResetHandler(void)                                               E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
003ffe   6a6a     CLRF      0x6a,0x0           UEIR = 0;                       // Clear all USB error flags                 E:\iroFW\system\usb\usbdrv\usbdrv.c
004000   6a68     CLRF      0x68,0x0           UIR = 0;                        // Clears all USB interrupts                 E:\iroFW\system\usb\usbdrv\usbdrv.c
004002   0e9f     MOVLW     0x9f               UEIE = 0b10011111;              // Unmask all USB error interrupts           E:\iroFW\system\usb\usbdrv\usbdrv.c
004004   6e6b     MOVWF     0x6b,0x0                                                                                        
004006   0e7b     MOVLW     0x7b               UIE = 0b01111011;               // Enable all interrupts except ACTVIE       E:\iroFW\system\usb\usbdrv\usbdrv.c
004008   6e69     MOVWF     0x69,0x0                                                                                        
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
00400a   6a6e     CLRF      0x6e,0x0           UADDR = 0x00;                   // Reset to default address                  E:\iroFW\system\usb\usbdrv\usbdrv.c
00400c   0e0f     MOVLW     0xf                mDisableEP1to15();              // Reset all non-EP0 UEPn registers          E:\iroFW\system\usb\usbdrv\usbdrv.c
00400e   6ee6     MOVWF     0xe6,0x0                                                                                        
004010   0e71     MOVLW     0x71                                                                                            
004012   6ee6     MOVWF     0xe6,0x0                                                                                        
004014   0e0f     MOVLW     0xf                                                                                             
004016   6ee6     MOVWF     0xe6,0x0                                                                                        
004018   d814     RCALL     0x4042                                                                                          
00401a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00401c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00401e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004020   0e16     MOVLW     0x16               UEP0 = EP_CTRL|HSHK_EN;         // Init EP0 as a Ctrl EP, see usbdrv.h       E:\iroFW\system\usb\usbdrv\usbdrv.c
004022   6e70     MOVWF     0x70,0x0                                                                                        
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
004024   a668     BTFSS     0x68,0x3,0x0       while(UIRbits.TRNIF == 1)       // Flush any pending transactions            E:\iroFW\system\usb\usbdrv\usbdrv.c
004026   d002     BRA       0x402c                                                                                          
00402a   d7fc     BRA       0x4024                                                                                          
004028   9668     BCF       0x68,0x3,0x0           UIRbits.TRNIF = 0;                                                       E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
00402c   986d     BCF       0x6d,0x4,0x0       UCONbits.PKTDIS = 0;            // Make sure packet processing is enabled    E:\iroFW\system\usb\usbdrv\usbdrv.c
00402e   ecd6     CALL      0x3bac,0x0         USBPrepareForNextSetupTrf();    // Declared in usbctrltrf.c                  E:\iroFW\system\usb\usbdrv\usbdrv.c
004030   f01d                                                                                                               
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
004032   0101     MOVLB     0x1                usb_stat.RemoteWakeup = 0;      // Default status flag to disable            E:\iroFW\system\usb\usbdrv\usbdrv.c
004034   91ea     BCF       0xea,0x0,0x1                                                                                    
004036   0101     MOVLB     0x1                usb_active_cfg = 0;             // Clear active configuration                E:\iroFW\system\usb\usbdrv\usbdrv.c
004038   6beb     CLRF      0xeb,0x1                                                                                        
00403a   0101     MOVLB     0x1                usb_device_state = DEFAULT_STATE;                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
00403c   0e03     MOVLW     0x3                                                                                             
00403e   6fe9     MOVWF     0xe9,0x1                                                                                        
004040   0012     RETURN    0x0            }//end USBProtocolResetHandler                                                   E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /* Auxiliary Function */                                                         E:\iroFW\system\usb\usbdrv\usbdrv.c
004042   cfd9     MOVFF     0xfd9,0xfe6    void ClearArray(byte* startAdr,byte count)                                       E:\iroFW\system\usb\usbdrv\usbdrv.c
004044   ffe6                                                                                                               
004046   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
004048   ffd9                                                                                                               
                                           {                                                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
00404a   0efd     MOVLW     0xfd               *startAdr;                                                                   E:\iroFW\system\usb\usbdrv\usbdrv.c
00404c   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00404e   ffe9                                                                                                               
004050   0efe     MOVLW     0xfe                                                                                            
004052   cfdb     MOVFF     0xfdb,0xfea                                                                                     
004054   ffea                                                                                                               
004056   0efc     MOVLW     0xfc               while(count)                                                                 E:\iroFW\system\usb\usbdrv\usbdrv.c
004058   50db     MOVF      0xdb,0x0,0x0                                                                                    
00405a   e004     BZ        0x4064                                                                                          
004062   d7f9     BRA       0x4056                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                   _asm                                                                     E:\iroFW\system\usb\usbdrv\usbdrv.c
00405c   6aee     CLRF      0xee,0x0               clrf POSTINC0,0                                                          E:\iroFW\system\usb\usbdrv\usbdrv.c
                                                   _endasm                                                                  E:\iroFW\system\usb\usbdrv\usbdrv.c
00405e   0efc     MOVLW     0xfc                   count--;                                                                 E:\iroFW\system\usb\usbdrv\usbdrv.c
004060   06db     DECF      0xdb,0x1,0x0                                                                                    
                                               }//end while                                                                 E:\iroFW\system\usb\usbdrv\usbdrv.c
004064   52e5     MOVF      0xe5,0x1,0x0   }//end ClearArray                                                                E:\iroFW\system\usb\usbdrv\usbdrv.c
004066   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
004068   ffd9                                                                                                               
00406a   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /** EOF usbdrv.c *************************************************************/  E:\iroFW\system\usb\usbdrv\usbdrv.c
                                           /*********************************************************************           E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            *                Microchip USB C18 Firmware Version 1.0                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            *********************************************************************           E:\iroFW\system\usb\usb9\usb9.c
                                            * FileName:        usb9.c                                                       E:\iroFW\system\usb\usb9\usb9.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iroFW\system\usb\usb9\usb9.c
                                            * Processor:       PIC18                                                        E:\iroFW\system\usb\usb9\usb9.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iroFW\system\usb\usb9\usb9.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Software License Agreement                                                    E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iroFW\system\usb\usb9\usb9.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iroFW\system\usb\usb9\usb9.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iroFW\system\usb\usb9\usb9.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iroFW\system\usb\usb9\usb9.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iroFW\system\usb\usb9\usb9.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iroFW\system\usb\usb9\usb9.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iroFW\system\usb\usb9\usb9.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iroFW\system\usb\usb9\usb9.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iroFW\system\usb\usb9\usb9.c
                                            * license.                                                                      E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iroFW\system\usb\usb9\usb9.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iroFW\system\usb\usb9\usb9.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iroFW\system\usb\usb9\usb9.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iroFW\system\usb\usb9\usb9.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iroFW\system\usb\usb9\usb9.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Author               Date        Comment                                      E:\iroFW\system\usb\usb9\usb9.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           E:\iroFW\system\usb\usb9\usb9.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    E:\iroFW\system\usb\usb9\usb9.c
                                            ********************************************************************/           E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
                                           /** I N C L U D E S **********************************************************/  E:\iroFW\system\usb\usb9\usb9.c
                                           #include <p18cxxx.h>                                                             E:\iroFW\system\usb\usb9\usb9.c
                                           #include "system\typedefs.h"                                                     E:\iroFW\system\usb\usb9\usb9.c
                                           #include "system\usb\usb.h"                                                      E:\iroFW\system\usb\usb9\usb9.c
                                           #include "io_cfg.h"                     // Required for self_power status        E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
                                           /** V A R I A B L E S ********************************************************/  E:\iroFW\system\usb\usb9\usb9.c
                                           #pragma udata                                                                    E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  E:\iroFW\system\usb\usb9\usb9.c
                                           void USBStdGetDscHandler(void);                                                  E:\iroFW\system\usb\usb9\usb9.c
                                           void USBStdSetCfgHandler(void);                                                  E:\iroFW\system\usb\usb9\usb9.c
                                           void USBStdGetStatusHandler(void);                                               E:\iroFW\system\usb\usb9\usb9.c
                                           void USBStdFeatureReqHandler(void);                                              E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
                                           /** D E C L A R A T I O N S **************************************************/  E:\iroFW\system\usb\usb9\usb9.c
                                           #pragma code                                                                     E:\iroFW\system\usb\usb9\usb9.c
                                           /******************************************************************************  E:\iroFW\system\usb\usb9\usb9.c
                                            * Function:        void USBCheckStdRequest(void)                                E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Overview:        This routine checks the setup data packet to see if it       E:\iroFW\system\usb\usb9\usb9.c
                                            *                  knows how to handle it                                       E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usb9\usb9.c
                                           void USBCheckStdRequest(void)                                                    E:\iroFW\system\usb\usb9\usb9.c
                                           {                                                                                E:\iroFW\system\usb\usb9\usb9.c
003bcc   0104     MOVLB     0x4                if(SetupPkt.RequestType != STANDARD) return;                                 E:\iroFW\system\usb\usb9\usb9.c
003bce   5120     MOVF      0x20,0x0,0x1                                                                                    
003bd0   0b60     ANDLW     0x60                                                                                            
003bd2   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003bd4   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003bd6   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003bd8   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003bda   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003bdc   0900     IORLW     0x0                                                                                             
003bde   e001     BZ        0x3be2                                                                                          
003be0   d058     BRA       0x3c92                                                                                          
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
003be2   0104     MOVLB     0x4                switch(SetupPkt.bRequest)                                                    E:\iroFW\system\usb\usb9\usb9.c
003be4   5121     MOVF      0x21,0x0,0x1                                                                                    
003be6   0a07     XORLW     0x7                                                                                             
003be8   e053     BZ        0x3c90                                                                                          
003bea   0a0b     XORLW     0xb                                                                                             
003bec   e051     BZ        0x3c90                                                                                          
003bee   0a07     XORLW     0x7                                                                                             
003bf0   e042     BZ        0x3c76                                                                                          
003bf2   0a01     XORLW     0x1                                                                                             
003bf4   e02c     BZ        0x3c4e                                                                                          
003bf6   0a0b     XORLW     0xb                                                                                             
003bf8   e028     BZ        0x3c4a                                                                                          
003bfa   0a02     XORLW     0x2                                                                                             
003bfc   e026     BZ        0x3c4a                                                                                          
003bfe   0a03     XORLW     0x3                                                                                             
003c00   e022     BZ        0x3c46                                                                                          
003c02   0a08     XORLW     0x8                                                                                             
003c04   e012     BZ        0x3c2a                                                                                          
003c06   0a01     XORLW     0x1                                                                                             
003c08   e00e     BZ        0x3c26                                                                                          
003c0a   0a0f     XORLW     0xf                                                                                             
003c0c   e00a     BZ        0x3c22                                                                                          
003c0e   0a03     XORLW     0x3                                                                                             
003c10   e001     BZ        0x3c14                                                                                          
003c12   d03e     BRA       0x3c90                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usb9\usb9.c
                                                   case SET_ADR:                                                            E:\iroFW\system\usb\usb9\usb9.c
003c14   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  E:\iroFW\system\usb\usb9\usb9.c
003c16   0e01     MOVLW     0x1                                                                                             
003c18   6fe2     MOVWF     0xe2,0x1                                                                                        
003c1a   0101     MOVLB     0x1                        usb_device_state = ADR_PENDING_STATE;       // Update state only     E:\iroFW\system\usb\usb9\usb9.c
003c1c   0e04     MOVLW     0x4                                                                                             
003c1e   6fe9     MOVWF     0xe9,0x1                                                                                        
                                                       /* See USBCtrlTrfInHandler() in usbctrltrf.c for the next step */    E:\iroFW\system\usb\usb9\usb9.c
003c20   d038     BRA       0x3c92                     break;                                                               E:\iroFW\system\usb\usb9\usb9.c
                                                   case GET_DSC:                                                            E:\iroFW\system\usb\usb9\usb9.c
003c22   d838     RCALL     0x3c94                     USBStdGetDscHandler();                                               E:\iroFW\system\usb\usb9\usb9.c
003c24   d036     BRA       0x3c92                     break;                                                               E:\iroFW\system\usb\usb9\usb9.c
                                                   case SET_CFG:                                                            E:\iroFW\system\usb\usb9\usb9.c
003c26   d893     RCALL     0x3d4e                     USBStdSetCfgHandler();                                               E:\iroFW\system\usb\usb9\usb9.c
003c28   d034     BRA       0x3c92                     break;                                                               E:\iroFW\system\usb\usb9\usb9.c
                                                   case GET_CFG:                                                            E:\iroFW\system\usb\usb9\usb9.c
003c2a   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  E:\iroFW\system\usb\usb9\usb9.c
003c2c   0e01     MOVLW     0x1                                                                                             
003c2e   6fe2     MOVWF     0xe2,0x1                                                                                        
003c30   0101     MOVLB     0x1                        pSrc.bRam = (byte*)&usb_active_cfg;         // Set Source            E:\iroFW\system\usb\usb9\usb9.c
003c32   0eeb     MOVLW     0xeb                                                                                            
003c34   6fe3     MOVWF     0xe3,0x1                                                                                        
003c36   0e01     MOVLW     0x1                                                                                             
003c38   6fe4     MOVWF     0xe4,0x1                                                                                        
003c3a   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;               // Set memory type       E:\iroFW\system\usb\usb9\usb9.c
003c3c   93ea     BCF       0xea,0x1,0x1                                                                                    
003c3e   0101     MOVLB     0x1                        LSB(wCount) = 1;                            // Set data count        E:\iroFW\system\usb\usb9\usb9.c
003c40   0e01     MOVLW     0x1                                                                                             
003c42   6fe7     MOVWF     0xe7,0x1                                                                                        
003c44   d026     BRA       0x3c92                     break;                                                               E:\iroFW\system\usb\usb9\usb9.c
                                                   case GET_STATUS:                                                         E:\iroFW\system\usb\usb9\usb9.c
003c46   d8ab     RCALL     0x3d9e                     USBStdGetStatusHandler();                                            E:\iroFW\system\usb\usb9\usb9.c
003c48   d024     BRA       0x3c92                     break;                                                               E:\iroFW\system\usb\usb9\usb9.c
                                                   case CLR_FEATURE:                                                        E:\iroFW\system\usb\usb9\usb9.c
                                                   case SET_FEATURE:                                                        E:\iroFW\system\usb\usb9\usb9.c
003c4a   d8f9     RCALL     0x3e3e                     USBStdFeatureReqHandler();                                           E:\iroFW\system\usb\usb9\usb9.c
003c4c   d022     BRA       0x3c92                     break;                                                               E:\iroFW\system\usb\usb9\usb9.c
                                                   case GET_INTF:                                                           E:\iroFW\system\usb\usb9\usb9.c
003c4e   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  E:\iroFW\system\usb\usb9\usb9.c
003c50   0e01     MOVLW     0x1                                                                                             
003c52   6fe2     MOVWF     0xe2,0x1                                                                                        
003c54   0104     MOVLB     0x4                        pSrc.bRam = (byte*)&usb_alt_intf+SetupPkt.bIntfID;  // Set source    E:\iroFW\system\usb\usb9\usb9.c
003c56   5124     MOVF      0x24,0x0,0x1                                                                                    
003c58   0101     MOVLB     0x1                                                                                             
003c5a   6fe3     MOVWF     0xe3,0x1                                                                                        
003c5c   6be4     CLRF      0xe4,0x1                                                                                        
003c5e   0eec     MOVLW     0xec                                                                                            
003c60   0101     MOVLB     0x1                                                                                             
003c62   27e3     ADDWF     0xe3,0x1,0x1                                                                                    
003c64   0e01     MOVLW     0x1                                                                                             
003c66   0101     MOVLB     0x1                                                                                             
003c68   23e4     ADDWFC    0xe4,0x1,0x1                                                                                    
003c6a   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;               // Set memory type       E:\iroFW\system\usb\usb9\usb9.c
003c6c   93ea     BCF       0xea,0x1,0x1                                                                                    
003c6e   0101     MOVLB     0x1                        LSB(wCount) = 1;                            // Set data count        E:\iroFW\system\usb\usb9\usb9.c
003c70   0e01     MOVLW     0x1                                                                                             
003c72   6fe7     MOVWF     0xe7,0x1                                                                                        
003c74   d00e     BRA       0x3c92                     break;                                                               E:\iroFW\system\usb\usb9\usb9.c
                                                   case SET_INTF:                                                           E:\iroFW\system\usb\usb9\usb9.c
003c76   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  E:\iroFW\system\usb\usb9\usb9.c
003c78   0e01     MOVLW     0x1                                                                                             
003c7a   6fe2     MOVWF     0xe2,0x1                                                                                        
003c7c   0104     MOVLB     0x4                        usb_alt_intf[SetupPkt.bIntfID] = SetupPkt.bAltID;                    E:\iroFW\system\usb\usb9\usb9.c
003c7e   5124     MOVF      0x24,0x0,0x1                                                                                    
003c80   6aea     CLRF      0xea,0x0                                                                                        
003c82   0fec     ADDLW     0xec                                                                                            
003c84   6ee9     MOVWF     0xe9,0x0                                                                                        
003c86   0e01     MOVLW     0x1                                                                                             
003c88   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
003c8a   c422     MOVFF     0x422,0xfef                                                                                     
003c8c   ffef                                                                                                               
003c8e   d001     BRA       0x3c92                     break;                                                               E:\iroFW\system\usb\usb9\usb9.c
                                                   case SET_DSC:                                                            E:\iroFW\system\usb\usb9\usb9.c
                                                   case SYNCH_FRAME:                                                        E:\iroFW\system\usb\usb9\usb9.c
                                                   default:                                                                 E:\iroFW\system\usb\usb9\usb9.c
003c90   d000     BRA       0x3c92                     break;                                                               E:\iroFW\system\usb\usb9\usb9.c
                                               }//end switch                                                                E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
003c92   0012     RETURN    0x0            }//end USBCheckStdRequest                                                        E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
                                           /******************************************************************************  E:\iroFW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdGetDscHandler(void)                               E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Overview:        This routine handles the standard GET_DESCRIPTOR request.    E:\iroFW\system\usb\usb9\usb9.c
                                            *                  It utilizes tables dynamically looks up descriptor size.     E:\iroFW\system\usb\usb9\usb9.c
                                            *                  This routine should never have to be modified if the tables  E:\iroFW\system\usb\usb9\usb9.c
                                            *                  in usbdsc.c are declared correctly.                          E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usb9\usb9.c
                                           void USBStdGetDscHandler(void)                                                   E:\iroFW\system\usb\usb9\usb9.c
                                           {                                                                                E:\iroFW\system\usb\usb9\usb9.c
003c94   0e80     MOVLW     0x80               if(SetupPkt.bmRequestType == 0x80)                                           E:\iroFW\system\usb\usb9\usb9.c
003c96   0104     MOVLB     0x4                                                                                             
003c98   5d20     SUBWF     0x20,0x0,0x1                                                                                    
003c9a   e158     BNZ       0x3d4c                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usb9\usb9.c
003c9c   0104     MOVLB     0x4                    switch(SetupPkt.bDscType)                                                E:\iroFW\system\usb\usb9\usb9.c
003c9e   5123     MOVF      0x23,0x0,0x1                                                                                    
003ca0   0a03     XORLW     0x3                                                                                             
003ca2   e034     BZ        0x3d0c                                                                                          
003ca4   0a01     XORLW     0x1                                                                                             
003ca6   e010     BZ        0x3cc8                                                                                          
003ca8   0a03     XORLW     0x3                                                                                             
003caa   e001     BZ        0x3cae                                                                                          
003cac   d04d     BRA       0x3d48                                                                                          
                                                   {                                                                        E:\iroFW\system\usb\usb9\usb9.c
                                                       case DSC_DEV:                                                        E:\iroFW\system\usb\usb9\usb9.c
003cae   0101     MOVLB     0x1                            ctrl_trf_session_owner = MUID_USB9;                              E:\iroFW\system\usb\usb9\usb9.c
003cb0   0e01     MOVLW     0x1                                                                                             
003cb2   6fe2     MOVWF     0xe2,0x1                                                                                        
003cb4   0101     MOVLB     0x1                            pSrc.bRom = (rom byte*)&device_dsc;                              E:\iroFW\system\usb\usb9\usb9.c
003cb6   0eaa     MOVLW     0xaa                                                                                            
003cb8   6fe3     MOVWF     0xe3,0x1                                                                                        
003cba   0e42     MOVLW     0x42                                                                                            
003cbc   6fe4     MOVWF     0xe4,0x1                                                                                        
003cbe   0e12     MOVLW     0x12                           wCount._word = sizeof(device_dsc);          // Set data count    E:\iroFW\system\usb\usb9\usb9.c
003cc0   0101     MOVLB     0x1                                                                                             
003cc2   6fe7     MOVWF     0xe7,0x1                                                                                        
003cc4   6be8     CLRF      0xe8,0x1                                                                                        
003cc6   d040     BRA       0x3d48                         break;                                                           E:\iroFW\system\usb\usb9\usb9.c
                                                       case DSC_CFG:                                                        E:\iroFW\system\usb\usb9\usb9.c
003cc8   0101     MOVLB     0x1                            ctrl_trf_session_owner = MUID_USB9;                              E:\iroFW\system\usb\usb9\usb9.c
003cca   0e01     MOVLW     0x1                                                                                             
003ccc   6fe2     MOVWF     0xe2,0x1                                                                                        
003cce   0104     MOVLB     0x4                            pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);                    E:\iroFW\system\usb\usb9\usb9.c
003cd0   5122     MOVF      0x22,0x0,0x1                                                                                    
003cd2   6ef6     MOVWF     0xf6,0x0                                                                                        
003cd4   6af7     CLRF      0xf7,0x0                                                                                        
003cd6   90d8     BCF       0xd8,0x0,0x0                                                                                    
003cd8   36f6     RLCF      0xf6,0x1,0x0                                                                                    
003cda   36f7     RLCF      0xf7,0x1,0x0                                                                                    
003cdc   0e6b     MOVLW     0x6b                                                                                            
003cde   26f6     ADDWF     0xf6,0x1,0x0                                                                                    
003ce0   0e43     MOVLW     0x43                                                                                            
003ce2   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
003ce4   0009     TBLRDPOSTINC                                                                                              
003ce6   cff5     MOVFF     0xff5,0x1e3                                                                                     
003ce8   f1e3                                                                                                               
003cea   000a     TBLRDPOSTDEC                                                                                              
003cec   cff5     MOVFF     0xff5,0x1e4                                                                                     
003cee   f1e4                                                                                                               
003cf0   0e02     MOVLW     0x2                            wCount._word = *(pSrc.wRom+1);              // Set data count    E:\iroFW\system\usb\usb9\usb9.c
003cf2   0101     MOVLB     0x1                                                                                             
003cf4   6af7     CLRF      0xf7,0x0                                                                                        
003cf6   25e3     ADDWF     0xe3,0x0,0x1                                                                                    
003cf8   6ef6     MOVWF     0xf6,0x0                                                                                        
003cfa   51e4     MOVF      0xe4,0x0,0x1                                                                                    
003cfc   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
003cfe   0009     TBLRDPOSTINC                                                                                              
003d00   cff5     MOVFF     0xff5,0x1e7                                                                                     
003d02   f1e7                                                                                                               
003d04   000a     TBLRDPOSTDEC                                                                                              
003d06   cff5     MOVFF     0xff5,0x1e8                                                                                     
003d08   f1e8                                                                                                               
003d0a   d01e     BRA       0x3d48                         break;                                                           E:\iroFW\system\usb\usb9\usb9.c
                                                       case DSC_STR:                                                        E:\iroFW\system\usb\usb9\usb9.c
003d0c   0101     MOVLB     0x1                            ctrl_trf_session_owner = MUID_USB9;                              E:\iroFW\system\usb\usb9\usb9.c
003d0e   0e01     MOVLW     0x1                                                                                             
003d10   6fe2     MOVWF     0xe2,0x1                                                                                        
003d12   0104     MOVLB     0x4                            pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);                    E:\iroFW\system\usb\usb9\usb9.c
003d14   5122     MOVF      0x22,0x0,0x1                                                                                    
003d16   6ef6     MOVWF     0xf6,0x0                                                                                        
003d18   6af7     CLRF      0xf7,0x0                                                                                        
003d1a   90d8     BCF       0xd8,0x0,0x0                                                                                    
003d1c   36f6     RLCF      0xf6,0x1,0x0                                                                                    
003d1e   36f7     RLCF      0xf7,0x1,0x0                                                                                    
003d20   0e6f     MOVLW     0x6f                                                                                            
003d22   26f6     ADDWF     0xf6,0x1,0x0                                                                                    
003d24   0e43     MOVLW     0x43                                                                                            
003d26   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
003d28   0009     TBLRDPOSTINC                                                                                              
003d2a   cff5     MOVFF     0xff5,0x1e3                                                                                     
003d2c   f1e3                                                                                                               
003d2e   000a     TBLRDPOSTDEC                                                                                              
003d30   cff5     MOVFF     0xff5,0x1e4                                                                                     
003d32   f1e4                                                                                                               
003d34   c1e3     MOVFF     0x1e3,0xff6                    wCount._word = *pSrc.bRom;                  // Set data count    E:\iroFW\system\usb\usb9\usb9.c
003d36   fff6                                                                                                               
003d38   c1e4     MOVFF     0x1e4,0xff7                                                                                     
003d3a   fff7                                                                                                               
003d3c   0008     TBLRD                                                                                                     
003d3e   50f5     MOVF      0xf5,0x0,0x0                                                                                    
003d40   0101     MOVLB     0x1                                                                                             
003d42   6fe7     MOVWF     0xe7,0x1                                                                                        
003d44   6be8     CLRF      0xe8,0x1                                                                                        
003d46   d000     BRA       0x3d48                         break;                                                           E:\iroFW\system\usb\usb9\usb9.c
                                                   }//end switch                                                            E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
003d48   0101     MOVLB     0x1                    usb_stat.ctrl_trf_mem = _ROM;                       // Set memory type   E:\iroFW\system\usb\usb9\usb9.c
003d4a   83ea     BSF       0xea,0x1,0x1                                                                                    
                                               }//end if                                                                    E:\iroFW\system\usb\usb9\usb9.c
003d4c   0012     RETURN    0x0            }//end USBStdGetDscHandler                                                       E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
                                           /******************************************************************************  E:\iroFW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdSetCfgHandler(void)                               E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Overview:        This routine first disables all endpoints by clearing        E:\iroFW\system\usb\usb9\usb9.c
                                            *                  UEP registers. It then configures (initializes) endpoints    E:\iroFW\system\usb\usb9\usb9.c
                                            *                  specified in the modifiable section.                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usb9\usb9.c
                                           void USBStdSetCfgHandler(void)                                                   E:\iroFW\system\usb\usb9\usb9.c
                                           {                                                                                E:\iroFW\system\usb\usb9\usb9.c
003d4e   0101     MOVLB     0x1                ctrl_trf_session_owner = MUID_USB9;                                          E:\iroFW\system\usb\usb9\usb9.c
003d50   0e01     MOVLW     0x1                                                                                             
003d52   6fe2     MOVWF     0xe2,0x1                                                                                        
003d54   0e0f     MOVLW     0xf                mDisableEP1to15();                          // See usbdrv.h                  E:\iroFW\system\usb\usb9\usb9.c
003d56   6ee6     MOVWF     0xe6,0x0                                                                                        
003d58   0e71     MOVLW     0x71                                                                                            
003d5a   6ee6     MOVWF     0xe6,0x0                                                                                        
003d5c   0e0f     MOVLW     0xf                                                                                             
003d5e   6ee6     MOVWF     0xe6,0x0                                                                                        
003d60   ec21     CALL      0x4042,0x0                                                                                      
003d62   f020                                                                                                               
003d64   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003d66   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003d68   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003d6a   0e01     MOVLW     0x1                ClearArray((byte*)&usb_alt_intf,MAX_NUM_INT);                                E:\iroFW\system\usb\usb9\usb9.c
003d6c   6ee6     MOVWF     0xe6,0x0                                                                                        
003d6e   0eec     MOVLW     0xec                                                                                            
003d70   6ee6     MOVWF     0xe6,0x0                                                                                        
003d72   0e01     MOVLW     0x1                                                                                             
003d74   6ee6     MOVWF     0xe6,0x0                                                                                        
003d76   ec21     CALL      0x4042,0x0                                                                                      
003d78   f020                                                                                                               
003d7a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003d7c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003d7e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003d80   c422     MOVFF     0x422,0x1eb        usb_active_cfg = SetupPkt.bCfgValue;                                         E:\iroFW\system\usb\usb9\usb9.c
003d82   f1eb                                                                                                               
003d84   0104     MOVLB     0x4                if(SetupPkt.bCfgValue == 0)                                                  E:\iroFW\system\usb\usb9\usb9.c
003d86   5122     MOVF      0x22,0x0,0x1                                                                                    
003d88   e104     BNZ       0x3d92                                                                                          
003d8a   0101     MOVLB     0x1                    usb_device_state = ADDRESS_STATE;                                        E:\iroFW\system\usb\usb9\usb9.c
003d8c   0e05     MOVLW     0x5                                                                                             
003d8e   6fe9     MOVWF     0xe9,0x1                                                                                        
003d90   d005     BRA       0x3d9c             else                                                                         E:\iroFW\system\usb\usb9\usb9.c
                                               {                                                                            E:\iroFW\system\usb\usb9\usb9.c
003d92   0101     MOVLB     0x1                    usb_device_state = CONFIGURED_STATE;                                     E:\iroFW\system\usb\usb9\usb9.c
003d94   0e06     MOVLW     0x6                                                                                             
003d96   6fe9     MOVWF     0xe9,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
                                                   /* Modifiable Section */                                                 E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
                                                   #if defined(USB_USE_CDC)                // See autofiles\usbcfg.h        E:\iroFW\system\usb\usb9\usb9.c
003d98   ecc4     CALL      0x3588,0x0             CDCInitEP();                                                             E:\iroFW\system\usb\usb9\usb9.c
003d9a   f01a                                                                                                               
                                                   #endif                                                                   E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
                                                   /* End modifiable section */                                             E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
                                               }//end if(SetupPkt.bcfgValue == 0)                                           E:\iroFW\system\usb\usb9\usb9.c
003d9c   0012     RETURN    0x0            }//end USBStdSetCfgHandler                                                       E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
                                           /******************************************************************************  E:\iroFW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdGetStatusHandler(void)                            E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Overview:        This routine handles the standard GET_STATUS request         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usb9\usb9.c
                                           void USBStdGetStatusHandler(void)                                                E:\iroFW\system\usb\usb9\usb9.c
                                           {                                                                                E:\iroFW\system\usb\usb9\usb9.c
003d9e   0104     MOVLB     0x4                CtrlTrfData._byte0 = 0;                         // Initialize content        E:\iroFW\system\usb\usb9\usb9.c
003da0   6b28     CLRF      0x28,0x1                                                                                        
003da2   0104     MOVLB     0x4                CtrlTrfData._byte1 = 0;                                                      E:\iroFW\system\usb\usb9\usb9.c
003da4   6b29     CLRF      0x29,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
003da6   0104     MOVLB     0x4                switch(SetupPkt.Recipient)                                                   E:\iroFW\system\usb\usb9\usb9.c
003da8   5120     MOVF      0x20,0x0,0x1                                                                                    
003daa   0b1f     ANDLW     0x1f                                                                                            
003dac   0a02     XORLW     0x2                                                                                             
003dae   e014     BZ        0x3dd8                                                                                          
003db0   0a03     XORLW     0x3                                                                                             
003db2   e00e     BZ        0x3dd0                                                                                          
003db4   0a01     XORLW     0x1                                                                                             
003db6   e001     BZ        0x3dba                                                                                          
003db8   d034     BRA       0x3e22                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usb9\usb9.c
                                                   case RCPT_DEV:                                                           E:\iroFW\system\usb\usb9\usb9.c
003dba   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  E:\iroFW\system\usb\usb9\usb9.c
003dbc   0e01     MOVLW     0x1                                                                                             
003dbe   6fe2     MOVWF     0xe2,0x1                                                                                        
                                                       /*                                                                   E:\iroFW\system\usb\usb9\usb9.c
                                                        * _byte0: bit0: Self-Powered Status [0] Bus-Powered [1] Self-Powered E:\iroFW\system\usb\usb9\usb9.c
                                                        *         bit1: RemoteWakeup        [0] Disabled    [1] Enabled     E:\iroFW\system\usb\usb9\usb9.c
                                                        */                                                                  E:\iroFW\system\usb\usb9\usb9.c
                                                       if(self_power == 1)                     // self_power defined in io_cfg.h E:\iroFW\system\usb\usb9\usb9.c
003dc0   0104     MOVLB     0x4                            CtrlTrfData._byte0|=0b000000001;    // Set bit0                  E:\iroFW\system\usb\usb9\usb9.c
003dc2   8128     BSF       0x28,0x0,0x1                                                                                    
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
003dc4   0101     MOVLB     0x1                        if(usb_stat.RemoteWakeup == 1)          // usb_stat defined in usbmmap.c E:\iroFW\system\usb\usb9\usb9.c
003dc6   a1ea     BTFSS     0xea,0x0,0x1                                                                                    
003dc8   d002     BRA       0x3dce                                                                                          
003dca   0104     MOVLB     0x4                            CtrlTrfData._byte0|=0b00000010;     // Set bit1                  E:\iroFW\system\usb\usb9\usb9.c
003dcc   8328     BSF       0x28,0x1,0x1                                                                                    
003dce   d029     BRA       0x3e22                     break;                                                               E:\iroFW\system\usb\usb9\usb9.c
                                                   case RCPT_INTF:                                                          E:\iroFW\system\usb\usb9\usb9.c
003dd0   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;     // No data to update         E:\iroFW\system\usb\usb9\usb9.c
003dd2   0e01     MOVLW     0x1                                                                                             
003dd4   6fe2     MOVWF     0xe2,0x1                                                                                        
003dd6   d025     BRA       0x3e22                     break;                                                               E:\iroFW\system\usb\usb9\usb9.c
                                                   case RCPT_EP:                                                            E:\iroFW\system\usb\usb9\usb9.c
003dd8   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  E:\iroFW\system\usb\usb9\usb9.c
003dda   0e01     MOVLW     0x1                                                                                             
003ddc   6fe2     MOVWF     0xe2,0x1                                                                                        
                                                       /*                                                                   E:\iroFW\system\usb\usb9\usb9.c
                                                        * _byte0: bit0: Halt Status [0] Not Halted [1] Halted               E:\iroFW\system\usb\usb9\usb9.c
                                                        */                                                                  E:\iroFW\system\usb\usb9\usb9.c
003dde   0104     MOVLB     0x4                        pDst.bRam = (byte*)&ep0Bo+(SetupPkt.EPNum*8)+(SetupPkt.EPDir*4);     E:\iroFW\system\usb\usb9\usb9.c
003de0   5124     MOVF      0x24,0x0,0x1                                                                                    
003de2   0b0f     ANDLW     0xf                                                                                             
003de4   0d08     MULLW     0x8                                                                                             
003de6   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003de8   6a2b     CLRF      0x2b,0x0                                                                                        
003dea   0f00     ADDLW     0x0                                                                                             
003dec   6e2a     MOVWF     0x2a,0x0                                                                                        
003dee   0e04     MOVLW     0x4                                                                                             
003df0   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
003df2   0104     MOVLB     0x4                                                                                             
003df4   5124     MOVF      0x24,0x0,0x1                                                                                    
003df6   0b80     ANDLW     0x80                                                                                            
003df8   e001     BZ        0x3dfc                                                                                          
003dfa   0e01     MOVLW     0x1                                                                                             
003dfc   0d04     MULLW     0x4                                                                                             
003dfe   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003e00   0101     MOVLB     0x1                                                                                             
003e02   242a     ADDWF     0x2a,0x0,0x0                                                                                    
003e04   6fe5     MOVWF     0xe5,0x1                                                                                        
003e06   0e00     MOVLW     0x0                                                                                             
003e08   202b     ADDWFC    0x2b,0x0,0x0                                                                                    
003e0a   6fe6     MOVWF     0xe6,0x1                                                                                        
003e0c   c1e5     MOVFF     0x1e5,0xfe9                if(*pDst.bRam & _BSTALL)    // Use _BSTALL as a bit mask             E:\iroFW\system\usb\usb9\usb9.c
003e0e   ffe9                                                                                                               
003e10   c1e6     MOVFF     0x1e6,0xfea                                                                                     
003e12   ffea                                                                                                               
003e14   50ef     MOVF      0xef,0x0,0x0                                                                                    
003e16   0b04     ANDLW     0x4                                                                                             
003e18   e003     BZ        0x3e20                                                                                          
003e1a   0104     MOVLB     0x4                            CtrlTrfData._byte0=0x01;// Set bit0                              E:\iroFW\system\usb\usb9\usb9.c
003e1c   0e01     MOVLW     0x1                                                                                             
003e1e   6f28     MOVWF     0x28,0x1                                                                                        
003e20   d000     BRA       0x3e22                     break;                                                               E:\iroFW\system\usb\usb9\usb9.c
                                               }//end switch                                                                E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
003e22   0101     MOVLB     0x1                if(ctrl_trf_session_owner == MUID_USB9)                                      E:\iroFW\system\usb\usb9\usb9.c
003e24   05e2     DECF      0xe2,0x0,0x1                                                                                    
003e26   e10a     BNZ       0x3e3c                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usb9\usb9.c
003e28   0101     MOVLB     0x1                    pSrc.bRam = (byte*)&CtrlTrfData;            // Set Source                E:\iroFW\system\usb\usb9\usb9.c
003e2a   0e28     MOVLW     0x28                                                                                            
003e2c   6fe3     MOVWF     0xe3,0x1                                                                                        
003e2e   0e04     MOVLW     0x4                                                                                             
003e30   6fe4     MOVWF     0xe4,0x1                                                                                        
003e32   0101     MOVLB     0x1                    usb_stat.ctrl_trf_mem = _RAM;               // Set memory type           E:\iroFW\system\usb\usb9\usb9.c
003e34   93ea     BCF       0xea,0x1,0x1                                                                                    
003e36   0101     MOVLB     0x1                    LSB(wCount) = 2;                            // Set data count            E:\iroFW\system\usb\usb9\usb9.c
003e38   0e02     MOVLW     0x2                                                                                             
003e3a   6fe7     MOVWF     0xe7,0x1                                                                                        
                                               }//end if(...)                                                               E:\iroFW\system\usb\usb9\usb9.c
003e3c   0012     RETURN    0x0            }//end USBStdGetStatusHandler                                                    E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
                                           /******************************************************************************  E:\iroFW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdFeatureReqHandler(void)                           E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Overview:        This routine handles the standard SET & CLEAR FEATURES       E:\iroFW\system\usb\usb9\usb9.c
                                            *                  requests                                                     E:\iroFW\system\usb\usb9\usb9.c
                                            *                                                                               E:\iroFW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usb9\usb9.c
                                           void USBStdFeatureReqHandler(void)                                               E:\iroFW\system\usb\usb9\usb9.c
                                           {                                                                                E:\iroFW\system\usb\usb9\usb9.c
003e3e   0104     MOVLB     0x4                if((SetupPkt.bFeature == DEVICE_REMOTE_WAKEUP)&&                             E:\iroFW\system\usb\usb9\usb9.c
003e40   0522     DECF      0x22,0x0,0x1                                                                                    
003e42   e111     BNZ       0x3e66                (SetupPkt.Recipient == RCPT_DEV))                                         E:\iroFW\system\usb\usb9\usb9.c
003e44   0104     MOVLB     0x4                                                                                             
003e46   5120     MOVF      0x20,0x0,0x1                                                                                    
003e48   0b1f     ANDLW     0x1f                                                                                            
003e4a   0900     IORLW     0x0                                                                                             
003e4c   e10c     BNZ       0x3e66                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usb9\usb9.c
003e4e   0101     MOVLB     0x1                    ctrl_trf_session_owner = MUID_USB9;                                      E:\iroFW\system\usb\usb9\usb9.c
003e50   0e01     MOVLW     0x1                                                                                             
003e52   6fe2     MOVWF     0xe2,0x1                                                                                        
003e54   0e03     MOVLW     0x3                    if(SetupPkt.bRequest == SET_FEATURE)                                     E:\iroFW\system\usb\usb9\usb9.c
003e56   0104     MOVLB     0x4                                                                                             
003e58   5d21     SUBWF     0x21,0x0,0x1                                                                                    
003e5a   e103     BNZ       0x3e62                                                                                          
003e5c   0101     MOVLB     0x1                        usb_stat.RemoteWakeup = 1;                                           E:\iroFW\system\usb\usb9\usb9.c
003e5e   81ea     BSF       0xea,0x0,0x1                                                                                    
003e60   d002     BRA       0x3e66                 else                                                                     E:\iroFW\system\usb\usb9\usb9.c
003e62   0101     MOVLB     0x1                        usb_stat.RemoteWakeup = 0;                                           E:\iroFW\system\usb\usb9\usb9.c
003e64   91ea     BCF       0xea,0x0,0x1                                                                                    
                                               }//end if                                                                    E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
003e66   0104     MOVLB     0x4                if((SetupPkt.bFeature == ENDPOINT_HALT)&&                                    E:\iroFW\system\usb\usb9\usb9.c
003e68   5122     MOVF      0x22,0x0,0x1                                                                                    
003e6a   e13e     BNZ       0x3ee8                (SetupPkt.Recipient == RCPT_EP)&&                                         E:\iroFW\system\usb\usb9\usb9.c
003e6c   0104     MOVLB     0x4                                                                                             
003e6e   5120     MOVF      0x20,0x0,0x1                                                                                    
003e70   0b1f     ANDLW     0x1f                                                                                            
003e72   0802     SUBLW     0x2                                                                                             
003e74   e139     BNZ       0x3ee8                                                                                          
003e76   0104     MOVLB     0x4                   (SetupPkt.EPNum != 0))                                                    E:\iroFW\system\usb\usb9\usb9.c
003e78   5124     MOVF      0x24,0x0,0x1                                                                                    
003e7a   0b0f     ANDLW     0xf                                                                                             
003e7c   0900     IORLW     0x0                                                                                             
003e7e   e034     BZ        0x3ee8                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usb9\usb9.c
003e80   0101     MOVLB     0x1                    ctrl_trf_session_owner = MUID_USB9;                                      E:\iroFW\system\usb\usb9\usb9.c
003e82   0e01     MOVLW     0x1                                                                                             
003e84   6fe2     MOVWF     0xe2,0x1                                                                                        
                                                   /* Must do address calculation here */                                   E:\iroFW\system\usb\usb9\usb9.c
003e86   0104     MOVLB     0x4                    pDst.bRam = (byte*)&ep0Bo+(SetupPkt.EPNum*8)+(SetupPkt.EPDir*4);         E:\iroFW\system\usb\usb9\usb9.c
003e88   5124     MOVF      0x24,0x0,0x1                                                                                    
003e8a   0b0f     ANDLW     0xf                                                                                             
003e8c   0d08     MULLW     0x8                                                                                             
003e8e   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003e90   6a2b     CLRF      0x2b,0x0                                                                                        
003e92   0f00     ADDLW     0x0                                                                                             
003e94   6e2a     MOVWF     0x2a,0x0                                                                                        
003e96   0e04     MOVLW     0x4                                                                                             
003e98   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
003e9a   0104     MOVLB     0x4                                                                                             
003e9c   5124     MOVF      0x24,0x0,0x1                                                                                    
003e9e   0b80     ANDLW     0x80                                                                                            
003ea0   e001     BZ        0x3ea4                                                                                          
003ea2   0e01     MOVLW     0x1                                                                                             
003ea4   0d04     MULLW     0x4                                                                                             
003ea6   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003ea8   0101     MOVLB     0x1                                                                                             
003eaa   242a     ADDWF     0x2a,0x0,0x0                                                                                    
003eac   6fe5     MOVWF     0xe5,0x1                                                                                        
003eae   0e00     MOVLW     0x0                                                                                             
003eb0   202b     ADDWFC    0x2b,0x0,0x0                                                                                    
003eb2   6fe6     MOVWF     0xe6,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
003eb4   0e03     MOVLW     0x3                    if(SetupPkt.bRequest == SET_FEATURE)                                     E:\iroFW\system\usb\usb9\usb9.c
003eb6   0104     MOVLB     0x4                                                                                             
003eb8   5d21     SUBWF     0x21,0x0,0x1                                                                                    
003eba   e107     BNZ       0x3eca                                                                                          
003ebc   0e84     MOVLW     0x84                       *pDst.bRam = _USIE|_BSTALL;                                          E:\iroFW\system\usb\usb9\usb9.c
003ebe   c1e5     MOVFF     0x1e5,0xfe9                                                                                     
003ec0   ffe9                                                                                                               
003ec2   c1e6     MOVFF     0x1e6,0xfea                                                                                     
003ec4   ffea                                                                                                               
003ec6   6eef     MOVWF     0xef,0x0                                                                                        
003ec8   d00f     BRA       0x3ee8                 else                                                                     E:\iroFW\system\usb\usb9\usb9.c
                                                   {                                                                        E:\iroFW\system\usb\usb9\usb9.c
003eca   0104     MOVLB     0x4                        if(SetupPkt.EPDir == 1) // IN                                        E:\iroFW\system\usb\usb9\usb9.c
003ecc   af24     BTFSS     0x24,0x7,0x1                                                                                    
003ece   d006     BRA       0x3edc                                                                                          
003ed0   c1e5     MOVFF     0x1e5,0xfe9                    *pDst.bRam = _UCPU;                                              E:\iroFW\system\usb\usb9\usb9.c
003ed2   ffe9                                                                                                               
003ed4   c1e6     MOVFF     0x1e6,0xfea                                                                                     
003ed6   ffea                                                                                                               
003ed8   6aef     CLRF      0xef,0x0                                                                                        
003eda   d006     BRA       0x3ee8                     else                                                                 E:\iroFW\system\usb\usb9\usb9.c
003edc   0e88     MOVLW     0x88                           *pDst.bRam = _USIE|_DAT0|_DTSEN;                                 E:\iroFW\system\usb\usb9\usb9.c
003ede   c1e5     MOVFF     0x1e5,0xfe9                                                                                     
003ee0   ffe9                                                                                                               
003ee2   c1e6     MOVFF     0x1e6,0xfea                                                                                     
003ee4   ffea                                                                                                               
003ee6   6eef     MOVWF     0xef,0x0                                                                                        
                                                   }//end if                                                                E:\iroFW\system\usb\usb9\usb9.c
                                               }//end if                                                                    E:\iroFW\system\usb\usb9\usb9.c
003ee8   0012     RETURN    0x0            }//end USBStdFeatureReqHandler                                                   E:\iroFW\system\usb\usb9\usb9.c
                                                                                                                            E:\iroFW\system\usb\usb9\usb9.c
                                           /** EOF usb9.c ***************************************************************/  E:\iroFW\system\usb\usb9\usb9.c
                                           /*********************************************************************           E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            *                Microchip USB C18 Firmware Version 1.0                         E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            *********************************************************************           E:\iroFW\autofiles\usbdsc.c
                                            * FileName:        usbdsc.c                                                     E:\iroFW\autofiles\usbdsc.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iroFW\autofiles\usbdsc.c
                                            * Processor:       PIC18                                                        E:\iroFW\autofiles\usbdsc.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iroFW\autofiles\usbdsc.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * Software License Agreement                                                    E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iroFW\autofiles\usbdsc.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iroFW\autofiles\usbdsc.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iroFW\autofiles\usbdsc.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iroFW\autofiles\usbdsc.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iroFW\autofiles\usbdsc.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iroFW\autofiles\usbdsc.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iroFW\autofiles\usbdsc.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iroFW\autofiles\usbdsc.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iroFW\autofiles\usbdsc.c
                                            * license.                                                                      E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iroFW\autofiles\usbdsc.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iroFW\autofiles\usbdsc.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iroFW\autofiles\usbdsc.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iroFW\autofiles\usbdsc.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iroFW\autofiles\usbdsc.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            ********************************************************************/           E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                           /*********************************************************************           E:\iroFW\autofiles\usbdsc.c
                                            * -usbdsc.c-                                                                    E:\iroFW\autofiles\usbdsc.c
                                            * This file contains the USB descriptor information. It is used                 E:\iroFW\autofiles\usbdsc.c
                                            * in conjunction with the usbdsc.h file. When a descriptor is added             E:\iroFW\autofiles\usbdsc.c
                                            * or removed from the main configuration descriptor, i.e. CFG01,                E:\iroFW\autofiles\usbdsc.c
                                            * the user must also change the descriptor structure defined in                 E:\iroFW\autofiles\usbdsc.c
                                            * the usbdsc.h file. The structure is used to calculate the                     E:\iroFW\autofiles\usbdsc.c
                                            * descriptor size, i.e. sizeof(CFG01).                                          E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * A typical configuration descriptor consists of:                               E:\iroFW\autofiles\usbdsc.c
                                            * At least one configuration descriptor (USB_CFG_DSC)                           E:\iroFW\autofiles\usbdsc.c
                                            * One or more interface descriptors (USB_INTF_DSC)                              E:\iroFW\autofiles\usbdsc.c
                                            * One or more endpoint descriptors (USB_EP_DSC)                                 E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * Naming Convention:                                                            E:\iroFW\autofiles\usbdsc.c
                                            * To resolve ambiguity, the naming convention are as followed:                  E:\iroFW\autofiles\usbdsc.c
                                            * - USB_CFG_DSC type should be named cdxx, where xx is the                      E:\iroFW\autofiles\usbdsc.c
                                            *   configuration number. This number should match the actual                   E:\iroFW\autofiles\usbdsc.c
                                            *   index value of this configuration.                                          E:\iroFW\autofiles\usbdsc.c
                                            * - USB_INTF_DSC type should be named i<yy>a<zz>, where yy is the               E:\iroFW\autofiles\usbdsc.c
                                            *   interface number and zz is the alternate interface number.                  E:\iroFW\autofiles\usbdsc.c
                                            * - USB_EP_DSC type should be named ep<##><d>_i<yy>a<zz>, where                 E:\iroFW\autofiles\usbdsc.c
                                            *   ## is the endpoint number and d is the direction of transfer.               E:\iroFW\autofiles\usbdsc.c
                                            *   The interface name should also be listed as a suffix to identify            E:\iroFW\autofiles\usbdsc.c
                                            *   which interface does the endpoint belong to.                                E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * Example:                                                                      E:\iroFW\autofiles\usbdsc.c
                                            * If a device has one configuration, two interfaces; interface 0                E:\iroFW\autofiles\usbdsc.c
                                            * has two endpoints (in and out), and interface 1 has one endpoint(in).         E:\iroFW\autofiles\usbdsc.c
                                            * Then the CFG01 structure in the usbdsc.h should be:                           E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * #define CFG01 rom struct                            \                         E:\iroFW\autofiles\usbdsc.c
                                            * {   USB_CFG_DSC             cd01;                   \                         E:\iroFW\autofiles\usbdsc.c
                                            *     USB_INTF_DSC            i00a00;                 \                         E:\iroFW\autofiles\usbdsc.c
                                            *     USB_EP_DSC              ep01o_i00a00;           \                         E:\iroFW\autofiles\usbdsc.c
                                            *     USB_EP_DSC              ep01i_i00a00;           \                         E:\iroFW\autofiles\usbdsc.c
                                            *     USB_INTF_DSC            i01a00;                 \                         E:\iroFW\autofiles\usbdsc.c
                                            *     USB_EP_DSC              ep02i_i01a00;           \                         E:\iroFW\autofiles\usbdsc.c
                                            * } cfg01                                                                       E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * Note the hierarchy of the descriptors above, it follows the USB               E:\iroFW\autofiles\usbdsc.c
                                            * specification requirement. All endpoints belonging to an interface            E:\iroFW\autofiles\usbdsc.c
                                            * should be listed immediately after that interface.                            E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           E:\iroFW\autofiles\usbdsc.c
                                            * Filling in the descriptor values in the usbdsc.c file:                        E:\iroFW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           E:\iroFW\autofiles\usbdsc.c
                                            * Most items should be self-explanatory, however, a few will be                 E:\iroFW\autofiles\usbdsc.c
                                            * explained for clarification.                                                  E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * [Configuration Descriptor(USB_CFG_DSC)]                                       E:\iroFW\autofiles\usbdsc.c
                                            * The configuration attribute must always have the _DEFAULT                     E:\iroFW\autofiles\usbdsc.c
                                            * definition at the minimum. Additional options can be ORed                     E:\iroFW\autofiles\usbdsc.c
                                            * to the _DEFAULT attribute. Available options are _SELF and _RWU.              E:\iroFW\autofiles\usbdsc.c
                                            * These definitions are defined in the usbdefs_std_dsc.h file. The              E:\iroFW\autofiles\usbdsc.c
                                            * _SELF tells the USB host that this device is self-powered. The                E:\iroFW\autofiles\usbdsc.c
                                            * _RWU tells the USB host that this device supports Remote Wakeup.              E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * [Endpoint Descriptor(USB_EP_DSC)]                                             E:\iroFW\autofiles\usbdsc.c
                                            * Assume the following example:                                                 E:\iroFW\autofiles\usbdsc.c
                                            * sizeof(USB_EP_DSC),DSC_EP,_EP01_OUT,_BULK,64,0x00                             E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * The first two parameters are self-explanatory. They specify the               E:\iroFW\autofiles\usbdsc.c
                                            * length of this endpoint descriptor (7) and the descriptor type.               E:\iroFW\autofiles\usbdsc.c
                                            * The next parameter identifies the endpoint, the definitions are               E:\iroFW\autofiles\usbdsc.c
                                            * defined in usbdefs_std_dsc.h and has the following naming                     E:\iroFW\autofiles\usbdsc.c
                                            * convention:                                                                   E:\iroFW\autofiles\usbdsc.c
                                            * _EP<##>_<dir>                                                                 E:\iroFW\autofiles\usbdsc.c
                                            * where ## is the endpoint number and dir is the direction of                   E:\iroFW\autofiles\usbdsc.c
                                            * transfer. The dir has the value of either 'OUT' or 'IN'.                      E:\iroFW\autofiles\usbdsc.c
                                            * The next parameter identifies the type of the endpoint. Available             E:\iroFW\autofiles\usbdsc.c
                                            * options are _BULK, _INT, _ISO, and _CTRL. The _CTRL is not                    E:\iroFW\autofiles\usbdsc.c
                                            * typically used because the default control transfer endpoint is               E:\iroFW\autofiles\usbdsc.c
                                            * not defined in the USB descriptors. When _ISO option is used,                 E:\iroFW\autofiles\usbdsc.c
                                            * addition options can be ORed to _ISO. Example:                                E:\iroFW\autofiles\usbdsc.c
                                            * _ISO|_AD|_FE                                                                  E:\iroFW\autofiles\usbdsc.c
                                            * This describes the endpoint as an isochronous pipe with adaptive              E:\iroFW\autofiles\usbdsc.c
                                            * and feedback attributes. See usbdefs_std_dsc.h and the USB                    E:\iroFW\autofiles\usbdsc.c
                                            * specification for details. The next parameter defines the size of             E:\iroFW\autofiles\usbdsc.c
                                            * the endpoint. The last parameter in the polling interval.                     E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           E:\iroFW\autofiles\usbdsc.c
                                            * Adding a USB String                                                           E:\iroFW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           E:\iroFW\autofiles\usbdsc.c
                                            * A string descriptor array should have the following format:                   E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * rom struct{byte bLength;byte bDscType;word string[size];}sdxxx={              E:\iroFW\autofiles\usbdsc.c
                                            * sizeof(sdxxx),DSC_STR,<text>};                                                E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * The above structure provides a means for the C compiler to                    E:\iroFW\autofiles\usbdsc.c
                                            * calculate the length of string descriptor sdxxx, where xxx is the             E:\iroFW\autofiles\usbdsc.c
                                            * index number. The first two bytes of the descriptor are descriptor            E:\iroFW\autofiles\usbdsc.c
                                            * length and type. The rest <text> are string texts which must be               E:\iroFW\autofiles\usbdsc.c
                                            * in the unicode format. The unicode format is achieved by declaring            E:\iroFW\autofiles\usbdsc.c
                                            * each character as a word type. The whole text string is declared              E:\iroFW\autofiles\usbdsc.c
                                            * as a word array with the number of characters equals to <size>.               E:\iroFW\autofiles\usbdsc.c
                                            * <size> has to be manually counted and entered into the array                  E:\iroFW\autofiles\usbdsc.c
                                            * declaration. Let's study this through an example:                             E:\iroFW\autofiles\usbdsc.c
                                            * if the string is "USB" , then the string descriptor should be:                E:\iroFW\autofiles\usbdsc.c
                                            * (Using index 02)                                                              E:\iroFW\autofiles\usbdsc.c
                                            * rom struct{byte bLength;byte bDscType;word string[3];}sd002={                 E:\iroFW\autofiles\usbdsc.c
                                            * sizeof(sd002),DSC_STR,'U','S','B'};                                           E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * A USB project may have multiple strings and the firmware supports             E:\iroFW\autofiles\usbdsc.c
                                            * the management of multiple strings through a look-up table.                   E:\iroFW\autofiles\usbdsc.c
                                            * The look-up table is defined as:                                              E:\iroFW\autofiles\usbdsc.c
                                            * rom const unsigned char *rom USB_SD_Ptr[]={&sd000,&sd001,&sd002};             E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * The above declaration has 3 strings, sd000, sd001, and sd002.                 E:\iroFW\autofiles\usbdsc.c
                                            * Strings can be removed or added. sd000 is a specialized string                E:\iroFW\autofiles\usbdsc.c
                                            * descriptor. It defines the language code, usually this is                     E:\iroFW\autofiles\usbdsc.c
                                            * US English (0x0409). The index of the string must match the index             E:\iroFW\autofiles\usbdsc.c
                                            * position of the USB_SD_Ptr array, &sd000 must be in position                  E:\iroFW\autofiles\usbdsc.c
                                            * USB_SD_Ptr[0], &sd001 must be in position USB_SD_Ptr[1] and so on.            E:\iroFW\autofiles\usbdsc.c
                                            * The look-up table USB_SD_Ptr is used by the get string handler                E:\iroFW\autofiles\usbdsc.c
                                            * function in usb9.c.                                                           E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * The look-up table scheme also applies to the configuration                    E:\iroFW\autofiles\usbdsc.c
                                            * descriptor. A USB device may have multiple configuration                      E:\iroFW\autofiles\usbdsc.c
                                            * descriptors, i.e. CFG01, CFG02, etc. To add a configuration                   E:\iroFW\autofiles\usbdsc.c
                                            * descriptor, user must implement a structure similar to CFG01.                 E:\iroFW\autofiles\usbdsc.c
                                            * The next step is to add the configuration descriptor name, i.e.               E:\iroFW\autofiles\usbdsc.c
                                            * cfg01, cfg02,.., to the look-up table USB_CD_Ptr. USB_CD_Ptr[0]               E:\iroFW\autofiles\usbdsc.c
                                            * is a dummy place holder since configuration 0 is the un-configured            E:\iroFW\autofiles\usbdsc.c
                                            * state according to the definition in the USB specification.                   E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            ********************************************************************/           E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                           /*********************************************************************           E:\iroFW\autofiles\usbdsc.c
                                            * Descriptor specific type definitions are defined in:                          E:\iroFW\autofiles\usbdsc.c
                                            * system\usb\usbdefs\usbdefs_std_dsc.h                                          E:\iroFW\autofiles\usbdsc.c
                                            *                                                                               E:\iroFW\autofiles\usbdsc.c
                                            * Configuration information is defined in:                                      E:\iroFW\autofiles\usbdsc.c
                                            * autofiles\usbcfg.h                                                            E:\iroFW\autofiles\usbdsc.c
                                            ********************************************************************/           E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                           /** I N C L U D E S *************************************************/           E:\iroFW\autofiles\usbdsc.c
                                           #include "system\typedefs.h"                                                     E:\iroFW\autofiles\usbdsc.c
                                           #include "system\usb\usb.h"                                                      E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                           /** C O N S T A N T S ************************************************/          E:\iroFW\autofiles\usbdsc.c
                                           #pragma romdata                                                                  E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                           /* Device Descriptor */                                                          E:\iroFW\autofiles\usbdsc.c
                                           rom USB_DEV_DSC device_dsc=                                                      E:\iroFW\autofiles\usbdsc.c
                                           {                                                                                E:\iroFW\autofiles\usbdsc.c
                                               sizeof(USB_DEV_DSC),    // Size of this descriptor in bytes                  E:\iroFW\autofiles\usbdsc.c
                                               DSC_DEV,                // DEVICE descriptor type                            E:\iroFW\autofiles\usbdsc.c
                                               0x0200,                 // USB Spec Release Number in BCD format             E:\iroFW\autofiles\usbdsc.c
                                               CDC_DEVICE,             // Class Code                                        E:\iroFW\autofiles\usbdsc.c
                                               0x00,                   // Subclass code                                     E:\iroFW\autofiles\usbdsc.c
                                               0x00,                   // Protocol code                                     E:\iroFW\autofiles\usbdsc.c
                                               EP0_BUFF_SIZE,          // Max packet size for EP0, see usbcfg.h             E:\iroFW\autofiles\usbdsc.c
                                               0x04D8,                 // Vendor ID                                         E:\iroFW\autofiles\usbdsc.c
                                               0x000A,                 // Product ID: CDC RS-232 Emulation Demo             E:\iroFW\autofiles\usbdsc.c
                                               0x0000,                 // Device release number in BCD format               E:\iroFW\autofiles\usbdsc.c
                                               0x01,                   // Manufacturer string index                         E:\iroFW\autofiles\usbdsc.c
                                               0x02,                   // Product string index                              E:\iroFW\autofiles\usbdsc.c
                                               0x00,                   // Device serial number string index                 E:\iroFW\autofiles\usbdsc.c
                                               0x01                    // Number of possible configurations                 E:\iroFW\autofiles\usbdsc.c
                                           };                                                                               E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                           /* Configuration 1 Descriptor */                                                 E:\iroFW\autofiles\usbdsc.c
                                           CFG01=                                                                           E:\iroFW\autofiles\usbdsc.c
                                           {                                                                                E:\iroFW\autofiles\usbdsc.c
                                               /* Configuration Descriptor */                                               E:\iroFW\autofiles\usbdsc.c
                                               sizeof(USB_CFG_DSC),    // Size of this descriptor in bytes                  E:\iroFW\autofiles\usbdsc.c
                                               DSC_CFG,                // CONFIGURATION descriptor type                     E:\iroFW\autofiles\usbdsc.c
                                               sizeof(cfg01),          // Total length of data for this cfg                 E:\iroFW\autofiles\usbdsc.c
                                               2,                      // Number of interfaces in this cfg                  E:\iroFW\autofiles\usbdsc.c
                                               1,                      // Index value of this configuration                 E:\iroFW\autofiles\usbdsc.c
                                               0,                      // Configuration string index                        E:\iroFW\autofiles\usbdsc.c
                                               _DEFAULT,               // Attributes, see usbdefs_std_dsc.h                 E:\iroFW\autofiles\usbdsc.c
                                               50,                     // Max power consumption (2X mA)                     E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                               /* Interface Descriptor */                                                   E:\iroFW\autofiles\usbdsc.c
                                               sizeof(USB_INTF_DSC),   // Size of this descriptor in bytes                  E:\iroFW\autofiles\usbdsc.c
                                               DSC_INTF,               // INTERFACE descriptor type                         E:\iroFW\autofiles\usbdsc.c
                                               0,                      // Interface Number                                  E:\iroFW\autofiles\usbdsc.c
                                               0,                      // Alternate Setting Number                          E:\iroFW\autofiles\usbdsc.c
                                               1,                      // Number of endpoints in this intf                  E:\iroFW\autofiles\usbdsc.c
                                               COMM_INTF,              // Class code                                        E:\iroFW\autofiles\usbdsc.c
                                               ABSTRACT_CONTROL_MODEL, // Subclass code                                     E:\iroFW\autofiles\usbdsc.c
                                               V25TER,                 // Protocol code                                     E:\iroFW\autofiles\usbdsc.c
                                               0,                      // Interface string index                            E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                               /* CDC Class-Specific Descriptors */                                         E:\iroFW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_HEADER_FN_DSC),CS_INTERFACE,DSC_FN_HEADER,0x0110,             E:\iroFW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_ACM_FN_DSC),CS_INTERFACE,DSC_FN_ACM,0x02,                     E:\iroFW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_UNION_FN_DSC),CS_INTERFACE,DSC_FN_UNION,CDC_COMM_INTF_ID,CDC_DATA_INTF_ID, E:\iroFW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_CALL_MGT_FN_DSC),CS_INTERFACE,DSC_FN_CALL_MGT,0x00,CDC_DATA_INTF_ID, E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                               /* Endpoint Descriptor */                                                    E:\iroFW\autofiles\usbdsc.c
                                               sizeof(USB_EP_DSC),DSC_EP,_EP02_IN,_INT,CDC_INT_EP_SIZE,0x02,                E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                               /* Interface Descriptor */                                                   E:\iroFW\autofiles\usbdsc.c
                                               sizeof(USB_INTF_DSC),   // Size of this descriptor in bytes                  E:\iroFW\autofiles\usbdsc.c
                                               DSC_INTF,               // INTERFACE descriptor type                         E:\iroFW\autofiles\usbdsc.c
                                               1,                      // Interface Number                                  E:\iroFW\autofiles\usbdsc.c
                                               0,                      // Alternate Setting Number                          E:\iroFW\autofiles\usbdsc.c
                                               2,                      // Number of endpoints in this intf                  E:\iroFW\autofiles\usbdsc.c
                                               DATA_INTF,              // Class code                                        E:\iroFW\autofiles\usbdsc.c
                                               0,                      // Subclass code                                     E:\iroFW\autofiles\usbdsc.c
                                               NO_PROTOCOL,            // Protocol code                                     E:\iroFW\autofiles\usbdsc.c
                                               0,                      // Interface string index                            E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                               /* Endpoint Descriptors */                                                   E:\iroFW\autofiles\usbdsc.c
                                               sizeof(USB_EP_DSC),DSC_EP,_EP03_OUT,_BULK,CDC_BULK_OUT_EP_SIZE,0x00,         E:\iroFW\autofiles\usbdsc.c
                                               sizeof(USB_EP_DSC),DSC_EP,_EP03_IN,_BULK,CDC_BULK_IN_EP_SIZE,0x00            E:\iroFW\autofiles\usbdsc.c
                                           };                                                                               E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                           rom struct{byte bLength;byte bDscType;word string[1];}sd000={                    E:\iroFW\autofiles\usbdsc.c
                                           sizeof(sd000),DSC_STR,0x0409};                                                   E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                           rom struct{byte bLength;byte bDscType;word string[25];}sd001={                   E:\iroFW\autofiles\usbdsc.c
                                           sizeof(sd001),DSC_STR,                                                           E:\iroFW\autofiles\usbdsc.c
                                           'M','i','c','r','o','c','h','i','p',' ',                                         E:\iroFW\autofiles\usbdsc.c
                                           'T','e','c','h','n','o','l','o','g','y',' ','I','n','c','.'};                    E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                           rom struct{byte bLength;byte bDscType;word string[25];}sd002={                   E:\iroFW\autofiles\usbdsc.c
                                           sizeof(sd002),DSC_STR,                                                           E:\iroFW\autofiles\usbdsc.c
                                           'C','D','C',' ','R','S','-','2','3','2',' ',                                     E:\iroFW\autofiles\usbdsc.c
                                           'E','m','u','l','a','t','i','o','n',' ','D','e','m','o'};                        E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                           rom const unsigned char *rom USB_CD_Ptr[]={&cfg01,&cfg01};                       E:\iroFW\autofiles\usbdsc.c
                                           rom const unsigned char *rom USB_SD_Ptr[]={&sd000,&sd001,&sd002};                E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                           rom pFunc ClassReqHandler[1]=                                                    E:\iroFW\autofiles\usbdsc.c
                                           {                                                                                E:\iroFW\autofiles\usbdsc.c
                                               &USBCheckCDCRequest                                                          E:\iroFW\autofiles\usbdsc.c
                                           };                                                                               E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                           #pragma code                                                                     E:\iroFW\autofiles\usbdsc.c
                                                                                                                            E:\iroFW\autofiles\usbdsc.c
                                           /** EOF usbdsc.c ****************************************************/           E:\iroFW\autofiles\usbdsc.c
                                           /*********************************************************************           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                Microchip USB C18 Firmware Version 1.0                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *********************************************************************           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * FileName:        usbctrltrf.c                                                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Processor:       PIC18                                                        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Software License Agreement                                                    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * license.                                                                      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Author               Date        Comment                                      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            ********************************************************************/           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** I N C L U D E S **********************************************************/  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           #include <p18cxxx.h>                                                             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           #include "system\typedefs.h"                                                     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           #include "system\usb\usb.h"                                                      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** V A R I A B L E S ********************************************************/  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           #pragma udata                                                                    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           byte ctrl_trf_state;                // Control Transfer State                    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           byte ctrl_trf_session_owner;        // Current transfer session owner            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           POINTER pSrc;                       // Data source pointer                       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           POINTER pDst;                       // Data destination pointer                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           WORD wCount;                        // Data counter                              E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfSetupHandler(void);                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfOutHandler(void);                                                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfInHandler(void);                                                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** D E C L A R A T I O N S **************************************************/  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           #pragma code                                                                     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlEPService(void)                                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    USTAT is loaded with a valid endpoint address.               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        USBCtrlEPService checks for three transaction types that     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  it knows how to service and services them:                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  1. EP0 SETUP                                                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  2. EP0 OUT                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  3. EP0 IN                                                    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  It ignores all other types (i.e. EP1, EP2, etc.)             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlEPService(void)                                                      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003892   506c     MOVF      0x6c,0x0,0x0       if(USTAT == EP00_OUT)                                                        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003894   e002     BZ        0x389a                                                                                          
003896   0e00     MOVLW     0x0                                                                                             
003898   d001     BRA       0x389c                                                                                          
00389a   0e01     MOVLW     0x1                                                                                             
00389c   0900     IORLW     0x0                                                                                             
00389e   e00b     BZ        0x38b6                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038a0   0104     MOVLB     0x4                    if(ep0Bo.Stat.PID == SETUP_TOKEN)           // EP0 SETUP                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038a2   5100     MOVF      0x0,0x0,0x1                                                                                     
0038a4   0b3c     ANDLW     0x3c                                                                                            
0038a6   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0038a8   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0038aa   080d     SUBLW     0xd                                                                                             
0038ac   e102     BNZ       0x38b2                                                                                          
0038ae   d80c     RCALL     0x38c8                     USBCtrlTrfSetupHandler();                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038b0   d001     BRA       0x38b4                 else                                        // EP0 OUT                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038b2   d842     RCALL     0x3938                     USBCtrlTrfOutHandler();                                              E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               }                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038b4   d008     BRA       0x38c6             else if(USTAT == EP00_IN)                       // EP0 IN                    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038b6   506c     MOVF      0x6c,0x0,0x0                                                                                    
0038b8   e002     BZ        0x38be                                                                                          
0038ba   0e00     MOVLW     0x0                                                                                             
0038bc   d001     BRA       0x38c0                                                                                          
0038be   0e01     MOVLW     0x1                                                                                             
0038c0   0904     IORLW     0x4                                                                                             
0038c2   e001     BZ        0x38c6                                                                                          
0038c4   d84b     RCALL     0x395c                 USBCtrlTrfInHandler();                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038c6   0012     RETURN    0x0            }//end USBCtrlEPService                                                          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfSetupHandler(void)                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    SetupPkt buffer is loaded with valid USB Setup Data          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine is a task dispatcher and has 3 stages.          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  1. It initializes the control transfer state machine.        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  2. It calls on each of the module that may know how to       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     service the Setup Request from the host.                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     Module Example: USB9, HID, CDC, MSD, ...                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     As new classes are added, ClassReqHandler table in        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     usbdsc.c should be updated to call all available          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     class handlers.                                           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  3. Once each of the modules has had a chance to check if     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     it is responsible for servicing the request, stage 3      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     then checks direction of the transfer to determine how    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     to prepare EP0 for the control transfer.                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     Refer to USBCtrlEPServiceComplete() for more details.     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            Microchip USB Firmware has three different states for        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  the control transfer state machine:                          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  1. WAIT_SETUP                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  2. CTRL_TRF_TX                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  3. CTRL_TRF_RX                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  Refer to firmware manual to find out how one state           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  is transitioned to another.                                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  A Control Transfer is composed of many USB transactions.     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  When transferring data over multiple transactions,           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  it is important to keep track of data source, data           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  destination, and data count. These three parameters are      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  stored in pSrc,pDst, and wCount. A flag is used to           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  note if the data source is from ROM or RAM.                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038c8   cfd9     MOVFF     0xfd9,0xfe6    void USBCtrlTrfSetupHandler(void)                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038ca   ffe6                                                                                                               
0038cc   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0038ce   ffd9                                                                                                               
0038d0   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               byte i;                                                                      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               /* Stage 1 */                                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038d2   0101     MOVLB     0x1                ctrl_trf_state = WAIT_SETUP;                                                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038d4   6be1     CLRF      0xe1,0x1                                                                                        
0038d6   0101     MOVLB     0x1                ctrl_trf_session_owner = MUID_NULL;     // Set owner to NULL                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038d8   6be2     CLRF      0xe2,0x1                                                                                        
0038da   0101     MOVLB     0x1                wCount._word = 0;                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038dc   6be7     CLRF      0xe7,0x1                                                                                        
0038de   6be8     CLRF      0xe8,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               /* Stage 2 */                                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038e0   ece6     CALL      0x3bcc,0x0         USBCheckStdRequest();                   // See system\usb9\usb9.c            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038e2   f01d                                                                                                               
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038e4   6adf     CLRF      0xdf,0x0           for(i=0;i < (sizeof(ClassReqHandler)/sizeof(pFunc));i++)                     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038e6   50df     MOVF      0xdf,0x0,0x0                                                                                    
0038e8   6e2a     MOVWF     0x2a,0x0                                                                                        
0038ea   6a2b     CLRF      0x2b,0x0                                                                                        
0038ec   0e01     MOVLW     0x1                                                                                             
0038ee   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0038f0   0e00     MOVLW     0x0                                                                                             
0038f2   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
0038f4   e21b     BC        0x392c                                                                                          
003928   2adf     INCF      0xdf,0x1,0x0                                                                                    
00392a   d7dd     BRA       0x38e6                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038f6   0101     MOVLB     0x1                    if(ctrl_trf_session_owner != MUID_NULL)break;                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0038f8   51e2     MOVF      0xe2,0x0,0x1                                                                                    
0038fa   e001     BZ        0x38fe                                                                                          
0038fc   d017     BRA       0x392c                                                                                          
0038fe   6af7     CLRF      0xf7,0x0               ClassReqHandler[i]();               // See autofiles\usbdsc.c            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003900   34df     RLCF      0xdf,0x0,0x0                                                                                    
003902   0bfe     ANDLW     0xfe                                                                                            
003904   36f7     RLCF      0xf7,0x1,0x0                                                                                    
003906   6ef6     MOVWF     0xf6,0x0                                                                                        
003908   0e75     MOVLW     0x75                                                                                            
00390a   26f6     ADDWF     0xf6,0x1,0x0                                                                                    
00390c   0e43     MOVLW     0x43                                                                                            
00390e   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
003910   0009     TBLRDPOSTINC                                                                                              
003912   cff5     MOVFF     0xff5,0x2a                                                                                      
003914   f02a                                                                                                               
003916   0008     TBLRD                                                                                                     
003918   cff5     MOVFF     0xff5,0x2b                                                                                      
00391a   f02b                                                                                                               
00391c   d004     BRA       0x3926                                                                                          
00391e   c02b     MOVFF     0x2b,0xffa                                                                                      
003920   fffa                                                                                                               
003922   502a     MOVF      0x2a,0x0,0x0                                                                                    
003924   6ef9     MOVWF     0xf9,0x0                                                                                        
003926   dffb     RCALL     0x391e                                                                                          
                                               }//end while                                                                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               /* Stage 3 */                                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
00392c   d8f0     RCALL     0x3b0e             USBCtrlEPServiceComplete();                                                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
00392e   52e5     MOVF      0xe5,0x1,0x0   }//end USBCtrlTrfSetupHandler                                                    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003930   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003932   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003934   ffd9                                                                                                               
003936   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfOutHandler(void)                              E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine handles an OUT transaction according to         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  which control transfer state is currently active.            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            Note that if the the control transfer was from               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  host to device, the session owner should be notified         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  at the end of each OUT transaction to service the            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  received data.                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfOutHandler(void)                                                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003938   0e02     MOVLW     0x2                if(ctrl_trf_state == CTRL_TRF_RX)                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
00393a   0101     MOVLB     0x1                                                                                             
00393c   5de1     SUBWF     0xe1,0x0,0x1                                                                                    
00393e   e10c     BNZ       0x3958                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003940   d8a4     RCALL     0x3a8a                 USBCtrlTrfRxService();                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                   /*                                                                       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * Don't have to worry about overwriting _KEEP bit                       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * because if _KEEP was set, TRNIF would not have been                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * generated in the first place.                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                    */                                                                      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003942   0104     MOVLB     0x4                    if(ep0Bo.Stat.DTS == 0)                                                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003944   bd00     BTFSC     0x0,0x6,0x1                                                                                     
003946   d004     BRA       0x3950                                                                                          
003948   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE|_DAT1|_DTSEN;                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
00394a   0ec8     MOVLW     0xc8                                                                                            
00394c   6f00     MOVWF     0x0,0x1                                                                                         
00394e   d003     BRA       0x3956                 else                                                                     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003950   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE|_DAT0|_DTSEN;                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003952   0e88     MOVLW     0x88                                                                                            
003954   6f00     MOVWF     0x0,0x1                                                                                         
                                               }                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003956   d001     BRA       0x395a             else    // CTRL_TRF_TX                                                       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003958   d929     RCALL     0x3bac                 USBPrepareForNextSetupTrf();                                             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
00395a   0012     RETURN    0x0            }//end USBCtrlTrfOutHandler                                                      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfInHandler(void)                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine handles an IN transaction according to          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  which control transfer state is currently active.            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            A Set Address Request must not change the acutal address     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  of the device until the completion of the control            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transfer. The end of the control transfer for Set Address    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  Request is an IN transaction. Therefore it is necessary      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  to service this unique situation when the condition is       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  right. Macro mUSBCheckAdrPendingState is defined in          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  usb9.h and its function is to specifically service this      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  event.                                                       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfInHandler(void)                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
00395c   0e04     MOVLW     0x4                mUSBCheckAdrPendingState();         // Must check if in ADR_PENDING_STATE    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
00395e   0101     MOVLB     0x1                                                                                             
003960   5de9     SUBWF     0xe9,0x0,0x1                                                                                    
003962   e10c     BNZ       0x397c                                                                                          
003964   c422     MOVFF     0x422,0xf6e                                                                                     
003966   ff6e                                                                                                               
003968   506e     MOVF      0x6e,0x0,0x0                                                                                    
00396a   0800     SUBLW     0x0                                                                                             
00396c   e204     BC        0x3976                                                                                          
00396e   0101     MOVLB     0x1                                                                                             
003970   0e05     MOVLW     0x5                                                                                             
003972   6fe9     MOVWF     0xe9,0x1                                                                                        
003974   d003     BRA       0x397c                                                                                          
003976   0101     MOVLB     0x1                                                                                             
003978   0e03     MOVLW     0x3                                                                                             
00397a   6fe9     MOVWF     0xe9,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
00397c   0101     MOVLB     0x1                if(ctrl_trf_state == CTRL_TRF_TX)                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
00397e   05e1     DECF      0xe1,0x0,0x1                                                                                    
003980   e10c     BNZ       0x399a                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003982   d80d     RCALL     0x399e                 USBCtrlTrfTxService();                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003984   0104     MOVLB     0x4                    if(ep0Bi.Stat.DTS == 0)                                                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003986   bd04     BTFSC     0x4,0x6,0x1                                                                                     
003988   d004     BRA       0x3992                                                                                          
00398a   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT1|_DTSEN;                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
00398c   0ec8     MOVLW     0xc8                                                                                            
00398e   6f04     MOVWF     0x4,0x1                                                                                         
003990   d003     BRA       0x3998                 else                                                                     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003992   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT0|_DTSEN;                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003994   0e88     MOVLW     0x88                                                                                            
003996   6f04     MOVWF     0x4,0x1                                                                                         
                                               }                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003998   d001     BRA       0x399c             else // CTRL_TRF_RX                                                          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
00399a   d908     RCALL     0x3bac                 USBPrepareForNextSetupTrf();                                             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
00399c   0012     RETURN    0x0            }//end USBCtrlTrfInHandler                                                       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfTxService(void)                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    pSrc, wCount, and usb_stat.ctrl_trf_mem are setup properly.  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine should be called from only two places.          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  One from USBCtrlEPServiceComplete() and one from             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  USBCtrlTrfInHandler(). It takes care of managing a           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transfer over multiple USB transactions.                     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            This routine works with isochronous endpoint larger than     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  256 bytes and is shown here as an example of how to deal     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  with BC9 and BC8. In reality, a control endpoint can never   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  be larger than 64 bytes.                                     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
00399e   cfd9     MOVFF     0xfd9,0xfe6    void USBCtrlTrfTxService(void)                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039a0   ffe6                                                                                                               
0039a2   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0039a4   ffd9                                                                                                               
0039a6   0e02     MOVLW     0x2                                                                                             
0039a8   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               WORD byte_to_send;                                                           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                * First, have to figure out how many byte of data to send.                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039aa   0101     MOVLB     0x1                if(wCount._word < EP0_BUFF_SIZE)                                             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039ac   0e08     MOVLW     0x8                                                                                             
0039ae   5de7     SUBWF     0xe7,0x0,0x1                                                                                    
0039b0   0e00     MOVLW     0x0                                                                                             
0039b2   59e8     SUBWFB    0xe8,0x0,0x1                                                                                    
0039b4   e205     BC        0x39c0                                                                                          
0039b6   c1e7     MOVFF     0x1e7,0xfde            byte_to_send._word = wCount._word;                                       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039b8   ffde                                                                                                               
0039ba   c1e8     MOVFF     0x1e8,0xfdd                                                                                     
0039bc   ffdd                                                                                                               
0039be   d003     BRA       0x39c6             else                                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039c0   0e08     MOVLW     0x8                    byte_to_send._word = EP0_BUFF_SIZE;                                      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039c2   6ede     MOVWF     0xde,0x0                                                                                        
0039c4   6add     CLRF      0xdd,0x0                                                                                        
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Next, load the number of bytes to send to BC9..0 in buffer descriptor     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039c6   0104     MOVLB     0x4                ep0Bi.Stat.BC9 = 0;                                                          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039c8   9304     BCF       0x4,0x1,0x1                                                                                     
0039ca   0104     MOVLB     0x4                ep0Bi.Stat.BC8 = 0;                                                          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039cc   9104     BCF       0x4,0x0,0x1                                                                                     
0039ce   0e01     MOVLW     0x1                ep0Bi.Stat._byte |= MSB(byte_to_send);                                       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039d0   50db     MOVF      0xdb,0x0,0x0                                                                                    
0039d2   0104     MOVLB     0x4                                                                                             
0039d4   1304     IORWF     0x4,0x1,0x1                                                                                     
0039d6   cfdf     MOVFF     0xfdf,0x405        ep0Bi.Cnt = LSB(byte_to_send);                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039d8   f405                                                                                                               
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Subtract the number of bytes just about to be sent from the total.        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039da   0e00     MOVLW     0x0                wCount._word = wCount._word - byte_to_send._word;                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039dc   50db     MOVF      0xdb,0x0,0x0                                                                                    
0039de   0101     MOVLB     0x1                                                                                             
0039e0   5fe7     SUBWF     0xe7,0x1,0x1                                                                                    
0039e2   0e01     MOVLW     0x1                                                                                             
0039e4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0039e6   0101     MOVLB     0x1                                                                                             
0039e8   5be8     SUBWFB    0xe8,0x1,0x1                                                                                    
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039ea   0101     MOVLB     0x1                pDst.bRam = (byte*)&CtrlTrfData;        // Set destination pointer           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039ec   0e28     MOVLW     0x28                                                                                            
0039ee   6fe5     MOVWF     0xe5,0x1                                                                                        
0039f0   0e04     MOVLW     0x4                                                                                             
0039f2   6fe6     MOVWF     0xe6,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039f4   0101     MOVLB     0x1                if(usb_stat.ctrl_trf_mem == _ROM)       // Determine type of memory source   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039f6   a3ea     BTFSS     0xea,0x1,0x1                                                                                    
0039f8   d020     BRA       0x3a3a                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039fa   cfd9     MOVFF     0xfd9,0xfe9            while(byte_to_send._word)                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
0039fc   ffe9                                                                                                               
0039fe   cfda     MOVFF     0xfda,0xfea                                                                                     
003a00   ffea                                                                                                               
003a02   50ee     MOVF      0xee,0x0,0x0                                                                                    
003a04   10ed     IORWF     0xed,0x0,0x0                                                                                    
003a06   e018     BZ        0x3a38                                                                                          
003a36   d7e1     BRA       0x39fa                                                                                          
                                                   {                                                                        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a08   c1e3     MOVFF     0x1e3,0xff6                *pDst.bRam = *pSrc.bRom;                                             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a0a   fff6                                                                                                               
003a0c   c1e4     MOVFF     0x1e4,0xff7                                                                                     
003a0e   fff7                                                                                                               
003a10   0008     TBLRD                                                                                                     
003a12   50f5     MOVF      0xf5,0x0,0x0                                                                                    
003a14   c1e5     MOVFF     0x1e5,0xfe9                                                                                     
003a16   ffe9                                                                                                               
003a18   c1e6     MOVFF     0x1e6,0xfea                                                                                     
003a1a   ffea                                                                                                               
003a1c   6eef     MOVWF     0xef,0x0                                                                                        
003a1e   0101     MOVLB     0x1                        pDst.bRam++;                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a20   2be5     INCF      0xe5,0x1,0x1                                                                                    
003a22   0e00     MOVLW     0x0                                                                                             
003a24   23e6     ADDWFC    0xe6,0x1,0x1                                                                                    
003a26   0101     MOVLB     0x1                        pSrc.bRom++;                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a28   2be3     INCF      0xe3,0x1,0x1                                                                                    
003a2a   0e00     MOVLW     0x0                                                                                             
003a2c   23e4     ADDWFC    0xe4,0x1,0x1                                                                                    
003a2e   06df     DECF      0xdf,0x1,0x0               byte_to_send._word--;                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a30   0e01     MOVLW     0x1                                                                                             
003a32   e201     BC        0x3a36                                                                                          
003a34   06db     DECF      0xdb,0x1,0x0                                                                                    
                                                   }//end while(byte_to_send._word)                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               }                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a38   d01e     BRA       0x3a76             else // RAM                                                                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               {                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a3a   cfd9     MOVFF     0xfd9,0xfe9            while(byte_to_send._word)                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a3c   ffe9                                                                                                               
003a3e   cfda     MOVFF     0xfda,0xfea                                                                                     
003a40   ffea                                                                                                               
003a42   50ee     MOVF      0xee,0x0,0x0                                                                                    
003a44   10ed     IORWF     0xed,0x0,0x0                                                                                    
003a46   e017     BZ        0x3a76                                                                                          
003a74   d7e2     BRA       0x3a3a                                                                                          
                                                   {                                                                        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a48   c1e3     MOVFF     0x1e3,0xfe9                *pDst.bRam = *pSrc.bRam;                                             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a4a   ffe9                                                                                                               
003a4c   c1e4     MOVFF     0x1e4,0xfea                                                                                     
003a4e   ffea                                                                                                               
003a50   50ef     MOVF      0xef,0x0,0x0                                                                                    
003a52   c1e5     MOVFF     0x1e5,0xfe9                                                                                     
003a54   ffe9                                                                                                               
003a56   c1e6     MOVFF     0x1e6,0xfea                                                                                     
003a58   ffea                                                                                                               
003a5a   6eef     MOVWF     0xef,0x0                                                                                        
003a5c   0101     MOVLB     0x1                        pDst.bRam++;                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a5e   2be5     INCF      0xe5,0x1,0x1                                                                                    
003a60   0e00     MOVLW     0x0                                                                                             
003a62   23e6     ADDWFC    0xe6,0x1,0x1                                                                                    
003a64   0101     MOVLB     0x1                        pSrc.bRam++;                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a66   2be3     INCF      0xe3,0x1,0x1                                                                                    
003a68   0e00     MOVLW     0x0                                                                                             
003a6a   23e4     ADDWFC    0xe4,0x1,0x1                                                                                    
003a6c   06df     DECF      0xdf,0x1,0x0               byte_to_send._word--;                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a6e   0e01     MOVLW     0x1                                                                                             
003a70   e201     BC        0x3a74                                                                                          
003a72   06db     DECF      0xdb,0x1,0x0                                                                                    
                                                   }//end while(byte_to_send._word)                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               }//end if(usb_stat.ctrl_trf_mem == _ROM)                                     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a76   0e02     MOVLW     0x2            }//end USBCtrlTrfTxService                                                       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a78   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
003a7a   e202     BC        0x3a80                                                                                          
003a7c   6ae1     CLRF      0xe1,0x0                                                                                        
003a7e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003a80   6ee1     MOVWF     0xe1,0x0                                                                                        
003a82   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003a84   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003a86   ffd9                                                                                                               
003a88   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfRxService(void)                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    pDst and wCount are setup properly.                          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  pSrc is always &CtrlTrfData                                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  usb_stat.ctrl_trf_mem is always _RAM.                        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  wCount should be set to 0 at the start of each control       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transfer.                                                    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        *** This routine is only partially complete. Check for       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  new version of the firmware.                                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a8a   cfd9     MOVFF     0xfd9,0xfe6    void USBCtrlTrfRxService(void)                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a8c   ffe6                                                                                                               
003a8e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003a90   ffd9                                                                                                               
003a92   0e02     MOVLW     0x2                                                                                             
003a94   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               WORD byte_to_read;                                                           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a96   0e03     MOVLW     0x3                MSB(byte_to_read) = 0x03 & ep0Bo.Stat._byte;    // Filter out last 2 bits    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003a98   0104     MOVLB     0x4                                                                                             
003a9a   1500     ANDWF     0x0,0x0,0x1                                                                                     
003a9c   6ee7     MOVWF     0xe7,0x0                                                                                        
003a9e   0e01     MOVLW     0x1                                                                                             
003aa0   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
003aa2   ffdb                                                                                                               
003aa4   c401     MOVFF     0x401,0xfdf        LSB(byte_to_read) = ep0Bo.Cnt;                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003aa6   ffdf                                                                                                               
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Accumulate total number of bytes read                                     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003aa8   50de     MOVF      0xde,0x0,0x0       wCount._word = wCount._word + byte_to_read._word;                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003aaa   0101     MOVLB     0x1                                                                                             
003aac   27e7     ADDWF     0xe7,0x1,0x1                                                                                    
003aae   50dd     MOVF      0xdd,0x0,0x0                                                                                    
003ab0   0101     MOVLB     0x1                                                                                             
003ab2   23e8     ADDWFC    0xe8,0x1,0x1                                                                                    
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003ab4   0101     MOVLB     0x1                pSrc.bRam = (byte*)&CtrlTrfData;                                             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003ab6   0e28     MOVLW     0x28                                                                                            
003ab8   6fe3     MOVWF     0xe3,0x1                                                                                        
003aba   0e04     MOVLW     0x4                                                                                             
003abc   6fe4     MOVWF     0xe4,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003abe   cfd9     MOVFF     0xfd9,0xfe9        while(byte_to_read._word)                                                    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003ac0   ffe9                                                                                                               
003ac2   cfda     MOVFF     0xfda,0xfea                                                                                     
003ac4   ffea                                                                                                               
003ac6   50ee     MOVF      0xee,0x0,0x0                                                                                    
003ac8   10ed     IORWF     0xed,0x0,0x0                                                                                    
003aca   e017     BZ        0x3afa                                                                                          
003af8   d7e2     BRA       0x3abe                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003acc   c1e3     MOVFF     0x1e3,0xfe9            *pDst.bRam = *pSrc.bRam;                                                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003ace   ffe9                                                                                                               
003ad0   c1e4     MOVFF     0x1e4,0xfea                                                                                     
003ad2   ffea                                                                                                               
003ad4   50ef     MOVF      0xef,0x0,0x0                                                                                    
003ad6   c1e5     MOVFF     0x1e5,0xfe9                                                                                     
003ad8   ffe9                                                                                                               
003ada   c1e6     MOVFF     0x1e6,0xfea                                                                                     
003adc   ffea                                                                                                               
003ade   6eef     MOVWF     0xef,0x0                                                                                        
003ae0   0101     MOVLB     0x1                    pDst.bRam++;                                                             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003ae2   2be5     INCF      0xe5,0x1,0x1                                                                                    
003ae4   0e00     MOVLW     0x0                                                                                             
003ae6   23e6     ADDWFC    0xe6,0x1,0x1                                                                                    
003ae8   0101     MOVLB     0x1                    pSrc.bRam++;                                                             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003aea   2be3     INCF      0xe3,0x1,0x1                                                                                    
003aec   0e00     MOVLW     0x0                                                                                             
003aee   23e4     ADDWFC    0xe4,0x1,0x1                                                                                    
003af0   06df     DECF      0xdf,0x1,0x0           byte_to_read._word--;                                                    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003af2   0e01     MOVLW     0x1                                                                                             
003af4   e201     BC        0x3af8                                                                                          
003af6   06db     DECF      0xdb,0x1,0x0                                                                                    
                                               }//end while(byte_to_read._word)                                             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003afa   0e02     MOVLW     0x2            }//end USBCtrlTrfRxService                                                       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003afc   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
003afe   e202     BC        0x3b04                                                                                          
003b00   6ae1     CLRF      0xe1,0x0                                                                                        
003b02   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003b04   6ee1     MOVWF     0xe1,0x0                                                                                        
003b06   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003b08   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003b0a   ffd9                                                                                                               
003b0c   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlEPServiceComplete(void)                          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine wrap up the ramaining tasks in servicing        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  a Setup Request. Its main task is to set the endpoint        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  controls appropriately for a given situation. See code       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  below.                                                       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  There are three main scenarios:                              E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  a) There was no handler for the Request, in this case        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     a STALL should be sent out.                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  b) The host has requested a read control transfer,           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     endpoints are required to be setup in a specific way.     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  c) The host has requested a write control transfer, or       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     a control data stage is not required, endpoints are       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     required to be setup in a specific way.                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  Packet processing is resumed by clearing PKTDIS bit.         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlEPServiceComplete(void)                                              E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                * PKTDIS bit is set when a Setup Transaction is received.                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Clear to resume packet processing.                                        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b0e   986d     BCF       0x6d,0x4,0x0       UCONbits.PKTDIS = 0;                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b10   0101     MOVLB     0x1                if(ctrl_trf_session_owner == MUID_NULL)                                      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b12   51e2     MOVF      0xe2,0x0,0x1                                                                                    
003b14   e10f     BNZ       0x3b34                                                                                          
                                               {                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                   /*                                                                       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * If no one knows how to service this request then stall.               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * Must also prepare EP0 to receive the next SETUP transaction.          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                    */                                                                      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b16   0104     MOVLB     0x4                    ep0Bo.Cnt = EP0_BUFF_SIZE;                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b18   0e08     MOVLW     0x8                                                                                             
003b1a   6f01     MOVWF     0x1,0x1                                                                                         
003b1c   0104     MOVLB     0x4                    ep0Bo.ADR = (byte*)&SetupPkt;                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b1e   0e20     MOVLW     0x20                                                                                            
003b20   6f02     MOVWF     0x2,0x1                                                                                         
003b22   0e04     MOVLW     0x4                                                                                             
003b24   6f03     MOVWF     0x3,0x1                                                                                         
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b26   0104     MOVLB     0x4                    ep0Bo.Stat._byte = _USIE|_BSTALL;                                        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b28   0e84     MOVLW     0x84                                                                                            
003b2a   6f00     MOVWF     0x0,0x1                                                                                         
003b2c   0104     MOVLB     0x4                    ep0Bi.Stat._byte = _USIE|_BSTALL;                                        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b2e   0e84     MOVLW     0x84                                                                                            
003b30   6f04     MOVWF     0x4,0x1                                                                                         
                                               }                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b32   d03b     BRA       0x3baa             else    // A module has claimed ownership of the control transfer session.   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               {                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b34   0104     MOVLB     0x4                    if(SetupPkt.DataDir == DEV_TO_HOST)                                      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b36   af20     BTFSS     0x20,0x7,0x1                                                                                    
003b38   d025     BRA       0x3b84                                                                                          
                                                   {                                                                        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b3a   0101     MOVLB     0x1                        if(SetupPkt.wLength < wCount._word)                                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b3c   51e7     MOVF      0xe7,0x0,0x1                                                                                    
003b3e   0104     MOVLB     0x4                                                                                             
003b40   5d26     SUBWF     0x26,0x0,0x1                                                                                    
003b42   0101     MOVLB     0x1                                                                                             
003b44   51e8     MOVF      0xe8,0x0,0x1                                                                                    
003b46   0104     MOVLB     0x4                                                                                             
003b48   5927     SUBWFB    0x27,0x0,0x1                                                                                    
003b4a   e204     BC        0x3b54                                                                                          
003b4c   c426     MOVFF     0x426,0x1e7                    wCount._word = SetupPkt.wLength;                                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b4e   f1e7                                                                                                               
003b50   c427     MOVFF     0x427,0x1e8                                                                                     
003b52   f1e8                                                                                                               
003b54   df24     RCALL     0x399e                     USBCtrlTrfTxService();                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b56   0101     MOVLB     0x1                        ctrl_trf_state = CTRL_TRF_TX;                                        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b58   0e01     MOVLW     0x1                                                                                             
003b5a   6fe1     MOVWF     0xe1,0x1                                                                                        
                                                       /*                                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Control Read:                                                     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * <SETUP[0]><IN[1]><IN[0]>...<OUT[1]> | <SETUP[0]>                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 1. Prepare OUT EP to respond to early termination                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * NOTE:                                                             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * If something went wrong during the control transfer,              E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * the last status stage may not be sent by the host.                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * When this happens, two different things could happen              E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * depending on the host.                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * a) The host could send out a RESET.                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * b) The host could send out a new SETUP transaction                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    without sending a RESET first.                                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * To properly handle case (b), the OUT EP must be setup             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * to receive either a zero length OUT transaction, or a             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * new SETUP transaction.                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Since the SETUP transaction requires the DTS bit to be            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * DAT0 while the zero length OUT status requires the DTS            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * bit to be DAT1, the DTS bit check by the hardware should          E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * be disabled. This way the SIE could accept either of              E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * the two transactions.                                             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Furthermore, the Cnt byte should be set to prepare for            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * the SETUP data (8-byte or more), and the buffer address           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * should be pointed to SetupPkt.                                    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b5c   0104     MOVLB     0x4                        ep0Bo.Cnt = EP0_BUFF_SIZE;                                           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b5e   0e08     MOVLW     0x8                                                                                             
003b60   6f01     MOVWF     0x1,0x1                                                                                         
003b62   0104     MOVLB     0x4                        ep0Bo.ADR = (byte*)&SetupPkt;                                        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b64   0e20     MOVLW     0x20                                                                                            
003b66   6f02     MOVWF     0x2,0x1                                                                                         
003b68   0e04     MOVLW     0x4                                                                                             
003b6a   6f03     MOVWF     0x3,0x1                                                                                         
003b6c   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE;           // Note: DTSEN is 0!             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b6e   0e80     MOVLW     0x80                                                                                            
003b70   6f00     MOVWF     0x0,0x1                                                                                         
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                       /*                                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 2. Prepare IN EP to transfer data, Cnt should have                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    been initialized by responsible request owner.                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b72   0104     MOVLB     0x4                        ep0Bi.ADR = (byte*)&CtrlTrfData;                                     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b74   0e28     MOVLW     0x28                                                                                            
003b76   6f06     MOVWF     0x6,0x1                                                                                         
003b78   0e04     MOVLW     0x4                                                                                             
003b7a   6f07     MOVWF     0x7,0x1                                                                                         
003b7c   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT1|_DTSEN;                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b7e   0ec8     MOVLW     0xc8                                                                                            
003b80   6f04     MOVWF     0x4,0x1                                                                                         
                                                   }                                                                        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b82   d013     BRA       0x3baa                 else    // (SetupPkt.DataDir == HOST_TO_DEV)                             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                   {                                                                        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b84   0101     MOVLB     0x1                        ctrl_trf_state = CTRL_TRF_RX;                                        E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b86   0e02     MOVLW     0x2                                                                                             
003b88   6fe1     MOVWF     0xe1,0x1                                                                                        
                                                       /*                                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Control Write:                                                    E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * <SETUP[0]><OUT[1]><OUT[0]>...<IN[1]> | <SETUP[0]>                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 1. Prepare IN EP to respond to early termination                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    This is the same as a Zero Length Packet Response              E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    for control transfer without a data stage                      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b8a   0104     MOVLB     0x4                        ep0Bi.Cnt = 0;                                                       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b8c   6b05     CLRF      0x5,0x1                                                                                         
003b8e   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT1|_DTSEN;                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b90   0ec8     MOVLW     0xc8                                                                                            
003b92   6f04     MOVWF     0x4,0x1                                                                                         
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                       /*                                                                   E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 2. Prepare OUT EP to receive data.                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b94   0104     MOVLB     0x4                        ep0Bo.Cnt = EP0_BUFF_SIZE;                                           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b96   0e08     MOVLW     0x8                                                                                             
003b98   6f01     MOVWF     0x1,0x1                                                                                         
003b9a   0104     MOVLB     0x4                        ep0Bo.ADR = (byte*)&CtrlTrfData;                                     E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003b9c   0e28     MOVLW     0x28                                                                                            
003b9e   6f02     MOVWF     0x2,0x1                                                                                         
003ba0   0e04     MOVLW     0x4                                                                                             
003ba2   6f03     MOVWF     0x3,0x1                                                                                         
003ba4   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE|_DAT1|_DTSEN;                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003ba6   0ec8     MOVLW     0xc8                                                                                            
003ba8   6f00     MOVWF     0x0,0x1                                                                                         
                                                   }//end if(SetupPkt.DataDir == DEV_TO_HOST)                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                               }//end if(ctrl_trf_session_owner == MUID_NULL)                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003baa   0012     RETURN    0x0            }//end USBCtrlEPServiceComplete                                                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBPrepareForNextSetupTrf(void)                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        The routine forces EP0 OUT to be ready for a new Setup       E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transaction, and forces EP0 IN to be owned by CPU.           E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBPrepareForNextSetupTrf(void)                                             E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003bac   0101     MOVLB     0x1                ctrl_trf_state = WAIT_SETUP;            // See usbctrltrf.h                  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003bae   6be1     CLRF      0xe1,0x1                                                                                        
003bb0   0104     MOVLB     0x4                ep0Bo.Cnt = EP0_BUFF_SIZE;              // Defined in usbcfg.h               E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003bb2   0e08     MOVLW     0x8                                                                                             
003bb4   6f01     MOVWF     0x1,0x1                                                                                         
003bb6   0104     MOVLB     0x4                ep0Bo.ADR = (byte*)&SetupPkt;                                                E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003bb8   0e20     MOVLW     0x20                                                                                            
003bba   6f02     MOVWF     0x2,0x1                                                                                         
003bbc   0e04     MOVLW     0x4                                                                                             
003bbe   6f03     MOVWF     0x3,0x1                                                                                         
003bc0   0104     MOVLB     0x4                ep0Bo.Stat._byte = _USIE|_DAT0|_DTSEN;  // EP0 buff dsc init, see usbmmap.h  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003bc2   0e88     MOVLW     0x88                                                                                            
003bc4   6f00     MOVWF     0x0,0x1                                                                                         
003bc6   0104     MOVLB     0x4                ep0Bi.Stat._byte = _UCPU;               // EP0 IN buffer initialization      E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
003bc8   6b04     CLRF      0x4,0x1                                                                                         
003bca   0012     RETURN    0x0            }//end USBPrepareForNextSetupTrf                                                 E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** EOF usbctrltrf.c *********************************************************/  E:\iroFW\system\usb\usbctrltrf\usbctrltrf.c
                                           /*********************************************************************           E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            *                Microchip USB C18 Firmware Version 1.0                         E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            *********************************************************************           E:\iroFW\user\user.c
                                            * FileName:        user.c                                                       E:\iroFW\user\user.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iroFW\user\user.c
                                            * Processor:       PIC18                                                        E:\iroFW\user\user.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iroFW\user\user.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * Software License Agreement                                                    E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iroFW\user\user.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iroFW\user\user.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iroFW\user\user.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iroFW\user\user.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iroFW\user\user.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iroFW\user\user.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iroFW\user\user.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iroFW\user\user.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iroFW\user\user.c
                                            * license.                                                                      E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iroFW\user\user.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iroFW\user\user.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iroFW\user\user.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iroFW\user\user.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iroFW\user\user.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * Author               Date        Comment                                      E:\iroFW\user\user.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           E:\iroFW\user\user.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    E:\iroFW\user\user.c
                                            * Brian Schmalz		03/15/06	Added user code to impliment                          E:\iroFW\user\user.c
                                            *									firmware version D v1.0 for UBW                                       E:\iroFW\user\user.c
                                            *									project. See www.greta.dhs.org/UBW                                    E:\iroFW\user\user.c
                                            * Brian Schmalz		05/04/06	Starting version 1.1, which will                      E:\iroFW\user\user.c
                                            * 									include several fixes. See website.                                  E:\iroFW\user\user.c
                                            * BPS					06/21/06	Starting v1.2 -                                              E:\iroFW\user\user.c
                                            * - Fixed problem with I packets (from T command) filling up TX buffer          E:\iroFW\user\user.c
                                            * 		and not letting any incoming commands be received. (strange)                E:\iroFW\user\user.c
                                            * - Adding several commands - Analog inputs being the biggest set.              E:\iroFW\user\user.c
                                            * - Also Byte read/Byte write (PEEK/POKE) anywhere in memory                    E:\iroFW\user\user.c
                                            * - Individual pin I/O and direction                                            E:\iroFW\user\user.c
                                            * BPS					08/16/06	v1.3 - Fixed bug with USB startup                            E:\iroFW\user\user.c
                                            * BPS					09/09/06	v1.4 - Starting 1.4                                          E:\iroFW\user\user.c
                                            * - Fixed Microchip bug with early silicon - UCONbits.PKTDIS = 0;               E:\iroFW\user\user.c
                                            * - Adding BO and BC commands for parallel output to graphics pannels           E:\iroFW\user\user.c
                                            * BPS					12/06/06	v1.4 - More work on 1.4                                      E:\iroFW\user\user.c
                                            * - Re-wrote all I/O buffering code for increased speed and functionality       E:\iroFW\user\user.c
                                            * - Re-wrote error handling code                                                E:\iroFW\user\user.c
                                            * - Added delays to BC/BO commands to help Corey                                E:\iroFW\user\user.c
                                            * BPS					01/06/07	v1.4 - Added RC command for servos                           E:\iroFW\user\user.c
                                            * BPS					03/07/07	v1.4.1 - Changed blink rate for SFE                          E:\iroFW\user\user.c
                                            * BPS					05/24/07	v1.4.2 - Fixed RC command bug - it                           E:\iroFW\user\user.c
                                            *									wouldn't shut off.                                                    E:\iroFW\user\user.c
                                            * Luke Orland			2007/08/28	added some stuff                                     E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            ********************************************************************/           E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           /** I N C L U D E S **********************************************************/  E:\iroFW\user\user.c
                                           #include <p18cxxx.h>                                                             E:\iroFW\user\user.c
                                           #include <usart.h>                                                               E:\iroFW\user\user.c
                                           #include <stdio.h>                                                               E:\iroFW\user\user.c
                                           #include <ctype.h>                                                               E:\iroFW\user\user.c
                                           #include <delays.h>                                                              E:\iroFW\user\user.c
                                           #include "system\typedefs.h"                                                     E:\iroFW\user\user.c
                                           #include "system\usb\usb.h"                                                      E:\iroFW\user\user.c
                                           #include "io_cfg.h"             // I/O pin mapping                               E:\iroFW\user\user.c
                                           #include "user\user.h"                                                           E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           /** D E F I N E S ********************************************************/      E:\iroFW\user\user.c
                                           #define bitset(var,bitno) ((var) |= (1 << (bitno)))                              E:\iroFW\user\user.c
                                           #define bitclr(var,bitno) ((var) &= ~(1 << (bitno)))                             E:\iroFW\user\user.c
                                           #define bittst(var,bitno) (var& (1 << (bitno)))                                  E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // For the RC command, we define a little data structure that holds the          E:\iroFW\user\user.c
                                           // values assoicated with a particular servo connection                          E:\iroFW\user\user.c
                                           // It's port, pin, value (position) and state (INACTIVE, PRIMED or TIMING)       E:\iroFW\user\user.c
                                           // Later on we make an array of these (19 elements long - 19 pins) to track      E:\iroFW\user\user.c
                                           // the values of all of the servos.                                              E:\iroFW\user\user.c
                                           typedef enum {                                                                   E:\iroFW\user\user.c
                                           	 kOFF = 1                                                                       E:\iroFW\user\user.c
                                           	,kWAITING                                                                       E:\iroFW\user\user.c
                                           	,kPRIMED                                                                        E:\iroFW\user\user.c
                                           	,kTIMING                                                                        E:\iroFW\user\user.c
                                           } tRC_state;                                                                     E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           #define kRC_DATA_SIZE			24				// In structs, since there are 3 ports of 8 bits each E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           #define kTX_BUF_SIZE 			64				// In bytes                                        E:\iroFW\user\user.c
                                           #define kRX_BUF_SIZE			64				// In bytes                                         E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           #define kUSART_TX_BUF_SIZE		64				// In bytes                                    E:\iroFW\user\user.c
                                           #define kUSART_RX_BUF_SIZE		64				// In bytes                                    E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // Enum for extract_num() function parameter                                     E:\iroFW\user\user.c
                                           typedef enum {                                                                   E:\iroFW\user\user.c
                                           	 kCHAR                                                                          E:\iroFW\user\user.c
                                           	,kUCHAR                                                                         E:\iroFW\user\user.c
                                           	,kINT                                                                           E:\iroFW\user\user.c
                                           	,kUINT                                                                          E:\iroFW\user\user.c
                                           	,kASCII_CHAR                                                                    E:\iroFW\user\user.c
                                           	,kUCASE_ASCII_CHAR                                                              E:\iroFW\user\user.c
                                           } tExtractType;                                                                  E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           #define advance_RX_buf_out()						\                                              E:\iroFW\user\user.c
                                           { 													\                                                                 E:\iroFW\user\user.c
                                           	g_RX_buf_out++;									\                                                       E:\iroFW\user\user.c
                                           	if (kRX_BUF_SIZE == g_RX_buf_out)				\                                          E:\iroFW\user\user.c
                                           	{												\                                                                  E:\iroFW\user\user.c
                                           		g_RX_buf_out = 0;							\                                                      E:\iroFW\user\user.c
                                           	}												\                                                                  E:\iroFW\user\user.c
                                           }                                                                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           #define kISR_FIFO_A_DEPTH		3                                                     E:\iroFW\user\user.c
                                           #define kISR_FIFO_D_DEPTH		3                                                     E:\iroFW\user\user.c
                                           #define kPR2_RELOAD				250		// For 1ms TMR2 tick                                 E:\iroFW\user\user.c
                                           #define kCR						0x0D                                                            E:\iroFW\user\user.c
                                           #define kLF						0x0A                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // defines for the error_byte byte - each bit has a meaning                      E:\iroFW\user\user.c
                                           #define kERROR_BYTE_TX_BUF_OVERRUN			2                                           E:\iroFW\user\user.c
                                           #define kERROR_BYTE_RX_BUFFER_OVERRUN		3                                         E:\iroFW\user\user.c
                                           #define kERROR_BYTE_MISSING_PARAMETER		4                                         E:\iroFW\user\user.c
                                           #define kERROR_BYTE_PRINTED_ERROR			5			// We've already printed out an error    E:\iroFW\user\user.c
                                           #define kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT	6                                    E:\iroFW\user\user.c
                                           #define kERROR_BYTE_EXTRA_CHARACTERS 		7                                         E:\iroFW\user\user.c
                                           #define kERROR_BYTE_UNKNOWN_COMMAND			8			// Part of command parser, not error handler E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           /** V A R I A B L E S ********************************************************/  E:\iroFW\user\user.c
                                           #pragma udata access fast_vars                                                   E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // Rate variable - how fast does interrupt fire to capture inputs?               E:\iroFW\user\user.c
                                           near unsigned int time_between_updates;                                          E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           near volatile unsigned int ISR_D_RepeatRate;			// How many 1ms ticks between Digital updates E:\iroFW\user\user.c
                                           near volatile unsigned char ISR_D_FIFO_in;				// In pointer                      E:\iroFW\user\user.c
                                           near volatile unsigned char ISR_D_FIFO_out;				// Out pointer                    E:\iroFW\user\user.c
                                           near volatile unsigned char ISR_D_FIFO_length;			// Current FIFO depth           E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           near volatile unsigned int ISR_A_RepeatRate;			// How many 1ms ticks between Analog updates E:\iroFW\user\user.c
                                           near volatile unsigned char ISR_A_FIFO_in;				// In pointer                      E:\iroFW\user\user.c
                                           near volatile unsigned char ISR_A_FIFO_out;				// Out pointer                    E:\iroFW\user\user.c
                                           near volatile unsigned char ISR_A_FIFO_length;			// Current FIFO depth           E:\iroFW\user\user.c
                                           near volatile unsigned char AnalogEnable;				// Maximum ADC channel to convert   E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // This byte has each of its bits used as a seperate error flag                  E:\iroFW\user\user.c
                                           near unsigned char error_byte;                                                   E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // RC servo variables                                                            E:\iroFW\user\user.c
                                           // First the main array of data for each servo                                   E:\iroFW\user\user.c
                                           near unsigned char g_RC_primed_ptr;                                              E:\iroFW\user\user.c
                                           near unsigned char g_RC_next_ptr;                                                E:\iroFW\user\user.c
                                           near unsigned char g_RC_timing_ptr;                                              E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // Used only in LowISR                                                           E:\iroFW\user\user.c
                                           near unsigned int D_tick_counter;                                                E:\iroFW\user\user.c
                                           near unsigned int A_tick_counter;                                                E:\iroFW\user\user.c
                                           near unsigned char A_cur_channel;                                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // ROM strings                                                                   E:\iroFW\user\user.c
                                           const rom char st_OK[] = {"OK\r\n"};                                             E:\iroFW\user\user.c
                                           const rom char st_LFCR[] = {"\r\n"};                                             E:\iroFW\user\user.c
                                           const rom char st_version[] = {"opensprints FW 0.3 based on UBW FW D Version 1.4.2\r\n"}; E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           #pragma udata ISR_buf=0x100                                                      E:\iroFW\user\user.c
                                           volatile unsigned int ISR_A_FIFO[12][kISR_FIFO_A_DEPTH];	// Stores the most recent analog conversions E:\iroFW\user\user.c
                                           volatile unsigned char ISR_D_FIFO[3][kISR_FIFO_D_DEPTH];	// FIFO of actual data  E:\iroFW\user\user.c
                                           volatile tRC_state g_RC_state[kRC_DATA_SIZE];				// Stores states for each pin for RC command E:\iroFW\user\user.c
                                           volatile unsigned int g_RC_value[kRC_DATA_SIZE];			// Stores reload values for TMR0 E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           #pragma udata com_buf=0x200                                                      E:\iroFW\user\user.c
                                           // USB Transmit buffer for packets (back to PC)                                  E:\iroFW\user\user.c
                                           unsigned char g_TX_buf[kTX_BUF_SIZE];                                            E:\iroFW\user\user.c
                                           // USB Receiving buffer for commands as they come from PC                        E:\iroFW\user\user.c
                                           unsigned char g_RX_buf[kRX_BUF_SIZE];                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // USART Receiving buffer for data coming from the USART                         E:\iroFW\user\user.c
                                           unsigned char g_USART_RX_buf[kUSART_RX_BUF_SIZE];                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // USART Transmit buffer for data going to the USART                             E:\iroFW\user\user.c
                                           unsigned char g_USART_TX_buf[kUSART_TX_BUF_SIZE];                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // These variables are in normal storage space                                   E:\iroFW\user\user.c
                                           #pragma udata                                                                    E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // These are used for the Fast Parallel Output routines                          E:\iroFW\user\user.c
                                           unsigned char g_BO_init;                                                         E:\iroFW\user\user.c
                                           unsigned char g_BO_strobe_mask;                                                  E:\iroFW\user\user.c
                                           unsigned char g_BO_wait_mask;                                                    E:\iroFW\user\user.c
                                           unsigned char g_BO_wait_delay;                                                   E:\iroFW\user\user.c
                                           unsigned char g_BO_strobe_delay;                                                 E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // Pointers to USB transmit (back to PC) buffer                                  E:\iroFW\user\user.c
                                           unsigned char g_TX_buf_in;                                                       E:\iroFW\user\user.c
                                           unsigned char g_TX_buf_out;                                                      E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // Pointers to USB receive (from PC) buffer                                      E:\iroFW\user\user.c
                                           unsigned char g_RX_buf_in;                                                       E:\iroFW\user\user.c
                                           unsigned char g_RX_buf_out;                                                      E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // In and out pointers to our USART input buffer                                 E:\iroFW\user\user.c
                                           unsigned char g_USART_RX_buf_in;                                                 E:\iroFW\user\user.c
                                           unsigned char g_USART_RX_buf_out;                                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // In and out pointers to our USART output buffer                                E:\iroFW\user\user.c
                                           unsigned char g_USART_TX_buf_in;                                                 E:\iroFW\user\user.c
                                           unsigned char g_USART_TX_buf_out;                                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // Normally set to TRUE. Able to set FALSE to not send "OK" message after packet recepetion E:\iroFW\user\user.c
                                           BOOL	g_ack_enable;                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // sensor stuff                                                                  E:\iroFW\user\user.c
                                           BOOL is_racing = FALSE;                                                          E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  E:\iroFW\user\user.c
                                           void BlinkUSBStatus (void);		// Handles blinking the USB status LED              E:\iroFW\user\user.c
                                           BOOL SwitchIsPressed (void);	// Check to see if the user (PRG) switch is pressed E:\iroFW\user\user.c
                                           void parse_packet (void);		// Take a full packet and dispatch it to the right function E:\iroFW\user\user.c
                                           signed short long extract_number (tExtractType type); // Pull a number paramter out of the packet E:\iroFW\user\user.c
                                           signed char extract_digit (signed short long * acc, unsigned char digits); // Pull a character out of the packet E:\iroFW\user\user.c
                                           void parse_R_packet (void);		// R for resetting UBW                              E:\iroFW\user\user.c
                                           void parse_C_packet (void);		// C for configuring I/O and analog pins            E:\iroFW\user\user.c
                                           void parse_CX_packet (void); 	// CX For configuring serial port                  E:\iroFW\user\user.c
                                           void parse_O_packet (void);		// O for output digital to pins                     E:\iroFW\user\user.c
                                           void parse_I_packet (void);		// I for input digital from pins                    E:\iroFW\user\user.c
                                           void parse_V_packet (void);		// V for printing version                           E:\iroFW\user\user.c
                                           void parse_A_packet (void);		// A for requesting analog inputs                   E:\iroFW\user\user.c
                                           void parse_T_packet (void);		// T for setting up timed I/O (digital or analog)   E:\iroFW\user\user.c
                                           void parse_PI_packet (void);	// PI for reading a single pin                      E:\iroFW\user\user.c
                                           void parse_PO_packet (void);	// PO for setting a single pin state                E:\iroFW\user\user.c
                                           void parse_PD_packet (void);	// PD for setting a pin's direction                 E:\iroFW\user\user.c
                                           void parse_MR_packet (void);	// MR for Memory Read                               E:\iroFW\user\user.c
                                           void parse_MW_packet (void); 	// MW for Memory Write                             E:\iroFW\user\user.c
                                           void parse_TX_packet (void);	// TX for transmitting serial                       E:\iroFW\user\user.c
                                           void parse_RX_packet (void);	// RX for receiving serial                          E:\iroFW\user\user.c
                                           void parse_RC_packet (void);	// RC is for outputing RC servo pulses              E:\iroFW\user\user.c
                                           void parse_BO_packet (void);	// BO sends data to fast parallel output            E:\iroFW\user\user.c
                                           void parse_BC_packet (void);	// BC configures fast parallel outputs              E:\iroFW\user\user.c
                                           void parse_BS_packet (void);	// BS sends binary data to fast parallel output     E:\iroFW\user\user.c
                                           void parse_CU_packet (void);	// CU configures UBW (system wide parameters)       E:\iroFW\user\user.c
                                           void parse_SS_packet (void);	// SS Send SPI                                      E:\iroFW\user\user.c
                                           void parse_RS_packet (void);	// RS Receive SPI                                   E:\iroFW\user\user.c
                                           void parse_CS_packet (void);	// CS Configure SPI                                 E:\iroFW\user\user.c
                                           void parse_SI_packet (void);	// SI Send I2C                                      E:\iroFW\user\user.c
                                           void parse_RI_packet (void);	// RI Receive I2C                                   E:\iroFW\user\user.c
                                           void parse_CI_packet (void);	// CI Configure I2C                                 E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           void parse_GO_packet (void);	// start sending sensor messages to PC              E:\iroFW\user\user.c
                                           void parse_ST_packet (void);	// stop sending sensor messages to PC               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           void check_and_send_TX_data (void); // See if there is any data to send to PC, and if so, do it E:\iroFW\user\user.c
                                           void print_ack (void);			// Print "OK" after packet is parsed                    E:\iroFW\user\user.c
                                           int _user_putc (char c);		// Our UBS based stream character printer              E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           /** D E C L A R A T I O N S **************************************************/  E:\iroFW\user\user.c
                                           #pragma code                                                                     E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           #pragma interruptlow low_ISR                                                     E:\iroFW\user\user.c
000844   cfd8     MOVFF     0xfd8,0xfe4    void low_ISR(void)                                                               E:\iroFW\user\user.c
000846   ffe4                                                                                                               
000848   cfe0     MOVFF     0xfe0,0xfe4                                                                                     
00084a   ffe4                                                                                                               
00084c   6ee4     MOVWF     0xe4,0x0                                                                                        
00084e   cfda     MOVFF     0xfda,0xfe4                                                                                     
000850   ffe4                                                                                                               
000852   cfe2     MOVFF     0xfe2,0xfda                                                                                     
000854   ffda                                                                                                               
000856   cfe9     MOVFF     0xfe9,0xfe4                                                                                     
000858   ffe4                                                                                                               
00085a   cfea     MOVFF     0xfea,0xfe4                                                                                     
00085c   ffe4                                                                                                               
00085e   cff3     MOVFF     0xff3,0xfe4                                                                                     
000860   ffe4                                                                                                               
000862   cff4     MOVFF     0xff4,0xfe4                                                                                     
000864   ffe4                                                                                                               
000866   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {	                                                                               E:\iroFW\user\user.c
                                           	// Do we have a Timer2 interrupt? (1ms rate)                                    E:\iroFW\user\user.c
000868   a29e     BTFSS     0x9e,0x1,0x0   	if (PIR1bits.TMR2IF)                                                            E:\iroFW\user\user.c
00086a   d101     BRA       0xa6e                                                                                           
                                           	{                                                                               E:\iroFW\user\user.c
                                           		// Clear the interrupt                                                         E:\iroFW\user\user.c
00086c   929e     BCF       0x9e,0x1,0x0   		PIR1bits.TMR2IF = 0;                                                           E:\iroFW\user\user.c
                                           		                                                                               E:\iroFW\user\user.c
                                           		// The most time critical part of this interrupt service routine is the        E:\iroFW\user\user.c
                                           		// handling of the RC command's servo output pulses.                           E:\iroFW\user\user.c
                                           		// Each time we get this interrupt, we look to see if the next pin on the      E:\iroFW\user\user.c
                                           		// list has a value greater than zero. If so, we arm set it high and set       E:\iroFW\user\user.c
                                           		// it's state to PRIMED. Then we advance the pointers to the next pair.        E:\iroFW\user\user.c
00086e   0e03     MOVLW     0x3            		if (kPRIMED == g_RC_state[g_RC_primed_ptr])                                    E:\iroFW\user\user.c
000870   6e38     MOVWF     0x38,0x0                                                                                        
000872   500e     MOVF      0xe,0x0,0x0                                                                                     
000874   6aea     CLRF      0xea,0x0                                                                                        
000876   0f51     ADDLW     0x51                                                                                            
000878   6ee9     MOVWF     0xe9,0x0                                                                                        
00087a   0e01     MOVLW     0x1                                                                                             
00087c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00087e   50ef     MOVF      0xef,0x0,0x0                                                                                    
000880   5c38     SUBWF     0x38,0x0,0x0                                                                                    
000882   e130     BNZ       0x8e4                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// This is easy, throw the value into the timer                               E:\iroFW\user\user.c
000884   500e     MOVF      0xe,0x0,0x0    			TMR0H = g_RC_value[g_RC_primed_ptr] >> 8;                                     E:\iroFW\user\user.c
000886   6ee9     MOVWF     0xe9,0x0                                                                                        
000888   6aea     CLRF      0xea,0x0                                                                                        
00088a   90d8     BCF       0xd8,0x0,0x0                                                                                    
00088c   36e9     RLCF      0xe9,0x1,0x0                                                                                    
00088e   36ea     RLCF      0xea,0x1,0x0                                                                                    
000890   0e69     MOVLW     0x69                                                                                            
000892   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000894   0e01     MOVLW     0x1                                                                                             
000896   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000898   cfee     MOVFF     0xfee,0x38                                                                                      
00089a   f038                                                                                                               
00089c   cfef     MOVFF     0xfef,0x39                                                                                      
00089e   f039                                                                                                               
0008a0   c039     MOVFF     0x39,0x38                                                                                       
0008a2   f038                                                                                                               
0008a4   6a39     CLRF      0x39,0x0                                                                                        
0008a6   5038     MOVF      0x38,0x0,0x0                                                                                    
0008a8   6ed7     MOVWF     0xd7,0x0                                                                                        
0008aa   500e     MOVF      0xe,0x0,0x0    			TMR0L = g_RC_value[g_RC_primed_ptr] & 0xFF;                                   E:\iroFW\user\user.c
0008ac   6ee9     MOVWF     0xe9,0x0                                                                                        
0008ae   6aea     CLRF      0xea,0x0                                                                                        
0008b0   90d8     BCF       0xd8,0x0,0x0                                                                                    
0008b2   36e9     RLCF      0xe9,0x1,0x0                                                                                    
0008b4   36ea     RLCF      0xea,0x1,0x0                                                                                    
0008b6   0e69     MOVLW     0x69                                                                                            
0008b8   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
0008ba   0e01     MOVLW     0x1                                                                                             
0008bc   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0008be   cfee     MOVFF     0xfee,0x38                                                                                      
0008c0   f038                                                                                                               
0008c2   cfef     MOVFF     0xfef,0x39                                                                                      
0008c4   f039                                                                                                               
0008c6   5038     MOVF      0x38,0x0,0x0                                                                                    
0008c8   6ed6     MOVWF     0xd6,0x0                                                                                        
                                           	                                                                                E:\iroFW\user\user.c
                                           			// Then make sure the timer's interrupt enable is set                         E:\iroFW\user\user.c
0008ca   8af2     BSF       0xf2,0x5,0x0   			INTCONbits.TMR0IE = 1;                                                        E:\iroFW\user\user.c
                                           			// And be sure to clear the flag too                                          E:\iroFW\user\user.c
0008cc   94f2     BCF       0xf2,0x2,0x0   			INTCONbits.TMR0IF = 0;                                                        E:\iroFW\user\user.c
                                           			// Turn on Timer0                                                             E:\iroFW\user\user.c
0008ce   8ed5     BSF       0xd5,0x7,0x0   			T0CONbits.TMR0ON = 1;                                                         E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
                                           			// And set this pin's state to timing                                         E:\iroFW\user\user.c
0008d0   500e     MOVF      0xe,0x0,0x0    			g_RC_state[g_RC_primed_ptr] = kTIMING;                                        E:\iroFW\user\user.c
0008d2   6aea     CLRF      0xea,0x0                                                                                        
0008d4   0f51     ADDLW     0x51                                                                                            
0008d6   6ee9     MOVWF     0xe9,0x0                                                                                        
0008d8   0e01     MOVLW     0x1                                                                                             
0008da   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0008dc   0e04     MOVLW     0x4                                                                                             
0008de   6eef     MOVWF     0xef,0x0                                                                                        
                                           			                                                                              E:\iroFW\user\user.c
                                           			// Remember which pin is now timing                                           E:\iroFW\user\user.c
0008e0   500e     MOVF      0xe,0x0,0x0    			g_RC_timing_ptr = g_RC_primed_ptr;                                            E:\iroFW\user\user.c
0008e2   6e10     MOVWF     0x10,0x0                                                                                        
                                           		}                                                                              E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
0008e4   0e02     MOVLW     0x2            		if (kWAITING == g_RC_state[g_RC_next_ptr])                                     E:\iroFW\user\user.c
0008e6   6e38     MOVWF     0x38,0x0                                                                                        
0008e8   500f     MOVF      0xf,0x0,0x0                                                                                     
0008ea   6aea     CLRF      0xea,0x0                                                                                        
0008ec   0f51     ADDLW     0x51                                                                                            
0008ee   6ee9     MOVWF     0xe9,0x0                                                                                        
0008f0   0e01     MOVLW     0x1                                                                                             
0008f2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0008f4   50ef     MOVF      0xef,0x0,0x0                                                                                    
0008f6   5c38     SUBWF     0x38,0x0,0x0                                                                                    
0008f8   e149     BNZ       0x98c                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// If the value is zero, then shut this pin off                               E:\iroFW\user\user.c
                                           			// otherwise, prime it for sending a pulse                                    E:\iroFW\user\user.c
0008fa   500f     MOVF      0xf,0x0,0x0    			if (0 == g_RC_value[g_RC_next_ptr])                                           E:\iroFW\user\user.c
0008fc   6ee9     MOVWF     0xe9,0x0                                                                                        
0008fe   6aea     CLRF      0xea,0x0                                                                                        
000900   90d8     BCF       0xd8,0x0,0x0                                                                                    
000902   36e9     RLCF      0xe9,0x1,0x0                                                                                    
000904   36ea     RLCF      0xea,0x1,0x0                                                                                    
000906   0e69     MOVLW     0x69                                                                                            
000908   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
00090a   0e01     MOVLW     0x1                                                                                             
00090c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00090e   50ee     MOVF      0xee,0x0,0x0                                                                                    
000910   10ed     IORWF     0xed,0x0,0x0                                                                                    
000912   e109     BNZ       0x926                                                                                           
                                           			{                                                                             E:\iroFW\user\user.c
000914   500f     MOVF      0xf,0x0,0x0    				g_RC_state[g_RC_next_ptr] = kOFF;                                            E:\iroFW\user\user.c
000916   6aea     CLRF      0xea,0x0                                                                                        
000918   0f51     ADDLW     0x51                                                                                            
00091a   6ee9     MOVWF     0xe9,0x0                                                                                        
00091c   0e01     MOVLW     0x1                                                                                             
00091e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000920   0e01     MOVLW     0x1                                                                                             
000922   6eef     MOVWF     0xef,0x0                                                                                        
                                           			}                                                                             E:\iroFW\user\user.c
000924   d033     BRA       0x98c          			else                                                                          E:\iroFW\user\user.c
                                           			{                                                                             E:\iroFW\user\user.c
                                           				// Set the bit high                                                          E:\iroFW\user\user.c
000926   0e08     MOVLW     0x8            				if (g_RC_next_ptr < 8)                                                       E:\iroFW\user\user.c
000928   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
00092a   e20c     BC        0x944                                                                                           
                                           				{                                                                            E:\iroFW\user\user.c
00092c   0e07     MOVLW     0x7            					bitset (LATA, g_RC_next_ptr & 0x7);                                         E:\iroFW\user\user.c
00092e   140f     ANDWF     0xf,0x0,0x0                                                                                     
000930   6e38     MOVWF     0x38,0x0                                                                                        
000932   0e01     MOVLW     0x1                                                                                             
000934   5238     MOVF      0x38,0x1,0x0                                                                                    
000936   e004     BZ        0x940                                                                                           
000938   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
00093a   0bfe     ANDLW     0xfe                                                                                            
00093c   0638     DECF      0x38,0x1,0x0                                                                                    
00093e   e1fc     BNZ       0x938                                                                                           
000940   1289     IORWF     0x89,0x1,0x0                                                                                    
                                           				}                                                                            E:\iroFW\user\user.c
000942   d01a     BRA       0x978          				else if (g_RC_next_ptr < 16)                                                 E:\iroFW\user\user.c
000944   0e10     MOVLW     0x10                                                                                            
000946   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
000948   e20c     BC        0x962                                                                                           
                                           				{                                                                            E:\iroFW\user\user.c
00094a   0e07     MOVLW     0x7            					bitset (LATB, g_RC_next_ptr & 0x7);                                         E:\iroFW\user\user.c
00094c   140f     ANDWF     0xf,0x0,0x0                                                                                     
00094e   6e38     MOVWF     0x38,0x0                                                                                        
000950   0e01     MOVLW     0x1                                                                                             
000952   5238     MOVF      0x38,0x1,0x0                                                                                    
000954   e004     BZ        0x95e                                                                                           
000956   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000958   0bfe     ANDLW     0xfe                                                                                            
00095a   0638     DECF      0x38,0x1,0x0                                                                                    
00095c   e1fc     BNZ       0x956                                                                                           
00095e   128a     IORWF     0x8a,0x1,0x0                                                                                    
                                           				}                                                                            E:\iroFW\user\user.c
000960   d00b     BRA       0x978          				else                                                                         E:\iroFW\user\user.c
                                           				{                                                                            E:\iroFW\user\user.c
000962   0e07     MOVLW     0x7            					bitset (LATC, g_RC_next_ptr & 0x7);                                         E:\iroFW\user\user.c
000964   140f     ANDWF     0xf,0x0,0x0                                                                                     
000966   6e38     MOVWF     0x38,0x0                                                                                        
000968   0e01     MOVLW     0x1                                                                                             
00096a   5238     MOVF      0x38,0x1,0x0                                                                                    
00096c   e004     BZ        0x976                                                                                           
00096e   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000970   0bfe     ANDLW     0xfe                                                                                            
000972   0638     DECF      0x38,0x1,0x0                                                                                    
000974   e1fc     BNZ       0x96e                                                                                           
000976   128b     IORWF     0x8b,0x1,0x0                                                                                    
                                           				}                                                                            E:\iroFW\user\user.c
                                           				// Set the state to primed so we know to do next                             E:\iroFW\user\user.c
000978   500f     MOVF      0xf,0x0,0x0    				g_RC_state[g_RC_next_ptr] = kPRIMED;                                         E:\iroFW\user\user.c
00097a   6aea     CLRF      0xea,0x0                                                                                        
00097c   0f51     ADDLW     0x51                                                                                            
00097e   6ee9     MOVWF     0xe9,0x0                                                                                        
000980   0e01     MOVLW     0x1                                                                                             
000982   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000984   0e03     MOVLW     0x3                                                                                             
000986   6eef     MOVWF     0xef,0x0                                                                                        
                                           				// And remember which pin is primed                                          E:\iroFW\user\user.c
000988   500f     MOVF      0xf,0x0,0x0    				g_RC_primed_ptr = g_RC_next_ptr;                                             E:\iroFW\user\user.c
00098a   6e0e     MOVWF     0xe,0x0                                                                                         
                                           			}                                                                             E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           		// And always advance the main pointer                                         E:\iroFW\user\user.c
                                           		// NOTE: we need to skip RA6, RA7, and RC3, RC4, and RC5                       E:\iroFW\user\user.c
                                           		// (Because UBW doesn't bring those pins out to headers)                       E:\iroFW\user\user.c
00098c   2a0f     INCF      0xf,0x1,0x0    		g_RC_next_ptr++;                                                               E:\iroFW\user\user.c
00098e   0e06     MOVLW     0x6            		if (6 == g_RC_next_ptr)                                                        E:\iroFW\user\user.c
000990   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
000992   e103     BNZ       0x99a                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
000994   0e08     MOVLW     0x8            			g_RC_next_ptr = 8;                                                            E:\iroFW\user\user.c
000996   6e0f     MOVWF     0xf,0x0                                                                                         
                                           		}                                                                              E:\iroFW\user\user.c
000998   d00a     BRA       0x9ae          		else if (19 == g_RC_next_ptr)                                                  E:\iroFW\user\user.c
00099a   0e13     MOVLW     0x13                                                                                            
00099c   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
00099e   e103     BNZ       0x9a6                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
0009a0   0e16     MOVLW     0x16           			g_RC_next_ptr = 22;                                                           E:\iroFW\user\user.c
0009a2   6e0f     MOVWF     0xf,0x0                                                                                         
                                           		}                                                                              E:\iroFW\user\user.c
0009a4   d004     BRA       0x9ae          		else if (kRC_DATA_SIZE == g_RC_next_ptr)                                       E:\iroFW\user\user.c
0009a6   0e18     MOVLW     0x18                                                                                            
0009a8   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
0009aa   e101     BNZ       0x9ae                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
0009ac   6a0f     CLRF      0xf,0x0        			g_RC_next_ptr = 0;                                                            E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           				                                                                             E:\iroFW\user\user.c
                                           		// See if it's time to fire off an I packet                                    E:\iroFW\user\user.c
0009ae   0e00     MOVLW     0x0            		if (ISR_D_RepeatRate > 0)                                                      E:\iroFW\user\user.c
0009b0   80d8     BSF       0xd8,0x0,0x0                                                                                    
0009b2   5402     SUBFWB    0x2,0x0,0x0                                                                                     
0009b4   0e00     MOVLW     0x0                                                                                             
0009b6   5403     SUBFWB    0x3,0x0,0x0                                                                                     
0009b8   e22e     BC        0xa16                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
0009ba   2a11     INCF      0x11,0x1,0x0   			D_tick_counter++;                                                             E:\iroFW\user\user.c
0009bc   0e00     MOVLW     0x0                                                                                             
0009be   2212     ADDWFC    0x12,0x1,0x0                                                                                    
0009c0   5002     MOVF      0x2,0x0,0x0    			if (D_tick_counter >= ISR_D_RepeatRate)                                       E:\iroFW\user\user.c
0009c2   5c11     SUBWF     0x11,0x0,0x0                                                                                    
0009c4   5003     MOVF      0x3,0x0,0x0                                                                                     
0009c6   5812     SUBWFB    0x12,0x0,0x0                                                                                    
0009c8   e326     BNC       0xa16                                                                                           
                                           			{                                                                             E:\iroFW\user\user.c
0009ca   6a11     CLRF      0x11,0x0       				D_tick_counter = 0;                                                          E:\iroFW\user\user.c
0009cc   6a12     CLRF      0x12,0x0                                                                                        
                                           				// Tell the main code to send an I packet                                    E:\iroFW\user\user.c
0009ce   0e03     MOVLW     0x3            				if (ISR_D_FIFO_length < kISR_FIFO_D_DEPTH)                                   E:\iroFW\user\user.c
0009d0   5c06     SUBWF     0x6,0x0,0x0                                                                                     
0009d2   e21f     BC        0xa12                                                                                           
                                           				{                                                                            E:\iroFW\user\user.c
                                           					// And copy over our port values                                            E:\iroFW\user\user.c
0009d4   5004     MOVF      0x4,0x0,0x0    					ISR_D_FIFO[0][ISR_D_FIFO_in] = PORTA;                                       E:\iroFW\user\user.c
0009d6   6aea     CLRF      0xea,0x0                                                                                        
0009d8   0f48     ADDLW     0x48                                                                                            
0009da   6ee9     MOVWF     0xe9,0x0                                                                                        
0009dc   0e01     MOVLW     0x1                                                                                             
0009de   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0009e0   cf80     MOVFF     0xf80,0xfef                                                                                     
0009e2   ffef                                                                                                               
0009e4   5004     MOVF      0x4,0x0,0x0    					ISR_D_FIFO[1][ISR_D_FIFO_in] = PORTB;                                       E:\iroFW\user\user.c
0009e6   6aea     CLRF      0xea,0x0                                                                                        
0009e8   0f4b     ADDLW     0x4b                                                                                            
0009ea   6ee9     MOVWF     0xe9,0x0                                                                                        
0009ec   0e01     MOVLW     0x1                                                                                             
0009ee   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0009f0   cf81     MOVFF     0xf81,0xfef                                                                                     
0009f2   ffef                                                                                                               
0009f4   5004     MOVF      0x4,0x0,0x0    					ISR_D_FIFO[2][ISR_D_FIFO_in] = PORTC;                                       E:\iroFW\user\user.c
0009f6   6aea     CLRF      0xea,0x0                                                                                        
0009f8   0f4e     ADDLW     0x4e                                                                                            
0009fa   6ee9     MOVWF     0xe9,0x0                                                                                        
0009fc   0e01     MOVLW     0x1                                                                                             
0009fe   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000a00   cf82     MOVFF     0xf82,0xfef                                                                                     
000a02   ffef                                                                                                               
000a04   2a04     INCF      0x4,0x1,0x0    					ISR_D_FIFO_in++;                                                            E:\iroFW\user\user.c
000a06   0e03     MOVLW     0x3            					if (ISR_D_FIFO_in >= kISR_FIFO_D_DEPTH)                                     E:\iroFW\user\user.c
000a08   5c04     SUBWF     0x4,0x0,0x0                                                                                     
000a0a   e301     BNC       0xa0e                                                                                           
                                           					{                                                                           E:\iroFW\user\user.c
000a0c   6a04     CLRF      0x4,0x0        						ISR_D_FIFO_in = 0;	                                                        E:\iroFW\user\user.c
                                           					}                                                                           E:\iroFW\user\user.c
000a0e   2a06     INCF      0x6,0x1,0x0    					ISR_D_FIFO_length++;                                                        E:\iroFW\user\user.c
                                           				}                                                                            E:\iroFW\user\user.c
000a10   d002     BRA       0xa16          				else                                                                         E:\iroFW\user\user.c
                                           				{                                                                            E:\iroFW\user\user.c
                                           					// Stop the madness! Something is wrong, we're                              E:\iroFW\user\user.c
                                           					// not getting our packets out. So kill the                                 E:\iroFW\user\user.c
                                           					// timer.                                                                   E:\iroFW\user\user.c
000a12   6a02     CLRF      0x2,0x0        					ISR_D_RepeatRate = 0;                                                       E:\iroFW\user\user.c
000a14   6a03     CLRF      0x3,0x0                                                                                         
                                           				}                                                                            E:\iroFW\user\user.c
                                           			}	                                                                            E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		                                                                               E:\iroFW\user\user.c
                                           		// See if it's time to fire off an A packet                                    E:\iroFW\user\user.c
000a16   0e00     MOVLW     0x0            		if ((ISR_A_RepeatRate > 0) && (AnalogEnable > 0))                              E:\iroFW\user\user.c
000a18   80d8     BSF       0xd8,0x0,0x0                                                                                    
000a1a   5407     SUBFWB    0x7,0x0,0x0                                                                                     
000a1c   0e00     MOVLW     0x0                                                                                             
000a1e   5408     SUBFWB    0x8,0x0,0x0                                                                                     
000a20   e219     BC        0xa54                                                                                           
000a22   500c     MOVF      0xc,0x0,0x0                                                                                     
000a24   0800     SUBLW     0x0                                                                                             
000a26   e216     BC        0xa54                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
000a28   2a13     INCF      0x13,0x1,0x0   			A_tick_counter++;                                                             E:\iroFW\user\user.c
000a2a   0e00     MOVLW     0x0                                                                                             
000a2c   2214     ADDWFC    0x14,0x1,0x0                                                                                    
000a2e   5007     MOVF      0x7,0x0,0x0    			if (A_tick_counter >= ISR_A_RepeatRate)                                       E:\iroFW\user\user.c
000a30   5c13     SUBWF     0x13,0x0,0x0                                                                                    
000a32   5008     MOVF      0x8,0x0,0x0                                                                                     
000a34   5814     SUBWFB    0x14,0x0,0x0                                                                                    
000a36   e30e     BNC       0xa54                                                                                           
                                           			{                                                                             E:\iroFW\user\user.c
000a38   6a13     CLRF      0x13,0x0       				A_tick_counter = 0;                                                          E:\iroFW\user\user.c
000a3a   6a14     CLRF      0x14,0x0                                                                                        
                                           				// Tell the main code to send an A packet                                    E:\iroFW\user\user.c
000a3c   0e03     MOVLW     0x3            				if (ISR_A_FIFO_length < kISR_FIFO_A_DEPTH)                                   E:\iroFW\user\user.c
000a3e   5c0b     SUBWF     0xb,0x0,0x0                                                                                     
000a40   e207     BC        0xa50                                                                                           
                                           				{                                                                            E:\iroFW\user\user.c
000a42   2a09     INCF      0x9,0x1,0x0    					ISR_A_FIFO_in++;                                                            E:\iroFW\user\user.c
000a44   0e03     MOVLW     0x3            					if (ISR_A_FIFO_in >= kISR_FIFO_A_DEPTH)                                     E:\iroFW\user\user.c
000a46   5c09     SUBWF     0x9,0x0,0x0                                                                                     
000a48   e301     BNC       0xa4c                                                                                           
                                           					{                                                                           E:\iroFW\user\user.c
000a4a   6a09     CLRF      0x9,0x0        						ISR_A_FIFO_in = 0;	                                                        E:\iroFW\user\user.c
                                           					}                                                                           E:\iroFW\user\user.c
000a4c   2a0b     INCF      0xb,0x1,0x0    					ISR_A_FIFO_length++;                                                        E:\iroFW\user\user.c
                                           				}                                                                            E:\iroFW\user\user.c
000a4e   d002     BRA       0xa54          				else                                                                         E:\iroFW\user\user.c
                                           				{                                                                            E:\iroFW\user\user.c
                                           					// Stop the madness! Something is wrong, we're                              E:\iroFW\user\user.c
                                           					// not getting our packets out. So kill the A                               E:\iroFW\user\user.c
                                           					// packets.                                                                 E:\iroFW\user\user.c
000a50   6a07     CLRF      0x7,0x0        					ISR_A_RepeatRate = 0;                                                       E:\iroFW\user\user.c
000a52   6a08     CLRF      0x8,0x0                                                                                         
                                           				}                                                                            E:\iroFW\user\user.c
                                           			}	                                                                            E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           		// See if it's time to start analog conversions                                E:\iroFW\user\user.c
000a54   500c     MOVF      0xc,0x0,0x0    		if (AnalogEnable > 0)                                                          E:\iroFW\user\user.c
000a56   0800     SUBLW     0x0                                                                                             
000a58   e20a     BC        0xa6e                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Set the channel to zero to start off with                                  E:\iroFW\user\user.c
000a5a   6a15     CLRF      0x15,0x0       			A_cur_channel = 0;                                                            E:\iroFW\user\user.c
000a5c   5015     MOVF      0x15,0x0,0x0   			ADCON0 = (A_cur_channel << 2) + 1;                                            E:\iroFW\user\user.c
000a5e   0d04     MULLW     0x4                                                                                             
000a60   28f3     INCF      0xf3,0x0,0x0                                                                                    
000a62   6ec2     MOVWF     0xc2,0x0                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           			// Clear the interrupt                                                        E:\iroFW\user\user.c
000a64   9c9e     BCF       0x9e,0x6,0x0   			PIR1bits.ADIF = 0;                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           			// And make sure to always use low priority.                                  E:\iroFW\user\user.c
000a66   9c9f     BCF       0x9f,0x6,0x0   			IPR1bits.ADIP = 0;                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           			// Set the interrupt enable                                                   E:\iroFW\user\user.c
000a68   8c9d     BSF       0x9d,0x6,0x0   			PIE1bits.ADIE = 1;                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           			// Make sure it's on!                                                         E:\iroFW\user\user.c
000a6a   80c2     BSF       0xc2,0x0,0x0   			ADCON0bits.ADON = 1;                                                          E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           			// And tell the A/D to GO!                                                    E:\iroFW\user\user.c
000a6c   82c2     BSF       0xc2,0x1,0x0   			ADCON0bits.GO_DONE = 1;                                                       E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		                                                                               E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Do we have an analog interrupt?                                              E:\iroFW\user\user.c
000a6e   ac9e     BTFSS     0x9e,0x6,0x0   	if (PIR1bits.ADIF)                                                              E:\iroFW\user\user.c
000a70   d02d     BRA       0xacc                                                                                           
                                           	{                                                                               E:\iroFW\user\user.c
                                           		// Clear the interrupt                                                         E:\iroFW\user\user.c
000a72   9c9e     BCF       0x9e,0x6,0x0   		PIR1bits.ADIF = 0;                                                             E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           		// Read out the value that we just converted, and store it.                    E:\iroFW\user\user.c
000a8a   5015     MOVF      0x15,0x0,0x0   		ISR_A_FIFO[A_cur_channel][ISR_A_FIFO_in] =                                     E:\iroFW\user\user.c
000a8c   0d06     MULLW     0x6                                                                                             
000a8e   cff3     MOVFF     0xff3,0x38                                                                                      
000a90   f038                                                                                                               
000a92   cff4     MOVFF     0xff4,0x39                                                                                      
000a94   f039                                                                                                               
000a96   0e00     MOVLW     0x0                                                                                             
000a98   2638     ADDWF     0x38,0x1,0x0                                                                                    
000a9a   0e01     MOVLW     0x1                                                                                             
000a9c   2239     ADDWFC    0x39,0x1,0x0                                                                                    
000a9e   5009     MOVF      0x9,0x0,0x0                                                                                     
000aa0   0d02     MULLW     0x2                                                                                             
000aa2   5038     MOVF      0x38,0x0,0x0                                                                                    
000aa4   24f3     ADDWF     0xf3,0x0,0x0                                                                                    
000aa6   6ee9     MOVWF     0xe9,0x0                                                                                        
000aa8   5039     MOVF      0x39,0x0,0x0                                                                                    
000aaa   20f4     ADDWFC    0xf4,0x0,0x0                                                                                    
000aac   6eea     MOVWF     0xea,0x0                                                                                        
000a7e   50c3     MOVF      0xc3,0x0,0x0   			(unsigned int)ADRESL                                                          E:\iroFW\user\user.c
                                           			|                                                                             E:\iroFW\user\user.c
000a74   50c4     MOVF      0xc4,0x0,0x0   			((unsigned int)ADRESH << 8);                                                  E:\iroFW\user\user.c
000a76   6e3c     MOVWF     0x3c,0x0                                                                                        
000a78   c03c     MOVFF     0x3c,0x3d                                                                                       
000a7a   f03d                                                                                                               
000a7c   6a3c     CLRF      0x3c,0x0                                                                                        
000a80   0100     MOVLB     0x0                                                                                             
000a82   103c     IORWF     0x3c,0x0,0x0                                                                                    
000a84   6e3a     MOVWF     0x3a,0x0                                                                                        
000a86   c03d     MOVFF     0x3d,0x3b                                                                                       
000a88   f03b                                                                                                               
000aae   c03a     MOVFF     0x3a,0xfee                                                                                      
000ab0   ffee                                                                                                               
000ab2   c03b     MOVFF     0x3b,0xfed                                                                                      
000ab4   ffed                                                                                                               
                                           	                                                                                E:\iroFW\user\user.c
                                           		// Incriment the channel and write the new one in                              E:\iroFW\user\user.c
000ab6   2a15     INCF      0x15,0x1,0x0   		A_cur_channel++;                                                               E:\iroFW\user\user.c
000ab8   500c     MOVF      0xc,0x0,0x0    		if (A_cur_channel >= AnalogEnable)                                             E:\iroFW\user\user.c
000aba   5c15     SUBWF     0x15,0x0,0x0                                                                                    
000abc   e302     BNC       0xac2                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// We're done, so just sit and wait                                           E:\iroFW\user\user.c
                                           			// Turn off our interrupts though.                                            E:\iroFW\user\user.c
000abe   9c9d     BCF       0x9d,0x6,0x0   			PIE1bits.ADIE = 0;                                                            E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
000ac0   d005     BRA       0xacc          		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Update the channel number                                                  E:\iroFW\user\user.c
000ac2   5015     MOVF      0x15,0x0,0x0   			ADCON0 = (A_cur_channel << 2) + 1;                                            E:\iroFW\user\user.c
000ac4   0d04     MULLW     0x4                                                                                             
000ac6   28f3     INCF      0xf3,0x0,0x0                                                                                    
000ac8   6ec2     MOVWF     0xc2,0x0                                                                                        
                                           			// And start the next conversion                                              E:\iroFW\user\user.c
000aca   82c2     BSF       0xc2,0x1,0x0   			ADCON0bits.GO_DONE = 1;                                                       E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Do we have a TMR0 interrupt? (RC command)                                    E:\iroFW\user\user.c
                                           	// TMR0 is in 16 bit mode, and counts up to FFFF and overflows, generating      E:\iroFW\user\user.c
                                           	// this interrupt.                                                              E:\iroFW\user\user.c
000acc   a4f2     BTFSS     0xf2,0x2,0x0   	if (INTCONbits.TMR0IF)                                                          E:\iroFW\user\user.c
000ace   d042     BRA       0xb54                                                                                           
                                           	{                                                                               E:\iroFW\user\user.c
                                           		// Turn off Timer0                                                             E:\iroFW\user\user.c
000ad0   9ed5     BCF       0xd5,0x7,0x0   		T0CONbits.TMR0ON = 0;                                                          E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           		// Clear the interrupt                                                         E:\iroFW\user\user.c
000ad2   94f2     BCF       0xf2,0x2,0x0   		INTCONbits.TMR0IF = 0;                                                         E:\iroFW\user\user.c
                                           		                                                                               E:\iroFW\user\user.c
                                           		// And disable it                                                              E:\iroFW\user\user.c
000ad4   9af2     BCF       0xf2,0x5,0x0   		INTCONbits.TMR0IE = 0;                                                         E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           		// Only do our stuff if the pin is in the proper state                         E:\iroFW\user\user.c
000ad6   0e04     MOVLW     0x4            		if (kTIMING == g_RC_state[g_RC_timing_ptr])                                    E:\iroFW\user\user.c
000ad8   6e38     MOVWF     0x38,0x0                                                                                        
000ada   5010     MOVF      0x10,0x0,0x0                                                                                    
000adc   6aea     CLRF      0xea,0x0                                                                                        
000ade   0f51     ADDLW     0x51                                                                                            
000ae0   6ee9     MOVWF     0xe9,0x0                                                                                        
000ae2   0e01     MOVLW     0x1                                                                                             
000ae4   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000ae6   50ef     MOVF      0xef,0x0,0x0                                                                                    
000ae8   5c38     SUBWF     0x38,0x0,0x0                                                                                    
000aea   e134     BNZ       0xb54                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// All we need to do is clear the pin and change its state to kWAITING        E:\iroFW\user\user.c
000aec   0e08     MOVLW     0x8            			if (g_RC_timing_ptr < 8)                                                      E:\iroFW\user\user.c
000aee   5c10     SUBWF     0x10,0x0,0x0                                                                                    
000af0   e20d     BC        0xb0c                                                                                           
                                           			{                                                                             E:\iroFW\user\user.c
000af2   0e07     MOVLW     0x7            				bitclr (LATA, g_RC_timing_ptr & 0x7);                                        E:\iroFW\user\user.c
000af4   1410     ANDWF     0x10,0x0,0x0                                                                                    
000af6   6e38     MOVWF     0x38,0x0                                                                                        
000af8   0e01     MOVLW     0x1                                                                                             
000afa   5238     MOVF      0x38,0x1,0x0                                                                                    
000afc   e004     BZ        0xb06                                                                                           
000afe   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000b00   0bfe     ANDLW     0xfe                                                                                            
000b02   0638     DECF      0x38,0x1,0x0                                                                                    
000b04   e1fc     BNZ       0xafe                                                                                           
000b06   1ce8     COMF      0xe8,0x0,0x0                                                                                    
000b08   1689     ANDWF     0x89,0x1,0x0                                                                                    
                                           			}                                                                             E:\iroFW\user\user.c
000b0a   d01c     BRA       0xb44          			else if (g_RC_timing_ptr < 16)                                                E:\iroFW\user\user.c
000b0c   0e10     MOVLW     0x10                                                                                            
000b0e   5c10     SUBWF     0x10,0x0,0x0                                                                                    
000b10   e20d     BC        0xb2c                                                                                           
                                           			{                                                                             E:\iroFW\user\user.c
000b12   0e07     MOVLW     0x7            				bitclr (LATB, g_RC_timing_ptr & 0x7);                                        E:\iroFW\user\user.c
000b14   1410     ANDWF     0x10,0x0,0x0                                                                                    
000b16   6e38     MOVWF     0x38,0x0                                                                                        
000b18   0e01     MOVLW     0x1                                                                                             
000b1a   5238     MOVF      0x38,0x1,0x0                                                                                    
000b1c   e004     BZ        0xb26                                                                                           
000b1e   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000b20   0bfe     ANDLW     0xfe                                                                                            
000b22   0638     DECF      0x38,0x1,0x0                                                                                    
000b24   e1fc     BNZ       0xb1e                                                                                           
000b26   1ce8     COMF      0xe8,0x0,0x0                                                                                    
000b28   168a     ANDWF     0x8a,0x1,0x0                                                                                    
                                           			}                                                                             E:\iroFW\user\user.c
000b2a   d00c     BRA       0xb44          			else                                                                          E:\iroFW\user\user.c
                                           			{                                                                             E:\iroFW\user\user.c
000b2c   0e07     MOVLW     0x7            				bitclr (LATC, g_RC_timing_ptr & 0x7);                                        E:\iroFW\user\user.c
000b2e   1410     ANDWF     0x10,0x0,0x0                                                                                    
000b30   6e38     MOVWF     0x38,0x0                                                                                        
000b32   0e01     MOVLW     0x1                                                                                             
000b34   5238     MOVF      0x38,0x1,0x0                                                                                    
000b36   e004     BZ        0xb40                                                                                           
000b38   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000b3a   0bfe     ANDLW     0xfe                                                                                            
000b3c   0638     DECF      0x38,0x1,0x0                                                                                    
000b3e   e1fc     BNZ       0xb38                                                                                           
000b40   1ce8     COMF      0xe8,0x0,0x0                                                                                    
000b42   168b     ANDWF     0x8b,0x1,0x0                                                                                    
                                           			}                                                                             E:\iroFW\user\user.c
000b44   5010     MOVF      0x10,0x0,0x0   			g_RC_state[g_RC_timing_ptr] = kWAITING;		                                     E:\iroFW\user\user.c
000b46   6aea     CLRF      0xea,0x0                                                                                        
000b48   0f51     ADDLW     0x51                                                                                            
000b4a   6ee9     MOVWF     0xe9,0x0                                                                                        
000b4c   0e01     MOVLW     0x1                                                                                             
000b4e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000b50   0e02     MOVLW     0x2                                                                                             
000b52   6eef     MOVWF     0xef,0x0                                                                                        
                                           		}                                                                              E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
000b54   52e5     MOVF      0xe5,0x1,0x0   }                                                                                E:\iroFW\user\user.c
000b56   cfe5     MOVFF     0xfe5,0xff4                                                                                     
000b58   fff4                                                                                                               
000b5a   cfe5     MOVFF     0xfe5,0xff3                                                                                     
000b5c   fff3                                                                                                               
000b5e   cfe5     MOVFF     0xfe5,0xfea                                                                                     
000b60   ffea                                                                                                               
000b62   cfe5     MOVFF     0xfe5,0xfe9                                                                                     
000b64   ffe9                                                                                                               
000b66   cfe5     MOVFF     0xfe5,0xfda                                                                                     
000b68   ffda                                                                                                               
000b6a   50e5     MOVF      0xe5,0x0,0x0                                                                                    
000b6c   cfe5     MOVFF     0xfe5,0xfe0                                                                                     
000b6e   ffe0                                                                                                               
000b70   cfe5     MOVFF     0xfe5,0xfd8                                                                                     
000b72   ffd8                                                                                                               
000b74   0010     RETFIE    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           #pragma interrupt high_ISR                                                       E:\iroFW\user\user.c
000b76   cfda     MOVFF     0xfda,0xfe4    void high_ISR(void)                                                              E:\iroFW\user\user.c
000b78   ffe4                                                                                                               
000b7a   cfe2     MOVFF     0xfe2,0xfda                                                                                     
000b7c   ffda                                                                                                               
000b7e   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
000b80   52e5     MOVF      0xe5,0x1,0x0   }                                                                                E:\iroFW\user\user.c
000b82   cfe5     MOVFF     0xfe5,0xfda                                                                                     
000b84   ffda                                                                                                               
000b86   0011     RETFIE    0x1                                                                                             
                                                                                                                            E:\iroFW\user\user.c
000b88   cfd9     MOVFF     0xfd9,0xfe6    void UserInit(void)                                                              E:\iroFW\user\user.c
000b8a   ffe6                                                                                                               
000b8c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000b8e   ffd9                                                                                                               
000b90   0e02     MOVLW     0x2                                                                                             
000b92   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	char i, j;                                                                      E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Make all of 3 digital inputs                                                 E:\iroFW\user\user.c
000b94   6a89     CLRF      0x89,0x0       	LATA = 0x00;                                                                    E:\iroFW\user\user.c
000b96   6892     SETF      0x92,0x0       	TRISA = 0xFF;                                                                   E:\iroFW\user\user.c
                                           	// Turn all analog inputs into digital inputs                                   E:\iroFW\user\user.c
000b98   0e0f     MOVLW     0xf            	ADCON1 = 0x0F;                                                                  E:\iroFW\user\user.c
000b9a   6ec1     MOVWF     0xc1,0x0                                                                                        
                                           	// Turn off the ADC                                                             E:\iroFW\user\user.c
000b9c   90c2     BCF       0xc2,0x0,0x0   	ADCON0bits.ADON = 0;                                                            E:\iroFW\user\user.c
                                           	// Turn off our own idea of how many analog channels to convert                 E:\iroFW\user\user.c
000b9e   6a0c     CLRF      0xc,0x0        	AnalogEnable = 0;                                                               E:\iroFW\user\user.c
000ba0   0e07     MOVLW     0x7            	CMCON = 0x07;	// Comparators as digital inputs                                  E:\iroFW\user\user.c
000ba2   6eb4     MOVWF     0xb4,0x0                                                                                        
                                           	// Make all of PORTB inputs                                                     E:\iroFW\user\user.c
000ba4   6a8a     CLRF      0x8a,0x0       	LATB = 0x00;                                                                    E:\iroFW\user\user.c
000ba6   6893     SETF      0x93,0x0       	TRISB = 0xFF;                                                                   E:\iroFW\user\user.c
                                           	// Make all of PORTC inputs                                                     E:\iroFW\user\user.c
000ba8   6a8b     CLRF      0x8b,0x0       	LATC = 0x00;                                                                    E:\iroFW\user\user.c
000baa   6894     SETF      0x94,0x0       	TRISC = 0xFF;                                                                   E:\iroFW\user\user.c
                                           #ifdef __18F4550                                                                 E:\iroFW\user\user.c
                                           	// Make all of PORTD and PORTE inputs too                                       E:\iroFW\user\user.c
                                           	LATD = 0x00;                                                                    E:\iroFW\user\user.c
                                           	TRISD = 0xFF;                                                                   E:\iroFW\user\user.c
                                           	LATE = 0x00;                                                                    E:\iroFW\user\user.c
                                           	TRISE = 0xFF;                                                                   E:\iroFW\user\user.c
                                           #endif                                                                           E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Initalize LED I/Os to outputs                                                E:\iroFW\user\user.c
000bac   0efc     MOVLW     0xfc               mInitAllLEDs();                                                              E:\iroFW\user\user.c
000bae   168b     ANDWF     0x8b,0x1,0x0                                                                                    
000bb0   0efc     MOVLW     0xfc                                                                                            
000bb2   1694     ANDWF     0x94,0x1,0x0                                                                                    
                                           	// Initalize switch as an input                                                 E:\iroFW\user\user.c
000bb4   8494     BSF       0x94,0x2,0x0       mInitSwitch();                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Start off always using "OK" acknoledge.                                      E:\iroFW\user\user.c
000bb6   0101     MOVLB     0x1            	g_ack_enable = TRUE;                                                            E:\iroFW\user\user.c
000bb8   0e01     MOVLW     0x1                                                                                             
000bba   6fa6     MOVWF     0xa6,0x1                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           	// Use our own special output function for STDOUT                               E:\iroFW\user\user.c
000bbc   0101     MOVLB     0x1            	stdout = _H_USER;                                                               E:\iroFW\user\user.c
000bbe   69ef     SETF      0xef,0x1                                                                                        
000bc0   69f0     SETF      0xf0,0x1                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           	// Initalize all of the ISR FIFOs                                               E:\iroFW\user\user.c
000bc2   6a0a     CLRF      0xa,0x0            ISR_A_FIFO_out = 0;                                                          E:\iroFW\user\user.c
000bc4   6a09     CLRF      0x9,0x0            ISR_A_FIFO_in = 0;                                                           E:\iroFW\user\user.c
000bc6   6a0b     CLRF      0xb,0x0            ISR_A_FIFO_length = 0;                                                       E:\iroFW\user\user.c
000bc8   6a05     CLRF      0x5,0x0            ISR_D_FIFO_out = 0;                                                          E:\iroFW\user\user.c
000bca   6a04     CLRF      0x4,0x0            ISR_D_FIFO_in = 0;                                                           E:\iroFW\user\user.c
000bcc   6a06     CLRF      0x6,0x0            ISR_D_FIFO_length = 0;                                                       E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Make sure that our timer stuff starts out disabled                           E:\iroFW\user\user.c
000bce   6a02     CLRF      0x2,0x0        	ISR_D_RepeatRate = 0;                                                           E:\iroFW\user\user.c
000bd0   6a03     CLRF      0x3,0x0                                                                                         
000bd2   6a07     CLRF      0x7,0x0        	ISR_A_RepeatRate = 0;                                                           E:\iroFW\user\user.c
000bd4   6a08     CLRF      0x8,0x0                                                                                         
000bd6   6a11     CLRF      0x11,0x0       	D_tick_counter = 0;                                                             E:\iroFW\user\user.c
000bd8   6a12     CLRF      0x12,0x0                                                                                        
000bda   6a13     CLRF      0x13,0x0       	A_tick_counter = 0;                                                             E:\iroFW\user\user.c
000bdc   6a14     CLRF      0x14,0x0                                                                                        
000bde   6a15     CLRF      0x15,0x0       	A_cur_channel = 0;                                                              E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
                                               // Now init our registers                                                    E:\iroFW\user\user.c
                                           	// The prescaler will be at 16                                                  E:\iroFW\user\user.c
000be0   82ca     BSF       0xca,0x1,0x0       T2CONbits.T2CKPS1 = 1;                                                       E:\iroFW\user\user.c
000be2   80ca     BSF       0xca,0x0,0x0       T2CONbits.T2CKPS0 = 1;                                                       E:\iroFW\user\user.c
                                               // We want the TMR2 post scaler to be a 3                                    E:\iroFW\user\user.c
000be4   9cca     BCF       0xca,0x6,0x0       T2CONbits.T2OUTPS3 = 0;                                                      E:\iroFW\user\user.c
000be6   9aca     BCF       0xca,0x5,0x0       T2CONbits.T2OUTPS2 = 0;                                                      E:\iroFW\user\user.c
000be8   88ca     BSF       0xca,0x4,0x0       T2CONbits.T2OUTPS1 = 1;                                                      E:\iroFW\user\user.c
000bea   96ca     BCF       0xca,0x3,0x0       T2CONbits.T2OUTPS0 = 0;                                                      E:\iroFW\user\user.c
                                           	// Set our reload value                                                         E:\iroFW\user\user.c
000bec   0efa     MOVLW     0xfa           	PR2 = kPR2_RELOAD;                                                              E:\iroFW\user\user.c
000bee   6ecb     MOVWF     0xcb,0x0                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           	// Set up the Analog to Digital converter                                       E:\iroFW\user\user.c
                                           	// Clear out the FIFO data                                                      E:\iroFW\user\user.c
000bf0   6adf     CLRF      0xdf,0x0       	for (i = 0; i < 12; i++)                                                        E:\iroFW\user\user.c
000bf2   cfdf     MOVFF     0xfdf,0x2a                                                                                      
000bf4   f02a                                                                                                               
000bf6   0e0c     MOVLW     0xc                                                                                             
000bf8   6ee7     MOVWF     0xe7,0x0                                                                                        
000bfa   182a     XORWF     0x2a,0x0,0x0                                                                                    
000bfc   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000bfe   d002     BRA       0xc04                                                                                           
000c00   34e7     RLCF      0xe7,0x0,0x0                                                                                    
000c02   d002     BRA       0xc08                                                                                           
000c04   50e7     MOVF      0xe7,0x0,0x0                                                                                    
000c06   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
000c08   e238     BC        0xc7a                                                                                           
000c76   2adf     INCF      0xdf,0x1,0x0                                                                                    
000c78   d7bc     BRA       0xbf2                                                                                           
                                           	{                                                                               E:\iroFW\user\user.c
000c0a   0e01     MOVLW     0x1            		for (j = 0; j < kISR_FIFO_A_DEPTH; j++)                                        E:\iroFW\user\user.c
000c0c   6adb     CLRF      0xdb,0x0                                                                                        
000c0e   0e01     MOVLW     0x1                                                                                             
000c10   cfdb     MOVFF     0xfdb,0x2a                                                                                      
000c12   f02a                                                                                                               
000c14   0e03     MOVLW     0x3                                                                                             
000c16   6ee7     MOVWF     0xe7,0x0                                                                                        
000c18   182a     XORWF     0x2a,0x0,0x0                                                                                    
000c1a   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000c1c   d002     BRA       0xc22                                                                                           
000c1e   34e7     RLCF      0xe7,0x0,0x0                                                                                    
000c20   d002     BRA       0xc26                                                                                           
000c22   50e7     MOVF      0xe7,0x0,0x0                                                                                    
000c24   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
000c26   e227     BC        0xc76                                                                                           
000c70   0e01     MOVLW     0x1                                                                                             
000c72   2adb     INCF      0xdb,0x1,0x0                                                                                    
000c74   d7cc     BRA       0xc0e                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
000c28   cfdf     MOVFF     0xfdf,0x2a     			ISR_A_FIFO[i][j] = 0;                                                         E:\iroFW\user\user.c
000c2a   f02a                                                                                                               
000c2c   6a2b     CLRF      0x2b,0x0                                                                                        
000c2e   be2a     BTFSC     0x2a,0x7,0x0                                                                                    
000c30   682b     SETF      0x2b,0x0                                                                                        
000c32   0e06     MOVLW     0x6                                                                                             
000c34   022b     MULWF     0x2b,0x0                                                                                        
000c36   cff3     MOVFF     0xff3,0x2b                                                                                      
000c38   f02b                                                                                                               
000c3a   0e06     MOVLW     0x6                                                                                             
000c3c   022a     MULWF     0x2a,0x0                                                                                        
000c3e   cff3     MOVFF     0xff3,0x2a                                                                                      
000c40   f02a                                                                                                               
000c42   50f4     MOVF      0xf4,0x0,0x0                                                                                    
000c44   262b     ADDWF     0x2b,0x1,0x0                                                                                    
000c46   0e00     MOVLW     0x0                                                                                             
000c48   262a     ADDWF     0x2a,0x1,0x0                                                                                    
000c4a   0e01     MOVLW     0x1                                                                                             
000c4c   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
000c4e   0e01     MOVLW     0x1                                                                                             
000c50   cfdb     MOVFF     0xfdb,0x2c                                                                                      
000c52   f02c                                                                                                               
000c54   6a2d     CLRF      0x2d,0x0                                                                                        
000c56   be2c     BTFSC     0x2c,0x7,0x0                                                                                    
000c58   682d     SETF      0x2d,0x0                                                                                        
000c5a   90d8     BCF       0xd8,0x0,0x0                                                                                    
000c5c   362c     RLCF      0x2c,0x1,0x0                                                                                    
000c5e   362d     RLCF      0x2d,0x1,0x0                                                                                    
000c60   502a     MOVF      0x2a,0x0,0x0                                                                                    
000c62   242c     ADDWF     0x2c,0x0,0x0                                                                                    
000c64   6ee9     MOVWF     0xe9,0x0                                                                                        
000c66   502b     MOVF      0x2b,0x0,0x0                                                                                    
000c68   202d     ADDWFC    0x2d,0x0,0x0                                                                                    
000c6a   6eea     MOVWF     0xea,0x0                                                                                        
000c6c   6aee     CLRF      0xee,0x0                                                                                        
000c6e   6aed     CLRF      0xed,0x0                                                                                        
                                           		}                                                                              E:\iroFW\user\user.c
                                           	}	                                                                              E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                               // Inialize USB TX and RX buffer management                                  E:\iroFW\user\user.c
000c7a   0101     MOVLB     0x1                g_RX_buf_in = 0;                                                             E:\iroFW\user\user.c
000c7c   6ba0     CLRF      0xa0,0x1                                                                                        
000c7e   0101     MOVLB     0x1                g_RX_buf_out = 0;                                                            E:\iroFW\user\user.c
000c80   6ba1     CLRF      0xa1,0x1                                                                                        
000c82   0101     MOVLB     0x1            	g_TX_buf_in = 0;                                                                E:\iroFW\user\user.c
000c84   6b9e     CLRF      0x9e,0x1                                                                                        
000c86   0101     MOVLB     0x1            	g_TX_buf_out = 0;                                                               E:\iroFW\user\user.c
000c88   6b9f     CLRF      0x9f,0x1                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           	// And the USART TX and RX buffer management                                    E:\iroFW\user\user.c
000c8a   0101     MOVLB     0x1            	g_USART_RX_buf_in = 0;                                                          E:\iroFW\user\user.c
000c8c   6ba2     CLRF      0xa2,0x1                                                                                        
000c8e   0101     MOVLB     0x1            	g_USART_RX_buf_out = 0;                                                         E:\iroFW\user\user.c
000c90   6ba3     CLRF      0xa3,0x1                                                                                        
000c92   0101     MOVLB     0x1            	g_USART_TX_buf_in = 0;                                                          E:\iroFW\user\user.c
000c94   6ba4     CLRF      0xa4,0x1                                                                                        
000c96   0101     MOVLB     0x1            	g_USART_TX_buf_out = 0;                                                         E:\iroFW\user\user.c
000c98   6ba5     CLRF      0xa5,0x1                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           	// Clear out the RC servo output pointer values                                 E:\iroFW\user\user.c
000c9a   6a0e     CLRF      0xe,0x0        	g_RC_primed_ptr = 0;                                                            E:\iroFW\user\user.c
000c9c   6a0f     CLRF      0xf,0x0        	g_RC_next_ptr = 0;                                                              E:\iroFW\user\user.c
000c9e   6a10     CLRF      0x10,0x0       	g_RC_timing_ptr = 0;                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Clear the RC data structure                                                  E:\iroFW\user\user.c
000ca0   6adf     CLRF      0xdf,0x0       	for (i = 0; i < kRC_DATA_SIZE; i++)                                             E:\iroFW\user\user.c
000ca2   cfdf     MOVFF     0xfdf,0x2a                                                                                      
000ca4   f02a                                                                                                               
000ca6   0e18     MOVLW     0x18                                                                                            
000ca8   6ee7     MOVWF     0xe7,0x0                                                                                        
000caa   182a     XORWF     0x2a,0x0,0x0                                                                                    
000cac   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000cae   d002     BRA       0xcb4                                                                                           
000cb0   34e7     RLCF      0xe7,0x0,0x0                                                                                    
000cb2   d002     BRA       0xcb8                                                                                           
000cb4   50e7     MOVF      0xe7,0x0,0x0                                                                                    
000cb6   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
000cb8   e21b     BC        0xcf0                                                                                           
000cec   2adf     INCF      0xdf,0x1,0x0                                                                                    
000cee   d7d9     BRA       0xca2                                                                                           
                                           	{                                                                               E:\iroFW\user\user.c
000cba   cfdf     MOVFF     0xfdf,0xfe9    		g_RC_value[i] = 0;                                                             E:\iroFW\user\user.c
000cbc   ffe9                                                                                                               
000cbe   6aea     CLRF      0xea,0x0                                                                                        
000cc0   bee9     BTFSC     0xe9,0x7,0x0                                                                                    
000cc2   68ea     SETF      0xea,0x0                                                                                        
000cc4   90d8     BCF       0xd8,0x0,0x0                                                                                    
000cc6   36e9     RLCF      0xe9,0x1,0x0                                                                                    
000cc8   36ea     RLCF      0xea,0x1,0x0                                                                                    
000cca   0e69     MOVLW     0x69                                                                                            
000ccc   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000cce   0e01     MOVLW     0x1                                                                                             
000cd0   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000cd2   6aee     CLRF      0xee,0x0                                                                                        
000cd4   6aed     CLRF      0xed,0x0                                                                                        
000cd6   cfdf     MOVFF     0xfdf,0xfe9    		g_RC_state[i] = kOFF;                                                          E:\iroFW\user\user.c
000cd8   ffe9                                                                                                               
000cda   6aea     CLRF      0xea,0x0                                                                                        
000cdc   bee9     BTFSC     0xe9,0x7,0x0                                                                                    
000cde   68ea     SETF      0xea,0x0                                                                                        
000ce0   0e51     MOVLW     0x51                                                                                            
000ce2   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000ce4   0e01     MOVLW     0x1                                                                                             
000ce6   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000ce8   0e01     MOVLW     0x1                                                                                             
000cea   6eef     MOVWF     0xef,0x0                                                                                        
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Enable TMR0 for our RC timing operation                                      E:\iroFW\user\user.c
000cf0   86d5     BSF       0xd5,0x3,0x0   	T0CONbits.PSA = 1;		// Do NOT use the prescaler                                 E:\iroFW\user\user.c
000cf2   9ad5     BCF       0xd5,0x5,0x0   	T0CONbits.T0CS = 0;		// Use internal clock                                      E:\iroFW\user\user.c
000cf4   9cd5     BCF       0xd5,0x6,0x0   	T0CONbits.T08BIT = 0;	// 16 bit timer                                           E:\iroFW\user\user.c
000cf6   94f2     BCF       0xf2,0x2,0x0   	INTCONbits.TMR0IF = 0;	// Clear the interrupt flag                              E:\iroFW\user\user.c
000cf8   9af2     BCF       0xf2,0x5,0x0   	INTCONbits.TMR0IE = 0;	// And clear the interrupt enable                        E:\iroFW\user\user.c
000cfa   94f1     BCF       0xf1,0x2,0x0   	INTCON2bits.TMR0IP = 0;	// Low priority                                         E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                               // Enable interrupt priorities                                               E:\iroFW\user\user.c
000cfc   8ed0     BSF       0xd0,0x7,0x0       RCONbits.IPEN = 1;                                                           E:\iroFW\user\user.c
000cfe   94ca     BCF       0xca,0x2,0x0   	T2CONbits.TMR2ON = 0;                                                           E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
000d00   829d     BSF       0x9d,0x1,0x0       PIE1bits.TMR2IE = 1;                                                         E:\iroFW\user\user.c
000d02   929f     BCF       0x9f,0x1,0x0       IPR1bits.TMR2IP = 0;                                                         E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
000d04   8ef2     BSF       0xf2,0x7,0x0       INTCONbits.GIEH = 1;	// Turn high priority interrupts on                     E:\iroFW\user\user.c
000d06   8cf2     BSF       0xf2,0x6,0x0       INTCONbits.GIEL = 1;	// Turn low priority interrupts on                      E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Turn on the Timer2                                                           E:\iroFW\user\user.c
000d08   84ca     BSF       0xca,0x2,0x0   	T2CONbits.TMR2ON = 1;                                                           E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
000d0a   0e02     MOVLW     0x2            }//end UserInit                                                                  E:\iroFW\user\user.c
000d0c   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
000d0e   e202     BC        0xd14                                                                                           
000d10   6ae1     CLRF      0xe1,0x0                                                                                        
000d12   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000d14   6ee1     MOVWF     0xe1,0x0                                                                                        
000d16   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000d18   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000d1a   ffd9                                                                                                               
000d1c   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           /******************************************************************************  E:\iroFW\user\user.c
                                            * Function:        void ProcessIO(void)                                         E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * PreCondition:    None                                                         E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * Input:           None                                                         E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * Output:          None                                                         E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * Side Effects:    None                                                         E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * Overview:        In this function, we check for a new packet that just        E:\iroFW\user\user.c
                                            * 					arrived via USB. We do a few checks on the packet to see                 E:\iroFW\user\user.c
                                            *					if it is worthy of us trying to interpret it. If it is,                   E:\iroFW\user\user.c
                                            *					we go and call the proper function based upon the first                   E:\iroFW\user\user.c
                                            *					character of the packet.                                                  E:\iroFW\user\user.c
                                            *					NOTE: We need to see everything in one packet (i.e. we                    E:\iroFW\user\user.c
                                            *					won't treat the USB data as a stream and try to find our                  E:\iroFW\user\user.c
                                            *					start and end of packets within the stream. We just look                  E:\iroFW\user\user.c
                                            *					at the first character of each packet for a command and                   E:\iroFW\user\user.c
                                            * 					check that there's a CR as the last character of the                     E:\iroFW\user\user.c
                                            *					packet.                                                                   E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * Note:            None                                                         E:\iroFW\user\user.c
                                            *****************************************************************************/  E:\iroFW\user\user.c
000d1e   cfd9     MOVFF     0xfd9,0xfe6    void ProcessIO(void)                                                             E:\iroFW\user\user.c
000d20   ffe6                                                                                                               
000d22   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000d24   ffd9                                                                                                               
000d26   0e02     MOVLW     0x2                                                                                             
000d28   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	static BOOL in_cr = FALSE;                                                      E:\iroFW\user\user.c
                                           	static byte last_fifo_size;                                                     E:\iroFW\user\user.c
                                               unsigned char tst_char;                                                      E:\iroFW\user\user.c
000d2a   0e01     MOVLW     0x1            	BOOL	got_full_packet = FALSE;                                                   E:\iroFW\user\user.c
000d2c   6adb     CLRF      0xdb,0x0                                                                                        
000d2e   0101     MOVLB     0x1            	cdc_rx_len = 0;                                                                 E:\iroFW\user\user.c
000d30   6bb4     CLRF      0xb4,0x1                                                                                        
                                                                                                                            E:\iroFW\user\user.c
000d32   ec26     CALL      0x264c,0x0     	BlinkUSBStatus();                                                               E:\iroFW\user\user.c
000d34   f013                                                                                                               
000d36   ec99     CALL      0x2732,0x0     	HallEffSensors();	// Function by Luke Orland in user.c                          E:\iroFW\user\user.c
000d38   f013                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                               // User Application USB tasks                                                E:\iroFW\user\user.c
000d3a   0e06     MOVLW     0x6                if((usb_device_state < CONFIGURED_STATE) || (UCONbits.SUSPND == 1))          E:\iroFW\user\user.c
000d3c   0101     MOVLB     0x1                                                                                             
000d3e   5de9     SUBWF     0xe9,0x0,0x1                                                                                    
000d40   e303     BNC       0xd48                                                                                           
000d42   506d     MOVF      0x6d,0x0,0x0                                                                                    
000d44   0b02     ANDLW     0x2                                                                                             
000d46   e001     BZ        0xd4a                                                                                           
                                           	{	                                                                              E:\iroFW\user\user.c
000d48   d105     BRA       0xf54          		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Check for any new I packets (from T command) ready to go out                 E:\iroFW\user\user.c
000d4a   5006     MOVF      0x6,0x0,0x0    	while (ISR_D_FIFO_length > 0)                                                   E:\iroFW\user\user.c
000d4c   0800     SUBLW     0x0                                                                                             
000d4e   e209     BC        0xd62                                                                                           
000d60   d7f4     BRA       0xd4a                                                                                           
                                           	{                                                                               E:\iroFW\user\user.c
                                           		// Spit out an I packet first                                                  E:\iroFW\user\user.c
000d50   ec18     CALL      0x1630,0x0     		parse_I_packet ();                                                             E:\iroFW\user\user.c
000d52   f00b                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
                                           		// Then upate our I packet fifo stuff                                          E:\iroFW\user\user.c
000d54   2a05     INCF      0x5,0x1,0x0    		ISR_D_FIFO_out++;                                                              E:\iroFW\user\user.c
000d56   0e03     MOVLW     0x3            		if (ISR_D_FIFO_out == kISR_FIFO_D_DEPTH)                                       E:\iroFW\user\user.c
000d58   5c05     SUBWF     0x5,0x0,0x0                                                                                     
000d5a   e101     BNZ       0xd5e                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
000d5c   6a05     CLRF      0x5,0x0        			ISR_D_FIFO_out = 0;                                                           E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
000d5e   0606     DECF      0x6,0x1,0x0    		ISR_D_FIFO_length--;                                                           E:\iroFW\user\user.c
                                           	}			                                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Check for a new A packet (from T command) ready to go out                    E:\iroFW\user\user.c
000d62   500b     MOVF      0xb,0x0,0x0    	while (ISR_A_FIFO_length > 0)                                                   E:\iroFW\user\user.c
000d64   0800     SUBLW     0x0                                                                                             
000d66   e209     BC        0xd7a                                                                                           
000d78   d7f4     BRA       0xd62                                                                                           
                                           	{                                                                               E:\iroFW\user\user.c
                                           		// Spit out an A packet first                                                  E:\iroFW\user\user.c
000d68   ec44     CALL      0x1688,0x0     		parse_A_packet ();                                                             E:\iroFW\user\user.c
000d6a   f00b                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
                                           		// Then update our A packet fifo stuff                                         E:\iroFW\user\user.c
000d6c   2a0a     INCF      0xa,0x1,0x0    		ISR_A_FIFO_out++;                                                              E:\iroFW\user\user.c
000d6e   0e03     MOVLW     0x3            		if (ISR_A_FIFO_out == kISR_FIFO_A_DEPTH)                                       E:\iroFW\user\user.c
000d70   5c0a     SUBWF     0xa,0x0,0x0                                                                                     
000d72   e101     BNZ       0xd76                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
000d74   6a0a     CLRF      0xa,0x0        			ISR_A_FIFO_out = 0;                                                           E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
000d76   060b     DECF      0xb,0x1,0x0    		ISR_A_FIFO_length--;                                                           E:\iroFW\user\user.c
                                           	}			                                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Pull in some new data if there is new data to pull in                        E:\iroFW\user\user.c
000d7a   0104     MOVLB     0x4            	if(!mCDCUsartRxIsBusy())                                                        E:\iroFW\user\user.c
000d7c   bf18     BTFSC     0x18,0x7,0x1                                                                                    
000d7e   d065     BRA       0xe4a                                                                                           
                                           	{                                                                               E:\iroFW\user\user.c
                                           		// Copy data from dual-ram buffer to user's buffer                             E:\iroFW\user\user.c
000d80   0101     MOVLB     0x1            		for(cdc_rx_len = 0; cdc_rx_len < CDC_BULK_BD_OUT.Cnt; cdc_rx_len++)            E:\iroFW\user\user.c
000d82   6bb4     CLRF      0xb4,0x1                                                                                        
000d84   0104     MOVLB     0x4                                                                                             
000d86   5119     MOVF      0x19,0x0,0x1                                                                                    
000d88   0101     MOVLB     0x1                                                                                             
000d8a   5db4     SUBWF     0xb4,0x0,0x1                                                                                    
000d8c   e253     BC        0xe34                                                                                           
000e2e   0101     MOVLB     0x1                                                                                             
000e30   2bb4     INCF      0xb4,0x1,0x1                                                                                    
000e32   d7a8     BRA       0xd84                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Check to see if we are in a CR/LF situation                                E:\iroFW\user\user.c
000d8e   0101     MOVLB     0x1            			tst_char = cdc_data_rx[cdc_rx_len];                                           E:\iroFW\user\user.c
000d90   51b4     MOVF      0xb4,0x0,0x1                                                                                    
000d92   6aea     CLRF      0xea,0x0                                                                                        
000d94   0f08     ADDLW     0x8                                                                                             
000d96   6ee9     MOVWF     0xe9,0x0                                                                                        
000d98   0e05     MOVLW     0x5                                                                                             
000d9a   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000d9c   cfef     MOVFF     0xfef,0xfdf                                                                                     
000d9e   ffdf                                                                                                               
                                           			if (                                                                          E:\iroFW\user\user.c
000da0   0101     MOVLB     0x1            				!in_cr                                                                       E:\iroFW\user\user.c
000da2   51cd     MOVF      0xcd,0x0,0x1                                                                                    
                                           				&&                                                                           E:\iroFW\user\user.c
                                           				(                                                                            E:\iroFW\user\user.c
000da6   0e0d     MOVLW     0xd            					kCR == tst_char                                                             E:\iroFW\user\user.c
000da8   6e2a     MOVWF     0x2a,0x0                                                                                        
000daa   50df     MOVF      0xdf,0x0,0x0                                                                                    
000dac   5c2a     SUBWF     0x2a,0x0,0x0   					||                                                                          E:\iroFW\user\user.c
000db0   0e0a     MOVLW     0xa            					kLF == tst_char                                                             E:\iroFW\user\user.c
000db2   6e2b     MOVWF     0x2b,0x0                                                                                        
000db4   50df     MOVF      0xdf,0x0,0x0                                                                                    
000dae   e005     BZ        0xdba          				)                                                                            E:\iroFW\user\user.c
000db6   5c2b     SUBWF     0x2b,0x0,0x0                                                                                    
000db8   e112     BNZ       0xdde                                                                                           
000da4   e11c     BNZ       0xdde          			)                                                                             E:\iroFW\user\user.c
                                           			{                                                                             E:\iroFW\user\user.c
000dba   0101     MOVLB     0x1            				in_cr = TRUE;                                                                E:\iroFW\user\user.c
000dbc   0e01     MOVLW     0x1                                                                                             
000dbe   6fcd     MOVWF     0xcd,0x1                                                                                        
000dc0   0101     MOVLB     0x1            				g_RX_buf[g_RX_buf_in] = kCR;                                                 E:\iroFW\user\user.c
000dc2   51a0     MOVF      0xa0,0x0,0x1                                                                                    
000dc4   6aea     CLRF      0xea,0x0                                                                                        
000dc6   0f40     ADDLW     0x40                                                                                            
000dc8   6ee9     MOVWF     0xe9,0x0                                                                                        
000dca   0e02     MOVLW     0x2                                                                                             
000dcc   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000dce   0e0d     MOVLW     0xd                                                                                             
000dd0   6eef     MOVWF     0xef,0x0                                                                                        
000dd2   0101     MOVLB     0x1            				g_RX_buf_in++;                                                               E:\iroFW\user\user.c
000dd4   2ba0     INCF      0xa0,0x1,0x1                                                                                    
                                           			                                                                              E:\iroFW\user\user.c
                                           				// At this point, we know we have a full packet                              E:\iroFW\user\user.c
                                           				// of information from the PC to parse                                       E:\iroFW\user\user.c
000dd6   52de     MOVF      0xde,0x1,0x0   				got_full_packet = TRUE;                                                      E:\iroFW\user\user.c
000dd8   0e01     MOVLW     0x1                                                                                             
000dda   6edd     MOVWF     0xdd,0x0                                                                                        
                                           			}                                                                             E:\iroFW\user\user.c
000ddc   d015     BRA       0xe08          			else if (                                                                     E:\iroFW\user\user.c
000dde   0e0d     MOVLW     0xd            				tst_char != kCR                                                              E:\iroFW\user\user.c
000de0   5cdf     SUBWF     0xdf,0x0,0x0   				&&                                                                           E:\iroFW\user\user.c
000de4   0e0a     MOVLW     0xa            				tst_char != kLF                                                              E:\iroFW\user\user.c
000de2   e011     BZ        0xe06          			)                                                                             E:\iroFW\user\user.c
000de6   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
000de8   e00e     BZ        0xe06                                                                                           
                                           			{                                                                             E:\iroFW\user\user.c
                                           				// Only add a byte if it is not a CR or LF                                   E:\iroFW\user\user.c
000dea   0101     MOVLB     0x1            				g_RX_buf[g_RX_buf_in] = tst_char;                                            E:\iroFW\user\user.c
000dec   51a0     MOVF      0xa0,0x0,0x1                                                                                    
000dee   6aea     CLRF      0xea,0x0                                                                                        
000df0   0f40     ADDLW     0x40                                                                                            
000df2   6ee9     MOVWF     0xe9,0x0                                                                                        
000df4   0e02     MOVLW     0x2                                                                                             
000df6   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000df8   cfdf     MOVFF     0xfdf,0xfef                                                                                     
000dfa   ffef                                                                                                               
000dfc   0101     MOVLB     0x1            				in_cr = FALSE;                                                               E:\iroFW\user\user.c
000dfe   6bcd     CLRF      0xcd,0x1                                                                                        
000e00   0101     MOVLB     0x1            				g_RX_buf_in++;                                                               E:\iroFW\user\user.c
000e02   2ba0     INCF      0xa0,0x1,0x1                                                                                    
                                           			}                                                                             E:\iroFW\user\user.c
000e04   d001     BRA       0xe08          			else                                                                          E:\iroFW\user\user.c
                                           			{                                                                             E:\iroFW\user\user.c
000e06   d013     BRA       0xe2e          				continue;                                                                    E:\iroFW\user\user.c
                                           			}                                                                             E:\iroFW\user\user.c
                                           			// Check for buffer wraparound                                                E:\iroFW\user\user.c
000e08   0e40     MOVLW     0x40           			if (kRX_BUF_SIZE == g_RX_buf_in)                                              E:\iroFW\user\user.c
000e0a   0101     MOVLB     0x1                                                                                             
000e0c   5da0     SUBWF     0xa0,0x0,0x1                                                                                    
000e0e   e102     BNZ       0xe14                                                                                           
                                           			{                                                                             E:\iroFW\user\user.c
000e10   0101     MOVLB     0x1            				g_RX_buf_in = 0;                                                             E:\iroFW\user\user.c
000e12   6ba0     CLRF      0xa0,0x1                                                                                        
                                           			}                                                                             E:\iroFW\user\user.c
                                           			// If we hit the out pointer, then this is bad.                               E:\iroFW\user\user.c
000e14   0101     MOVLB     0x1            			if (g_RX_buf_in == g_RX_buf_out)                                              E:\iroFW\user\user.c
000e16   51a1     MOVF      0xa1,0x0,0x1                                                                                    
000e18   0101     MOVLB     0x1                                                                                             
000e1a   5da0     SUBWF     0xa0,0x0,0x1                                                                                    
000e1c   e102     BNZ       0xe22                                                                                           
                                           			{                                                                             E:\iroFW\user\user.c
000e1e   860d     BSF       0xd,0x3,0x0    				bitset (error_byte, kERROR_BYTE_RX_BUFFER_OVERRUN);                          E:\iroFW\user\user.c
000e20   d009     BRA       0xe34          				break;                                                                       E:\iroFW\user\user.c
                                           			}                                                                             E:\iroFW\user\user.c
                                           			// Now, if we've gotten a full command (user send <CR>) then                  E:\iroFW\user\user.c
                                           			// go call the code that deals with that command, and then                    E:\iroFW\user\user.c
                                           			// keep parsing. (This allows multiple small commands per packet)             E:\iroFW\user\user.c
000e22   0e01     MOVLW     0x1            			if (got_full_packet)                                                          E:\iroFW\user\user.c
000e24   50db     MOVF      0xdb,0x0,0x0                                                                                    
000e26   e003     BZ        0xe2e                                                                                           
                                           			{                                                                             E:\iroFW\user\user.c
000e28   d915     RCALL     0x1054         				parse_packet ();                                                             E:\iroFW\user\user.c
000e2a   0e01     MOVLW     0x1            				got_full_packet = FALSE;                                                     E:\iroFW\user\user.c
000e2c   6adb     CLRF      0xdb,0x0                                                                                        
                                           			}                                                                             E:\iroFW\user\user.c
                                           		}		                                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           		// Prepare dual-ram buffer for next OUT transaction                            E:\iroFW\user\user.c
000e34   0104     MOVLB     0x4            		CDC_BULK_BD_OUT.Cnt = sizeof(cdc_data_rx);                                     E:\iroFW\user\user.c
000e36   0e40     MOVLW     0x40                                                                                            
000e38   6f19     MOVWF     0x19,0x1                                                                                        
000e3a   0e40     MOVLW     0x40           		mUSBBufferReady(CDC_BULK_BD_OUT);                                              E:\iroFW\user\user.c
000e3c   0104     MOVLB     0x4                                                                                             
000e3e   1718     ANDWF     0x18,0x1,0x1                                                                                    
000e40   0104     MOVLB     0x4                                                                                             
000e42   7d18     BTG       0x18,0x6,0x1                                                                                    
000e44   0e88     MOVLW     0x88                                                                                            
000e46   0104     MOVLB     0x4                                                                                             
000e48   1318     IORWF     0x18,0x1,0x1                                                                                    
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Check for any errors logged in error_byte that need to be sent out           E:\iroFW\user\user.c
000e4a   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iroFW\user\user.c
000e4c   e101     BNZ       0xe50                                                                                           
000e4e   d081     BRA       0xf52                                                                                           
                                           	{                                                                               E:\iroFW\user\user.c
000e50   a00d     BTFSS     0xd,0x0,0x0    		if (bittst (error_byte, 0))                                                    E:\iroFW\user\user.c
000e52   d010     BRA       0xe74                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Unused as of yet                                                           E:\iroFW\user\user.c
000e54   0eb7     MOVLW     0xb7           			printf ((rom char *)"!0 \r\n");                                               E:\iroFW\user\user.c
000e56   6e2a     MOVWF     0x2a,0x0                                                                                        
000e58   0e41     MOVLW     0x41                                                                                            
000e5a   6e2b     MOVWF     0x2b,0x0                                                                                        
000e5c   6a2c     CLRF      0x2c,0x0                                                                                        
000e5e   c02a     MOVFF     0x2a,0xfe6                                                                                      
000e60   ffe6                                                                                                               
000e62   c02b     MOVFF     0x2b,0xfe6                                                                                      
000e64   ffe6                                                                                                               
000e66   c02c     MOVFF     0x2c,0xfe6                                                                                      
000e68   ffe6                                                                                                               
000e6a   ec0b     CALL      0x4416,0x0                                                                                      
000e6c   f022                                                                                                               
000e6e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e70   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e72   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
000e74   a20d     BTFSS     0xd,0x1,0x0    		if (bittst (error_byte, 1))                                                    E:\iroFW\user\user.c
000e76   d010     BRA       0xe98                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Unused as of yet                                                           E:\iroFW\user\user.c
000e78   0eb1     MOVLW     0xb1           			printf ((rom char *)"!1 \r\n");                                               E:\iroFW\user\user.c
000e7a   6e2a     MOVWF     0x2a,0x0                                                                                        
000e7c   0e41     MOVLW     0x41                                                                                            
000e7e   6e2b     MOVWF     0x2b,0x0                                                                                        
000e80   6a2c     CLRF      0x2c,0x0                                                                                        
000e82   c02a     MOVFF     0x2a,0xfe6                                                                                      
000e84   ffe6                                                                                                               
000e86   c02b     MOVFF     0x2b,0xfe6                                                                                      
000e88   ffe6                                                                                                               
000e8a   c02c     MOVFF     0x2c,0xfe6                                                                                      
000e8c   ffe6                                                                                                               
000e8e   ec0b     CALL      0x4416,0x0                                                                                      
000e90   f022                                                                                                               
000e92   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e94   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e96   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
000e98   a40d     BTFSS     0xd,0x2,0x0    		if (bittst (error_byte, kERROR_BYTE_TX_BUF_OVERRUN))                           E:\iroFW\user\user.c
000e9a   d010     BRA       0xebc                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
000e9c   0e95     MOVLW     0x95           			printf ((rom char *)"!2 Err: TX Buffer overrun\r\n");                         E:\iroFW\user\user.c
000e9e   6e2a     MOVWF     0x2a,0x0                                                                                        
000ea0   0e41     MOVLW     0x41                                                                                            
000ea2   6e2b     MOVWF     0x2b,0x0                                                                                        
000ea4   6a2c     CLRF      0x2c,0x0                                                                                        
000ea6   c02a     MOVFF     0x2a,0xfe6                                                                                      
000ea8   ffe6                                                                                                               
000eaa   c02b     MOVFF     0x2b,0xfe6                                                                                      
000eac   ffe6                                                                                                               
000eae   c02c     MOVFF     0x2c,0xfe6                                                                                      
000eb0   ffe6                                                                                                               
000eb2   ec0b     CALL      0x4416,0x0                                                                                      
000eb4   f022                                                                                                               
000eb6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000eb8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000eba   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
000ebc   a60d     BTFSS     0xd,0x3,0x0    		if (bittst (error_byte, kERROR_BYTE_RX_BUFFER_OVERRUN))                        E:\iroFW\user\user.c
000ebe   d010     BRA       0xee0                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
000ec0   0e79     MOVLW     0x79           			printf ((rom char *)"!3 Err: RX Buffer overrun\r\n");                         E:\iroFW\user\user.c
000ec2   6e2a     MOVWF     0x2a,0x0                                                                                        
000ec4   0e41     MOVLW     0x41                                                                                            
000ec6   6e2b     MOVWF     0x2b,0x0                                                                                        
000ec8   6a2c     CLRF      0x2c,0x0                                                                                        
000eca   c02a     MOVFF     0x2a,0xfe6                                                                                      
000ecc   ffe6                                                                                                               
000ece   c02b     MOVFF     0x2b,0xfe6                                                                                      
000ed0   ffe6                                                                                                               
000ed2   c02c     MOVFF     0x2c,0xfe6                                                                                      
000ed4   ffe6                                                                                                               
000ed6   ec0b     CALL      0x4416,0x0                                                                                      
000ed8   f022                                                                                                               
000eda   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000edc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000ede   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
000ee0   a80d     BTFSS     0xd,0x4,0x0    		if (bittst (error_byte, kERROR_BYTE_MISSING_PARAMETER))                        E:\iroFW\user\user.c
000ee2   d010     BRA       0xf04                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
000ee4   0e5a     MOVLW     0x5a           			printf ((rom char *)"!4 Err: Missing parameter(s)\r\n");                      E:\iroFW\user\user.c
000ee6   6e2a     MOVWF     0x2a,0x0                                                                                        
000ee8   0e41     MOVLW     0x41                                                                                            
000eea   6e2b     MOVWF     0x2b,0x0                                                                                        
000eec   6a2c     CLRF      0x2c,0x0                                                                                        
000eee   c02a     MOVFF     0x2a,0xfe6                                                                                      
000ef0   ffe6                                                                                                               
000ef2   c02b     MOVFF     0x2b,0xfe6                                                                                      
000ef4   ffe6                                                                                                               
000ef6   c02c     MOVFF     0x2c,0xfe6                                                                                      
000ef8   ffe6                                                                                                               
000efa   ec0b     CALL      0x4416,0x0                                                                                      
000efc   f022                                                                                                               
000efe   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f00   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f02   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
000f04   aa0d     BTFSS     0xd,0x5,0x0    		if (bittst (error_byte, kERROR_BYTE_PRINTED_ERROR))                            E:\iroFW\user\user.c
000f06   d000     BRA       0xf08                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// We don't need to do anything since something has already been printed out  E:\iroFW\user\user.c
                                           			//printf ((rom char *)"!5\r\n");                                              E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
000f08   ac0d     BTFSS     0xd,0x6,0x0    		if (bittst (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT))                  E:\iroFW\user\user.c
000f0a   d010     BRA       0xf2c                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
000f0c   0e39     MOVLW     0x39           			printf ((rom char *)"!6 Err: Invalid paramter value\r\n");                    E:\iroFW\user\user.c
000f0e   6e2a     MOVWF     0x2a,0x0                                                                                        
000f10   0e41     MOVLW     0x41                                                                                            
000f12   6e2b     MOVWF     0x2b,0x0                                                                                        
000f14   6a2c     CLRF      0x2c,0x0                                                                                        
000f16   c02a     MOVFF     0x2a,0xfe6                                                                                      
000f18   ffe6                                                                                                               
000f1a   c02b     MOVFF     0x2b,0xfe6                                                                                      
000f1c   ffe6                                                                                                               
000f1e   c02c     MOVFF     0x2c,0xfe6                                                                                      
000f20   ffe6                                                                                                               
000f22   ec0b     CALL      0x4416,0x0                                                                                      
000f24   f022                                                                                                               
000f26   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f28   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f2a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
000f2c   ae0d     BTFSS     0xd,0x7,0x0    		if (bittst (error_byte, kERROR_BYTE_EXTRA_CHARACTERS))                         E:\iroFW\user\user.c
000f2e   d010     BRA       0xf50                                                                                           
                                           		{                                                                              E:\iroFW\user\user.c
000f30   0e20     MOVLW     0x20           			printf ((rom char *)"!7 Err: Extra parmater\r\n");                            E:\iroFW\user\user.c
000f32   6e2a     MOVWF     0x2a,0x0                                                                                        
000f34   0e41     MOVLW     0x41                                                                                            
000f36   6e2b     MOVWF     0x2b,0x0                                                                                        
000f38   6a2c     CLRF      0x2c,0x0                                                                                        
000f3a   c02a     MOVFF     0x2a,0xfe6                                                                                      
000f3c   ffe6                                                                                                               
000f3e   c02b     MOVFF     0x2b,0xfe6                                                                                      
000f40   ffe6                                                                                                               
000f42   c02c     MOVFF     0x2c,0xfe6                                                                                      
000f44   ffe6                                                                                                               
000f46   ec0b     CALL      0x4416,0x0                                                                                      
000f48   f022                                                                                                               
000f4a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f4c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f4e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
000f50   6a0d     CLRF      0xd,0x0        		error_byte = 0;                                                                E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Go send any data that needs sending to PC                                    E:\iroFW\user\user.c
000f52   d835     RCALL     0xfbe          	check_and_send_TX_data ();                                                      E:\iroFW\user\user.c
000f54   0e02     MOVLW     0x2            }                                                                                E:\iroFW\user\user.c
000f56   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
000f58   e202     BC        0xf5e                                                                                           
000f5a   6ae1     CLRF      0xe1,0x0                                                                                        
000f5c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f5e   6ee1     MOVWF     0xe1,0x0                                                                                        
000f60   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f62   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000f64   ffd9                                                                                                               
000f66   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // This is our replacement for the standard putc routine                         E:\iroFW\user\user.c
                                           // This enables printf() and all related functions to print to                   E:\iroFW\user\user.c
                                           // the UBS output (i.e. to the PC) buffer                                        E:\iroFW\user\user.c
000f68   cfd9     MOVFF     0xfd9,0xfe6    int _user_putc (char c)                                                          E:\iroFW\user\user.c
000f6a   ffe6                                                                                                               
000f6c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000f6e   ffd9                                                                                                               
                                           {                                                                                E:\iroFW\user\user.c
                                           	// Copy the character into the output buffer                                    E:\iroFW\user\user.c
000f70   0101     MOVLB     0x1            	g_TX_buf[g_TX_buf_in] = c;                                                      E:\iroFW\user\user.c
000f72   519e     MOVF      0x9e,0x0,0x1                                                                                    
000f74   6aea     CLRF      0xea,0x0                                                                                        
000f76   0f00     ADDLW     0x0                                                                                             
000f78   6ee9     MOVWF     0xe9,0x0                                                                                        
000f7a   0e02     MOVLW     0x2                                                                                             
000f7c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000f7e   0efe     MOVLW     0xfe                                                                                            
000f80   cfdb     MOVFF     0xfdb,0xfef                                                                                     
000f82   ffef                                                                                                               
000f84   0101     MOVLB     0x1            	g_TX_buf_in++;                                                                  E:\iroFW\user\user.c
000f86   2b9e     INCF      0x9e,0x1,0x1                                                                                    
                                                                                                                            E:\iroFW\user\user.c
                                           	// Check for wrap around                                                        E:\iroFW\user\user.c
000f88   0e40     MOVLW     0x40           	if (kTX_BUF_SIZE == g_TX_buf_in)                                                E:\iroFW\user\user.c
000f8a   0101     MOVLB     0x1                                                                                             
000f8c   5d9e     SUBWF     0x9e,0x0,0x1                                                                                    
000f8e   e102     BNZ       0xf94                                                                                           
                                           	{                                                                               E:\iroFW\user\user.c
000f90   0101     MOVLB     0x1            		g_TX_buf_in = 0;                                                               E:\iroFW\user\user.c
000f92   6b9e     CLRF      0x9e,0x1                                                                                        
                                           	}                                                                               E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
                                           	// Also check to see if we bumpted up against our output pointer                E:\iroFW\user\user.c
000f94   0101     MOVLB     0x1            	if (g_TX_buf_in == g_TX_buf_out)                                                E:\iroFW\user\user.c
000f96   519f     MOVF      0x9f,0x0,0x1                                                                                    
000f98   0101     MOVLB     0x1                                                                                             
000f9a   5d9e     SUBWF     0x9e,0x0,0x1                                                                                    
000f9c   e101     BNZ       0xfa0                                                                                           
                                           	{                                                                               E:\iroFW\user\user.c
000f9e   840d     BSF       0xd,0x2,0x0    		bitset (error_byte, kERROR_BYTE_TX_BUF_OVERRUN);                               E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
000fa0   0efe     MOVLW     0xfe           	return (c);                                                                     E:\iroFW\user\user.c
000fa2   cfdb     MOVFF     0xfdb,0x2a                                                                                      
000fa4   f02a                                                                                                               
000fa6   6a2b     CLRF      0x2b,0x0                                                                                        
000fa8   be2a     BTFSC     0x2a,0x7,0x0                                                                                    
000faa   682b     SETF      0x2b,0x0                                                                                        
000fac   c02a     MOVFF     0x2a,0xff3                                                                                      
000fae   fff3                                                                                                               
000fb0   c02b     MOVFF     0x2b,0xff4                                                                                      
000fb2   fff4                                                                                                               
000fb4   d000     BRA       0xfb6                                                                                           
000fb6   52e5     MOVF      0xe5,0x1,0x0   }                                                                                E:\iroFW\user\user.c
000fb8   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000fba   ffd9                                                                                                               
000fbc   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // In this function, we check to see it is OK to transmit. If so                 E:\iroFW\user\user.c
                                           // we see if there is any data to transmit to PC. If so, we schedule             E:\iroFW\user\user.c
                                           // it for sending.                                                               E:\iroFW\user\user.c
000fbe   cfd9     MOVFF     0xfd9,0xfe6    void check_and_send_TX_data (void)                                               E:\iroFW\user\user.c
000fc0   ffe6                                                                                                               
000fc2   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000fc4   ffd9                                                                                                               
000fc6   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	char temp;                                                                      E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Only send if we're not already sending something                             E:\iroFW\user\user.c
000fc8   0101     MOVLB     0x1            	if (mUSBUSARTIsTxTrfReady ())                                                   E:\iroFW\user\user.c
000fca   51b5     MOVF      0xb5,0x0,0x1                                                                                    
000fcc   e13e     BNZ       0x104a                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
                                           		// And only send if there's something there to send                            E:\iroFW\user\user.c
000fce   0101     MOVLB     0x1            		if (g_TX_buf_out != g_TX_buf_in)                                               E:\iroFW\user\user.c
000fd0   519e     MOVF      0x9e,0x0,0x1                                                                                    
000fd2   0101     MOVLB     0x1                                                                                             
000fd4   5d9f     SUBWF     0x9f,0x0,0x1                                                                                    
000fd6   e039     BZ        0x104a                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Now decide if we need to break it up into two parts or not                 E:\iroFW\user\user.c
000fd8   0101     MOVLB     0x1            			if (g_TX_buf_in > g_TX_buf_out)                                               E:\iroFW\user\user.c
000fda   519f     MOVF      0x9f,0x0,0x1                                                                                    
000fdc   0101     MOVLB     0x1                                                                                             
000fde   80d8     BSF       0xd8,0x0,0x0                                                                                    
000fe0   559e     SUBFWB    0x9e,0x0,0x1                                                                                    
000fe2   e21a     BC        0x1018                                                                                          
                                           			{                                                                             E:\iroFW\user\user.c
                                           				// Since IN is beyond OUT, only need one chunk                               E:\iroFW\user\user.c
000fe4   0101     MOVLB     0x1            				temp = g_TX_buf_in - g_TX_buf_out;                                           E:\iroFW\user\user.c
000fe6   519f     MOVF      0x9f,0x0,0x1                                                                                    
000fe8   0101     MOVLB     0x1                                                                                             
000fea   5d9e     SUBWF     0x9e,0x0,0x1                                                                                    
000fec   6edf     MOVWF     0xdf,0x0                                                                                        
000fee   0101     MOVLB     0x1            				mUSBUSARTTxRam (&g_TX_buf[g_TX_buf_out], temp);                              E:\iroFW\user\user.c
000ff0   519f     MOVF      0x9f,0x0,0x1                                                                                    
000ff2   0101     MOVLB     0x1                                                                                             
000ff4   6fb6     MOVWF     0xb6,0x1                                                                                        
000ff6   6bb7     CLRF      0xb7,0x1                                                                                        
000ff8   0e00     MOVLW     0x0                                                                                             
000ffa   0101     MOVLB     0x1                                                                                             
000ffc   27b6     ADDWF     0xb6,0x1,0x1                                                                                    
000ffe   0e02     MOVLW     0x2                                                                                             
001000   0101     MOVLB     0x1                                                                                             
001002   23b7     ADDWFC    0xb7,0x1,0x1                                                                                    
001004   cfdf     MOVFF     0xfdf,0x1ba                                                                                     
001006   f1ba                                                                                                               
001008   0101     MOVLB     0x1                                                                                             
00100a   6bbb     CLRF      0xbb,0x1                                                                                        
00100c   0101     MOVLB     0x1                                                                                             
00100e   0e01     MOVLW     0x1                                                                                             
001010   6fb5     MOVWF     0xb5,0x1                                                                                        
                                           				// Now that we've scheduled the data for sending,                            E:\iroFW\user\user.c
                                           				// update the pointer                                                        E:\iroFW\user\user.c
001012   c19e     MOVFF     0x19e,0x19f    				g_TX_buf_out = g_TX_buf_in;                                                  E:\iroFW\user\user.c
001014   f19f                                                                                                               
                                           			}                                                                             E:\iroFW\user\user.c
001016   d019     BRA       0x104a         			else                                                                          E:\iroFW\user\user.c
                                           			{                                                                             E:\iroFW\user\user.c
                                           				// Since IN is before OUT, we need to send from OUT to the end               E:\iroFW\user\user.c
                                           				// of the buffer, then the next time around we'll catch                      E:\iroFW\user\user.c
                                           				// from the beginning to IN.                                                 E:\iroFW\user\user.c
001018   0e40     MOVLW     0x40           				temp = kTX_BUF_SIZE - g_TX_buf_out;                                          E:\iroFW\user\user.c
00101a   0101     MOVLB     0x1                                                                                             
00101c   80d8     BSF       0xd8,0x0,0x0                                                                                    
00101e   559f     SUBFWB    0x9f,0x0,0x1                                                                                    
001020   6edf     MOVWF     0xdf,0x0                                                                                        
001022   0101     MOVLB     0x1            				mUSBUSARTTxRam (&g_TX_buf[g_TX_buf_out], temp);                              E:\iroFW\user\user.c
001024   519f     MOVF      0x9f,0x0,0x1                                                                                    
001026   0101     MOVLB     0x1                                                                                             
001028   6fb6     MOVWF     0xb6,0x1                                                                                        
00102a   6bb7     CLRF      0xb7,0x1                                                                                        
00102c   0e00     MOVLW     0x0                                                                                             
00102e   0101     MOVLB     0x1                                                                                             
001030   27b6     ADDWF     0xb6,0x1,0x1                                                                                    
001032   0e02     MOVLW     0x2                                                                                             
001034   0101     MOVLB     0x1                                                                                             
001036   23b7     ADDWFC    0xb7,0x1,0x1                                                                                    
001038   cfdf     MOVFF     0xfdf,0x1ba                                                                                     
00103a   f1ba                                                                                                               
00103c   0101     MOVLB     0x1                                                                                             
00103e   6bbb     CLRF      0xbb,0x1                                                                                        
001040   0101     MOVLB     0x1                                                                                             
001042   0e01     MOVLW     0x1                                                                                             
001044   6fb5     MOVWF     0xb5,0x1                                                                                        
                                           				// Now that we've scheduled the data for sending,                            E:\iroFW\user\user.c
                                           				// update the pointer                                                        E:\iroFW\user\user.c
001046   0101     MOVLB     0x1            				g_TX_buf_out = 0;                                                            E:\iroFW\user\user.c
001048   6b9f     CLRF      0x9f,0x1                                                                                        
                                           			}                                                                             E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
00104a   52e5     MOVF      0xe5,0x1,0x0   }                                                                                E:\iroFW\user\user.c
00104c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00104e   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001050   ffd9                                                                                                               
001052   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // Look at the new packet, see what command it is, and                           E:\iroFW\user\user.c
                                           // route it appropriately. We come in knowing that                               E:\iroFW\user\user.c
                                           // our packet is in g_RX_buf[], and that the beginning                           E:\iroFW\user\user.c
                                           // of the packet is at g_RX_buf_out, and the end (CR) is at                      E:\iroFW\user\user.c
                                           // g_RX_buf_in. Note that because of buffer wrapping,                            E:\iroFW\user\user.c
                                           // g_RX_buf_in may be less than g_RX_buf_out.                                    E:\iroFW\user\user.c
001054   cfd9     MOVFF     0xfd9,0xfe6    void parse_packet(void)                                                          E:\iroFW\user\user.c
001056   ffe6                                                                                                               
001058   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00105a   ffd9                                                                                                               
00105c   0e04     MOVLW     0x4                                                                                             
00105e   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
001060   6ade     CLRF      0xde,0x0       	unsigned int	command = 0;                                                       E:\iroFW\user\user.c
001062   6add     CLRF      0xdd,0x0                                                                                        
001064   0e02     MOVLW     0x2            	unsigned char	cmd1 = 0;                                                         E:\iroFW\user\user.c
001066   6adb     CLRF      0xdb,0x0                                                                                        
001068   0e03     MOVLW     0x3            	unsigned char	cmd2 = 0;                                                         E:\iroFW\user\user.c
00106a   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           	// Always grab the first character (which is the first byte of the command)     E:\iroFW\user\user.c
00106c   0101     MOVLB     0x1            	cmd1 = toupper (g_RX_buf[g_RX_buf_out]);                                        E:\iroFW\user\user.c
00106e   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001070   6aea     CLRF      0xea,0x0                                                                                        
001072   0f40     ADDLW     0x40                                                                                            
001074   6ee9     MOVWF     0xe9,0x0                                                                                        
001076   0e02     MOVLW     0x2                                                                                             
001078   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00107a   50ef     MOVF      0xef,0x0,0x0                                                                                    
00107c   6ee6     MOVWF     0xe6,0x0                                                                                        
00107e   6ae6     CLRF      0xe6,0x0                                                                                        
001080   ec04     CALL      0x4608,0x0                                                                                      
001082   f023                                                                                                               
001084   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001086   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001088   0e02     MOVLW     0x2                                                                                             
00108a   cff3     MOVFF     0xff3,0xfdb                                                                                     
00108c   ffdb                                                                                                               
00108e   0101     MOVLB     0x1            	advance_RX_buf_out();                                                           E:\iroFW\user\user.c
001090   2ba1     INCF      0xa1,0x1,0x1                                                                                    
001092   0e40     MOVLW     0x40                                                                                            
001094   0101     MOVLB     0x1                                                                                             
001096   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001098   e102     BNZ       0x109e                                                                                          
00109a   0101     MOVLB     0x1                                                                                             
00109c   6ba1     CLRF      0xa1,0x1                                                                                        
00109e   0e02     MOVLW     0x2            	command = cmd1;                                                                 E:\iroFW\user\user.c
0010a0   50db     MOVF      0xdb,0x0,0x0                                                                                    
0010a2   6ede     MOVWF     0xde,0x0                                                                                        
0010a4   6add     CLRF      0xdd,0x0                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           	// Only grab second one if it is not a comma                                    E:\iroFW\user\user.c
0010a6   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',' && g_RX_buf[g_RX_buf_out] != kCR)             E:\iroFW\user\user.c
0010a8   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0010aa   6aea     CLRF      0xea,0x0                                                                                        
0010ac   0f40     ADDLW     0x40                                                                                            
0010ae   6ee9     MOVWF     0xe9,0x0                                                                                        
0010b0   0e02     MOVLW     0x2                                                                                             
0010b2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0010b4   50ef     MOVF      0xef,0x0,0x0                                                                                    
0010b6   082c     SUBLW     0x2c                                                                                            
0010b8   e035     BZ        0x1124                                                                                          
0010ba   0101     MOVLB     0x1                                                                                             
0010bc   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0010be   6aea     CLRF      0xea,0x0                                                                                        
0010c0   0f40     ADDLW     0x40                                                                                            
0010c2   6ee9     MOVWF     0xe9,0x0                                                                                        
0010c4   0e02     MOVLW     0x2                                                                                             
0010c6   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0010c8   50ef     MOVF      0xef,0x0,0x0                                                                                    
0010ca   080d     SUBLW     0xd                                                                                             
0010cc   e02b     BZ        0x1124                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
0010ce   0101     MOVLB     0x1            		cmd2 = toupper (g_RX_buf[g_RX_buf_out]);                                       E:\iroFW\user\user.c
0010d0   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0010d2   6aea     CLRF      0xea,0x0                                                                                        
0010d4   0f40     ADDLW     0x40                                                                                            
0010d6   6ee9     MOVWF     0xe9,0x0                                                                                        
0010d8   0e02     MOVLW     0x2                                                                                             
0010da   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0010dc   50ef     MOVF      0xef,0x0,0x0                                                                                    
0010de   6ee6     MOVWF     0xe6,0x0                                                                                        
0010e0   6ae6     CLRF      0xe6,0x0                                                                                        
0010e2   ec04     CALL      0x4608,0x0                                                                                      
0010e4   f023                                                                                                               
0010e6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0010e8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0010ea   0e03     MOVLW     0x3                                                                                             
0010ec   cff3     MOVFF     0xff3,0xfdb                                                                                     
0010ee   ffdb                                                                                                               
0010f0   0101     MOVLB     0x1            		advance_RX_buf_out();                                                          E:\iroFW\user\user.c
0010f2   2ba1     INCF      0xa1,0x1,0x1                                                                                    
0010f4   0e40     MOVLW     0x40                                                                                            
0010f6   0101     MOVLB     0x1                                                                                             
0010f8   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
0010fa   e102     BNZ       0x1100                                                                                          
0010fc   0101     MOVLB     0x1                                                                                             
0010fe   6ba1     CLRF      0xa1,0x1                                                                                        
001100   0e02     MOVLW     0x2            		command = ((unsigned int)(cmd1) << 8) + cmd2;                                  E:\iroFW\user\user.c
001102   cfdb     MOVFF     0xfdb,0x2c                                                                                      
001104   f02c                                                                                                               
001106   c02c     MOVFF     0x2c,0x2d                                                                                       
001108   f02d                                                                                                               
00110a   6a2c     CLRF      0x2c,0x0                                                                                        
00110c   0e03     MOVLW     0x3                                                                                             
00110e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001110   0100     MOVLB     0x0                                                                                             
001112   242c     ADDWF     0x2c,0x0,0x0                                                                                    
001114   6e2a     MOVWF     0x2a,0x0                                                                                        
001116   0e00     MOVLW     0x0                                                                                             
001118   202d     ADDWFC    0x2d,0x0,0x0                                                                                    
00111a   6e2b     MOVWF     0x2b,0x0                                                                                        
00111c   c02a     MOVFF     0x2a,0xfde                                                                                      
00111e   ffde                                                                                                               
001120   c02b     MOVFF     0x2b,0xfdd                                                                                      
001122   ffdd                                                                                                               
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Now 'command' is equal to one or two bytes of our command                    E:\iroFW\user\user.c
001124   0e00     MOVLW     0x0            	switch (command)                                                                E:\iroFW\user\user.c
001126   cfdb     MOVFF     0xfdb,0x1e                                                                                      
001128   f01e                                                                                                               
00112a   0e01     MOVLW     0x1                                                                                             
00112c   cfdb     MOVFF     0xfdb,0x1f                                                                                      
00112e   f01f                                                                                                               
001130   0e54     MOVLW     0x54                                                                                            
001132   181e     XORWF     0x1e,0x0,0x0                                                                                    
001134   e102     BNZ       0x113a                                                                                          
001136   0e53     MOVLW     0x53                                                                                            
001138   181f     XORWF     0x1f,0x0,0x0                                                                                    
00113a   e101     BNZ       0x113e                                                                                          
00113c   d0eb     BRA       0x1314                                                                                          
00113e   0e4f     MOVLW     0x4f                                                                                            
001140   181e     XORWF     0x1e,0x0,0x0                                                                                    
001142   e102     BNZ       0x1148                                                                                          
001144   0e47     MOVLW     0x47                                                                                            
001146   181f     XORWF     0x1f,0x0,0x0                                                                                    
001148   e101     BNZ       0x114c                                                                                          
00114a   d0e1     BRA       0x130e                                                                                          
00114c   0e49     MOVLW     0x49                                                                                            
00114e   181e     XORWF     0x1e,0x0,0x0                                                                                    
001150   e102     BNZ       0x1156                                                                                          
001152   0e43     MOVLW     0x43                                                                                            
001154   181f     XORWF     0x1f,0x0,0x0                                                                                    
001156   e101     BNZ       0x115a                                                                                          
001158   d0d7     BRA       0x1308                                                                                          
00115a   0e49     MOVLW     0x49                                                                                            
00115c   181e     XORWF     0x1e,0x0,0x0                                                                                    
00115e   e102     BNZ       0x1164                                                                                          
001160   0e52     MOVLW     0x52                                                                                            
001162   181f     XORWF     0x1f,0x0,0x0                                                                                    
001164   e101     BNZ       0x1168                                                                                          
001166   d0cd     BRA       0x1302                                                                                          
001168   0e49     MOVLW     0x49                                                                                            
00116a   181e     XORWF     0x1e,0x0,0x0                                                                                    
00116c   e102     BNZ       0x1172                                                                                          
00116e   0e53     MOVLW     0x53                                                                                            
001170   181f     XORWF     0x1f,0x0,0x0                                                                                    
001172   e101     BNZ       0x1176                                                                                          
001174   d0c3     BRA       0x12fc                                                                                          
001176   0e53     MOVLW     0x53                                                                                            
001178   181e     XORWF     0x1e,0x0,0x0                                                                                    
00117a   e102     BNZ       0x1180                                                                                          
00117c   0e43     MOVLW     0x43                                                                                            
00117e   181f     XORWF     0x1f,0x0,0x0                                                                                    
001180   e101     BNZ       0x1184                                                                                          
001182   d0b9     BRA       0x12f6                                                                                          
001184   0e53     MOVLW     0x53                                                                                            
001186   181e     XORWF     0x1e,0x0,0x0                                                                                    
001188   e102     BNZ       0x118e                                                                                          
00118a   0e52     MOVLW     0x52                                                                                            
00118c   181f     XORWF     0x1f,0x0,0x0                                                                                    
00118e   e101     BNZ       0x1192                                                                                          
001190   d0af     BRA       0x12f0                                                                                          
001192   0e53     MOVLW     0x53                                                                                            
001194   181e     XORWF     0x1e,0x0,0x0                                                                                    
001196   e102     BNZ       0x119c                                                                                          
001198   0e53     MOVLW     0x53                                                                                            
00119a   181f     XORWF     0x1f,0x0,0x0                                                                                    
00119c   e101     BNZ       0x11a0                                                                                          
00119e   d0a5     BRA       0x12ea                                                                                          
0011a0   0e53     MOVLW     0x53                                                                                            
0011a2   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011a4   e102     BNZ       0x11aa                                                                                          
0011a6   0e42     MOVLW     0x42                                                                                            
0011a8   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011aa   e101     BNZ       0x11ae                                                                                          
0011ac   d09b     BRA       0x12e4                                                                                          
0011ae   0e43     MOVLW     0x43                                                                                            
0011b0   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011b2   e102     BNZ       0x11b8                                                                                          
0011b4   0e42     MOVLW     0x42                                                                                            
0011b6   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011b8   e101     BNZ       0x11bc                                                                                          
0011ba   d091     BRA       0x12de                                                                                          
0011bc   0e43     MOVLW     0x43                                                                                            
0011be   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011c0   e102     BNZ       0x11c6                                                                                          
0011c2   0e52     MOVLW     0x52                                                                                            
0011c4   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011c6   e101     BNZ       0x11ca                                                                                          
0011c8   d087     BRA       0x12d8                                                                                          
0011ca   0e4f     MOVLW     0x4f                                                                                            
0011cc   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011ce   e102     BNZ       0x11d4                                                                                          
0011d0   0e42     MOVLW     0x42                                                                                            
0011d2   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011d4   e101     BNZ       0x11d8                                                                                          
0011d6   d07d     BRA       0x12d2                                                                                          
0011d8   0e57     MOVLW     0x57                                                                                            
0011da   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011dc   e102     BNZ       0x11e2                                                                                          
0011de   0e4d     MOVLW     0x4d                                                                                            
0011e0   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011e2   e075     BZ        0x12ce                                                                                          
0011e4   0e52     MOVLW     0x52                                                                                            
0011e6   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011e8   e102     BNZ       0x11ee                                                                                          
0011ea   0e4d     MOVLW     0x4d                                                                                            
0011ec   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011ee   e06d     BZ        0x12ca                                                                                          
0011f0   0e44     MOVLW     0x44                                                                                            
0011f2   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011f4   e102     BNZ       0x11fa                                                                                          
0011f6   0e50     MOVLW     0x50                                                                                            
0011f8   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011fa   e065     BZ        0x12c6                                                                                          
0011fc   0e4f     MOVLW     0x4f                                                                                            
0011fe   181e     XORWF     0x1e,0x0,0x0                                                                                    
001200   e102     BNZ       0x1206                                                                                          
001202   0e50     MOVLW     0x50                                                                                            
001204   181f     XORWF     0x1f,0x0,0x0                                                                                    
001206   e05d     BZ        0x12c2                                                                                          
001208   0e49     MOVLW     0x49                                                                                            
00120a   181e     XORWF     0x1e,0x0,0x0                                                                                    
00120c   e102     BNZ       0x1212                                                                                          
00120e   0e50     MOVLW     0x50                                                                                            
001210   181f     XORWF     0x1f,0x0,0x0                                                                                    
001212   e055     BZ        0x12be                                                                                          
001214   0e58     MOVLW     0x58                                                                                            
001216   181e     XORWF     0x1e,0x0,0x0                                                                                    
001218   e102     BNZ       0x121e                                                                                          
00121a   0e54     MOVLW     0x54                                                                                            
00121c   181f     XORWF     0x1f,0x0,0x0                                                                                    
00121e   e04c     BZ        0x12b8                                                                                          
001220   0e54     MOVLW     0x54                                                                                            
001222   181e     XORWF     0x1e,0x0,0x0                                                                                    
001224   e101     BNZ       0x1228                                                                                          
001226   501f     MOVF      0x1f,0x0,0x0                                                                                    
001228   e045     BZ        0x12b4                                                                                          
00122a   0e41     MOVLW     0x41                                                                                            
00122c   181e     XORWF     0x1e,0x0,0x0                                                                                    
00122e   e101     BNZ       0x1232                                                                                          
001230   501f     MOVF      0x1f,0x0,0x0                                                                                    
001232   e03e     BZ        0x12b0                                                                                          
001234   0e56     MOVLW     0x56                                                                                            
001236   181e     XORWF     0x1e,0x0,0x0                                                                                    
001238   e101     BNZ       0x123c                                                                                          
00123a   501f     MOVF      0x1f,0x0,0x0                                                                                    
00123c   e037     BZ        0x12ac                                                                                          
00123e   0e49     MOVLW     0x49                                                                                            
001240   181e     XORWF     0x1e,0x0,0x0                                                                                    
001242   e101     BNZ       0x1246                                                                                          
001244   501f     MOVF      0x1f,0x0,0x0                                                                                    
001246   e030     BZ        0x12a8                                                                                          
001248   0e4f     MOVLW     0x4f                                                                                            
00124a   181e     XORWF     0x1e,0x0,0x0                                                                                    
00124c   e101     BNZ       0x1250                                                                                          
00124e   501f     MOVF      0x1f,0x0,0x0                                                                                    
001250   e029     BZ        0x12a4                                                                                          
001252   0e55     MOVLW     0x55                                                                                            
001254   181e     XORWF     0x1e,0x0,0x0                                                                                    
001256   e102     BNZ       0x125c                                                                                          
001258   0e43     MOVLW     0x43                                                                                            
00125a   181f     XORWF     0x1f,0x0,0x0                                                                                    
00125c   e021     BZ        0x12a0                                                                                          
00125e   0e58     MOVLW     0x58                                                                                            
001260   181e     XORWF     0x1e,0x0,0x0                                                                                    
001262   e102     BNZ       0x1268                                                                                          
001264   0e43     MOVLW     0x43                                                                                            
001266   181f     XORWF     0x1f,0x0,0x0                                                                                    
001268   e018     BZ        0x129a                                                                                          
00126a   0e43     MOVLW     0x43                                                                                            
00126c   181e     XORWF     0x1e,0x0,0x0                                                                                    
00126e   e101     BNZ       0x1272                                                                                          
001270   501f     MOVF      0x1f,0x0,0x0                                                                                    
001272   e011     BZ        0x1296                                                                                          
001274   0e52     MOVLW     0x52                                                                                            
001276   181e     XORWF     0x1e,0x0,0x0                                                                                    
001278   e101     BNZ       0x127c                                                                                          
00127a   501f     MOVF      0x1f,0x0,0x0                                                                                    
00127c   e00a     BZ        0x1292                                                                                          
00127e   0e58     MOVLW     0x58                                                                                            
001280   181e     XORWF     0x1e,0x0,0x0                                                                                    
001282   e102     BNZ       0x1288                                                                                          
001284   0e52     MOVLW     0x52                                                                                            
001286   181f     XORWF     0x1f,0x0,0x0                                                                                    
001288   e001     BZ        0x128c                                                                                          
00128a   d047     BRA       0x131a                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
                                           		case ('R' * 256) + 'X':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// For receiving serial                                                       E:\iroFW\user\user.c
00128c   ecd2     CALL      0x1ba4,0x0     			parse_RX_packet ();                                                           E:\iroFW\user\user.c
00128e   f00d                                                                                                               
001290   d083     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case 'R':                                                                      E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Reset command (resets everything to power-on state)                        E:\iroFW\user\user.c
001292   d8b9     RCALL     0x1406         			parse_R_packet ();                                                            E:\iroFW\user\user.c
001294   d081     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case 'C':                                                                      E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Configure command (configure ports for Input or Ouptut)                    E:\iroFW\user\user.c
001296   d93c     RCALL     0x1510         			parse_C_packet ();                                                            E:\iroFW\user\user.c
001298   d07f     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}		                                                                            E:\iroFW\user\user.c
                                           		case ('C' * 256) + 'X':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// For configuring serial port                                                E:\iroFW\user\user.c
00129a   ecd4     CALL      0x1ba8,0x0     			parse_CX_packet ();                                                           E:\iroFW\user\user.c
00129c   f00d                                                                                                               
00129e   d07c     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case ('C' * 256) + 'U':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// For configuring UBW                                                        E:\iroFW\user\user.c
0012a0   d8b6     RCALL     0x140e         			parse_CU_packet ();                                                           E:\iroFW\user\user.c
0012a2   d07a     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case 'O':                                                                      E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Output command (tell the ports to output something)                        E:\iroFW\user\user.c
0012a4   d992     RCALL     0x15ca         			parse_O_packet ();                                                            E:\iroFW\user\user.c
0012a6   d078     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case 'I':                                                                      E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Input command (return the current status of the ports)                     E:\iroFW\user\user.c
0012a8   d9c3     RCALL     0x1630         			parse_I_packet ();                                                            E:\iroFW\user\user.c
0012aa   d076     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case 'V':                                                                      E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Version command                                                            E:\iroFW\user\user.c
0012ac   d9dc     RCALL     0x1666         			parse_V_packet ();                                                            E:\iroFW\user\user.c
0012ae   d074     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case 'A':                                                                      E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Analog command                                                             E:\iroFW\user\user.c
0012b0   d9eb     RCALL     0x1688         			parse_A_packet ();                                                            E:\iroFW\user\user.c
0012b2   d072     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case 'T':                                                                      E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// For timed I/O                                                              E:\iroFW\user\user.c
0012b4   d8ec     RCALL     0x148e         			parse_T_packet ();                                                            E:\iroFW\user\user.c
0012b6   d070     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}	                                                                             E:\iroFW\user\user.c
                                           		case ('T' * 256) + 'X':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// For transmitting serial                                                    E:\iroFW\user\user.c
0012b8   ecd0     CALL      0x1ba0,0x0     			parse_TX_packet ();                                                           E:\iroFW\user\user.c
0012ba   f00d                                                                                                               
0012bc   d06d     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case ('P' * 256) + 'I':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// PI for reading a single pin                                                E:\iroFW\user\user.c
0012be   db57     RCALL     0x196e         			parse_PI_packet ();                                                           E:\iroFW\user\user.c
0012c0   d06b     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case ('P' * 256) + 'O':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// PO for setting a single pin                                                E:\iroFW\user\user.c
0012c2   dbd5     RCALL     0x1a6e         			parse_PO_packet ();                                                           E:\iroFW\user\user.c
0012c4   d069     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		                                                                               E:\iroFW\user\user.c
                                           		case ('P' * 256) + 'D':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// PD for setting a pin's direction                                           E:\iroFW\user\user.c
0012c6   dab7     RCALL     0x1836         			parse_PD_packet ();                                                           E:\iroFW\user\user.c
0012c8   d067     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case ('M' * 256) + 'R':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// MR for Memory Read                                                         E:\iroFW\user\user.c
0012ca   da74     RCALL     0x17b4         			parse_MR_packet ();                                                           E:\iroFW\user\user.c
0012cc   d065     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case ('M' * 256) + 'W':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// MW for Memory Write                                                        E:\iroFW\user\user.c
0012ce   da3d     RCALL     0x174a         			parse_MW_packet ();                                                           E:\iroFW\user\user.c
0012d0   d063     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case ('B' * 256) + 'O':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// MR for Fast Parallel Output                                                E:\iroFW\user\user.c
0012d2   ecc2     CALL      0x1d84,0x0     			parse_BO_packet ();		                                                         E:\iroFW\user\user.c
0012d4   f00e                                                                                                               
0012d6   d060     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case ('R' * 256) + 'C':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// RC for RC servo output                                                     E:\iroFW\user\user.c
0012d8   ecd6     CALL      0x1bac,0x0     			parse_RC_packet ();		                                                         E:\iroFW\user\user.c
0012da   f00d                                                                                                               
0012dc   d05d     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case ('B' * 256) + 'C':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// BC for Fast Parallel Configure                                             E:\iroFW\user\user.c
0012de   ec7b     CALL      0x1cf6,0x0     			parse_BC_packet ();                                                           E:\iroFW\user\user.c
0012e0   f00e                                                                                                               
0012e2   d05a     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case ('B' * 256) + 'S':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// BS for Fast Binary Stream output                                           E:\iroFW\user\user.c
0012e4   ec09     CALL      0x2012,0x0     			parse_BS_packet ();                                                           E:\iroFW\user\user.c
0012e6   f010                                                                                                               
0012e8   d057     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case ('S' * 256) + 'S':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// SS for Send SPI                                                            E:\iroFW\user\user.c
0012ea   ecc5     CALL      0x218a,0x0     			parse_SS_packet ();                                                           E:\iroFW\user\user.c
0012ec   f010                                                                                                               
0012ee   d054     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case ('R' * 256) + 'S':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// RS for Receive SPI                                                         E:\iroFW\user\user.c
0012f0   ecc8     CALL      0x2190,0x0     			parse_RS_packet ();                                                           E:\iroFW\user\user.c
0012f2   f010                                                                                                               
0012f4   d051     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case ('C' * 256) + 'S':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// CS for Configure SPI                                                       E:\iroFW\user\user.c
0012f6   eccb     CALL      0x2196,0x0     			parse_CS_packet ();                                                           E:\iroFW\user\user.c
0012f8   f010                                                                                                               
0012fa   d04e     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case ('S' * 256) + 'I':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// SI for Send I2C                                                            E:\iroFW\user\user.c
0012fc   ecce     CALL      0x219c,0x0     			parse_SI_packet ();                                                           E:\iroFW\user\user.c
0012fe   f010                                                                                                               
001300   d04b     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case ('R' * 256) + 'I':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// RI for Receive I2C                                                         E:\iroFW\user\user.c
001302   ecd1     CALL      0x21a2,0x0     			parse_RI_packet ();                                                           E:\iroFW\user\user.c
001304   f010                                                                                                               
001306   d048     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		case ('C' * 256) + 'I':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// CI for Configure I2C                                                       E:\iroFW\user\user.c
001308   ecd4     CALL      0x21a8,0x0     			parse_CI_packet ();                                                           E:\iroFW\user\user.c
00130a   f010                                                                                                               
00130c   d045     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           		case ('G' * 256) + 'O':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
00130e   ecd7     CALL      0x21ae,0x0     			parse_GO_packet ();                                                           E:\iroFW\user\user.c
001310   f010                                                                                                               
001312   d042     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           		case ('S' * 256) + 'T':                                                        E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
001314   ecdb     CALL      0x21b6,0x0     			parse_ST_packet ();                                                           E:\iroFW\user\user.c
001316   f010                                                                                                               
001318   d03f     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           		default:                                                                       E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
00131a   0e03     MOVLW     0x3            			if (0 == cmd2)                                                                E:\iroFW\user\user.c
00131c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00131e   e11a     BNZ       0x1354                                                                                          
                                           			{                                                                             E:\iroFW\user\user.c
                                           				// Send back 'unknown command' error                                         E:\iroFW\user\user.c
                                           				printf (                                                                     E:\iroFW\user\user.c
                                           					 (rom char *)"!8 Err: Unknown command '%c:%2X'\r\n"                         E:\iroFW\user\user.c
001330   0efd     MOVLW     0xfd           					,cmd1                                                                       E:\iroFW\user\user.c
001332   6e2a     MOVWF     0x2a,0x0                                                                                        
001334   0e40     MOVLW     0x40                                                                                            
001336   6e2b     MOVWF     0x2b,0x0                                                                                        
001338   6a2c     CLRF      0x2c,0x0                                                                                        
00133a   c02a     MOVFF     0x2a,0xfe6                                                                                      
00133c   ffe6                                                                                                               
00133e   c02b     MOVFF     0x2b,0xfe6                                                                                      
001340   ffe6                                                                                                               
001342   c02c     MOVFF     0x2c,0xfe6                                                                                      
001344   ffe6                                                                                                               
001328   0e02     MOVLW     0x2            					,cmd1                                                                       E:\iroFW\user\user.c
00132a   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00132c   ffe6                                                                                                               
00132e   6ae6     CLRF      0xe6,0x0                                                                                        
001320   0e02     MOVLW     0x2            				);                                                                           E:\iroFW\user\user.c
001322   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001324   ffe6                                                                                                               
001326   6ae6     CLRF      0xe6,0x0                                                                                        
001346   ec0b     CALL      0x4416,0x0                                                                                      
001348   f022                                                                                                               
00134a   6e2d     MOVWF     0x2d,0x0                                                                                        
00134c   0e07     MOVLW     0x7                                                                                             
00134e   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001350   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           			}                                                                             E:\iroFW\user\user.c
001352   d021     BRA       0x1396         			else                                                                          E:\iroFW\user\user.c
                                           			{                                                                             E:\iroFW\user\user.c
                                           				// Send back 'unknown command' error                                         E:\iroFW\user\user.c
                                           				printf (                                                                     E:\iroFW\user\user.c
                                           					 (rom char *)"!8 Err: Unknown command '%c%c:%2X%2X'\r\n"                    E:\iroFW\user\user.c
001374   0ed5     MOVLW     0xd5           					,cmd1                                                                       E:\iroFW\user\user.c
001376   6e2a     MOVWF     0x2a,0x0                                                                                        
001378   0e40     MOVLW     0x40                                                                                            
00137a   6e2b     MOVWF     0x2b,0x0                                                                                        
00137c   6a2c     CLRF      0x2c,0x0                                                                                        
00137e   c02a     MOVFF     0x2a,0xfe6                                                                                      
001380   ffe6                                                                                                               
001382   c02b     MOVFF     0x2b,0xfe6                                                                                      
001384   ffe6                                                                                                               
001386   c02c     MOVFF     0x2c,0xfe6                                                                                      
001388   ffe6                                                                                                               
00136c   0e02     MOVLW     0x2            					,cmd2                                                                       E:\iroFW\user\user.c
00136e   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001370   ffe6                                                                                                               
001372   6ae6     CLRF      0xe6,0x0                                                                                        
001364   0e03     MOVLW     0x3            					,cmd1                                                                       E:\iroFW\user\user.c
001366   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001368   ffe6                                                                                                               
00136a   6ae6     CLRF      0xe6,0x0                                                                                        
00135c   0e02     MOVLW     0x2            					,cmd2                                                                       E:\iroFW\user\user.c
00135e   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001360   ffe6                                                                                                               
001362   6ae6     CLRF      0xe6,0x0                                                                                        
001354   0e03     MOVLW     0x3            				);                                                                           E:\iroFW\user\user.c
001356   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001358   ffe6                                                                                                               
00135a   6ae6     CLRF      0xe6,0x0                                                                                        
00138a   ec0b     CALL      0x4416,0x0                                                                                      
00138c   f022                                                                                                               
00138e   6e2d     MOVWF     0x2d,0x0                                                                                        
001390   0e0b     MOVLW     0xb                                                                                             
001392   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001394   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           			}                                                                             E:\iroFW\user\user.c
001396   d000     BRA       0x1398         			break;                                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Double check that our output pointer is now at the ending <CR>               E:\iroFW\user\user.c
                                           	// If it is not, this indicates that there were extra characters that           E:\iroFW\user\user.c
                                           	// the command parsing routine didn't eat. This would be an error and needs     E:\iroFW\user\user.c
                                           	// to be reported. (Ignore for Reset command because FIFO pointers get cleared.) E:\iroFW\user\user.c
                                           	if (                                                                            E:\iroFW\user\user.c
001398   0101     MOVLB     0x1            		(g_RX_buf[g_RX_buf_out] != kCR && 0 == error_byte)                             E:\iroFW\user\user.c
00139a   51a1     MOVF      0xa1,0x0,0x1                                                                                    
00139c   6aea     CLRF      0xea,0x0                                                                                        
00139e   0f40     ADDLW     0x40                                                                                            
0013a0   6ee9     MOVWF     0xe9,0x0                                                                                        
0013a2   0e02     MOVLW     0x2                                                                                             
0013a4   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0013a6   50ef     MOVF      0xef,0x0,0x0                                                                                    
0013a8   080d     SUBLW     0xd                                                                                             
0013aa   e00d     BZ        0x13c6                                                                                          
0013ac   500d     MOVF      0xd,0x0,0x0                                                                                     
0013ae   e10b     BNZ       0x13c6                                                                                          
                                           		&&                                                                             E:\iroFW\user\user.c
0013b0   0e52     MOVLW     0x52           		('R' != command)                                                               E:\iroFW\user\user.c
0013b2   6e2a     MOVWF     0x2a,0x0                                                                                        
0013b4   6a2b     CLRF      0x2b,0x0                                                                                        
0013b6   50df     MOVF      0xdf,0x0,0x0                                                                                    
0013b8   182a     XORWF     0x2a,0x0,0x0                                                                                    
0013ba   e103     BNZ       0x13c2                                                                                          
0013bc   52de     MOVF      0xde,0x1,0x0                                                                                    
0013be   50dd     MOVF      0xdd,0x0,0x0                                                                                    
0013c0   182b     XORWF     0x2b,0x0,0x0                                                                                    
0013c2   e001     BZ        0x13c6         	)                                                                               E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
0013c4   8e0d     BSF       0xd,0x7,0x0    		bitset (error_byte, kERROR_BYTE_EXTRA_CHARACTERS);                             E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Clean up by skipping over any bytes we haven't eaten                         E:\iroFW\user\user.c
                                           	// This is safe since we parse each packet as we get a <CR>                     E:\iroFW\user\user.c
                                           	// (i.e. g_RX_buf_in doesn't move while we are in this routine)                 E:\iroFW\user\user.c
0013c6   c1a0     MOVFF     0x1a0,0x1a1    	g_RX_buf_out = g_RX_buf_in;                                                     E:\iroFW\user\user.c
0013c8   f1a1                                                                                                               
0013ca   0e04     MOVLW     0x4            }                                                                                E:\iroFW\user\user.c
0013cc   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0013ce   e202     BC        0x13d4                                                                                          
0013d0   6ae1     CLRF      0xe1,0x0                                                                                        
0013d2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0013d4   6ee1     MOVWF     0xe1,0x0                                                                                        
0013d6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0013d8   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0013da   ffd9                                                                                                               
0013dc   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // Print out the positive acknoledgement that the packet was received            E:\iroFW\user\user.c
                                           // if we have acks turned on.                                                    E:\iroFW\user\user.c
                                           void print_ack(void)                                                             E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
0013de   0101     MOVLB     0x1            	if (g_ack_enable)                                                               E:\iroFW\user\user.c
0013e0   51a6     MOVF      0xa6,0x0,0x1                                                                                    
0013e2   e010     BZ        0x1404                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
0013e4   0e9c     MOVLW     0x9c           		printf ((rom char *)st_OK);                                                    E:\iroFW\user\user.c
0013e6   6e2a     MOVWF     0x2a,0x0                                                                                        
0013e8   0e46     MOVLW     0x46                                                                                            
0013ea   6e2b     MOVWF     0x2b,0x0                                                                                        
0013ec   6a2c     CLRF      0x2c,0x0                                                                                        
0013ee   c02a     MOVFF     0x2a,0xfe6                                                                                      
0013f0   ffe6                                                                                                               
0013f2   c02b     MOVFF     0x2b,0xfe6                                                                                      
0013f4   ffe6                                                                                                               
0013f6   c02c     MOVFF     0x2c,0xfe6                                                                                      
0013f8   ffe6                                                                                                               
0013fa   ec0b     CALL      0x4416,0x0                                                                                      
0013fc   f022                                                                                                               
0013fe   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001400   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001402   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	}                                                                               E:\iroFW\user\user.c
001404   0012     RETURN    0x0            }                                                                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // Return all I/Os to their default power-on values                              E:\iroFW\user\user.c
                                           void parse_R_packet(void)                                                        E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
001406   ecc4     CALL      0xb88,0x0      	UserInit ();                                                                    E:\iroFW\user\user.c
001408   f005                                                                                                               
00140a   dfe9     RCALL     0x13de         	print_ack ();                                                                   E:\iroFW\user\user.c
00140c   0012     RETURN    0x0            }                                                                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // CU is "Configure UBW" and controls system-wide configruation values           E:\iroFW\user\user.c
                                           // "CU,<parameter_number>,<paramter_value><CR>"                                  E:\iroFW\user\user.c
                                           // <paramter_number>	<parameter_value>                                           E:\iroFW\user\user.c
                                           // 1					{1|0} turns on or off the 'ack' ("OK" at end of packets)                E:\iroFW\user\user.c
00140e   cfd9     MOVFF     0xfd9,0xfe6    void parse_CU_packet(void)                                                       E:\iroFW\user\user.c
001410   ffe6                                                                                                               
001412   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001414   ffd9                                                                                                               
001416   0e03     MOVLW     0x3                                                                                             
001418   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	unsigned char parameter_number;                                                 E:\iroFW\user\user.c
                                           	signed int paramater_value;                                                     E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
00141a   0e01     MOVLW     0x1            	parameter_number = extract_number (kUCHAR);                                     E:\iroFW\user\user.c
00141c   6ee6     MOVWF     0xe6,0x0                                                                                        
00141e   ecde     CALL      0x21bc,0x0                                                                                      
001420   f010                                                                                                               
001422   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001424   501d     MOVF      0x1d,0x0,0x0                                                                                    
001426   6edf     MOVWF     0xdf,0x0                                                                                        
001428   0e02     MOVLW     0x2            	paramater_value = extract_number (kINT);                                        E:\iroFW\user\user.c
00142a   6ee6     MOVWF     0xe6,0x0                                                                                        
00142c   ecde     CALL      0x21bc,0x0                                                                                      
00142e   f010                                                                                                               
001430   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001432   52de     MOVF      0xde,0x1,0x0                                                                                    
001434   c01d     MOVFF     0x1d,0xfde                                                                                      
001436   ffde                                                                                                               
001438   c01e     MOVFF     0x1e,0xfdd                                                                                      
00143a   ffdd                                                                                                               
00143c   52dd     MOVF      0xdd,0x1,0x0                                                                                    
                                                                                                                            E:\iroFW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iroFW\user\user.c
00143e   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iroFW\user\user.c
001440   e001     BZ        0x1444                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001442   d01b     BRA       0x147a         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
001444   04df     DECF      0xdf,0x0,0x0   	if (1 == parameter_number)                                                      E:\iroFW\user\user.c
001446   e118     BNZ       0x1478                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001448   50d9     MOVF      0xd9,0x0,0x0   		if (0 == paramater_value || 1 == paramater_value)                              E:\iroFW\user\user.c
00144a   0f01     ADDLW     0x1                                                                                             
00144c   6ee9     MOVWF     0xe9,0x0                                                                                        
00144e   cfda     MOVFF     0xfda,0xfea                                                                                     
001450   ffea                                                                                                               
001452   50ee     MOVF      0xee,0x0,0x0                                                                                    
001454   10ed     IORWF     0xed,0x0,0x0                                                                                    
001456   e00b     BZ        0x146e                                                                                          
001458   0e01     MOVLW     0x1                                                                                             
00145a   6e2a     MOVWF     0x2a,0x0                                                                                        
00145c   6a2b     CLRF      0x2b,0x0                                                                                        
00145e   0e01     MOVLW     0x1                                                                                             
001460   50db     MOVF      0xdb,0x0,0x0                                                                                    
001462   182a     XORWF     0x2a,0x0,0x0                                                                                    
001464   e103     BNZ       0x146c                                                                                          
001466   0e02     MOVLW     0x2                                                                                             
001468   50db     MOVF      0xdb,0x0,0x0                                                                                    
00146a   182b     XORWF     0x2b,0x0,0x0                                                                                    
00146c   e104     BNZ       0x1476                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
00146e   0e01     MOVLW     0x1            			g_ack_enable = paramater_value;			                                            E:\iroFW\user\user.c
001470   cfdb     MOVFF     0xfdb,0x1a6                                                                                     
001472   f1a6                                                                                                               
                                           		}                                                                              E:\iroFW\user\user.c
001474   d001     BRA       0x1478         		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
001476   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
001478   dfb2     RCALL     0x13de         	print_ack();                                                                    E:\iroFW\user\user.c
00147a   0e03     MOVLW     0x3            }                                                                                E:\iroFW\user\user.c
00147c   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00147e   e202     BC        0x1484                                                                                          
001480   6ae1     CLRF      0xe1,0x0                                                                                        
001482   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001484   6ee1     MOVWF     0xe1,0x0                                                                                        
001486   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001488   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00148a   ffd9                                                                                                               
00148c   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // "T" Packet                                                                    E:\iroFW\user\user.c
                                           // Causes PIC to sample digital or analog inputs at a regular interval and send  E:\iroFW\user\user.c
                                           // I (or A) packets back at that interval.                                       E:\iroFW\user\user.c
                                           // Send T,0,0<CR> to stop I (or A) packets                                       E:\iroFW\user\user.c
                                           // FORMAT: T,<TIME_BETWEEN_UPDATES_IN_MS>,<MODE><CR>                             E:\iroFW\user\user.c
                                           // <MODE> is 0 for digital (I packets) and 1 for analog (A packets)              E:\iroFW\user\user.c
                                           // EXAMPLE: "T,4000,0<CR>" to send an I packet back every 4 seconds.             E:\iroFW\user\user.c
                                           // EXAMPLE: "T,2000,1<CR>" to send an A packet back every 2 seconds.             E:\iroFW\user\user.c
00148e   cfd9     MOVFF     0xfd9,0xfe6    void parse_T_packet(void)                                                        E:\iroFW\user\user.c
001490   ffe6                                                                                                               
001492   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001494   ffd9                                                                                                               
001496   0e03     MOVLW     0x3                                                                                             
001498   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	unsigned int value;                                                             E:\iroFW\user\user.c
00149a   0e02     MOVLW     0x2            	unsigned char mode = 0;                                                         E:\iroFW\user\user.c
00149c   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           	// Extract the <TIME_BETWEEN_UPDATES_IN_MS> value                               E:\iroFW\user\user.c
00149e   0e03     MOVLW     0x3            	time_between_updates = extract_number (kUINT);                                  E:\iroFW\user\user.c
0014a0   6ee6     MOVWF     0xe6,0x0                                                                                        
0014a2   ecde     CALL      0x21bc,0x0                                                                                      
0014a4   f010                                                                                                               
0014a6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0014a8   c01d     MOVFF     0x1d,0x0                                                                                        
0014aa   f000                                                                                                               
0014ac   c01e     MOVFF     0x1e,0x1                                                                                        
0014ae   f001                                                                                                               
                                           	// Extract the <MODE> value                                                     E:\iroFW\user\user.c
0014b0   0e01     MOVLW     0x1            	mode = extract_number (kUCHAR);                                                 E:\iroFW\user\user.c
0014b2   6ee6     MOVWF     0xe6,0x0                                                                                        
0014b4   ecde     CALL      0x21bc,0x0                                                                                      
0014b6   f010                                                                                                               
0014b8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0014ba   0e02     MOVLW     0x2                                                                                             
0014bc   c01d     MOVFF     0x1d,0xfdb                                                                                      
0014be   ffdb                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iroFW\user\user.c
0014c0   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iroFW\user\user.c
0014c2   e001     BZ        0x14c6                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
0014c4   d01b     BRA       0x14fc         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Now start up the timer at the right rate or shut                             E:\iroFW\user\user.c
                                           	// it down.                                                                     E:\iroFW\user\user.c
0014c6   0e02     MOVLW     0x2            	if (0 == mode)                                                                  E:\iroFW\user\user.c
0014c8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0014ca   e10c     BNZ       0x14e4                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
0014cc   5000     MOVF      0x0,0x0,0x0    		if (0 == time_between_updates)                                                 E:\iroFW\user\user.c
0014ce   1001     IORWF     0x1,0x0,0x0                                                                                     
0014d0   e103     BNZ       0x14d8                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Turn off sending of I packets.                                             E:\iroFW\user\user.c
0014d2   6a02     CLRF      0x2,0x0        			ISR_D_RepeatRate = 0;                                                         E:\iroFW\user\user.c
0014d4   6a03     CLRF      0x3,0x0                                                                                         
                                           		}                                                                              E:\iroFW\user\user.c
0014d6   d005     BRA       0x14e2         		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
0014d8   84ca     BSF       0xca,0x2,0x0   			T2CONbits.TMR2ON = 1;                                                         E:\iroFW\user\user.c
                                           		                                                                               E:\iroFW\user\user.c
                                           			// Eventually gaurd this section from interrupts                              E:\iroFW\user\user.c
0014da   c000     MOVFF     0x0,0x2        			ISR_D_RepeatRate = time_between_updates;                                      E:\iroFW\user\user.c
0014dc   f002                                                                                                               
0014de   c001     MOVFF     0x1,0x3                                                                                         
0014e0   f003                                                                                                               
                                           		}                                                                              E:\iroFW\user\user.c
                                           	}	                                                                              E:\iroFW\user\user.c
0014e2   d00b     BRA       0x14fa         	else                                                                            E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
0014e4   5000     MOVF      0x0,0x0,0x0    		if (0 == time_between_updates)                                                 E:\iroFW\user\user.c
0014e6   1001     IORWF     0x1,0x0,0x0                                                                                     
0014e8   e103     BNZ       0x14f0                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Turn off sending of A packets.                                             E:\iroFW\user\user.c
0014ea   6a07     CLRF      0x7,0x0        			ISR_A_RepeatRate = 0;                                                         E:\iroFW\user\user.c
0014ec   6a08     CLRF      0x8,0x0                                                                                         
                                           		}                                                                              E:\iroFW\user\user.c
0014ee   d005     BRA       0x14fa         		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
0014f0   84ca     BSF       0xca,0x2,0x0   			T2CONbits.TMR2ON = 1;                                                         E:\iroFW\user\user.c
                                           		                                                                               E:\iroFW\user\user.c
                                           			// Eventually gaurd this section from interrupts                              E:\iroFW\user\user.c
0014f2   c000     MOVFF     0x0,0x7        			ISR_A_RepeatRate = time_between_updates;                                      E:\iroFW\user\user.c
0014f4   f007                                                                                                               
0014f6   c001     MOVFF     0x1,0x8                                                                                         
0014f8   f008                                                                                                               
                                           		}                                                                              E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
0014fa   df71     RCALL     0x13de         	print_ack ();                                                                   E:\iroFW\user\user.c
0014fc   0e03     MOVLW     0x3            }                                                                                E:\iroFW\user\user.c
0014fe   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001500   e202     BC        0x1506                                                                                          
001502   6ae1     CLRF      0xe1,0x0                                                                                        
001504   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001506   6ee1     MOVWF     0xe1,0x0                                                                                        
001508   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00150a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00150c   ffd9                                                                                                               
00150e   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // FORMAT: C,<portA_IO>,<portB_IO>,<portC_IO>,<analog_config><CR>                E:\iroFW\user\user.c
                                           // EXAMPLE: "C,255,0,4,0<CR>"                                                    E:\iroFW\user\user.c
                                           // <portX_IO> is the byte sent to the Data Direction (DDR) regsiter for          E:\iroFW\user\user.c
                                           // each port. A 1 in a bit location means input, a 0 means output.               E:\iroFW\user\user.c
                                           // <analog_config> is a value between 0 and 12. It tells the UBW                 E:\iroFW\user\user.c
                                           // how many analog inputs to enable. If a zero is sent for this                  E:\iroFW\user\user.c
                                           // parameter, all analog inputs are disabled.                                    E:\iroFW\user\user.c
                                           // For the other values, see the following chart to know what pins are           E:\iroFW\user\user.c
                                           // used for what:                                                                E:\iroFW\user\user.c
                                           //                                                                               E:\iroFW\user\user.c
                                           // Note that in the following chart, PortE is references. This port              E:\iroFW\user\user.c
                                           // only exists on the 40 and 44 pin versions of the UBW. For the                 E:\iroFW\user\user.c
                                           // 28 pin versions of the UBW, all PortE based analog pins will return           E:\iroFW\user\user.c
                                           // zero.                                                                         E:\iroFW\user\user.c
                                           //                                                                               E:\iroFW\user\user.c
                                           // <analog_config>	Analog Inputs Enabled	Pins Used For Analog Inputs             E:\iroFW\user\user.c
                                           // ---------------	---------------------	-------------------------------         E:\iroFW\user\user.c
                                           //	0				<none>					<none>                                                        E:\iroFW\user\user.c
                                           //	1				AN0						A0                                                              E:\iroFW\user\user.c
                                           //	2				AN0,AN1					A0,A1	                                                       E:\iroFW\user\user.c
                                           //	3				AN0,AN1,AN2				A0,A1,A2	                                                 E:\iroFW\user\user.c
                                           //	4				AN0,AN1,AN2,AN3			A0,A1,A2,A3	                                           E:\iroFW\user\user.c
                                           //	5				AN0,AN1,AN2,AN3,AN4		A0,A1,A2,A3,A5		                                    E:\iroFW\user\user.c
                                           //	6				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0                                   E:\iroFW\user\user.c
                                           //						AN5						                                                                E:\iroFW\user\user.c
                                           //	7				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1                                E:\iroFW\user\user.c
                                           //						AN5,AN6						                                                            E:\iroFW\user\user.c
                                           //	8				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2                             E:\iroFW\user\user.c
                                           //						AN5,AN6,AN7						                                                        E:\iroFW\user\user.c
                                           //	9				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2                          E:\iroFW\user\user.c
                                           //						AN5,AN6,AN7,AN8						                                                    E:\iroFW\user\user.c
                                           //	10				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2,B3                      E:\iroFW\user\user.c
                                           //						AN5,AN6,AN7,AN8,                                                         E:\iroFW\user\user.c
                                           //						AN9						                                                                E:\iroFW\user\user.c
                                           //	11				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2,B3,B1                   E:\iroFW\user\user.c
                                           //						AN5,AN6,AN7,AN8,                                                         E:\iroFW\user\user.c
                                           //						AB9,AN10						                                                           E:\iroFW\user\user.c
                                           //	12				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2,B3,B1,B4                E:\iroFW\user\user.c
                                           //						AN5,AN6,AN7,AN8,                                                         E:\iroFW\user\user.c
                                           //						AN9,AN10,AN11                                                            E:\iroFW\user\user.c
                                           // NOTE: it is up to the user to tell the proper port direction bits to be       E:\iroFW\user\user.c
                                           // inputs for the analog channels they wish to use.                              E:\iroFW\user\user.c
001510   cfd9     MOVFF     0xfd9,0xfe6    void parse_C_packet(void)                                                        E:\iroFW\user\user.c
001512   ffe6                                                                                                               
001514   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001516   ffd9                                                                                                               
001518   0e04     MOVLW     0x4                                                                                             
00151a   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	unsigned char PA, PB, PC, AA;                                                   E:\iroFW\user\user.c
                                           #ifdef __18F4550                                                                 E:\iroFW\user\user.c
                                           	unsigned char PD, PE;                                                           E:\iroFW\user\user.c
                                           #endif                                                                           E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Extract each of the four values.                                             E:\iroFW\user\user.c
00151c   0e01     MOVLW     0x1            	PA = extract_number (kUCHAR);                                                   E:\iroFW\user\user.c
00151e   6ee6     MOVWF     0xe6,0x0                                                                                        
001520   ecde     CALL      0x21bc,0x0                                                                                      
001522   f010                                                                                                               
001524   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001526   501d     MOVF      0x1d,0x0,0x0                                                                                    
001528   6edf     MOVWF     0xdf,0x0                                                                                        
00152a   0e01     MOVLW     0x1            	PB = extract_number (kUCHAR);                                                   E:\iroFW\user\user.c
00152c   6ee6     MOVWF     0xe6,0x0                                                                                        
00152e   ecde     CALL      0x21bc,0x0                                                                                      
001530   f010                                                                                                               
001532   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001534   0e01     MOVLW     0x1                                                                                             
001536   c01d     MOVFF     0x1d,0xfdb                                                                                      
001538   ffdb                                                                                                               
00153a   0e01     MOVLW     0x1            	PC = extract_number (kUCHAR);                                                   E:\iroFW\user\user.c
00153c   6ee6     MOVWF     0xe6,0x0                                                                                        
00153e   ecde     CALL      0x21bc,0x0                                                                                      
001540   f010                                                                                                               
001542   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001544   0e02     MOVLW     0x2                                                                                             
001546   c01d     MOVFF     0x1d,0xfdb                                                                                      
001548   ffdb                                                                                                               
                                           #ifdef __18F4550                                                                 E:\iroFW\user\user.c
                                           	PD = extract_number (kUCHAR);                                                   E:\iroFW\user\user.c
                                           	PE = extract_number (kUCHAR);                                                   E:\iroFW\user\user.c
                                           #endif                                                                           E:\iroFW\user\user.c
00154a   0e01     MOVLW     0x1            	AA = extract_number (kUCHAR);                                                   E:\iroFW\user\user.c
00154c   6ee6     MOVWF     0xe6,0x0                                                                                        
00154e   ecde     CALL      0x21bc,0x0                                                                                      
001550   f010                                                                                                               
001552   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001554   0e03     MOVLW     0x3                                                                                             
001556   c01d     MOVFF     0x1d,0xfdb                                                                                      
001558   ffdb                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iroFW\user\user.c
00155a   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iroFW\user\user.c
00155c   e001     BZ        0x1560                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
00155e   d02b     BRA       0x15b6         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Now write those values to the data direction registers.                      E:\iroFW\user\user.c
001560   50df     MOVF      0xdf,0x0,0x0   	TRISA = PA;                                                                     E:\iroFW\user\user.c
001562   6e92     MOVWF     0x92,0x0                                                                                        
001564   0e01     MOVLW     0x1            	TRISB = PB;                                                                     E:\iroFW\user\user.c
001566   50db     MOVF      0xdb,0x0,0x0                                                                                    
001568   6e93     MOVWF     0x93,0x0                                                                                        
00156a   0e02     MOVLW     0x2            	TRISC = PC;                                                                     E:\iroFW\user\user.c
00156c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00156e   6e94     MOVWF     0x94,0x0                                                                                        
                                           #ifdef __18F4550                                                                 E:\iroFW\user\user.c
                                           	TRISD = PD;                                                                     E:\iroFW\user\user.c
                                           	TRISE = PE;                                                                     E:\iroFW\user\user.c
                                           #endif                                                                           E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
                                           	// Handle the analog value.                                                     E:\iroFW\user\user.c
                                           	// Maximum value of 12.                                                         E:\iroFW\user\user.c
001570   0e03     MOVLW     0x3            	if (AA > 12)                                                                    E:\iroFW\user\user.c
001572   50db     MOVF      0xdb,0x0,0x0                                                                                    
001574   080c     SUBLW     0xc                                                                                             
001576   e205     BC        0x1582                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001578   0e0c     MOVLW     0xc            		AA = 12;                                                                       E:\iroFW\user\user.c
00157a   6ef3     MOVWF     0xf3,0x0                                                                                        
00157c   0e03     MOVLW     0x3                                                                                             
00157e   cff3     MOVFF     0xff3,0xfdb                                                                                     
001580   ffdb                                                                                                               
                                           	}                                                                               E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
                                           	// If we are turning off Analog inputs                                          E:\iroFW\user\user.c
001582   0e03     MOVLW     0x3            	if (0 == AA)                                                                    E:\iroFW\user\user.c
001584   50db     MOVF      0xdb,0x0,0x0                                                                                    
001586   e105     BNZ       0x1592                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
                                           		// Turn all analog inputs into digital inputs                                  E:\iroFW\user\user.c
001588   0e0f     MOVLW     0xf            		ADCON1 = 0x0F;                                                                 E:\iroFW\user\user.c
00158a   6ec1     MOVWF     0xc1,0x0                                                                                        
                                           		// Turn off the ADC                                                            E:\iroFW\user\user.c
00158c   90c2     BCF       0xc2,0x0,0x0   		ADCON0bits.ADON = 0;                                                           E:\iroFW\user\user.c
                                           		// Turn off our own idea of how many analog channels to convert                E:\iroFW\user\user.c
00158e   6a0c     CLRF      0xc,0x0        		AnalogEnable = 0;                                                              E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
001590   d011     BRA       0x15b4         	else                                                                            E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
                                           		// Some protection from ISR                                                    E:\iroFW\user\user.c
001592   6a0c     CLRF      0xc,0x0        		AnalogEnable = 0;                                                              E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
                                           		// We're turning some on.                                                      E:\iroFW\user\user.c
                                           		// Start by selecting channel zero		                                           E:\iroFW\user\user.c
001594   6ac2     CLRF      0xc2,0x0       		ADCON0 = 0;                                                                    E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
                                           		// Then enabling the proper number of channels                                 E:\iroFW\user\user.c
001596   0e03     MOVLW     0x3            		ADCON1 = 15 - AA;                                                              E:\iroFW\user\user.c
001598   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00159a   ffe6                                                                                                               
00159c   0e0f     MOVLW     0xf                                                                                             
00159e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015a0   80d8     BSF       0xd8,0x0,0x0                                                                                    
0015a2   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
0015a4   6ec1     MOVWF     0xc1,0x0                                                                                        
                                           	                                                                                E:\iroFW\user\user.c
                                           		// Set up ADCON2 options                                                       E:\iroFW\user\user.c
                                           		// A/D Result right justified                                                  E:\iroFW\user\user.c
                                           		// Acq time = 20 Tad (?)                                                       E:\iroFW\user\user.c
                                           		// Tad = Fosc/64                                                               E:\iroFW\user\user.c
0015a6   0ebe     MOVLW     0xbe           		ADCON2 = 0b10111110;                                                           E:\iroFW\user\user.c
0015a8   6ec0     MOVWF     0xc0,0x0                                                                                        
                                           	                                                                                E:\iroFW\user\user.c
                                           		// Turn on the ADC                                                             E:\iroFW\user\user.c
0015aa   80c2     BSF       0xc2,0x0,0x0   		ADCON0bits.ADON = 1;                                                           E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
                                           		// Tell ourselves how many channels to convert, and turn on ISR conversions    E:\iroFW\user\user.c
0015ac   0e03     MOVLW     0x3            		AnalogEnable = AA;                                                             E:\iroFW\user\user.c
0015ae   50db     MOVF      0xdb,0x0,0x0                                                                                    
0015b0   6e0c     MOVWF     0xc,0x0                                                                                         
                                           	                                                                                E:\iroFW\user\user.c
0015b2   84ca     BSF       0xca,0x2,0x0   		T2CONbits.TMR2ON = 1;                                                          E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
0015b4   df14     RCALL     0x13de         	print_ack ();                                                                   E:\iroFW\user\user.c
0015b6   0e04     MOVLW     0x4            }                                                                                E:\iroFW\user\user.c
0015b8   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0015ba   e202     BC        0x15c0                                                                                          
0015bc   6ae1     CLRF      0xe1,0x0                                                                                        
0015be   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015c0   6ee1     MOVWF     0xe1,0x0                                                                                        
0015c2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015c4   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0015c6   ffd9                                                                                                               
0015c8   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // Outputs values to the ports pins that are set up as outputs.                  E:\iroFW\user\user.c
                                           // Example "O,121,224,002<CR>"                                                   E:\iroFW\user\user.c
0015ca   cfd9     MOVFF     0xfd9,0xfe6    void parse_O_packet(void)                                                        E:\iroFW\user\user.c
0015cc   ffe6                                                                                                               
0015ce   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0015d0   ffd9                                                                                                               
0015d2   0e03     MOVLW     0x3                                                                                             
0015d4   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	unsigned char PA, PB, PC;                                                       E:\iroFW\user\user.c
                                           #ifdef __18F4550                                                                 E:\iroFW\user\user.c
                                           	unsigned char PD, PE;                                                           E:\iroFW\user\user.c
                                           #endif                                                                           E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Extract each of the values.                                                  E:\iroFW\user\user.c
0015d6   0e01     MOVLW     0x1            	PA = extract_number (kUCHAR);                                                   E:\iroFW\user\user.c
0015d8   6ee6     MOVWF     0xe6,0x0                                                                                        
0015da   ecde     CALL      0x21bc,0x0                                                                                      
0015dc   f010                                                                                                               
0015de   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015e0   501d     MOVF      0x1d,0x0,0x0                                                                                    
0015e2   6edf     MOVWF     0xdf,0x0                                                                                        
0015e4   0e01     MOVLW     0x1            	PB = extract_number (kUCHAR);                                                   E:\iroFW\user\user.c
0015e6   6ee6     MOVWF     0xe6,0x0                                                                                        
0015e8   ecde     CALL      0x21bc,0x0                                                                                      
0015ea   f010                                                                                                               
0015ec   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015ee   0e01     MOVLW     0x1                                                                                             
0015f0   c01d     MOVFF     0x1d,0xfdb                                                                                      
0015f2   ffdb                                                                                                               
0015f4   0e01     MOVLW     0x1            	PC = extract_number (kUCHAR);                                                   E:\iroFW\user\user.c
0015f6   6ee6     MOVWF     0xe6,0x0                                                                                        
0015f8   ecde     CALL      0x21bc,0x0                                                                                      
0015fa   f010                                                                                                               
0015fc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015fe   0e02     MOVLW     0x2                                                                                             
001600   c01d     MOVFF     0x1d,0xfdb                                                                                      
001602   ffdb                                                                                                               
                                           #ifdef __18F4550                                                                 E:\iroFW\user\user.c
                                           	PD = extract_number (kUCHAR);                                                   E:\iroFW\user\user.c
                                           	PE = extract_number (kUCHAR);                                                   E:\iroFW\user\user.c
                                           #endif                                                                           E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iroFW\user\user.c
001604   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iroFW\user\user.c
001606   e001     BZ        0x160a                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001608   d009     BRA       0x161c         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           	// Now write those values to the data port registers.                           E:\iroFW\user\user.c
00160a   50df     MOVF      0xdf,0x0,0x0   	LATA = PA;                                                                      E:\iroFW\user\user.c
00160c   6e89     MOVWF     0x89,0x0                                                                                        
00160e   0e01     MOVLW     0x1            	LATB = PB;                                                                      E:\iroFW\user\user.c
001610   50db     MOVF      0xdb,0x0,0x0                                                                                    
001612   6e8a     MOVWF     0x8a,0x0                                                                                        
001614   0e02     MOVLW     0x2            	LATC = PC;                                                                      E:\iroFW\user\user.c
001616   50db     MOVF      0xdb,0x0,0x0                                                                                    
001618   6e8b     MOVWF     0x8b,0x0                                                                                        
                                           #ifdef __18F4550                                                                 E:\iroFW\user\user.c
                                           	LATD = PD;                                                                      E:\iroFW\user\user.c
                                           	LATE = PE;                                                                      E:\iroFW\user\user.c
                                           #endif                                                                           E:\iroFW\user\user.c
                                           		                                                                               E:\iroFW\user\user.c
00161a   dee1     RCALL     0x13de         	print_ack ();                                                                   E:\iroFW\user\user.c
00161c   0e03     MOVLW     0x3            }                                                                                E:\iroFW\user\user.c
00161e   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001620   e202     BC        0x1626                                                                                          
001622   6ae1     CLRF      0xe1,0x0                                                                                        
001624   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001626   6ee1     MOVWF     0xe1,0x0                                                                                        
001628   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00162a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00162c   ffd9                                                                                                               
00162e   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // Read in the three I/O ports (A,B,C) and create                                E:\iroFW\user\user.c
                                           // a packet to send back with all of values.                                     E:\iroFW\user\user.c
                                           // Example: "I,143,221,010<CR>"                                                  E:\iroFW\user\user.c
                                           // Remember that on UBW 28 pin boards, we only have                              E:\iroFW\user\user.c
                                           // Port A bits 0 through 5                                                       E:\iroFW\user\user.c
                                           // Port B bits 0 through 7                                                       E:\iroFW\user\user.c
                                           // Port C bits 0,1,2 and 7,8                                                     E:\iroFW\user\user.c
                                           // And that Port C bits 0,1,2 are used for                                       E:\iroFW\user\user.c
                                           // 		User1 LED, User2 LED and Program switch respectively.                       E:\iroFW\user\user.c
                                           // The rest will be read in as zeros.                                            E:\iroFW\user\user.c
                                           void parse_I_packet(void)                                                        E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
                                           #ifdef __18F4550                                                                 E:\iroFW\user\user.c
                                           	printf (                                                                        E:\iroFW\user\user.c
                                           		(rom char*)"I,%03i,%03i,%03i,%03i,%03i\r\n",                                   E:\iroFW\user\user.c
                                           		PORTA,                                                                         E:\iroFW\user\user.c
                                           		PORTB,                                                                         E:\iroFW\user\user.c
                                           		PORTC,                                                                         E:\iroFW\user\user.c
                                           		PORTD,                                                                         E:\iroFW\user\user.c
                                           		PORTE                                                                          E:\iroFW\user\user.c
                                           	);                                                                              E:\iroFW\user\user.c
                                           #else                                                                            E:\iroFW\user\user.c
                                           	printf (                                                                        E:\iroFW\user\user.c
001642   0ec2     MOVLW     0xc2           		(rom char*)"I,%03i,%03i,%03i\r\n",                                             E:\iroFW\user\user.c
001644   6e2a     MOVWF     0x2a,0x0                                                                                        
001646   0e40     MOVLW     0x40                                                                                            
001648   6e2b     MOVWF     0x2b,0x0                                                                                        
00164a   6a2c     CLRF      0x2c,0x0                                                                                        
00164c   c02a     MOVFF     0x2a,0xfe6                                                                                      
00164e   ffe6                                                                                                               
001650   c02b     MOVFF     0x2b,0xfe6                                                                                      
001652   ffe6                                                                                                               
001654   c02c     MOVFF     0x2c,0xfe6                                                                                      
001656   ffe6                                                                                                               
00163c   5080     MOVF      0x80,0x0,0x0   		PORTA,                                                                         E:\iroFW\user\user.c
00163e   6ee6     MOVWF     0xe6,0x0                                                                                        
001640   6ae6     CLRF      0xe6,0x0                                                                                        
001636   5081     MOVF      0x81,0x0,0x0   		PORTB,                                                                         E:\iroFW\user\user.c
001638   6ee6     MOVWF     0xe6,0x0                                                                                        
00163a   6ae6     CLRF      0xe6,0x0                                                                                        
001630   5082     MOVF      0x82,0x0,0x0   		PORTC                                                                          E:\iroFW\user\user.c
001632   6ee6     MOVWF     0xe6,0x0       	);                                                                              E:\iroFW\user\user.c
001634   6ae6     CLRF      0xe6,0x0                                                                                        
001658   ec0b     CALL      0x4416,0x0                                                                                      
00165a   f022                                                                                                               
00165c   6e2d     MOVWF     0x2d,0x0                                                                                        
00165e   0e09     MOVLW     0x9                                                                                             
001660   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001662   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           #endif                                                                           E:\iroFW\user\user.c
001664   0012     RETURN    0x0            }                                                                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // All we do here is just print out our version number                           E:\iroFW\user\user.c
                                           void parse_V_packet(void)                                                        E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
001666   0ea4     MOVLW     0xa4           	printf ((rom char *)st_version);                                                E:\iroFW\user\user.c
001668   6e2a     MOVWF     0x2a,0x0                                                                                        
00166a   0e46     MOVLW     0x46                                                                                            
00166c   6e2b     MOVWF     0x2b,0x0                                                                                        
00166e   6a2c     CLRF      0x2c,0x0                                                                                        
001670   c02a     MOVFF     0x2a,0xfe6                                                                                      
001672   ffe6                                                                                                               
001674   c02b     MOVFF     0x2b,0xfe6                                                                                      
001676   ffe6                                                                                                               
001678   c02c     MOVFF     0x2c,0xfe6                                                                                      
00167a   ffe6                                                                                                               
00167c   ec0b     CALL      0x4416,0x0                                                                                      
00167e   f022                                                                                                               
001680   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001682   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001684   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001686   0012     RETURN    0x0            }                                                                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // A is for read Analog inputs                                                   E:\iroFW\user\user.c
                                           // Just print out the last analog values for each of the                         E:\iroFW\user\user.c
                                           // enabled channels. The number of value returned in the                         E:\iroFW\user\user.c
                                           // A packet depend upon the number of analog inputs enabled.                     E:\iroFW\user\user.c
                                           // The user can enabled any number of analog inputs between                      E:\iroFW\user\user.c
                                           // 0 and 12. (none enabled, through all 12 analog inputs enabled).               E:\iroFW\user\user.c
                                           // Returned packet will look like "A,0,0,0,0,0,0<CR>" if                         E:\iroFW\user\user.c
                                           // six analog inputs are enabled but they are all                                E:\iroFW\user\user.c
                                           // grounded. Note that each one is a 10 bit                                      E:\iroFW\user\user.c
                                           // value, where 0 means the intput was at ground, and                            E:\iroFW\user\user.c
                                           // 1024 means it was at +5 V. (Or whatever the USB +5                            E:\iroFW\user\user.c
                                           // pin is at.)                                                                   E:\iroFW\user\user.c
001688   cfd9     MOVFF     0xfd9,0xfe6    void parse_A_packet(void)                                                        E:\iroFW\user\user.c
00168a   ffe6                                                                                                               
00168c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00168e   ffd9                                                                                                               
001690   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
001692   6adf     CLRF      0xdf,0x0       	char channel = 0;                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Put the beginning of the packet in place                                     E:\iroFW\user\user.c
001694   0ec0     MOVLW     0xc0           	printf ((rom char *)"A");                                                       E:\iroFW\user\user.c
001696   6e2a     MOVWF     0x2a,0x0                                                                                        
001698   0e40     MOVLW     0x40                                                                                            
00169a   6e2b     MOVWF     0x2b,0x0                                                                                        
00169c   6a2c     CLRF      0x2c,0x0                                                                                        
00169e   c02a     MOVFF     0x2a,0xfe6                                                                                      
0016a0   ffe6                                                                                                               
0016a2   c02b     MOVFF     0x2b,0xfe6                                                                                      
0016a4   ffe6                                                                                                               
0016a6   c02c     MOVFF     0x2c,0xfe6                                                                                      
0016a8   ffe6                                                                                                               
0016aa   ec0b     CALL      0x4416,0x0                                                                                      
0016ac   f022                                                                                                               
0016ae   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0016b0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0016b2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	                                                                                E:\iroFW\user\user.c
                                           	// Now add each analog value                                                    E:\iroFW\user\user.c
0016b4   6adf     CLRF      0xdf,0x0       	for (channel = 0; channel < AnalogEnable; channel++)                            E:\iroFW\user\user.c
0016b6   500c     MOVF      0xc,0x0,0x0                                                                                     
0016b8   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0016ba   e232     BC        0x1720                                                                                          
00171c   2adf     INCF      0xdf,0x1,0x0                                                                                    
00171e   d7cb     BRA       0x16b6                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
                                           		printf(                                                                        E:\iroFW\user\user.c
                                           			(rom char *)",%04u"                                                           E:\iroFW\user\user.c
0016bc   cfdf     MOVFF     0xfdf,0x2a     			,ISR_A_FIFO[channel][ISR_A_FIFO_out]                                          E:\iroFW\user\user.c
0016be   f02a                                                                                                               
0016c0   6a2b     CLRF      0x2b,0x0                                                                                        
0016c2   be2a     BTFSC     0x2a,0x7,0x0                                                                                    
0016c4   682b     SETF      0x2b,0x0                                                                                        
0016c6   0e06     MOVLW     0x6                                                                                             
0016c8   022b     MULWF     0x2b,0x0                                                                                        
0016ca   cff3     MOVFF     0xff3,0x2b                                                                                      
0016cc   f02b                                                                                                               
0016ce   0e06     MOVLW     0x6                                                                                             
0016d0   022a     MULWF     0x2a,0x0                                                                                        
0016d2   cff3     MOVFF     0xff3,0x2a                                                                                      
0016d4   f02a                                                                                                               
0016d6   50f4     MOVF      0xf4,0x0,0x0                                                                                    
0016d8   262b     ADDWF     0x2b,0x1,0x0                                                                                    
0016da   0e00     MOVLW     0x0                                                                                             
0016dc   262a     ADDWF     0x2a,0x1,0x0                                                                                    
0016de   0e01     MOVLW     0x1                                                                                             
0016e0   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
0016e2   500a     MOVF      0xa,0x0,0x0                                                                                     
0016e4   0d02     MULLW     0x2                                                                                             
0016e6   502a     MOVF      0x2a,0x0,0x0                                                                                    
0016e8   24f3     ADDWF     0xf3,0x0,0x0                                                                                    
0016ea   6ee9     MOVWF     0xe9,0x0                                                                                        
0016ec   502b     MOVF      0x2b,0x0,0x0                                                                                    
0016ee   20f4     ADDWFC    0xf4,0x0,0x0                                                                                    
0016f0   6eea     MOVWF     0xea,0x0                                                                                        
0016fa   0eba     MOVLW     0xba                                                                                            
0016fc   6e2c     MOVWF     0x2c,0x0                                                                                        
0016fe   0e40     MOVLW     0x40                                                                                            
001700   6e2d     MOVWF     0x2d,0x0                                                                                        
001702   6a2e     CLRF      0x2e,0x0                                                                                        
001704   c02c     MOVFF     0x2c,0xfe6                                                                                      
001706   ffe6                                                                                                               
001708   c02d     MOVFF     0x2d,0xfe6                                                                                      
00170a   ffe6                                                                                                               
00170c   c02e     MOVFF     0x2e,0xfe6                                                                                      
00170e   ffe6                                                                                                               
0016f2   cfee     MOVFF     0xfee,0xfe6    		);                                                                             E:\iroFW\user\user.c
0016f4   ffe6                                                                                                               
0016f6   cfef     MOVFF     0xfef,0xfe6                                                                                     
0016f8   ffe6                                                                                                               
001710   ec0b     CALL      0x4416,0x0                                                                                      
001712   f022                                                                                                               
001714   6e2f     MOVWF     0x2f,0x0                                                                                        
001716   0e05     MOVLW     0x5                                                                                             
001718   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
00171a   502f     MOVF      0x2f,0x0,0x0                                                                                    
                                           	}                                                                               E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
                                           	// Add \r\n and terminating zero.                                               E:\iroFW\user\user.c
001720   0ea1     MOVLW     0xa1           	printf ((rom char *)st_LFCR);                                                   E:\iroFW\user\user.c
001722   6e2a     MOVWF     0x2a,0x0                                                                                        
001724   0e46     MOVLW     0x46                                                                                            
001726   6e2b     MOVWF     0x2b,0x0                                                                                        
001728   6a2c     CLRF      0x2c,0x0                                                                                        
00172a   c02a     MOVFF     0x2a,0xfe6                                                                                      
00172c   ffe6                                                                                                               
00172e   c02b     MOVFF     0x2b,0xfe6                                                                                      
001730   ffe6                                                                                                               
001732   c02c     MOVFF     0x2c,0xfe6                                                                                      
001734   ffe6                                                                                                               
001736   ec0b     CALL      0x4416,0x0                                                                                      
001738   f022                                                                                                               
00173a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00173c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00173e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001740   52e5     MOVF      0xe5,0x1,0x0   }                                                                                E:\iroFW\user\user.c
001742   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001744   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001746   ffd9                                                                                                               
001748   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // MW is for Memory Write                                                        E:\iroFW\user\user.c
                                           // "MW,<location>,<value><CR>"                                                   E:\iroFW\user\user.c
                                           // <location> is a decimal value between 0 and 4096 indicating the RAM address to write to  E:\iroFW\user\user.c
                                           // <value> is a decimal value between 0 and 255 that is the value to write       E:\iroFW\user\user.c
00174a   cfd9     MOVFF     0xfd9,0xfe6    void parse_MW_packet(void)                                                       E:\iroFW\user\user.c
00174c   ffe6                                                                                                               
00174e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001750   ffd9                                                                                                               
001752   0e03     MOVLW     0x3                                                                                             
001754   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	unsigned int location;                                                          E:\iroFW\user\user.c
                                           	unsigned char value;                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
001756   0e03     MOVLW     0x3            	location = extract_number (kUINT);                                              E:\iroFW\user\user.c
001758   6ee6     MOVWF     0xe6,0x0                                                                                        
00175a   ecde     CALL      0x21bc,0x0                                                                                      
00175c   f010                                                                                                               
00175e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001760   c01d     MOVFF     0x1d,0xfde                                                                                      
001762   ffde                                                                                                               
001764   c01e     MOVFF     0x1e,0xfdd                                                                                      
001766   ffdd                                                                                                               
001768   0e01     MOVLW     0x1            	value = extract_number (kUCHAR);                                                E:\iroFW\user\user.c
00176a   6ee6     MOVWF     0xe6,0x0                                                                                        
00176c   ecde     CALL      0x21bc,0x0                                                                                      
00176e   f010                                                                                                               
001770   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001772   0e02     MOVLW     0x2                                                                                             
001774   c01d     MOVFF     0x1d,0xfdb                                                                                      
001776   ffdb                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iroFW\user\user.c
001778   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iroFW\user\user.c
00177a   e001     BZ        0x177e                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
00177c   d011     BRA       0x17a0         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           	// Limit check the address and write the byte in                                E:\iroFW\user\user.c
00177e   cfde     MOVFF     0xfde,0x2a     	if (location < 4096)                                                            E:\iroFW\user\user.c
001780   f02a                                                                                                               
001782   cfdd     MOVFF     0xfdd,0x2b                                                                                      
001784   f02b                                                                                                               
001786   0e00     MOVLW     0x0                                                                                             
001788   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
00178a   0e10     MOVLW     0x10                                                                                            
00178c   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
00178e   e207     BC        0x179e                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001790   cfde     MOVFF     0xfde,0xfe9    		*((unsigned char *)location) = value;                                          E:\iroFW\user\user.c
001792   ffe9                                                                                                               
001794   cfdd     MOVFF     0xfdd,0xfea                                                                                     
001796   ffea                                                                                                               
001798   0e02     MOVLW     0x2                                                                                             
00179a   cfdb     MOVFF     0xfdb,0xfef                                                                                     
00179c   ffef                                                                                                               
                                           	}                                                                               E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
00179e   de1f     RCALL     0x13de         	print_ack ();                                                                   E:\iroFW\user\user.c
0017a0   0e03     MOVLW     0x3            }                                                                                E:\iroFW\user\user.c
0017a2   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0017a4   e202     BC        0x17aa                                                                                          
0017a6   6ae1     CLRF      0xe1,0x0                                                                                        
0017a8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017aa   6ee1     MOVWF     0xe1,0x0                                                                                        
0017ac   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017ae   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0017b0   ffd9                                                                                                               
0017b2   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // MR is for Memory Read                                                         E:\iroFW\user\user.c
                                           // "MW,<location><CR>"                                                           E:\iroFW\user\user.c
                                           // <location> is a decimal value between 0 and 4096 indicating the RAM address to read from  E:\iroFW\user\user.c
                                           // The UBW will then send a "MR,<value><CR>" packet back to the PC               E:\iroFW\user\user.c
                                           // where <value> is the byte value read from the address                         E:\iroFW\user\user.c
0017b4   cfd9     MOVFF     0xfd9,0xfe6    void parse_MR_packet(void)                                                       E:\iroFW\user\user.c
0017b6   ffe6                                                                                                               
0017b8   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0017ba   ffd9                                                                                                               
0017bc   0e03     MOVLW     0x3                                                                                             
0017be   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	unsigned int location;                                                          E:\iroFW\user\user.c
                                           	unsigned char value;                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
0017c0   0e03     MOVLW     0x3            	location = extract_number (kUINT);                                              E:\iroFW\user\user.c
0017c2   6ee6     MOVWF     0xe6,0x0                                                                                        
0017c4   ecde     CALL      0x21bc,0x0                                                                                      
0017c6   f010                                                                                                               
0017c8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017ca   c01d     MOVFF     0x1d,0xfde                                                                                      
0017cc   ffde                                                                                                               
0017ce   c01e     MOVFF     0x1e,0xfdd                                                                                      
0017d0   ffdd                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iroFW\user\user.c
0017d2   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iroFW\user\user.c
0017d4   e001     BZ        0x17d8                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
0017d6   d025     BRA       0x1822         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Limit check the address and write the byte in                                E:\iroFW\user\user.c
0017d8   cfde     MOVFF     0xfde,0x2a     	if (location < 4096)                                                            E:\iroFW\user\user.c
0017da   f02a                                                                                                               
0017dc   cfdd     MOVFF     0xfdd,0x2b                                                                                      
0017de   f02b                                                                                                               
0017e0   0e00     MOVLW     0x0                                                                                             
0017e2   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0017e4   0e10     MOVLW     0x10                                                                                            
0017e6   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
0017e8   e207     BC        0x17f8                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
0017ea   cfde     MOVFF     0xfde,0xfe9    		value = *((unsigned char *)location);                                          E:\iroFW\user\user.c
0017ec   ffe9                                                                                                               
0017ee   cfdd     MOVFF     0xfdd,0xfea                                                                                     
0017f0   ffea                                                                                                               
0017f2   0e02     MOVLW     0x2                                                                                             
0017f4   cfef     MOVFF     0xfef,0xfdb                                                                                     
0017f6   ffdb                                                                                                               
                                           	}                                                                               E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
                                           	// Now send back the MR packet                                                  E:\iroFW\user\user.c
                                           	printf (                                                                        E:\iroFW\user\user.c
                                           		(rom char *)"MR,%03u\r\n"                                                      E:\iroFW\user\user.c
001800   0eb0     MOVLW     0xb0           		,value                                                                         E:\iroFW\user\user.c
001802   6e2a     MOVWF     0x2a,0x0                                                                                        
001804   0e40     MOVLW     0x40                                                                                            
001806   6e2b     MOVWF     0x2b,0x0                                                                                        
001808   6a2c     CLRF      0x2c,0x0                                                                                        
00180a   c02a     MOVFF     0x2a,0xfe6                                                                                      
00180c   ffe6                                                                                                               
00180e   c02b     MOVFF     0x2b,0xfe6                                                                                      
001810   ffe6                                                                                                               
001812   c02c     MOVFF     0x2c,0xfe6                                                                                      
001814   ffe6                                                                                                               
0017f8   0e02     MOVLW     0x2            	);                                                                              E:\iroFW\user\user.c
0017fa   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0017fc   ffe6                                                                                                               
0017fe   6ae6     CLRF      0xe6,0x0                                                                                        
001816   ec0b     CALL      0x4416,0x0                                                                                      
001818   f022                                                                                                               
00181a   6e2d     MOVWF     0x2d,0x0                                                                                        
00181c   0e05     MOVLW     0x5                                                                                             
00181e   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001820   502d     MOVF      0x2d,0x0,0x0                                                                                    
001822   0e03     MOVLW     0x3            }                                                                                E:\iroFW\user\user.c
001824   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001826   e202     BC        0x182c                                                                                          
001828   6ae1     CLRF      0xe1,0x0                                                                                        
00182a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00182c   6ee1     MOVWF     0xe1,0x0                                                                                        
00182e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001830   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001832   ffd9                                                                                                               
001834   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // PD is for Pin Direction                                                       E:\iroFW\user\user.c
                                           // "PD,<port>,<pin>,<direction><CR>"                                             E:\iroFW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                E:\iroFW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to change direction on E:\iroFW\user\user.c
                                           // <direction> is "1" for input, "0" for output                                  E:\iroFW\user\user.c
001836   cfd9     MOVFF     0xfd9,0xfe6    void parse_PD_packet(void)                                                       E:\iroFW\user\user.c
001838   ffe6                                                                                                               
00183a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00183c   ffd9                                                                                                               
00183e   0e03     MOVLW     0x3                                                                                             
001840   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	unsigned char port;                                                             E:\iroFW\user\user.c
                                           	unsigned char pin;                                                              E:\iroFW\user\user.c
                                           	unsigned char direction;                                                        E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
001842   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      E:\iroFW\user\user.c
001844   6ee6     MOVWF     0xe6,0x0                                                                                        
001846   ecde     CALL      0x21bc,0x0                                                                                      
001848   f010                                                                                                               
00184a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00184c   501d     MOVF      0x1d,0x0,0x0                                                                                    
00184e   6edf     MOVWF     0xdf,0x0                                                                                        
001850   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  E:\iroFW\user\user.c
001852   6ee6     MOVWF     0xe6,0x0                                                                                        
001854   ecde     CALL      0x21bc,0x0                                                                                      
001856   f010                                                                                                               
001858   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00185a   0e01     MOVLW     0x1                                                                                             
00185c   c01d     MOVFF     0x1d,0xfdb                                                                                      
00185e   ffdb                                                                                                               
001860   0e01     MOVLW     0x1            	direction = extract_number (kUCHAR);                                            E:\iroFW\user\user.c
001862   6ee6     MOVWF     0xe6,0x0                                                                                        
001864   ecde     CALL      0x21bc,0x0                                                                                      
001866   f010                                                                                                               
001868   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00186a   0e02     MOVLW     0x2                                                                                             
00186c   c01d     MOVFF     0x1d,0xfdb                                                                                      
00186e   ffdb                                                                                                               
                                           	                                                                                E:\iroFW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iroFW\user\user.c
001870   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iroFW\user\user.c
001872   e001     BZ        0x1876                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001874   d072     BRA       0x195a         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Limit check the parameters                                                   E:\iroFW\user\user.c
001876   0e02     MOVLW     0x2            	if (direction > 1)                                                              E:\iroFW\user\user.c
001878   50db     MOVF      0xdb,0x0,0x0                                                                                    
00187a   0801     SUBLW     0x1                                                                                             
00187c   e202     BC        0x1882                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
00187e   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iroFW\user\user.c
001880   d06c     BRA       0x195a         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
001882   0e01     MOVLW     0x1            	if (pin > 7)                                                                    E:\iroFW\user\user.c
001884   50db     MOVF      0xdb,0x0,0x0                                                                                    
001886   0807     SUBLW     0x7                                                                                             
001888   e202     BC        0x188e                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
00188a   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iroFW\user\user.c
00188c   d066     BRA       0x195a         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
00188e   0e41     MOVLW     0x41           	if ('A' == port)                                                                E:\iroFW\user\user.c
001890   6e2a     MOVWF     0x2a,0x0                                                                                        
001892   50df     MOVF      0xdf,0x0,0x0                                                                                    
001894   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001896   e11c     BNZ       0x18d0                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001898   0e02     MOVLW     0x2            		if (0 == direction)                                                            E:\iroFW\user\user.c
00189a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00189c   e10d     BNZ       0x18b8                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
00189e   0e01     MOVLW     0x1            			bitclr (DDRA, pin);  	                                                        E:\iroFW\user\user.c
0018a0   6ef3     MOVWF     0xf3,0x0                                                                                        
0018a2   0e01     MOVLW     0x1                                                                                             
0018a4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0018a6   e004     BZ        0x18b0                                                                                          
0018a8   90d8     BCF       0xd8,0x0,0x0                                                                                    
0018aa   36f3     RLCF      0xf3,0x1,0x0                                                                                    
0018ac   06e8     DECF      0xe8,0x1,0x0                                                                                    
0018ae   e1fc     BNZ       0x18a8                                                                                          
0018b0   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0018b2   1ce8     COMF      0xe8,0x0,0x0                                                                                    
0018b4   1692     ANDWF     0x92,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
0018b6   d00b     BRA       0x18ce         		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
0018b8   0e01     MOVLW     0x1            			bitset (DDRA, pin);  	                                                        E:\iroFW\user\user.c
0018ba   6ef3     MOVWF     0xf3,0x0                                                                                        
0018bc   0e01     MOVLW     0x1                                                                                             
0018be   50db     MOVF      0xdb,0x0,0x0                                                                                    
0018c0   e004     BZ        0x18ca                                                                                          
0018c2   90d8     BCF       0xd8,0x0,0x0                                                                                    
0018c4   36f3     RLCF      0xf3,0x1,0x0                                                                                    
0018c6   06e8     DECF      0xe8,0x1,0x0                                                                                    
0018c8   e1fc     BNZ       0x18c2                                                                                          
0018ca   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0018cc   1292     IORWF     0x92,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
0018ce   d044     BRA       0x1958         	else if ('B' == port)                                                           E:\iroFW\user\user.c
0018d0   0e42     MOVLW     0x42                                                                                            
0018d2   6e2a     MOVWF     0x2a,0x0                                                                                        
0018d4   50df     MOVF      0xdf,0x0,0x0                                                                                    
0018d6   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0018d8   e11c     BNZ       0x1912                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
0018da   0e02     MOVLW     0x2            		if (0 == direction)                                                            E:\iroFW\user\user.c
0018dc   50db     MOVF      0xdb,0x0,0x0                                                                                    
0018de   e10d     BNZ       0x18fa                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
0018e0   0e01     MOVLW     0x1            			bitclr (DDRB, pin);  	                                                        E:\iroFW\user\user.c
0018e2   6ef3     MOVWF     0xf3,0x0                                                                                        
0018e4   0e01     MOVLW     0x1                                                                                             
0018e6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0018e8   e004     BZ        0x18f2                                                                                          
0018ea   90d8     BCF       0xd8,0x0,0x0                                                                                    
0018ec   36f3     RLCF      0xf3,0x1,0x0                                                                                    
0018ee   06e8     DECF      0xe8,0x1,0x0                                                                                    
0018f0   e1fc     BNZ       0x18ea                                                                                          
0018f2   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0018f4   1ce8     COMF      0xe8,0x0,0x0                                                                                    
0018f6   1693     ANDWF     0x93,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
0018f8   d00b     BRA       0x1910         		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
0018fa   0e01     MOVLW     0x1            			bitset (DDRB, pin);  	                                                        E:\iroFW\user\user.c
0018fc   6ef3     MOVWF     0xf3,0x0                                                                                        
0018fe   0e01     MOVLW     0x1                                                                                             
001900   50db     MOVF      0xdb,0x0,0x0                                                                                    
001902   e004     BZ        0x190c                                                                                          
001904   90d8     BCF       0xd8,0x0,0x0                                                                                    
001906   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001908   06e8     DECF      0xe8,0x1,0x0                                                                                    
00190a   e1fc     BNZ       0x1904                                                                                          
00190c   50f3     MOVF      0xf3,0x0,0x0                                                                                    
00190e   1293     IORWF     0x93,0x1,0x0                                                                                    
                                           		}		                                                                            E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
001910   d023     BRA       0x1958         	else if ('C' == port)                                                           E:\iroFW\user\user.c
001912   0e43     MOVLW     0x43                                                                                            
001914   6e2a     MOVWF     0x2a,0x0                                                                                        
001916   50df     MOVF      0xdf,0x0,0x0                                                                                    
001918   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
00191a   e11c     BNZ       0x1954                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
00191c   0e02     MOVLW     0x2            		if (0 == direction)                                                            E:\iroFW\user\user.c
00191e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001920   e10d     BNZ       0x193c                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
001922   0e01     MOVLW     0x1            			bitclr (DDRC, pin);  	                                                        E:\iroFW\user\user.c
001924   6ef3     MOVWF     0xf3,0x0                                                                                        
001926   0e01     MOVLW     0x1                                                                                             
001928   50db     MOVF      0xdb,0x0,0x0                                                                                    
00192a   e004     BZ        0x1934                                                                                          
00192c   90d8     BCF       0xd8,0x0,0x0                                                                                    
00192e   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001930   06e8     DECF      0xe8,0x1,0x0                                                                                    
001932   e1fc     BNZ       0x192c                                                                                          
001934   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001936   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001938   1694     ANDWF     0x94,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
00193a   d00b     BRA       0x1952         		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
00193c   0e01     MOVLW     0x1            			bitset (DDRC, pin);  	                                                        E:\iroFW\user\user.c
00193e   6ef3     MOVWF     0xf3,0x0                                                                                        
001940   0e01     MOVLW     0x1                                                                                             
001942   50db     MOVF      0xdb,0x0,0x0                                                                                    
001944   e004     BZ        0x194e                                                                                          
001946   90d8     BCF       0xd8,0x0,0x0                                                                                    
001948   36f3     RLCF      0xf3,0x1,0x0                                                                                    
00194a   06e8     DECF      0xe8,0x1,0x0                                                                                    
00194c   e1fc     BNZ       0x1946                                                                                          
00194e   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001950   1294     IORWF     0x94,0x1,0x0                                                                                    
                                           		}		                                                                            E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           #ifdef __18F4550                                                                 E:\iroFW\user\user.c
                                           	else if ('D' == port)                                                           E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
                                           		if (0 == direction)                                                            E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			bitclr (DDRD, pin);  	                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			bitset (DDRD, pin);  	                                                        E:\iroFW\user\user.c
                                           		}		                                                                            E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           	else if ('E' == port)                                                           E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
                                           		if (0 == direction)                                                            E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			bitclr (DDRE, pin);  	                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			bitset (DDRE, pin);  	                                                        E:\iroFW\user\user.c
                                           		}		                                                                            E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           #endif                                                                           E:\iroFW\user\user.c
001952   d002     BRA       0x1958         	else                                                                            E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
001954   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iroFW\user\user.c
001956   d001     BRA       0x195a         		return;	                                                                       E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
001958   dd42     RCALL     0x13de         	print_ack ();                                                                   E:\iroFW\user\user.c
00195a   0e03     MOVLW     0x3            }                                                                                E:\iroFW\user\user.c
00195c   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00195e   e202     BC        0x1964                                                                                          
001960   6ae1     CLRF      0xe1,0x0                                                                                        
001962   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001964   6ee1     MOVWF     0xe1,0x0                                                                                        
001966   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001968   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00196a   ffd9                                                                                                               
00196c   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // PI is for Pin Input                                                           E:\iroFW\user\user.c
                                           // "PI,<port>,<pin><CR>"                                                         E:\iroFW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                E:\iroFW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to read             E:\iroFW\user\user.c
                                           // The command returns a "PI,<value><CR>" packet,                                E:\iroFW\user\user.c
                                           // where <value> is the value (0 or 1 for digital, 0 to 1024 for Analog)         E:\iroFW\user\user.c
                                           // value for that pin.                                                           E:\iroFW\user\user.c
00196e   cfd9     MOVFF     0xfd9,0xfe6    void parse_PI_packet(void)                                                       E:\iroFW\user\user.c
001970   ffe6                                                                                                               
001972   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001974   ffd9                                                                                                               
001976   0e03     MOVLW     0x3                                                                                             
001978   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	unsigned char port;                                                             E:\iroFW\user\user.c
                                           	unsigned char pin;                                                              E:\iroFW\user\user.c
00197a   0e02     MOVLW     0x2            	unsigned char value = 0;                                                        E:\iroFW\user\user.c
00197c   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            E:\iroFW\user\user.c
00197e   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      E:\iroFW\user\user.c
001980   6ee6     MOVWF     0xe6,0x0                                                                                        
001982   ecde     CALL      0x21bc,0x0                                                                                      
001984   f010                                                                                                               
001986   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001988   501d     MOVF      0x1d,0x0,0x0                                                                                    
00198a   6edf     MOVWF     0xdf,0x0                                                                                        
00198c   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  E:\iroFW\user\user.c
00198e   6ee6     MOVWF     0xe6,0x0                                                                                        
001990   ecde     CALL      0x21bc,0x0                                                                                      
001992   f010                                                                                                               
001994   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001996   0e01     MOVLW     0x1                                                                                             
001998   c01d     MOVFF     0x1d,0xfdb                                                                                      
00199a   ffdb                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iroFW\user\user.c
00199c   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iroFW\user\user.c
00199e   e001     BZ        0x19a2                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
0019a0   d05c     BRA       0x1a5a         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Limit check the parameters                                                   E:\iroFW\user\user.c
0019a2   0e01     MOVLW     0x1            	if (pin > 7)                                                                    E:\iroFW\user\user.c
0019a4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0019a6   0807     SUBLW     0x7                                                                                             
0019a8   e202     BC        0x19ae                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
0019aa   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iroFW\user\user.c
0019ac   d056     BRA       0x1a5a         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
                                           	// Then test the bit in question based upon port                                E:\iroFW\user\user.c
0019ae   0e41     MOVLW     0x41           	if ('A' == port)                                                                E:\iroFW\user\user.c
0019b0   6e2a     MOVWF     0x2a,0x0                                                                                        
0019b2   50df     MOVF      0xdf,0x0,0x0                                                                                    
0019b4   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0019b6   e110     BNZ       0x19d8                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
0019b8   0e01     MOVLW     0x1            		value = bittst (PORTA, pin);  	                                                E:\iroFW\user\user.c
0019ba   6ef3     MOVWF     0xf3,0x0                                                                                        
0019bc   0e01     MOVLW     0x1                                                                                             
0019be   50db     MOVF      0xdb,0x0,0x0                                                                                    
0019c0   e004     BZ        0x19ca                                                                                          
0019c2   90d8     BCF       0xd8,0x0,0x0                                                                                    
0019c4   36f3     RLCF      0xf3,0x1,0x0                                                                                    
0019c6   06e8     DECF      0xe8,0x1,0x0                                                                                    
0019c8   e1fc     BNZ       0x19c2                                                                                          
0019ca   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0019cc   1480     ANDWF     0x80,0x0,0x0                                                                                    
0019ce   6ee7     MOVWF     0xe7,0x0                                                                                        
0019d0   0e02     MOVLW     0x2                                                                                             
0019d2   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0019d4   ffdb                                                                                                               
                                           	}                                                                               E:\iroFW\user\user.c
0019d6   d02c     BRA       0x1a30         	else if ('B' == port)                                                           E:\iroFW\user\user.c
0019d8   0e42     MOVLW     0x42                                                                                            
0019da   6e2a     MOVWF     0x2a,0x0                                                                                        
0019dc   50df     MOVF      0xdf,0x0,0x0                                                                                    
0019de   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0019e0   e110     BNZ       0x1a02                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
0019e2   0e01     MOVLW     0x1            		value = bittst (PORTB, pin);  	                                                E:\iroFW\user\user.c
0019e4   6ef3     MOVWF     0xf3,0x0                                                                                        
0019e6   0e01     MOVLW     0x1                                                                                             
0019e8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0019ea   e004     BZ        0x19f4                                                                                          
0019ec   90d8     BCF       0xd8,0x0,0x0                                                                                    
0019ee   36f3     RLCF      0xf3,0x1,0x0                                                                                    
0019f0   06e8     DECF      0xe8,0x1,0x0                                                                                    
0019f2   e1fc     BNZ       0x19ec                                                                                          
0019f4   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0019f6   1481     ANDWF     0x81,0x0,0x0                                                                                    
0019f8   6ee7     MOVWF     0xe7,0x0                                                                                        
0019fa   0e02     MOVLW     0x2                                                                                             
0019fc   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0019fe   ffdb                                                                                                               
                                           	}                                                                               E:\iroFW\user\user.c
001a00   d017     BRA       0x1a30         	else if ('C' == port)                                                           E:\iroFW\user\user.c
001a02   0e43     MOVLW     0x43                                                                                            
001a04   6e2a     MOVWF     0x2a,0x0                                                                                        
001a06   50df     MOVF      0xdf,0x0,0x0                                                                                    
001a08   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001a0a   e110     BNZ       0x1a2c                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001a0c   0e01     MOVLW     0x1            		value = bittst (PORTC, pin);  	                                                E:\iroFW\user\user.c
001a0e   6ef3     MOVWF     0xf3,0x0                                                                                        
001a10   0e01     MOVLW     0x1                                                                                             
001a12   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a14   e004     BZ        0x1a1e                                                                                          
001a16   90d8     BCF       0xd8,0x0,0x0                                                                                    
001a18   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001a1a   06e8     DECF      0xe8,0x1,0x0                                                                                    
001a1c   e1fc     BNZ       0x1a16                                                                                          
001a1e   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001a20   1482     ANDWF     0x82,0x0,0x0                                                                                    
001a22   6ee7     MOVWF     0xe7,0x0                                                                                        
001a24   0e02     MOVLW     0x2                                                                                             
001a26   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001a28   ffdb                                                                                                               
                                           	}                                                                               E:\iroFW\user\user.c
                                           #ifdef __18F4550                                                                 E:\iroFW\user\user.c
                                           	else if ('D' == port)                                                           E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
                                           		value = bittst (PORTD, pin);  	                                                E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           	else if ('E' == port)                                                           E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
                                           		value = bittst (PORTE, pin);  	                                                E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           #endif                                                                           E:\iroFW\user\user.c
001a2a   d002     BRA       0x1a30         	else                                                                            E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
001a2c   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iroFW\user\user.c
001a2e   d015     BRA       0x1a5a         		return;	                                                                       E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
                                           	// Now send back our response                                                   E:\iroFW\user\user.c
                                           	printf(                                                                         E:\iroFW\user\user.c
                                           		 (rom char *)"PI,%1u\r\n"                                                      E:\iroFW\user\user.c
001a38   0ea7     MOVLW     0xa7           		,value                                                                         E:\iroFW\user\user.c
001a3a   6e2a     MOVWF     0x2a,0x0                                                                                        
001a3c   0e40     MOVLW     0x40                                                                                            
001a3e   6e2b     MOVWF     0x2b,0x0                                                                                        
001a40   6a2c     CLRF      0x2c,0x0                                                                                        
001a42   c02a     MOVFF     0x2a,0xfe6                                                                                      
001a44   ffe6                                                                                                               
001a46   c02b     MOVFF     0x2b,0xfe6                                                                                      
001a48   ffe6                                                                                                               
001a4a   c02c     MOVFF     0x2c,0xfe6                                                                                      
001a4c   ffe6                                                                                                               
001a30   0e02     MOVLW     0x2            	);                                                                              E:\iroFW\user\user.c
001a32   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001a34   ffe6                                                                                                               
001a36   6ae6     CLRF      0xe6,0x0                                                                                        
001a4e   ec0b     CALL      0x4416,0x0                                                                                      
001a50   f022                                                                                                               
001a52   6e2d     MOVWF     0x2d,0x0                                                                                        
001a54   0e05     MOVLW     0x5                                                                                             
001a56   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001a58   502d     MOVF      0x2d,0x0,0x0                                                                                    
001a5a   0e03     MOVLW     0x3            }                                                                                E:\iroFW\user\user.c
001a5c   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001a5e   e202     BC        0x1a64                                                                                          
001a60   6ae1     CLRF      0xe1,0x0                                                                                        
001a62   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001a64   6ee1     MOVWF     0xe1,0x0                                                                                        
001a66   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001a68   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001a6a   ffd9                                                                                                               
001a6c   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // PO is for Pin Output                                                          E:\iroFW\user\user.c
                                           // "PO,<port>,<pin>,<value><CR>"                                                 E:\iroFW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                E:\iroFW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to write out the value to E:\iroFW\user\user.c
                                           // <value> is "1" or "0" and indicates the state to change the pin to            E:\iroFW\user\user.c
001a6e   cfd9     MOVFF     0xfd9,0xfe6    void parse_PO_packet(void)                                                       E:\iroFW\user\user.c
001a70   ffe6                                                                                                               
001a72   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001a74   ffd9                                                                                                               
001a76   0e03     MOVLW     0x3                                                                                             
001a78   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	unsigned char port;                                                             E:\iroFW\user\user.c
                                           	unsigned char pin;                                                              E:\iroFW\user\user.c
                                           	unsigned char value;                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
001a7a   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      E:\iroFW\user\user.c
001a7c   6ee6     MOVWF     0xe6,0x0                                                                                        
001a7e   db9e     RCALL     0x21bc                                                                                          
001a80   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001a82   501d     MOVF      0x1d,0x0,0x0                                                                                    
001a84   6edf     MOVWF     0xdf,0x0                                                                                        
001a86   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  E:\iroFW\user\user.c
001a88   6ee6     MOVWF     0xe6,0x0                                                                                        
001a8a   db98     RCALL     0x21bc                                                                                          
001a8c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001a8e   0e01     MOVLW     0x1                                                                                             
001a90   c01d     MOVFF     0x1d,0xfdb                                                                                      
001a92   ffdb                                                                                                               
001a94   0e01     MOVLW     0x1            	value = extract_number (kUCHAR);                                                E:\iroFW\user\user.c
001a96   6ee6     MOVWF     0xe6,0x0                                                                                        
001a98   db91     RCALL     0x21bc                                                                                          
001a9a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001a9c   0e02     MOVLW     0x2                                                                                             
001a9e   c01d     MOVFF     0x1d,0xfdb                                                                                      
001aa0   ffdb                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iroFW\user\user.c
001aa2   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iroFW\user\user.c
001aa4   e001     BZ        0x1aa8                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001aa6   d072     BRA       0x1b8c         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Limit check the parameters                                                   E:\iroFW\user\user.c
001aa8   0e02     MOVLW     0x2            	if (value > 1)                                                                  E:\iroFW\user\user.c
001aaa   50db     MOVF      0xdb,0x0,0x0                                                                                    
001aac   0801     SUBLW     0x1                                                                                             
001aae   e202     BC        0x1ab4                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001ab0   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iroFW\user\user.c
001ab2   d06c     BRA       0x1b8c         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
001ab4   0e01     MOVLW     0x1            	if (pin > 7)                                                                    E:\iroFW\user\user.c
001ab6   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ab8   0807     SUBLW     0x7                                                                                             
001aba   e202     BC        0x1ac0                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001abc   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iroFW\user\user.c
001abe   d066     BRA       0x1b8c         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
001ac0   0e41     MOVLW     0x41           	if ('A' == port)                                                                E:\iroFW\user\user.c
001ac2   6e2a     MOVWF     0x2a,0x0                                                                                        
001ac4   50df     MOVF      0xdf,0x0,0x0                                                                                    
001ac6   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001ac8   e11c     BNZ       0x1b02                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001aca   0e02     MOVLW     0x2            		if (0 == value)                                                                E:\iroFW\user\user.c
001acc   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ace   e10d     BNZ       0x1aea                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
001ad0   0e01     MOVLW     0x1            			bitclr (LATA, pin);  	                                                        E:\iroFW\user\user.c
001ad2   6ef3     MOVWF     0xf3,0x0                                                                                        
001ad4   0e01     MOVLW     0x1                                                                                             
001ad6   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ad8   e004     BZ        0x1ae2                                                                                          
001ada   90d8     BCF       0xd8,0x0,0x0                                                                                    
001adc   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001ade   06e8     DECF      0xe8,0x1,0x0                                                                                    
001ae0   e1fc     BNZ       0x1ada                                                                                          
001ae2   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001ae4   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001ae6   1689     ANDWF     0x89,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
001ae8   d00b     BRA       0x1b00         		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
001aea   0e01     MOVLW     0x1            			bitset (LATA, pin);  	                                                        E:\iroFW\user\user.c
001aec   6ef3     MOVWF     0xf3,0x0                                                                                        
001aee   0e01     MOVLW     0x1                                                                                             
001af0   50db     MOVF      0xdb,0x0,0x0                                                                                    
001af2   e004     BZ        0x1afc                                                                                          
001af4   90d8     BCF       0xd8,0x0,0x0                                                                                    
001af6   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001af8   06e8     DECF      0xe8,0x1,0x0                                                                                    
001afa   e1fc     BNZ       0x1af4                                                                                          
001afc   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001afe   1289     IORWF     0x89,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
001b00   d044     BRA       0x1b8a         	else if ('B' == port)                                                           E:\iroFW\user\user.c
001b02   0e42     MOVLW     0x42                                                                                            
001b04   6e2a     MOVWF     0x2a,0x0                                                                                        
001b06   50df     MOVF      0xdf,0x0,0x0                                                                                    
001b08   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001b0a   e11c     BNZ       0x1b44                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001b0c   0e02     MOVLW     0x2            		if (0 == value)                                                                E:\iroFW\user\user.c
001b0e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b10   e10d     BNZ       0x1b2c                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
001b12   0e01     MOVLW     0x1            			bitclr (LATB, pin);  	                                                        E:\iroFW\user\user.c
001b14   6ef3     MOVWF     0xf3,0x0                                                                                        
001b16   0e01     MOVLW     0x1                                                                                             
001b18   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b1a   e004     BZ        0x1b24                                                                                          
001b1c   90d8     BCF       0xd8,0x0,0x0                                                                                    
001b1e   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001b20   06e8     DECF      0xe8,0x1,0x0                                                                                    
001b22   e1fc     BNZ       0x1b1c                                                                                          
001b24   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001b26   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001b28   168a     ANDWF     0x8a,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
001b2a   d00b     BRA       0x1b42         		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
001b2c   0e01     MOVLW     0x1            			bitset (LATB, pin);  	                                                        E:\iroFW\user\user.c
001b2e   6ef3     MOVWF     0xf3,0x0                                                                                        
001b30   0e01     MOVLW     0x1                                                                                             
001b32   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b34   e004     BZ        0x1b3e                                                                                          
001b36   90d8     BCF       0xd8,0x0,0x0                                                                                    
001b38   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001b3a   06e8     DECF      0xe8,0x1,0x0                                                                                    
001b3c   e1fc     BNZ       0x1b36                                                                                          
001b3e   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001b40   128a     IORWF     0x8a,0x1,0x0                                                                                    
                                           		}		                                                                            E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
001b42   d023     BRA       0x1b8a         	else if ('C' == port)                                                           E:\iroFW\user\user.c
001b44   0e43     MOVLW     0x43                                                                                            
001b46   6e2a     MOVWF     0x2a,0x0                                                                                        
001b48   50df     MOVF      0xdf,0x0,0x0                                                                                    
001b4a   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001b4c   e11c     BNZ       0x1b86                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001b4e   0e02     MOVLW     0x2            		if (0 == value)                                                                E:\iroFW\user\user.c
001b50   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b52   e10d     BNZ       0x1b6e                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
001b54   0e01     MOVLW     0x1            			bitclr (LATC, pin);  	                                                        E:\iroFW\user\user.c
001b56   6ef3     MOVWF     0xf3,0x0                                                                                        
001b58   0e01     MOVLW     0x1                                                                                             
001b5a   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b5c   e004     BZ        0x1b66                                                                                          
001b5e   90d8     BCF       0xd8,0x0,0x0                                                                                    
001b60   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001b62   06e8     DECF      0xe8,0x1,0x0                                                                                    
001b64   e1fc     BNZ       0x1b5e                                                                                          
001b66   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001b68   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001b6a   168b     ANDWF     0x8b,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
001b6c   d00b     BRA       0x1b84         		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
001b6e   0e01     MOVLW     0x1            			bitset (LATC, pin);  	                                                        E:\iroFW\user\user.c
001b70   6ef3     MOVWF     0xf3,0x0                                                                                        
001b72   0e01     MOVLW     0x1                                                                                             
001b74   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b76   e004     BZ        0x1b80                                                                                          
001b78   90d8     BCF       0xd8,0x0,0x0                                                                                    
001b7a   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001b7c   06e8     DECF      0xe8,0x1,0x0                                                                                    
001b7e   e1fc     BNZ       0x1b78                                                                                          
001b80   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001b82   128b     IORWF     0x8b,0x1,0x0                                                                                    
                                           		}		                                                                            E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           #ifdef __18F4550                                                                 E:\iroFW\user\user.c
                                           	else if ('D' == port)                                                           E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
                                           		if (0 == value)                                                                E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			bitclr (LATD, pin);  	                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			bitset (LATD, pin);  	                                                        E:\iroFW\user\user.c
                                           		}		                                                                            E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           	else if ('E' == port)                                                           E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
                                           		if (0 == value)                                                                E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			bitclr (LATE, pin);  	                                                        E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			bitset (LATE, pin);  	                                                        E:\iroFW\user\user.c
                                           		}		                                                                            E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           #endif                                                                           E:\iroFW\user\user.c
001b84   d002     BRA       0x1b8a         	else                                                                            E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
001b86   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iroFW\user\user.c
001b88   d001     BRA       0x1b8c         		return;	                                                                       E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
001b8a   dc29     RCALL     0x13de         	print_ack ();                                                                   E:\iroFW\user\user.c
001b8c   0e03     MOVLW     0x3            }                                                                                E:\iroFW\user\user.c
001b8e   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001b90   e202     BC        0x1b96                                                                                          
001b92   6ae1     CLRF      0xe1,0x0                                                                                        
001b94   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001b96   6ee1     MOVWF     0xe1,0x0                                                                                        
001b98   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001b9a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001b9c   ffd9                                                                                                               
001b9e   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // TX is for Serial Transmit                                                     E:\iroFW\user\user.c
                                           // "TX,<data_length>,<variable_length_data><CR>"                                 E:\iroFW\user\user.c
                                           // <data_length> is a count of the number of bytes in the <variable_length_data> field. E:\iroFW\user\user.c
                                           // It must never be larger than the number of bytes that are currently free in the E:\iroFW\user\user.c
                                           // software TX buffer or some data will get lost.                                E:\iroFW\user\user.c
                                           // <variable_length_data> are the bytes that you want the UBW to send. It will store them E:\iroFW\user\user.c
                                           // in its software TX buffer until there is time to send them out the TX pin.    E:\iroFW\user\user.c
                                           // If you send in "0" for a <data_length" (and thus nothing for <variable_length_data> E:\iroFW\user\user.c
                                           // then the UBW will send back a "TX,<free_buffer_space><CR>" packet,            E:\iroFW\user\user.c
                                           // where <free_buffer_space> is the number of bytes currently available in the   E:\iroFW\user\user.c
                                           // software TX buffer.                                                           E:\iroFW\user\user.c
                                           void parse_TX_packet(void)                                                       E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
001ba0   dc1e     RCALL     0x13de         	print_ack ();                                                                   E:\iroFW\user\user.c
001ba2   0012     RETURN    0x0            }                                                                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // RX is for Serial Receive                                                      E:\iroFW\user\user.c
                                           // "RX,<length_request><CR>"                                                     E:\iroFW\user\user.c
                                           // <length_request> is the maximum number of characters that you want the UBW to send E:\iroFW\user\user.c
                                           // back to you in the RX packet. If you use "0" for <length_request> then the UBW E:\iroFW\user\user.c
                                           // will just send you the current number of bytes in it's RX buffer, and if      E:\iroFW\user\user.c
                                           // there have been any buffer overruns since the last time a <length_request> of  E:\iroFW\user\user.c
                                           // "0" was received by the UBW.                                                  E:\iroFW\user\user.c
                                           // This command will send back a "RX,<length>,<variable_length_data><CR>"        E:\iroFW\user\user.c
                                           // or "RX,<buffer_fullness>,<status><CR>" packet depending upon if you send      E:\iroFW\user\user.c
                                           // "0" or something else for <length_request>                                    E:\iroFW\user\user.c
                                           // <length> in the returning RX packet is a count of the number of bytes         E:\iroFW\user\user.c
                                           // in the <variable_length_data> field. It will never be more than the           E:\iroFW\user\user.c
                                           // <length_request> you sent in.                                                 E:\iroFW\user\user.c
                                           // <variable_length_data> is the data (in raw form - byte for byte what was received -  E:\iroFW\user\user.c
                                           // i.e. not translated in any way, into ASCII values or anything else) that the UBW E:\iroFW\user\user.c
                                           // received. This may include <CR>s and NULLs among any other bytes, so make sure E:\iroFW\user\user.c
                                           // your PC application treates the RX packet coming back from the UBW in a speical way E:\iroFW\user\user.c
                                           // so as not to screw up normal packet processing if any special caracters are received. E:\iroFW\user\user.c
                                           // <buffer_fullness> is a valule between 0 and MAX_SERIAL_RX_BUFFER_SIZE that records E:\iroFW\user\user.c
                                           // the total number of bytes, at that point in time, that the UBW is holding, waiting E:\iroFW\user\user.c
                                           // to pass on to the PC.                                                         E:\iroFW\user\user.c
                                           // <status> has several bits.                                                    E:\iroFW\user\user.c
                                           //	Bit 0 = Software RX Buffer Overrun (1 means software RX buffer (on RX pin)    E:\iroFW\user\user.c
                                           //		has been overrun and data has been lost) This will happen if you don't       E:\iroFW\user\user.c
                                           //		read the data out of the UWB often enough and the data is coming in too fast. E:\iroFW\user\user.c
                                           //	Bit 1 = Software TX Buffer Overrun (1 means software TX buffer (on TX pin)    E:\iroFW\user\user.c
                                           //		as been overrun and data hs been lost. This will happen if you send too much E:\iroFW\user\user.c
                                           //		data to the UBW and you have the serial port set to a low baud rate.         E:\iroFW\user\user.c
                                           void parse_RX_packet(void)                                                       E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
001ba4   dc1c     RCALL     0x13de         	print_ack ();                                                                   E:\iroFW\user\user.c
001ba6   0012     RETURN    0x0            }                                                                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // CX is for setting up serial port parameters                                   E:\iroFW\user\user.c
                                           // TBD                                                                           E:\iroFW\user\user.c
                                           void parse_CX_packet(void)                                                       E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
001ba8   dc1a     RCALL     0x13de         	print_ack ();                                                                   E:\iroFW\user\user.c
001baa   0012     RETURN    0x0            }                                                                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // RC is for outputting RC servo pulses on a pin                                 E:\iroFW\user\user.c
                                           // "RC,<port>,<pin>,<value><CR>"                                                 E:\iroFW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                E:\iroFW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to output the new value on E:\iroFW\user\user.c
                                           // <value> is an unsigned 16 bit number between 0 and 11890.                     E:\iroFW\user\user.c
                                           // If <value> is "0" then the RC output on that pin is disabled.                 E:\iroFW\user\user.c
                                           // Otherwise <value> = 1 means 1ms pulse, <value> = 11890 means 2ms pulse,       E:\iroFW\user\user.c
                                           // any value inbetween means proportional pulse values between those two         E:\iroFW\user\user.c
                                           // Note: The pin used for RC output must be set as an output, or not much will happen. E:\iroFW\user\user.c
                                           // The RC command will continue to send out pulses at the last set value on      E:\iroFW\user\user.c
                                           // each pin that has RC output with a repition rate of 1 pulse about every 19ms. E:\iroFW\user\user.c
                                           // If you have RC output enabled on a pin, outputting a digital value to that pin E:\iroFW\user\user.c
                                           // will be overwritten the next time the RC pulses. Make sure to turn off the RC E:\iroFW\user\user.c
                                           // output if you want to use the pin for something else.                         E:\iroFW\user\user.c
001bac   cfd9     MOVFF     0xfd9,0xfe6    void parse_RC_packet(void)                                                       E:\iroFW\user\user.c
001bae   ffe6                                                                                                               
001bb0   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001bb2   ffd9                                                                                                               
001bb4   0e04     MOVLW     0x4                                                                                             
001bb6   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	unsigned char port;                                                             E:\iroFW\user\user.c
                                           	unsigned char pin;                                                              E:\iroFW\user\user.c
                                           	unsigned int value;                                                             E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
001bb8   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      E:\iroFW\user\user.c
001bba   6ee6     MOVWF     0xe6,0x0                                                                                        
001bbc   daff     RCALL     0x21bc                                                                                          
001bbe   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001bc0   501d     MOVF      0x1d,0x0,0x0                                                                                    
001bc2   6edf     MOVWF     0xdf,0x0                                                                                        
001bc4   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  E:\iroFW\user\user.c
001bc6   6ee6     MOVWF     0xe6,0x0                                                                                        
001bc8   daf9     RCALL     0x21bc                                                                                          
001bca   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001bcc   0e01     MOVLW     0x1                                                                                             
001bce   c01d     MOVFF     0x1d,0xfdb                                                                                      
001bd0   ffdb                                                                                                               
001bd2   0e03     MOVLW     0x3            	value = extract_number (kUINT);                                                 E:\iroFW\user\user.c
001bd4   6ee6     MOVWF     0xe6,0x0                                                                                        
001bd6   daf2     RCALL     0x21bc                                                                                          
001bd8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001bda   0e02     MOVLW     0x2                                                                                             
001bdc   c01d     MOVFF     0x1d,0xfdb                                                                                      
001bde   ffdb                                                                                                               
001be0   0e03     MOVLW     0x3                                                                                             
001be2   c01e     MOVFF     0x1e,0xfdb                                                                                      
001be4   ffdb                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iroFW\user\user.c
001be6   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iroFW\user\user.c
001be8   e001     BZ        0x1bec                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001bea   d07b     BRA       0x1ce2         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Max value user can input. (min is zero)                                      E:\iroFW\user\user.c
001bec   50d9     MOVF      0xd9,0x0,0x0   	if (value > 11890)                                                              E:\iroFW\user\user.c
001bee   0f02     ADDLW     0x2                                                                                             
001bf0   6ee9     MOVWF     0xe9,0x0                                                                                        
001bf2   cfda     MOVFF     0xfda,0xfea                                                                                     
001bf4   ffea                                                                                                               
001bf6   0e72     MOVLW     0x72                                                                                            
001bf8   80d8     BSF       0xd8,0x0,0x0                                                                                    
001bfa   54ee     SUBFWB    0xee,0x0,0x0                                                                                    
001bfc   0e2e     MOVLW     0x2e                                                                                            
001bfe   54ed     SUBFWB    0xed,0x0,0x0                                                                                    
001c00   e202     BC        0x1c06                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001c02   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iroFW\user\user.c
001c04   d06e     BRA       0x1ce2         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
                                           	// Now get Value in the form that TMR0 needs it                                 E:\iroFW\user\user.c
                                           	// TMR0 needs to get filled with values from 65490 (1ms) to 53600 (2ms)         E:\iroFW\user\user.c
001c06   50d9     MOVF      0xd9,0x0,0x0   	if (value != 0)                                                                 E:\iroFW\user\user.c
001c08   0f02     ADDLW     0x2                                                                                             
001c0a   6ee9     MOVWF     0xe9,0x0                                                                                        
001c0c   cfda     MOVFF     0xfda,0xfea                                                                                     
001c0e   ffea                                                                                                               
001c10   50ee     MOVF      0xee,0x0,0x0                                                                                    
001c12   10ed     IORWF     0xed,0x0,0x0                                                                                    
001c14   e01f     BZ        0x1c54                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001c16   682d     SETF      0x2d,0x0       		value = (65535 - (value + 45));                                                E:\iroFW\user\user.c
001c18   682e     SETF      0x2e,0x0                                                                                        
001c1a   6a2f     CLRF      0x2f,0x0                                                                                        
001c1c   0e2d     MOVLW     0x2d                                                                                            
001c1e   6ee7     MOVWF     0xe7,0x0                                                                                        
001c20   0e02     MOVLW     0x2                                                                                             
001c22   cfdb     MOVFF     0xfdb,0x30                                                                                      
001c24   f030                                                                                                               
001c26   0e03     MOVLW     0x3                                                                                             
001c28   cfdb     MOVFF     0xfdb,0x31                                                                                      
001c2a   f031                                                                                                               
001c2c   50e7     MOVF      0xe7,0x0,0x0                                                                                    
001c2e   2630     ADDWF     0x30,0x1,0x0                                                                                    
001c30   0e00     MOVLW     0x0                                                                                             
001c32   2231     ADDWFC    0x31,0x1,0x0                                                                                    
001c34   6a32     CLRF      0x32,0x0                                                                                        
001c36   5030     MOVF      0x30,0x0,0x0                                                                                    
001c38   5c2d     SUBWF     0x2d,0x0,0x0                                                                                    
001c3a   6e2a     MOVWF     0x2a,0x0                                                                                        
001c3c   5031     MOVF      0x31,0x0,0x0                                                                                    
001c3e   582e     SUBWFB    0x2e,0x0,0x0                                                                                    
001c40   6e2b     MOVWF     0x2b,0x0                                                                                        
001c42   5032     MOVF      0x32,0x0,0x0                                                                                    
001c44   582f     SUBWFB    0x2f,0x0,0x0                                                                                    
001c46   6e2c     MOVWF     0x2c,0x0                                                                                        
001c48   0e02     MOVLW     0x2                                                                                             
001c4a   c02a     MOVFF     0x2a,0xfdb                                                                                      
001c4c   ffdb                                                                                                               
001c4e   0e03     MOVLW     0x3                                                                                             
001c50   c02b     MOVFF     0x2b,0xfdb                                                                                      
001c52   ffdb                                                                                                               
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
001c54   0e01     MOVLW     0x1            	if (pin > 7)                                                                    E:\iroFW\user\user.c
001c56   50db     MOVF      0xdb,0x0,0x0                                                                                    
001c58   0807     SUBLW     0x7                                                                                             
001c5a   e202     BC        0x1c60                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001c5c   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iroFW\user\user.c
001c5e   d041     BRA       0x1ce2         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
001c60   0e41     MOVLW     0x41           	if ('A' == port)                                                                E:\iroFW\user\user.c
001c62   6e2a     MOVWF     0x2a,0x0                                                                                        
001c64   50df     MOVF      0xdf,0x0,0x0                                                                                    
001c66   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001c68   e102     BNZ       0x1c6e                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001c6a   6adf     CLRF      0xdf,0x0       		port = 0;                                                                      E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
001c6c   d012     BRA       0x1c92         	else if ('B' == port)                                                           E:\iroFW\user\user.c
001c6e   0e42     MOVLW     0x42                                                                                            
001c70   6e2a     MOVWF     0x2a,0x0                                                                                        
001c72   50df     MOVF      0xdf,0x0,0x0                                                                                    
001c74   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001c76   e103     BNZ       0x1c7e                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001c78   0e08     MOVLW     0x8            		port = 8;                                                                      E:\iroFW\user\user.c
001c7a   6edf     MOVWF     0xdf,0x0                                                                                        
                                           	}                                                                               E:\iroFW\user\user.c
001c7c   d00a     BRA       0x1c92         	else if ('C' == port)                                                           E:\iroFW\user\user.c
001c7e   0e43     MOVLW     0x43                                                                                            
001c80   6e2a     MOVWF     0x2a,0x0                                                                                        
001c82   50df     MOVF      0xdf,0x0,0x0                                                                                    
001c84   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001c86   e103     BNZ       0x1c8e                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001c88   0e10     MOVLW     0x10           		port = 16;                                                                     E:\iroFW\user\user.c
001c8a   6edf     MOVWF     0xdf,0x0                                                                                        
                                           	}                                                                               E:\iroFW\user\user.c
001c8c   d002     BRA       0x1c92         	else                                                                            E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
001c8e   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iroFW\user\user.c
001c90   d028     BRA       0x1ce2         		return;	                                                                       E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Store the new RC time value                                                  E:\iroFW\user\user.c
001c92   0e01     MOVLW     0x1            	g_RC_value[pin + port] = value;                                                 E:\iroFW\user\user.c
001c94   50db     MOVF      0xdb,0x0,0x0                                                                                    
001c96   24df     ADDWF     0xdf,0x0,0x0                                                                                    
001c98   6ee9     MOVWF     0xe9,0x0                                                                                        
001c9a   6aea     CLRF      0xea,0x0                                                                                        
001c9c   90d8     BCF       0xd8,0x0,0x0                                                                                    
001c9e   36e9     RLCF      0xe9,0x1,0x0                                                                                    
001ca0   36ea     RLCF      0xea,0x1,0x0                                                                                    
001ca2   0e69     MOVLW     0x69                                                                                            
001ca4   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
001ca6   0e01     MOVLW     0x1                                                                                             
001ca8   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001caa   0e02     MOVLW     0x2                                                                                             
001cac   cfdb     MOVFF     0xfdb,0xfee                                                                                     
001cae   ffee                                                                                                               
001cb0   0e03     MOVLW     0x3                                                                                             
001cb2   cfdb     MOVFF     0xfdb,0xfed                                                                                     
001cb4   ffed                                                                                                               
                                           	// Only set this state if we are off - if we are already running on             E:\iroFW\user\user.c
                                           	// this pin, then the new value will be picked up next time around (19ms)       E:\iroFW\user\user.c
001cb6   0e01     MOVLW     0x1            	if (kOFF == g_RC_state[pin + port])                                             E:\iroFW\user\user.c
001cb8   50db     MOVF      0xdb,0x0,0x0                                                                                    
001cba   24df     ADDWF     0xdf,0x0,0x0                                                                                    
001cbc   6aea     CLRF      0xea,0x0                                                                                        
001cbe   0f51     ADDLW     0x51                                                                                            
001cc0   6ee9     MOVWF     0xe9,0x0                                                                                        
001cc2   0e01     MOVLW     0x1                                                                                             
001cc4   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001cc6   04ef     DECF      0xef,0x0,0x0                                                                                    
001cc8   e10a     BNZ       0x1cde                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001cca   0e01     MOVLW     0x1            		g_RC_state[pin + port] = kWAITING;                                             E:\iroFW\user\user.c
001ccc   50db     MOVF      0xdb,0x0,0x0                                                                                    
001cce   24df     ADDWF     0xdf,0x0,0x0                                                                                    
001cd0   6aea     CLRF      0xea,0x0                                                                                        
001cd2   0f51     ADDLW     0x51                                                                                            
001cd4   6ee9     MOVWF     0xe9,0x0                                                                                        
001cd6   0e01     MOVLW     0x1                                                                                             
001cd8   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001cda   0e02     MOVLW     0x2                                                                                             
001cdc   6eef     MOVWF     0xef,0x0                                                                                        
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
001cde   ecef     CALL      0x13de,0x0     	print_ack ();                                                                   E:\iroFW\user\user.c
001ce0   f009                                                                                                               
001ce2   0e04     MOVLW     0x4            }                                                                                E:\iroFW\user\user.c
001ce4   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001ce6   e202     BC        0x1cec                                                                                          
001ce8   6ae1     CLRF      0xe1,0x0                                                                                        
001cea   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001cec   6ee1     MOVWF     0xe1,0x0                                                                                        
001cee   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001cf0   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001cf2   ffd9                                                                                                               
001cf4   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // BC is for Bulk Configure                                                      E:\iroFW\user\user.c
                                           // BC,<port A init>,<waitmask>,<wait delay>,<strobemask>,<strobe delay><CR>      E:\iroFW\user\user.c
                                           // This command sets up the mask and strobe bits on port A for the               E:\iroFW\user\user.c
                                           // BO (Bulk Output) command below. Also suck in wait delay, strobe delay, etc.   E:\iroFW\user\user.c
001cf6   cfd9     MOVFF     0xfd9,0xfe6    void parse_BC_packet(void)                                                       E:\iroFW\user\user.c
001cf8   ffe6                                                                                                               
001cfa   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001cfc   ffd9                                                                                                               
001cfe   0e05     MOVLW     0x5                                                                                             
001d00   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	unsigned char BO_init;                                                          E:\iroFW\user\user.c
                                           	unsigned char BO_strobe_mask;                                                   E:\iroFW\user\user.c
                                           	unsigned char BO_wait_mask;                                                     E:\iroFW\user\user.c
                                           	unsigned char BO_wait_delay;                                                    E:\iroFW\user\user.c
                                           	unsigned char BO_strobe_delay;                                                  E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
001d02   0e01     MOVLW     0x1            	BO_init = extract_number (kUCHAR);                                              E:\iroFW\user\user.c
001d04   6ee6     MOVWF     0xe6,0x0                                                                                        
001d06   da5a     RCALL     0x21bc                                                                                          
001d08   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d0a   501d     MOVF      0x1d,0x0,0x0                                                                                    
001d0c   6edf     MOVWF     0xdf,0x0                                                                                        
001d0e   0e01     MOVLW     0x1            	BO_wait_mask = extract_number (kUCHAR);                                         E:\iroFW\user\user.c
001d10   6ee6     MOVWF     0xe6,0x0                                                                                        
001d12   da54     RCALL     0x21bc                                                                                          
001d14   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d16   0e02     MOVLW     0x2                                                                                             
001d18   c01d     MOVFF     0x1d,0xfdb                                                                                      
001d1a   ffdb                                                                                                               
001d1c   0e01     MOVLW     0x1            	BO_wait_delay = extract_number (kUCHAR);                                        E:\iroFW\user\user.c
001d1e   6ee6     MOVWF     0xe6,0x0                                                                                        
001d20   da4d     RCALL     0x21bc                                                                                          
001d22   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d24   0e03     MOVLW     0x3                                                                                             
001d26   c01d     MOVFF     0x1d,0xfdb                                                                                      
001d28   ffdb                                                                                                               
001d2a   0e01     MOVLW     0x1            	BO_strobe_mask = extract_number (kUCHAR);                                       E:\iroFW\user\user.c
001d2c   6ee6     MOVWF     0xe6,0x0                                                                                        
001d2e   da46     RCALL     0x21bc                                                                                          
001d30   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d32   0e01     MOVLW     0x1                                                                                             
001d34   c01d     MOVFF     0x1d,0xfdb                                                                                      
001d36   ffdb                                                                                                               
001d38   0e01     MOVLW     0x1            	BO_strobe_delay = extract_number (kUCHAR);                                      E:\iroFW\user\user.c
001d3a   6ee6     MOVWF     0xe6,0x0                                                                                        
001d3c   da3f     RCALL     0x21bc                                                                                          
001d3e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d40   0e04     MOVLW     0x4                                                                                             
001d42   c01d     MOVFF     0x1d,0xfdb                                                                                      
001d44   ffdb                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
                                           	// Bail if we got a conversion error                                            E:\iroFW\user\user.c
001d46   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 E:\iroFW\user\user.c
001d48   e001     BZ        0x1d4c                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001d4a   d012     BRA       0x1d70         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Copy over values to their gloabls                                            E:\iroFW\user\user.c
001d4c   cfdf     MOVFF     0xfdf,0x199    	g_BO_init = BO_init;                                                            E:\iroFW\user\user.c
001d4e   f199                                                                                                               
001d50   0e02     MOVLW     0x2            	g_BO_wait_mask = BO_wait_mask;                                                  E:\iroFW\user\user.c
001d52   cfdb     MOVFF     0xfdb,0x19b                                                                                     
001d54   f19b                                                                                                               
001d56   0e01     MOVLW     0x1            	g_BO_strobe_mask = BO_strobe_mask;                                              E:\iroFW\user\user.c
001d58   cfdb     MOVFF     0xfdb,0x19a                                                                                     
001d5a   f19a                                                                                                               
001d5c   0e03     MOVLW     0x3            	g_BO_wait_delay = BO_wait_delay;                                                E:\iroFW\user\user.c
001d5e   cfdb     MOVFF     0xfdb,0x19c                                                                                     
001d60   f19c                                                                                                               
001d62   0e04     MOVLW     0x4            	g_BO_strobe_delay = BO_strobe_delay;                                            E:\iroFW\user\user.c
001d64   cfdb     MOVFF     0xfdb,0x19d                                                                                     
001d66   f19d                                                                                                               
                                           	// And initalize Port A                                                         E:\iroFW\user\user.c
001d68   c199     MOVFF     0x199,0xf89    	LATA = g_BO_init;                                                               E:\iroFW\user\user.c
001d6a   ff89                                                                                                               
                                           	                                                                                E:\iroFW\user\user.c
001d6c   ecef     CALL      0x13de,0x0     	print_ack ();                                                                   E:\iroFW\user\user.c
001d6e   f009                                                                                                               
001d70   0e05     MOVLW     0x5            }                                                                                E:\iroFW\user\user.c
001d72   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001d74   e202     BC        0x1d7a                                                                                          
001d76   6ae1     CLRF      0xe1,0x0                                                                                        
001d78   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d7a   6ee1     MOVWF     0xe1,0x0                                                                                        
001d7c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d7e   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001d80   ffd9                                                                                                               
001d82   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // Bulk Output (BO)                                                              E:\iroFW\user\user.c
                                           // BO,4AF2C124<CR>                                                               E:\iroFW\user\user.c
                                           // After the inital comma, pull in hex values and spit them out to port A        E:\iroFW\user\user.c
                                           // Note that the procedure here is as follows:                                   E:\iroFW\user\user.c
                                           //	1) Write new value to PortB                                                   E:\iroFW\user\user.c
                                           //	2) Assert <strobemask>                                                        E:\iroFW\user\user.c
                                           //	3) Wait for <strobdelay> (if not zero)                                        E:\iroFW\user\user.c
                                           //	4) Deassert <strobemask>                                                      E:\iroFW\user\user.c
                                           //	5) Wait for <waitmask> to be asserted                                         E:\iroFW\user\user.c
                                           //	6) Wait for <waitmask> to be deasserted                                       E:\iroFW\user\user.c
                                           //	7) If 5) or 6) takes longer than <waitdelay> then just move on to next byte   E:\iroFW\user\user.c
                                           //	Repeat for each byte                                                          E:\iroFW\user\user.c
001d84   cfd9     MOVFF     0xfd9,0xfe6    void parse_BO_packet(void)                                                       E:\iroFW\user\user.c
001d86   ffe6                                                                                                               
001d88   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001d8a   ffd9                                                                                                               
001d8c   0e04     MOVLW     0x4                                                                                             
001d8e   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	unsigned char BO_data_byte;                                                     E:\iroFW\user\user.c
                                           	unsigned char new_port_A_value;                                                 E:\iroFW\user\user.c
                                           	unsigned char tmp;                                                              E:\iroFW\user\user.c
001d90   0e03     MOVLW     0x3            	unsigned char wait_count = 0;                                                   E:\iroFW\user\user.c
001d92   6adb     CLRF      0xdb,0x0                                                                                        
                                           	                                                                                E:\iroFW\user\user.c
                                           	// Check for comma where ptr points                                             E:\iroFW\user\user.c
001d94   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',')                                              E:\iroFW\user\user.c
001d96   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001d98   6aea     CLRF      0xea,0x0                                                                                        
001d9a   0f40     ADDLW     0x40                                                                                            
001d9c   6ee9     MOVWF     0xe9,0x0                                                                                        
001d9e   0e02     MOVLW     0x2                                                                                             
001da0   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001da2   50ef     MOVF      0xef,0x0,0x0                                                                                    
001da4   082c     SUBLW     0x2c                                                                                            
001da6   e01d     BZ        0x1de2                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
001da8   0101     MOVLB     0x1            		printf ((rom char *)"!5 Err: Need comma next, found: '%c'\r\n", g_RX_buf[g_RX_buf_out]); E:\iroFW\user\user.c
001daa   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001dac   6aea     CLRF      0xea,0x0                                                                                        
001dae   0f40     ADDLW     0x40                                                                                            
001db0   6ee9     MOVWF     0xe9,0x0                                                                                        
001db2   0e02     MOVLW     0x2                                                                                             
001db4   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001db6   50ef     MOVF      0xef,0x0,0x0                                                                                    
001db8   6ee6     MOVWF     0xe6,0x0                                                                                        
001dba   6ae6     CLRF      0xe6,0x0                                                                                        
001dbc   0e80     MOVLW     0x80                                                                                            
001dbe   6e2a     MOVWF     0x2a,0x0                                                                                        
001dc0   0e40     MOVLW     0x40                                                                                            
001dc2   6e2b     MOVWF     0x2b,0x0                                                                                        
001dc4   6a2c     CLRF      0x2c,0x0                                                                                        
001dc6   c02a     MOVFF     0x2a,0xfe6                                                                                      
001dc8   ffe6                                                                                                               
001dca   c02b     MOVFF     0x2b,0xfe6                                                                                      
001dcc   ffe6                                                                                                               
001dce   c02c     MOVFF     0x2c,0xfe6                                                                                      
001dd0   ffe6                                                                                                               
001dd2   ec0b     CALL      0x4416,0x0                                                                                      
001dd4   f022                                                                                                               
001dd6   6e2d     MOVWF     0x2d,0x0                                                                                        
001dd8   0e05     MOVLW     0x5                                                                                             
001dda   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001ddc   502d     MOVF      0x2d,0x0,0x0                                                                                    
001dde   8a0d     BSF       0xd,0x5,0x0    		bitset (error_byte, kERROR_BYTE_PRINTED_ERROR);                                E:\iroFW\user\user.c
001de0   d10e     BRA       0x1ffe         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Move to the next character                                                   E:\iroFW\user\user.c
001de2   0101     MOVLB     0x1            	advance_RX_buf_out ();                                                          E:\iroFW\user\user.c
001de4   2ba1     INCF      0xa1,0x1,0x1                                                                                    
001de6   0e40     MOVLW     0x40                                                                                            
001de8   0101     MOVLB     0x1                                                                                             
001dea   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001dec   e102     BNZ       0x1df2                                                                                          
001dee   0101     MOVLB     0x1                                                                                             
001df0   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           	// Make sure Port A is correct                                                  E:\iroFW\user\user.c
001df2   c199     MOVFF     0x199,0xf89    	LATA = g_BO_init;                                                               E:\iroFW\user\user.c
001df4   ff89                                                                                                               
001df6   0101     MOVLB     0x1            	new_port_A_value = ((~LATA & g_BO_strobe_mask)) | (LATA & ~g_BO_strobe_mask);   E:\iroFW\user\user.c
001df8   1d9a     COMF      0x9a,0x0,0x1                                                                                    
001dfa   1489     ANDWF     0x89,0x0,0x0                                                                                    
001dfc   6e2a     MOVWF     0x2a,0x0                                                                                        
001dfe   1c89     COMF      0x89,0x0,0x0                                                                                    
001e00   0101     MOVLB     0x1                                                                                             
001e02   159a     ANDWF     0x9a,0x0,0x1                                                                                    
001e04   102a     IORWF     0x2a,0x0,0x0                                                                                    
001e06   6ee7     MOVWF     0xe7,0x0                                                                                        
001e08   0e01     MOVLW     0x1                                                                                             
001e0a   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001e0c   ffdb                                                                                                               
                                           	                                                                                E:\iroFW\user\user.c
001e0e   0101     MOVLB     0x1            	while (g_RX_buf[g_RX_buf_out] != 13)                                            E:\iroFW\user\user.c
001e10   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001e12   6aea     CLRF      0xea,0x0                                                                                        
001e14   0f40     ADDLW     0x40                                                                                            
001e16   6ee9     MOVWF     0xe9,0x0                                                                                        
001e18   0e02     MOVLW     0x2                                                                                             
001e1a   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001e1c   50ef     MOVF      0xef,0x0,0x0                                                                                    
001e1e   080d     SUBLW     0xd                                                                                             
001e20   e101     BNZ       0x1e24                                                                                          
001e22   d0eb     BRA       0x1ffa                                                                                          
001ff8   d70a     BRA       0x1e0e                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
                                           		// Pull in a nibble from the input buffer                                      E:\iroFW\user\user.c
001e24   0101     MOVLB     0x1            		tmp = toupper (g_RX_buf[g_RX_buf_out]);                                        E:\iroFW\user\user.c
001e26   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001e28   6aea     CLRF      0xea,0x0                                                                                        
001e2a   0f40     ADDLW     0x40                                                                                            
001e2c   6ee9     MOVWF     0xe9,0x0                                                                                        
001e2e   0e02     MOVLW     0x2                                                                                             
001e30   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001e32   50ef     MOVF      0xef,0x0,0x0                                                                                    
001e34   6ee6     MOVWF     0xe6,0x0                                                                                        
001e36   6ae6     CLRF      0xe6,0x0                                                                                        
001e38   ec04     CALL      0x4608,0x0                                                                                      
001e3a   f023                                                                                                               
001e3c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001e3e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001e40   0e02     MOVLW     0x2                                                                                             
001e42   cff3     MOVFF     0xff3,0xfdb                                                                                     
001e44   ffdb                                                                                                               
001e46   0e30     MOVLW     0x30           		if (tmp >= '0' && tmp <= '9')                                                  E:\iroFW\user\user.c
001e48   6ef3     MOVWF     0xf3,0x0                                                                                        
001e4a   0e02     MOVLW     0x2                                                                                             
001e4c   cfdb     MOVFF     0xfdb,0xff4                                                                                     
001e4e   fff4                                                                                                               
001e50   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001e52   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
001e54   e30f     BNC       0x1e74                                                                                          
001e56   0e02     MOVLW     0x2                                                                                             
001e58   50db     MOVF      0xdb,0x0,0x0                                                                                    
001e5a   0839     SUBLW     0x39                                                                                            
001e5c   e30b     BNC       0x1e74                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
001e5e   0e30     MOVLW     0x30           			tmp -= '0';	                                                                  E:\iroFW\user\user.c
001e60   6e2a     MOVWF     0x2a,0x0                                                                                        
001e62   0e02     MOVLW     0x2                                                                                             
001e64   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001e66   ffe7                                                                                                               
001e68   502a     MOVF      0x2a,0x0,0x0                                                                                    
001e6a   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001e6c   0e02     MOVLW     0x2                                                                                             
001e6e   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001e70   ffdb                                                                                                               
                                           		}                                                                              E:\iroFW\user\user.c
001e72   d019     BRA       0x1ea6         		else if (tmp >= 'A' && tmp <= 'F')                                             E:\iroFW\user\user.c
001e74   0e41     MOVLW     0x41                                                                                            
001e76   6ef3     MOVWF     0xf3,0x0                                                                                        
001e78   0e02     MOVLW     0x2                                                                                             
001e7a   cfdb     MOVFF     0xfdb,0xff4                                                                                     
001e7c   fff4                                                                                                               
001e7e   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001e80   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
001e82   e30f     BNC       0x1ea2                                                                                          
001e84   0e02     MOVLW     0x2                                                                                             
001e86   50db     MOVF      0xdb,0x0,0x0                                                                                    
001e88   0846     SUBLW     0x46                                                                                            
001e8a   e30b     BNC       0x1ea2                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
001e8c   0e37     MOVLW     0x37           			tmp -= 55;                                                                    E:\iroFW\user\user.c
001e8e   6e2a     MOVWF     0x2a,0x0                                                                                        
001e90   0e02     MOVLW     0x2                                                                                             
001e92   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001e94   ffe7                                                                                                               
001e96   502a     MOVF      0x2a,0x0,0x0                                                                                    
001e98   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001e9a   0e02     MOVLW     0x2                                                                                             
001e9c   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001e9e   ffdb                                                                                                               
                                           		}                                                                              E:\iroFW\user\user.c
001ea0   d002     BRA       0x1ea6         		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
001ea2   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     E:\iroFW\user\user.c
001ea4   d0ac     BRA       0x1ffe         			return;                                                                       E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
001ea6   0e02     MOVLW     0x2            		BO_data_byte = tmp << 4;                                                       E:\iroFW\user\user.c
001ea8   38db     SWAPF     0xdb,0x0,0x0                                                                                    
001eaa   0bf0     ANDLW     0xf0                                                                                            
001eac   6edf     MOVWF     0xdf,0x0                                                                                        
001eae   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         E:\iroFW\user\user.c
001eb0   2ba1     INCF      0xa1,0x1,0x1                                                                                    
001eb2   0e40     MOVLW     0x40                                                                                            
001eb4   0101     MOVLB     0x1                                                                                             
001eb6   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001eb8   e102     BNZ       0x1ebe                                                                                          
001eba   0101     MOVLB     0x1                                                                                             
001ebc   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           		// Check for CR next                                                           E:\iroFW\user\user.c
001ebe   0e0d     MOVLW     0xd            		if (kCR == g_RX_buf[g_RX_buf_out])                                             E:\iroFW\user\user.c
001ec0   6e2a     MOVWF     0x2a,0x0                                                                                        
001ec2   0101     MOVLB     0x1                                                                                             
001ec4   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001ec6   6aea     CLRF      0xea,0x0                                                                                        
001ec8   0f40     ADDLW     0x40                                                                                            
001eca   6ee9     MOVWF     0xe9,0x0                                                                                        
001ecc   0e02     MOVLW     0x2                                                                                             
001ece   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001ed0   50ef     MOVF      0xef,0x0,0x0                                                                                    
001ed2   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001ed4   e102     BNZ       0x1eda                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
001ed6   880d     BSF       0xd,0x4,0x0    			bitset (error_byte, kERROR_BYTE_MISSING_PARAMETER);                           E:\iroFW\user\user.c
001ed8   d092     BRA       0x1ffe         			return;                                                                       E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
001eda   0101     MOVLB     0x1            		tmp =  toupper (g_RX_buf[g_RX_buf_out]);                                       E:\iroFW\user\user.c
001edc   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001ede   6aea     CLRF      0xea,0x0                                                                                        
001ee0   0f40     ADDLW     0x40                                                                                            
001ee2   6ee9     MOVWF     0xe9,0x0                                                                                        
001ee4   0e02     MOVLW     0x2                                                                                             
001ee6   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001ee8   50ef     MOVF      0xef,0x0,0x0                                                                                    
001eea   6ee6     MOVWF     0xe6,0x0                                                                                        
001eec   6ae6     CLRF      0xe6,0x0                                                                                        
001eee   ec04     CALL      0x4608,0x0                                                                                      
001ef0   f023                                                                                                               
001ef2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001ef4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001ef6   0e02     MOVLW     0x2                                                                                             
001ef8   cff3     MOVFF     0xff3,0xfdb                                                                                     
001efa   ffdb                                                                                                               
001efc   0e30     MOVLW     0x30           		if (tmp >= '0' && tmp <= '9')                                                  E:\iroFW\user\user.c
001efe   6ef3     MOVWF     0xf3,0x0                                                                                        
001f00   0e02     MOVLW     0x2                                                                                             
001f02   cfdb     MOVFF     0xfdb,0xff4                                                                                     
001f04   fff4                                                                                                               
001f06   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001f08   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
001f0a   e30f     BNC       0x1f2a                                                                                          
001f0c   0e02     MOVLW     0x2                                                                                             
001f0e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f10   0839     SUBLW     0x39                                                                                            
001f12   e30b     BNC       0x1f2a                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
001f14   0e30     MOVLW     0x30           			tmp -= '0';	                                                                  E:\iroFW\user\user.c
001f16   6e2a     MOVWF     0x2a,0x0                                                                                        
001f18   0e02     MOVLW     0x2                                                                                             
001f1a   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001f1c   ffe7                                                                                                               
001f1e   502a     MOVF      0x2a,0x0,0x0                                                                                    
001f20   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001f22   0e02     MOVLW     0x2                                                                                             
001f24   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001f26   ffdb                                                                                                               
                                           		}                                                                              E:\iroFW\user\user.c
001f28   d019     BRA       0x1f5c         		else if (tmp >= 'A' && tmp <= 'F')                                             E:\iroFW\user\user.c
001f2a   0e41     MOVLW     0x41                                                                                            
001f2c   6ef3     MOVWF     0xf3,0x0                                                                                        
001f2e   0e02     MOVLW     0x2                                                                                             
001f30   cfdb     MOVFF     0xfdb,0xff4                                                                                     
001f32   fff4                                                                                                               
001f34   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001f36   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
001f38   e30f     BNC       0x1f58                                                                                          
001f3a   0e02     MOVLW     0x2                                                                                             
001f3c   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f3e   0846     SUBLW     0x46                                                                                            
001f40   e30b     BNC       0x1f58                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
001f42   0e37     MOVLW     0x37           			tmp -= 55;                                                                    E:\iroFW\user\user.c
001f44   6e2a     MOVWF     0x2a,0x0                                                                                        
001f46   0e02     MOVLW     0x2                                                                                             
001f48   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001f4a   ffe7                                                                                                               
001f4c   502a     MOVF      0x2a,0x0,0x0                                                                                    
001f4e   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001f50   0e02     MOVLW     0x2                                                                                             
001f52   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001f54   ffdb                                                                                                               
                                           		}                                                                              E:\iroFW\user\user.c
001f56   d002     BRA       0x1f5c         		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
001f58   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     E:\iroFW\user\user.c
001f5a   d051     BRA       0x1ffe         			return;                                                                       E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
001f5c   0e02     MOVLW     0x2            		BO_data_byte = BO_data_byte + tmp;                                             E:\iroFW\user\user.c
001f5e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f60   24df     ADDWF     0xdf,0x0,0x0                                                                                    
001f62   6edf     MOVWF     0xdf,0x0                                                                                        
001f64   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         E:\iroFW\user\user.c
001f66   2ba1     INCF      0xa1,0x1,0x1                                                                                    
001f68   0e40     MOVLW     0x40                                                                                            
001f6a   0101     MOVLB     0x1                                                                                             
001f6c   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001f6e   e102     BNZ       0x1f74                                                                                          
001f70   0101     MOVLB     0x1                                                                                             
001f72   6ba1     CLRF      0xa1,0x1                                                                                        
                                           	                                                                                E:\iroFW\user\user.c
                                           		// Output the byte on Port B                                                   E:\iroFW\user\user.c
001f74   50df     MOVF      0xdf,0x0,0x0   		LATB = BO_data_byte;                                                           E:\iroFW\user\user.c
001f76   6e8a     MOVWF     0x8a,0x0                                                                                        
                                           		                                                                               E:\iroFW\user\user.c
                                           		// And strobe the Port A bits that we're supposed to                           E:\iroFW\user\user.c
001f78   0e01     MOVLW     0x1            		LATA = new_port_A_value;                                                       E:\iroFW\user\user.c
001f7a   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f7c   6e89     MOVWF     0x89,0x0                                                                                        
001f7e   0101     MOVLB     0x1            		if (g_BO_strobe_delay)                                                         E:\iroFW\user\user.c
001f80   519d     MOVF      0x9d,0x0,0x1                                                                                    
001f82   e005     BZ        0x1f8e                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
001f84   c19d     MOVFF     0x19d,0xfe6    			Delay10TCYx (g_BO_strobe_delay);                                              E:\iroFW\user\user.c
001f86   ffe6                                                                                                               
001f88   eca3     CALL      0x4746,0x0                                                                                      
001f8a   f023                                                                                                               
001f8c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
001f8e   c199     MOVFF     0x199,0xf89    		LATA = g_BO_init;                                                              E:\iroFW\user\user.c
001f90   ff89                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
001f92   0101     MOVLB     0x1            		if (g_BO_wait_delay)                                                           E:\iroFW\user\user.c
001f94   519c     MOVF      0x9c,0x0,0x1                                                                                    
001f96   e030     BZ        0x1ff8                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Now we spin on the wait bit specified in WaitMask                          E:\iroFW\user\user.c
                                           			// (Used for Busy Bits) We also have to wait here                             E:\iroFW\user\user.c
                                           			// for a maximum of g_BO_wait_delay, which is in 10 clock units               E:\iroFW\user\user.c
                                           			// First we wait for the wait mask to become asserted                         E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       E:\iroFW\user\user.c
001f98   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 E:\iroFW\user\user.c
001f9a   c19c     MOVFF     0x19c,0xfdb                                                                                     
001f9c   ffdb                                                                                                               
001fc6   d7eb     BRA       0x1f9e         			while (                                                                       E:\iroFW\user\user.c
001f9e   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) == (PORTA & g_BO_wait_mask))                   E:\iroFW\user\user.c
001fa0   5199     MOVF      0x99,0x0,0x1                                                                                    
001fa2   0101     MOVLB     0x1                                                                                             
001fa4   159b     ANDWF     0x9b,0x0,0x1                                                                                    
001fa6   6e2a     MOVWF     0x2a,0x0                                                                                        
001fa8   0101     MOVLB     0x1                                                                                             
001faa   519b     MOVF      0x9b,0x0,0x1                                                                                    
001fac   1480     ANDWF     0x80,0x0,0x0                                                                                    
001fae   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           E:\iroFW\user\user.c
001fb2   0e03     MOVLW     0x3            				(wait_count != 0)                                                            E:\iroFW\user\user.c
001fb4   50db     MOVF      0xdb,0x0,0x0                                                                                    
001fb0   e10b     BNZ       0x1fc8         			)                                                                             E:\iroFW\user\user.c
001fb6   e008     BZ        0x1fc8                                                                                          
                                           			{                                                                             E:\iroFW\user\user.c
001fb8   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
001fba   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
001fbc   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
001fbe   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
001fc0   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
001fc2   0e03     MOVLW     0x3            				wait_count--;                                                                E:\iroFW\user\user.c
001fc4   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       E:\iroFW\user\user.c
001fc8   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 E:\iroFW\user\user.c
001fca   c19c     MOVFF     0x19c,0xfdb                                                                                     
001fcc   ffdb                                                                                                               
                                           			// Then we wait for the wait mask to become de-asserted                       E:\iroFW\user\user.c
001ff6   d7eb     BRA       0x1fce         			while (                                                                       E:\iroFW\user\user.c
001fce   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) != (PORTA & g_BO_wait_mask))                   E:\iroFW\user\user.c
001fd0   5199     MOVF      0x99,0x0,0x1                                                                                    
001fd2   0101     MOVLB     0x1                                                                                             
001fd4   159b     ANDWF     0x9b,0x0,0x1                                                                                    
001fd6   6e2a     MOVWF     0x2a,0x0                                                                                        
001fd8   0101     MOVLB     0x1                                                                                             
001fda   519b     MOVF      0x9b,0x0,0x1                                                                                    
001fdc   1480     ANDWF     0x80,0x0,0x0                                                                                    
001fde   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           E:\iroFW\user\user.c
001fe2   0e03     MOVLW     0x3            				(wait_count != 0)                                                            E:\iroFW\user\user.c
001fe4   50db     MOVF      0xdb,0x0,0x0                                                                                    
001fe0   e00b     BZ        0x1ff8         			)                                                                             E:\iroFW\user\user.c
001fe6   e008     BZ        0x1ff8                                                                                          
                                           			{                                                                             E:\iroFW\user\user.c
001fe8   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
001fea   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
001fec   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
001fee   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
001ff0   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
001ff2   0e03     MOVLW     0x3            				wait_count--;                                                                E:\iroFW\user\user.c
001ff4   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
001ffa   ecef     CALL      0x13de,0x0     	print_ack ();                                                                   E:\iroFW\user\user.c
001ffc   f009                                                                                                               
001ffe   0e04     MOVLW     0x4            }                                                                                E:\iroFW\user\user.c
002000   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
002002   e202     BC        0x2008                                                                                          
002004   6ae1     CLRF      0xe1,0x0                                                                                        
002006   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002008   6ee1     MOVWF     0xe1,0x0                                                                                        
00200a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00200c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00200e   ffd9                                                                                                               
002010   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // Bulk Stream (BS) (he he, couldn't think of a better name)                     E:\iroFW\user\user.c
                                           // BS,<count>,<binary_data><CR>                                                  E:\iroFW\user\user.c
                                           // This command is extremely similar to the BO command                           E:\iroFW\user\user.c
                                           // except that instead of ASCII HEX values, it actually                          E:\iroFW\user\user.c
                                           // takes raw binary data.                                                        E:\iroFW\user\user.c
                                           // So in order for the UBW to know when the end of the stream                    E:\iroFW\user\user.c
                                           // is, we need to have a <count> of bytes.                                       E:\iroFW\user\user.c
                                           // <count> represents the number of bytes after the second comma                 E:\iroFW\user\user.c
                                           // that will be the actual binary data to be streamed out port B.                E:\iroFW\user\user.c
                                           // Then, <binary_data> must be exactly that length.                              E:\iroFW\user\user.c
                                           // <count> must be between 1 and 56 (currently - in the future                   E:\iroFW\user\user.c
                                           // it would be nice to extend the upper limit)                                   E:\iroFW\user\user.c
                                           // The UBW will pull in one byte at a time within the <binary_data>              E:\iroFW\user\user.c
                                           // section and output it to PORTB exactly as the BO command does.                E:\iroFW\user\user.c
                                           // It will do this for <count> bytes. It will then pull in another               E:\iroFW\user\user.c
                                           // byte (which must be a carrige return) and be done.                            E:\iroFW\user\user.c
                                           // The whole point of this command is to improve data throughput                 E:\iroFW\user\user.c
                                           // from the PC to the UBW. This form of data is also more efficient              E:\iroFW\user\user.c
                                           // for the UBW to process.                                                       E:\iroFW\user\user.c
002012   cfd9     MOVFF     0xfd9,0xfe6    void parse_BS_packet(void)                                                       E:\iroFW\user\user.c
002014   ffe6                                                                                                               
002016   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
002018   ffd9                                                                                                               
00201a   0e05     MOVLW     0x5                                                                                             
00201c   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	unsigned char BO_data_byte;                                                     E:\iroFW\user\user.c
                                           	unsigned char new_port_A_value;                                                 E:\iroFW\user\user.c
                                           	unsigned char tmp;                                                              E:\iroFW\user\user.c
00201e   0e03     MOVLW     0x3            	unsigned char wait_count = 0;                                                   E:\iroFW\user\user.c
002020   6adb     CLRF      0xdb,0x0                                                                                        
002022   0e04     MOVLW     0x4            	unsigned char byte_count = 0;	                                                  E:\iroFW\user\user.c
002024   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           	// Get byte_count                                                               E:\iroFW\user\user.c
002026   0e01     MOVLW     0x1            	byte_count = extract_number (kUCHAR);                                           E:\iroFW\user\user.c
002028   6ee6     MOVWF     0xe6,0x0                                                                                        
00202a   d8c8     RCALL     0x21bc                                                                                          
00202c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00202e   0e04     MOVLW     0x4                                                                                             
002030   c01d     MOVFF     0x1d,0xfdb                                                                                      
002032   ffdb                                                                                                               
                                           	                                                                                E:\iroFW\user\user.c
                                           	// Limit check it                                                               E:\iroFW\user\user.c
002034   0e04     MOVLW     0x4            	if (0 == byte_count || byte_count > 56)                                         E:\iroFW\user\user.c
002036   50db     MOVF      0xdb,0x0,0x0                                                                                    
002038   e004     BZ        0x2042                                                                                          
00203a   0e04     MOVLW     0x4                                                                                             
00203c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00203e   0838     SUBLW     0x38                                                                                            
002040   e202     BC        0x2046                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
002042   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iroFW\user\user.c
002044   d098     BRA       0x2176         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Check for comma where ptr points                                             E:\iroFW\user\user.c
002046   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',')                                              E:\iroFW\user\user.c
002048   51a1     MOVF      0xa1,0x0,0x1                                                                                    
00204a   6aea     CLRF      0xea,0x0                                                                                        
00204c   0f40     ADDLW     0x40                                                                                            
00204e   6ee9     MOVWF     0xe9,0x0                                                                                        
002050   0e02     MOVLW     0x2                                                                                             
002052   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002054   50ef     MOVF      0xef,0x0,0x0                                                                                    
002056   082c     SUBLW     0x2c                                                                                            
002058   e01d     BZ        0x2094                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
00205a   0101     MOVLB     0x1            		printf ((rom char *)"!5 Err: Need comma next, found: '%c'\r\n", g_RX_buf[g_RX_buf_out]); E:\iroFW\user\user.c
00205c   51a1     MOVF      0xa1,0x0,0x1                                                                                    
00205e   6aea     CLRF      0xea,0x0                                                                                        
002060   0f40     ADDLW     0x40                                                                                            
002062   6ee9     MOVWF     0xe9,0x0                                                                                        
002064   0e02     MOVLW     0x2                                                                                             
002066   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002068   50ef     MOVF      0xef,0x0,0x0                                                                                    
00206a   6ee6     MOVWF     0xe6,0x0                                                                                        
00206c   6ae6     CLRF      0xe6,0x0                                                                                        
00206e   0e80     MOVLW     0x80                                                                                            
002070   6e2a     MOVWF     0x2a,0x0                                                                                        
002072   0e40     MOVLW     0x40                                                                                            
002074   6e2b     MOVWF     0x2b,0x0                                                                                        
002076   6a2c     CLRF      0x2c,0x0                                                                                        
002078   c02a     MOVFF     0x2a,0xfe6                                                                                      
00207a   ffe6                                                                                                               
00207c   c02b     MOVFF     0x2b,0xfe6                                                                                      
00207e   ffe6                                                                                                               
002080   c02c     MOVFF     0x2c,0xfe6                                                                                      
002082   ffe6                                                                                                               
002084   ec0b     CALL      0x4416,0x0                                                                                      
002086   f022                                                                                                               
002088   6e2d     MOVWF     0x2d,0x0                                                                                        
00208a   0e05     MOVLW     0x5                                                                                             
00208c   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
00208e   502d     MOVF      0x2d,0x0,0x0                                                                                    
002090   8a0d     BSF       0xd,0x5,0x0    		bitset (error_byte, kERROR_BYTE_PRINTED_ERROR);                                E:\iroFW\user\user.c
002092   d071     BRA       0x2176         		return;                                                                        E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Move to the next character                                                   E:\iroFW\user\user.c
002094   0101     MOVLB     0x1            	advance_RX_buf_out ();                                                          E:\iroFW\user\user.c
002096   2ba1     INCF      0xa1,0x1,0x1                                                                                    
002098   0e40     MOVLW     0x40                                                                                            
00209a   0101     MOVLB     0x1                                                                                             
00209c   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
00209e   e102     BNZ       0x20a4                                                                                          
0020a0   0101     MOVLB     0x1                                                                                             
0020a2   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           	// Make sure Port A is correct                                                  E:\iroFW\user\user.c
0020a4   c199     MOVFF     0x199,0xf89    	LATA = g_BO_init;                                                               E:\iroFW\user\user.c
0020a6   ff89                                                                                                               
0020a8   0101     MOVLB     0x1            	new_port_A_value = ((~LATA & g_BO_strobe_mask)) | (LATA & ~g_BO_strobe_mask);   E:\iroFW\user\user.c
0020aa   1d9a     COMF      0x9a,0x0,0x1                                                                                    
0020ac   1489     ANDWF     0x89,0x0,0x0                                                                                    
0020ae   6e2a     MOVWF     0x2a,0x0                                                                                        
0020b0   1c89     COMF      0x89,0x0,0x0                                                                                    
0020b2   0101     MOVLB     0x1                                                                                             
0020b4   159a     ANDWF     0x9a,0x0,0x1                                                                                    
0020b6   102a     IORWF     0x2a,0x0,0x0                                                                                    
0020b8   6ee7     MOVWF     0xe7,0x0                                                                                        
0020ba   0e01     MOVLW     0x1                                                                                             
0020bc   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0020be   ffdb                                                                                                               
                                           	                                                                                E:\iroFW\user\user.c
0020c0   0e04     MOVLW     0x4            	while (byte_count != 0)                                                         E:\iroFW\user\user.c
0020c2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0020c4   e056     BZ        0x2172                                                                                          
002170   d7a7     BRA       0x20c0                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
                                           		// Pull in a single byte from input buffer                                     E:\iroFW\user\user.c
0020c6   0101     MOVLB     0x1            		BO_data_byte = g_RX_buf[g_RX_buf_out];                                         E:\iroFW\user\user.c
0020c8   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0020ca   6aea     CLRF      0xea,0x0                                                                                        
0020cc   0f40     ADDLW     0x40                                                                                            
0020ce   6ee9     MOVWF     0xe9,0x0                                                                                        
0020d0   0e02     MOVLW     0x2                                                                                             
0020d2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0020d4   cfef     MOVFF     0xfef,0xfdf                                                                                     
0020d6   ffdf                                                                                                               
0020d8   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         E:\iroFW\user\user.c
0020da   2ba1     INCF      0xa1,0x1,0x1                                                                                    
0020dc   0e40     MOVLW     0x40                                                                                            
0020de   0101     MOVLB     0x1                                                                                             
0020e0   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
0020e2   e102     BNZ       0x20e8                                                                                          
0020e4   0101     MOVLB     0x1                                                                                             
0020e6   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           		// Count this byte                                                             E:\iroFW\user\user.c
0020e8   0e04     MOVLW     0x4            		byte_count--;                                                                  E:\iroFW\user\user.c
0020ea   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           	                                                                                E:\iroFW\user\user.c
                                           		// Output the byte on Port B                                                   E:\iroFW\user\user.c
0020ec   50df     MOVF      0xdf,0x0,0x0   		LATB = BO_data_byte;                                                           E:\iroFW\user\user.c
0020ee   6e8a     MOVWF     0x8a,0x0                                                                                        
                                           		                                                                               E:\iroFW\user\user.c
                                           		// And strobe the Port A bits that we're supposed to                           E:\iroFW\user\user.c
0020f0   0e01     MOVLW     0x1            		LATA = new_port_A_value;                                                       E:\iroFW\user\user.c
0020f2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0020f4   6e89     MOVWF     0x89,0x0                                                                                        
0020f6   0101     MOVLB     0x1            		if (g_BO_strobe_delay)                                                         E:\iroFW\user\user.c
0020f8   519d     MOVF      0x9d,0x0,0x1                                                                                    
0020fa   e005     BZ        0x2106                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
0020fc   c19d     MOVFF     0x19d,0xfe6    			Delay10TCYx (g_BO_strobe_delay);                                              E:\iroFW\user\user.c
0020fe   ffe6                                                                                                               
002100   eca3     CALL      0x4746,0x0                                                                                      
002102   f023                                                                                                               
002104   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              E:\iroFW\user\user.c
002106   c199     MOVFF     0x199,0xf89    		LATA = g_BO_init;                                                              E:\iroFW\user\user.c
002108   ff89                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
00210a   0101     MOVLB     0x1            		if (g_BO_wait_delay)                                                           E:\iroFW\user\user.c
00210c   519c     MOVF      0x9c,0x0,0x1                                                                                    
00210e   e030     BZ        0x2170                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// Now we spin on the wait bit specified in WaitMask                          E:\iroFW\user\user.c
                                           			// (Used for Busy Bits) We also have to wait here                             E:\iroFW\user\user.c
                                           			// for a maximum of g_BO_wait_delay, which is in 10 clock units               E:\iroFW\user\user.c
                                           			// First we wait for the wait mask to become asserted                         E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       E:\iroFW\user\user.c
002110   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 E:\iroFW\user\user.c
002112   c19c     MOVFF     0x19c,0xfdb                                                                                     
002114   ffdb                                                                                                               
00213e   d7eb     BRA       0x2116         			while (                                                                       E:\iroFW\user\user.c
002116   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) == (PORTA & g_BO_wait_mask))                   E:\iroFW\user\user.c
002118   5199     MOVF      0x99,0x0,0x1                                                                                    
00211a   0101     MOVLB     0x1                                                                                             
00211c   159b     ANDWF     0x9b,0x0,0x1                                                                                    
00211e   6e2a     MOVWF     0x2a,0x0                                                                                        
002120   0101     MOVLB     0x1                                                                                             
002122   519b     MOVF      0x9b,0x0,0x1                                                                                    
002124   1480     ANDWF     0x80,0x0,0x0                                                                                    
002126   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           E:\iroFW\user\user.c
00212a   0e03     MOVLW     0x3            				(wait_count != 0)                                                            E:\iroFW\user\user.c
00212c   50db     MOVF      0xdb,0x0,0x0                                                                                    
002128   e10b     BNZ       0x2140         			)                                                                             E:\iroFW\user\user.c
00212e   e008     BZ        0x2140                                                                                          
                                           			{                                                                             E:\iroFW\user\user.c
002130   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
002132   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
002134   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
002136   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
002138   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
00213a   0e03     MOVLW     0x3            				wait_count--;                                                                E:\iroFW\user\user.c
00213c   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       E:\iroFW\user\user.c
002140   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 E:\iroFW\user\user.c
002142   c19c     MOVFF     0x19c,0xfdb                                                                                     
002144   ffdb                                                                                                               
                                           			// Then we wait for the wait mask to become de-asserted                       E:\iroFW\user\user.c
00216e   d7eb     BRA       0x2146         			while (                                                                       E:\iroFW\user\user.c
002146   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) != (PORTA & g_BO_wait_mask))                   E:\iroFW\user\user.c
002148   5199     MOVF      0x99,0x0,0x1                                                                                    
00214a   0101     MOVLB     0x1                                                                                             
00214c   159b     ANDWF     0x9b,0x0,0x1                                                                                    
00214e   6e2a     MOVWF     0x2a,0x0                                                                                        
002150   0101     MOVLB     0x1                                                                                             
002152   519b     MOVF      0x9b,0x0,0x1                                                                                    
002154   1480     ANDWF     0x80,0x0,0x0                                                                                    
002156   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           E:\iroFW\user\user.c
00215a   0e03     MOVLW     0x3            				(wait_count != 0)                                                            E:\iroFW\user\user.c
00215c   50db     MOVF      0xdb,0x0,0x0                                                                                    
002158   e00b     BZ        0x2170         			)                                                                             E:\iroFW\user\user.c
00215e   e008     BZ        0x2170                                                                                          
                                           			{                                                                             E:\iroFW\user\user.c
002160   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
002162   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
002164   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
002166   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
002168   0000     NOP                      				Delay1TCY ();                                                                E:\iroFW\user\user.c
00216a   0e03     MOVLW     0x3            				wait_count--;                                                                E:\iroFW\user\user.c
00216c   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
002172   ecef     CALL      0x13de,0x0     	print_ack ();                                                                   E:\iroFW\user\user.c
002174   f009                                                                                                               
002176   0e05     MOVLW     0x5            }                                                                                E:\iroFW\user\user.c
002178   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00217a   e202     BC        0x2180                                                                                          
00217c   6ae1     CLRF      0xe1,0x0                                                                                        
00217e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002180   6ee1     MOVWF     0xe1,0x0                                                                                        
002182   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002184   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
002186   ffd9                                                                                                               
002188   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // SS Send SPI                                                                   E:\iroFW\user\user.c
                                           void parse_SS_packet (void)                                                      E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
00218a   ecef     CALL      0x13de,0x0     	print_ack ();                                                                   E:\iroFW\user\user.c
00218c   f009                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
00218e   0012     RETURN    0x0            }	                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // RS Receive SPI                                                                E:\iroFW\user\user.c
                                           void parse_RS_packet (void)                                                      E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
002190   ecef     CALL      0x13de,0x0     	print_ack ();                                                                   E:\iroFW\user\user.c
002192   f009                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
002194   0012     RETURN    0x0            }	                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // CS Configure SPI                                                              E:\iroFW\user\user.c
                                           void parse_CS_packet (void)                                                      E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
002196   ecef     CALL      0x13de,0x0     	print_ack ();                                                                   E:\iroFW\user\user.c
002198   f009                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
00219a   0012     RETURN    0x0            }	                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // SI Send I2C                                                                   E:\iroFW\user\user.c
                                           void parse_SI_packet (void)                                                      E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
00219c   ecef     CALL      0x13de,0x0     	print_ack ();                                                                   E:\iroFW\user\user.c
00219e   f009                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
0021a0   0012     RETURN    0x0            }	                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // RI Receive I2C                                                                E:\iroFW\user\user.c
                                           void parse_RI_packet (void)                                                      E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
0021a2   ecef     CALL      0x13de,0x0     	print_ack ();                                                                   E:\iroFW\user\user.c
0021a4   f009                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
0021a6   0012     RETURN    0x0            }	                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // CI Configure I2C                                                              E:\iroFW\user\user.c
                                           void parse_CI_packet (void)                                                      E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
0021a8   ecef     CALL      0x13de,0x0     	print_ack ();                                                                   E:\iroFW\user\user.c
0021aa   f009                                                                                                               
                                                                                                                            E:\iroFW\user\user.c
0021ac   0012     RETURN    0x0            }	                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           void parse_GO_packet (void)                                                      E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
0021ae   0101     MOVLB     0x1            	is_racing = TRUE;                                                               E:\iroFW\user\user.c
0021b0   0e01     MOVLW     0x1                                                                                             
0021b2   6fcc     MOVWF     0xcc,0x1                                                                                        
0021b4   0012     RETURN    0x0            }	                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           void parse_ST_packet (void)                                                      E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
0021b6   0101     MOVLB     0x1            	is_racing = FALSE;                                                              E:\iroFW\user\user.c
0021b8   6bcc     CLRF      0xcc,0x1                                                                                        
0021ba   0012     RETURN    0x0            }	                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           // Look at the string pointed to by ptr                                          E:\iroFW\user\user.c
                                           // There should be a comma where ptr points to upon entry.                       E:\iroFW\user\user.c
                                           // If not, throw a comma error.                                                  E:\iroFW\user\user.c
                                           // If so, then look for up to three bytes after the                              E:\iroFW\user\user.c
                                           // comma for numbers, and put them all into one                                  E:\iroFW\user\user.c
                                           // byte (0-255). If the number is greater than 255, then                         E:\iroFW\user\user.c
                                           // thow a range error.                                                           E:\iroFW\user\user.c
                                           // Advance the pointer to the byte after the last number                         E:\iroFW\user\user.c
                                           // and return.                                                                   E:\iroFW\user\user.c
0021bc   cfd9     MOVFF     0xfd9,0xfe6    signed short long extract_number(tExtractType type)                              E:\iroFW\user\user.c
0021be   ffe6                                                                                                               
0021c0   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0021c2   ffd9                                                                                                               
0021c4   0e04     MOVLW     0x4                                                                                             
0021c6   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	signed short long acc;                                                          E:\iroFW\user\user.c
0021c8   0e03     MOVLW     0x3            	unsigned char neg = FALSE;                                                      E:\iroFW\user\user.c
0021ca   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           	// Check to see if we're already at the end                                     E:\iroFW\user\user.c
0021cc   0e0d     MOVLW     0xd            	if (kCR == g_RX_buf[g_RX_buf_out])                                              E:\iroFW\user\user.c
0021ce   6e2a     MOVWF     0x2a,0x0                                                                                        
0021d0   0101     MOVLB     0x1                                                                                             
0021d2   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0021d4   6aea     CLRF      0xea,0x0                                                                                        
0021d6   0f40     ADDLW     0x40                                                                                            
0021d8   6ee9     MOVWF     0xe9,0x0                                                                                        
0021da   0e02     MOVLW     0x2                                                                                             
0021dc   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0021de   50ef     MOVF      0xef,0x0,0x0                                                                                    
0021e0   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0021e2   e105     BNZ       0x21ee                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
0021e4   880d     BSF       0xd,0x4,0x0    		bitset (error_byte, kERROR_BYTE_MISSING_PARAMETER);                            E:\iroFW\user\user.c
0021e6   6a1d     CLRF      0x1d,0x0       		return (0);                                                                    E:\iroFW\user\user.c
0021e8   6a1e     CLRF      0x1e,0x0                                                                                        
0021ea   6a1f     CLRF      0x1f,0x0                                                                                        
0021ec   d193     BRA       0x2514                                                                                          
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Check for comma where ptr points                                             E:\iroFW\user\user.c
0021ee   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',')                                              E:\iroFW\user\user.c
0021f0   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0021f2   6aea     CLRF      0xea,0x0                                                                                        
0021f4   0f40     ADDLW     0x40                                                                                            
0021f6   6ee9     MOVWF     0xe9,0x0                                                                                        
0021f8   0e02     MOVLW     0x2                                                                                             
0021fa   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0021fc   50ef     MOVF      0xef,0x0,0x0                                                                                    
0021fe   082c     SUBLW     0x2c                                                                                            
002200   e020     BZ        0x2242                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
002202   0101     MOVLB     0x1            		printf ((rom char *)"!5 Err: Need comma next, found: '%c'\r\n", g_RX_buf[g_RX_buf_out]); E:\iroFW\user\user.c
002204   51a1     MOVF      0xa1,0x0,0x1                                                                                    
002206   6aea     CLRF      0xea,0x0                                                                                        
002208   0f40     ADDLW     0x40                                                                                            
00220a   6ee9     MOVWF     0xe9,0x0                                                                                        
00220c   0e02     MOVLW     0x2                                                                                             
00220e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002210   50ef     MOVF      0xef,0x0,0x0                                                                                    
002212   6ee6     MOVWF     0xe6,0x0                                                                                        
002214   6ae6     CLRF      0xe6,0x0                                                                                        
002216   0e80     MOVLW     0x80                                                                                            
002218   6e2a     MOVWF     0x2a,0x0                                                                                        
00221a   0e40     MOVLW     0x40                                                                                            
00221c   6e2b     MOVWF     0x2b,0x0                                                                                        
00221e   6a2c     CLRF      0x2c,0x0                                                                                        
002220   c02a     MOVFF     0x2a,0xfe6                                                                                      
002222   ffe6                                                                                                               
002224   c02b     MOVFF     0x2b,0xfe6                                                                                      
002226   ffe6                                                                                                               
002228   c02c     MOVFF     0x2c,0xfe6                                                                                      
00222a   ffe6                                                                                                               
00222c   ec0b     CALL      0x4416,0x0                                                                                      
00222e   f022                                                                                                               
002230   6e2d     MOVWF     0x2d,0x0                                                                                        
002232   0e05     MOVLW     0x5                                                                                             
002234   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
002236   502d     MOVF      0x2d,0x0,0x0                                                                                    
002238   8a0d     BSF       0xd,0x5,0x0    		bitset (error_byte, kERROR_BYTE_PRINTED_ERROR);                                E:\iroFW\user\user.c
00223a   6a1d     CLRF      0x1d,0x0       		return (0);                                                                    E:\iroFW\user\user.c
00223c   6a1e     CLRF      0x1e,0x0                                                                                        
00223e   6a1f     CLRF      0x1f,0x0                                                                                        
002240   d169     BRA       0x2514                                                                                          
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Move to the next character                                                   E:\iroFW\user\user.c
002242   0101     MOVLB     0x1            	advance_RX_buf_out ();                                                          E:\iroFW\user\user.c
002244   2ba1     INCF      0xa1,0x1,0x1                                                                                    
002246   0e40     MOVLW     0x40                                                                                            
002248   0101     MOVLB     0x1                                                                                             
00224a   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
00224c   e102     BNZ       0x2252                                                                                          
00224e   0101     MOVLB     0x1                                                                                             
002250   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            E:\iroFW\user\user.c
                                           	// Now check for a sign character if we're not looking for ASCII chars          E:\iroFW\user\user.c
                                           	if (                                                                            E:\iroFW\user\user.c
002252   0e2d     MOVLW     0x2d           		('-' == g_RX_buf[g_RX_buf_out])                                                E:\iroFW\user\user.c
002254   6e2a     MOVWF     0x2a,0x0                                                                                        
002256   0101     MOVLB     0x1                                                                                             
002258   51a1     MOVF      0xa1,0x0,0x1                                                                                    
00225a   6aea     CLRF      0xea,0x0                                                                                        
00225c   0f40     ADDLW     0x40                                                                                            
00225e   6ee9     MOVWF     0xe9,0x0                                                                                        
002260   0e02     MOVLW     0x2                                                                                             
002262   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002264   50ef     MOVF      0xef,0x0,0x0                                                                                    
002266   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           		&&                                                                             E:\iroFW\user\user.c
                                           		(                                                                              E:\iroFW\user\user.c
00226a   0e04     MOVLW     0x4            			(kASCII_CHAR != type)                                                         E:\iroFW\user\user.c
00226c   6e2b     MOVWF     0x2b,0x0                                                                                        
00226e   0efe     MOVLW     0xfe                                                                                            
002270   50db     MOVF      0xdb,0x0,0x0                                                                                    
002272   5c2b     SUBWF     0x2b,0x0,0x0                                                                                    
                                           			&&                                                                            E:\iroFW\user\user.c
002276   0e05     MOVLW     0x5            			(kUCASE_ASCII_CHAR != type)                                                   E:\iroFW\user\user.c
002278   6e2c     MOVWF     0x2c,0x0                                                                                        
00227a   0efe     MOVLW     0xfe                                                                                            
00227c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00227e   5c2c     SUBWF     0x2c,0x0,0x0                                                                                    
002274   e022     BZ        0x22ba         		)                                                                              E:\iroFW\user\user.c
002280   e01c     BZ        0x22ba                                                                                          
002268   e128     BNZ       0x22ba         	)                                                                               E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
                                           		// It's an error if we see a negative sign on an unsigned value                E:\iroFW\user\user.c
                                           		if (                                                                           E:\iroFW\user\user.c
002282   0efe     MOVLW     0xfe           			(kUCHAR == type)                                                              E:\iroFW\user\user.c
002284   04db     DECF      0xdb,0x0,0x0                                                                                    
                                           			||                                                                            E:\iroFW\user\user.c
002288   0e03     MOVLW     0x3            			(kUINT == type)                                                               E:\iroFW\user\user.c
00228a   6e2a     MOVWF     0x2a,0x0                                                                                        
00228c   0efe     MOVLW     0xfe                                                                                            
00228e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002290   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
002286   e006     BZ        0x2294         		)                                                                              E:\iroFW\user\user.c
002292   e106     BNZ       0x22a0                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
002294   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     E:\iroFW\user\user.c
002296   6a1d     CLRF      0x1d,0x0       			return (0);                                                                   E:\iroFW\user\user.c
002298   6a1e     CLRF      0x1e,0x0                                                                                        
00229a   6a1f     CLRF      0x1f,0x0                                                                                        
00229c   d13b     BRA       0x2514                                                                                          
                                           		}                                                                              E:\iroFW\user\user.c
00229e   d00d     BRA       0x22ba         		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
0022a0   0e01     MOVLW     0x1            			neg = TRUE;                                                                   E:\iroFW\user\user.c
0022a2   6ef3     MOVWF     0xf3,0x0                                                                                        
0022a4   0e03     MOVLW     0x3                                                                                             
0022a6   cff3     MOVFF     0xff3,0xfdb                                                                                     
0022a8   ffdb                                                                                                               
                                           			// Move to the next character                                                 E:\iroFW\user\user.c
0022aa   0101     MOVLB     0x1            			advance_RX_buf_out ();                                                        E:\iroFW\user\user.c
0022ac   2ba1     INCF      0xa1,0x1,0x1                                                                                    
0022ae   0e40     MOVLW     0x40                                                                                            
0022b0   0101     MOVLB     0x1                                                                                             
0022b2   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
0022b4   e102     BNZ       0x22ba                                                                                          
0022b6   0101     MOVLB     0x1                                                                                             
0022b8   6ba1     CLRF      0xa1,0x1                                                                                        
                                           		}                                                                              E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// If we need to get a digit, go do that                                        E:\iroFW\user\user.c
                                           	if (                                                                            E:\iroFW\user\user.c
0022ba   0e04     MOVLW     0x4            		(kASCII_CHAR != type)                                                          E:\iroFW\user\user.c
0022bc   6e2a     MOVWF     0x2a,0x0                                                                                        
0022be   0efe     MOVLW     0xfe                                                                                            
0022c0   50db     MOVF      0xdb,0x0,0x0                                                                                    
0022c2   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           		&&                                                                             E:\iroFW\user\user.c
0022c6   0e05     MOVLW     0x5            		(kUCASE_ASCII_CHAR != type)                                                    E:\iroFW\user\user.c
0022c8   6e2b     MOVWF     0x2b,0x0                                                                                        
0022ca   0efe     MOVLW     0xfe                                                                                            
0022cc   50db     MOVF      0xdb,0x0,0x0                                                                                    
0022ce   5c2b     SUBWF     0x2b,0x0,0x0                                                                                    
0022c4   e011     BZ        0x22e8         	)                                                                               E:\iroFW\user\user.c
0022d0   e00b     BZ        0x22e8                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
0022d2   0e05     MOVLW     0x5            		extract_digit(&acc, 5);                                                        E:\iroFW\user\user.c
0022d4   6ee6     MOVWF     0xe6,0x0                                                                                        
0022d6   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
0022d8   ffe6                                                                                                               
0022da   cfda     MOVFF     0xfda,0xfe6                                                                                     
0022dc   ffe6                                                                                                               
0022de   d924     RCALL     0x2528                                                                                          
0022e0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0022e2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0022e4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	}                                                                               E:\iroFW\user\user.c
0022e6   d03a     BRA       0x235c         	else                                                                            E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
                                           		// Otherwise just copy the byte                                                E:\iroFW\user\user.c
0022e8   0101     MOVLB     0x1            		acc = g_RX_buf[g_RX_buf_out];                                                  E:\iroFW\user\user.c
0022ea   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0022ec   6aea     CLRF      0xea,0x0                                                                                        
0022ee   0f40     ADDLW     0x40                                                                                            
0022f0   6ee9     MOVWF     0xe9,0x0                                                                                        
0022f2   0e02     MOVLW     0x2                                                                                             
0022f4   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0022f6   cfef     MOVFF     0xfef,0x2a                                                                                      
0022f8   f02a                                                                                                               
0022fa   6a2b     CLRF      0x2b,0x0                                                                                        
0022fc   6a2c     CLRF      0x2c,0x0                                                                                        
0022fe   c02a     MOVFF     0x2a,0xfdf                                                                                      
002300   ffdf                                                                                                               
002302   0e01     MOVLW     0x1                                                                                             
002304   c02b     MOVFF     0x2b,0xfdb                                                                                      
002306   ffdb                                                                                                               
002308   0e02     MOVLW     0x2                                                                                             
00230a   c02c     MOVFF     0x2c,0xfdb                                                                                      
00230c   ffdb                                                                                                               
                                           	                                                                                E:\iroFW\user\user.c
                                           		// Force uppercase if that's what type we have                                 E:\iroFW\user\user.c
00230e   0e05     MOVLW     0x5            		if (kUCASE_ASCII_CHAR == type)                                                 E:\iroFW\user\user.c
002310   6e2a     MOVWF     0x2a,0x0                                                                                        
002312   0efe     MOVLW     0xfe                                                                                            
002314   50db     MOVF      0xdb,0x0,0x0                                                                                    
002316   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
002318   e119     BNZ       0x234c                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
00231a   0e00     MOVLW     0x0            			acc = toupper (acc);                                                          E:\iroFW\user\user.c
00231c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00231e   ffe6                                                                                                               
002320   0e01     MOVLW     0x1                                                                                             
002322   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002324   ffe6                                                                                                               
002326   ec04     CALL      0x4608,0x0                                                                                      
002328   f023                                                                                                               
00232a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00232c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00232e   cff3     MOVFF     0xff3,0x2a                                                                                      
002330   f02a                                                                                                               
002332   cff4     MOVFF     0xff4,0x2b                                                                                      
002334   f02b                                                                                                               
002336   6a2c     CLRF      0x2c,0x0                                                                                        
002338   be2b     BTFSC     0x2b,0x7,0x0                                                                                    
00233a   682c     SETF      0x2c,0x0                                                                                        
00233c   c02a     MOVFF     0x2a,0xfdf                                                                                      
00233e   ffdf                                                                                                               
002340   0e01     MOVLW     0x1                                                                                             
002342   c02b     MOVFF     0x2b,0xfdb                                                                                      
002344   ffdb                                                                                                               
002346   0e02     MOVLW     0x2                                                                                             
002348   c02c     MOVFF     0x2c,0xfdb                                                                                      
00234a   ffdb                                                                                                               
                                           		}                                                                              E:\iroFW\user\user.c
                                           		                                                                               E:\iroFW\user\user.c
                                           		// Move to the next character                                                  E:\iroFW\user\user.c
00234c   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         E:\iroFW\user\user.c
00234e   2ba1     INCF      0xa1,0x1,0x1                                                                                    
002350   0e40     MOVLW     0x40                                                                                            
002352   0101     MOVLB     0x1                                                                                             
002354   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
002356   e102     BNZ       0x235c                                                                                          
002358   0101     MOVLB     0x1                                                                                             
00235a   6ba1     CLRF      0xa1,0x1                                                                                        
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Handle the negative sign                                                     E:\iroFW\user\user.c
00235c   0e03     MOVLW     0x3            	if (neg)                                                                        E:\iroFW\user\user.c
00235e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002360   e021     BZ        0x23a4                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
002362   cfdf     MOVFF     0xfdf,0x2a     		acc = -acc;                                                                    E:\iroFW\user\user.c
002364   f02a                                                                                                               
002366   0e01     MOVLW     0x1                                                                                             
002368   cfdb     MOVFF     0xfdb,0x2b                                                                                      
00236a   f02b                                                                                                               
00236c   0e02     MOVLW     0x2                                                                                             
00236e   cfdb     MOVFF     0xfdb,0x2c                                                                                      
002370   f02c                                                                                                               
002372   6822     SETF      0x22,0x0                                                                                        
002374   6823     SETF      0x23,0x0                                                                                        
002376   6824     SETF      0x24,0x0                                                                                        
002378   c02a     MOVFF     0x2a,0x1d                                                                                       
00237a   f01d                                                                                                               
00237c   c02b     MOVFF     0x2b,0x1e                                                                                       
00237e   f01e                                                                                                               
002380   c02c     MOVFF     0x2c,0x1f                                                                                       
002382   f01f                                                                                                               
002384   ecdf     CALL      0x41be,0x0                                                                                      
002386   f020                                                                                                               
002388   c01a     MOVFF     0x1a,0x2a                                                                                       
00238a   f02a                                                                                                               
00238c   c01b     MOVFF     0x1b,0x2b                                                                                       
00238e   f02b                                                                                                               
002390   c01c     MOVFF     0x1c,0x2c                                                                                       
002392   f02c                                                                                                               
002394   c02a     MOVFF     0x2a,0xfdf                                                                                      
002396   ffdf                                                                                                               
002398   0e01     MOVLW     0x1                                                                                             
00239a   c02b     MOVFF     0x2b,0xfdb                                                                                      
00239c   ffdb                                                                                                               
00239e   0e02     MOVLW     0x2                                                                                             
0023a0   c02c     MOVFF     0x2c,0xfdb                                                                                      
0023a2   ffdb                                                                                                               
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           	// Range check the new value                                                    E:\iroFW\user\user.c
                                           	if (                                                                            E:\iroFW\user\user.c
                                           		(                                                                              E:\iroFW\user\user.c
0023a4   0efe     MOVLW     0xfe           			kCHAR == type                                                                 E:\iroFW\user\user.c
0023a6   50db     MOVF      0xdb,0x0,0x0                                                                                    
                                           			&&                                                                            E:\iroFW\user\user.c
                                           			(                                                                             E:\iroFW\user\user.c
0023aa   cfdf     MOVFF     0xfdf,0x2a     				(acc > 127)                                                                  E:\iroFW\user\user.c
0023ac   f02a                                                                                                               
0023ae   0e01     MOVLW     0x1                                                                                             
0023b0   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0023b2   f02b                                                                                                               
0023b4   0e02     MOVLW     0x2                                                                                             
0023b6   cfdb     MOVFF     0xfdb,0x2c                                                                                      
0023b8   f02c                                                                                                               
0023ba   342c     RLCF      0x2c,0x0,0x0                                                                                    
0023bc   0e00     MOVLW     0x0                                                                                             
0023be   182c     XORWF     0x2c,0x0,0x0                                                                                    
0023c0   e607     BN        0x23d0                                                                                          
0023c2   80d8     BSF       0xd8,0x0,0x0                                                                                    
0023c4   0e7f     MOVLW     0x7f                                                                                            
0023c6   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
0023c8   0e00     MOVLW     0x0                                                                                             
0023ca   542b     SUBFWB    0x2b,0x0,0x0                                                                                    
0023cc   0e00     MOVLW     0x0                                                                                             
0023ce   542c     SUBFWB    0x2c,0x0,0x0                                                                                    
                                           				||                                                                           E:\iroFW\user\user.c
0023d4   cfd9     MOVFF     0xfd9,0xfe9    				(acc < -128)                                                                 E:\iroFW\user\user.c
0023d6   ffe9                                                                                                               
0023d8   cfda     MOVFF     0xfda,0xfea                                                                                     
0023da   ffea                                                                                                               
0023dc   0e02     MOVLW     0x2                                                                                             
0023de   80d8     BSF       0xd8,0x0,0x0                                                                                    
0023e0   50eb     MOVF      0xeb,0x0,0x0                                                                                    
0023e2   0aff     XORLW     0xff                                                                                            
0023e4   e606     BN        0x23f2                                                                                          
0023e6   0e80     MOVLW     0x80                                                                                            
0023e8   5cee     SUBWF     0xee,0x0,0x0                                                                                    
0023ea   0eff     MOVLW     0xff                                                                                            
0023ec   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
0023ee   0eff     MOVLW     0xff                                                                                            
0023f0   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
0023d0   e201     BC        0x23d4         			)                                                                             E:\iroFW\user\user.c
0023d2   d08c     BRA       0x24ec                                                                                          
0023f2   e201     BC        0x23f6                                                                                          
0023f4   d07b     BRA       0x24ec                                                                                          
0023a8   e126     BNZ       0x23f6         		)                                                                              E:\iroFW\user\user.c
                                           		||                                                                             E:\iroFW\user\user.c
                                           		(                                                                              E:\iroFW\user\user.c
                                           			kUCHAR == type                                                                E:\iroFW\user\user.c
0023f6   0efe     MOVLW     0xfe           			&&                                                                            E:\iroFW\user\user.c
0023f8   04db     DECF      0xdb,0x0,0x0                                                                                    
                                           			(                                                                             E:\iroFW\user\user.c
0023fc   cfdf     MOVFF     0xfdf,0x2d     				(acc > 255)                                                                  E:\iroFW\user\user.c
0023fe   f02d                                                                                                               
002400   0e01     MOVLW     0x1                                                                                             
002402   cfdb     MOVFF     0xfdb,0x2e                                                                                      
002404   f02e                                                                                                               
002406   0e02     MOVLW     0x2                                                                                             
002408   cfdb     MOVFF     0xfdb,0x2f                                                                                      
00240a   f02f                                                                                                               
00240c   342f     RLCF      0x2f,0x0,0x0                                                                                    
00240e   0e00     MOVLW     0x0                                                                                             
002410   182f     XORWF     0x2f,0x0,0x0                                                                                    
002412   e607     BN        0x2422                                                                                          
002414   80d8     BSF       0xd8,0x0,0x0                                                                                    
002416   0eff     MOVLW     0xff                                                                                            
002418   542d     SUBFWB    0x2d,0x0,0x0                                                                                    
00241a   0e00     MOVLW     0x0                                                                                             
00241c   542e     SUBFWB    0x2e,0x0,0x0                                                                                    
00241e   0e00     MOVLW     0x0                                                                                             
002420   542f     SUBFWB    0x2f,0x0,0x0                                                                                    
                                           				||                                                                           E:\iroFW\user\user.c
002424   cfd9     MOVFF     0xfd9,0xfe9    				(acc < 0)                                                                    E:\iroFW\user\user.c
002426   ffe9                                                                                                               
002428   cfda     MOVFF     0xfda,0xfea                                                                                     
00242a   ffea                                                                                                               
00242c   0e02     MOVLW     0x2                                                                                             
00242e   90d8     BCF       0xd8,0x0,0x0                                                                                    
002430   50eb     MOVF      0xeb,0x0,0x0                                                                                    
002432   0a00     XORLW     0x0                                                                                             
002434   e606     BN        0x2442                                                                                          
002436   0e00     MOVLW     0x0                                                                                             
002438   5cee     SUBWF     0xee,0x0,0x0                                                                                    
00243a   0e00     MOVLW     0x0                                                                                             
00243c   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
00243e   0e00     MOVLW     0x0                                                                                             
002440   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
002422   e364     BNC       0x24ec         			)                                                                             E:\iroFW\user\user.c
002442   e354     BNC       0x24ec                                                                                          
0023fa   e124     BNZ       0x2444         		)                                                                              E:\iroFW\user\user.c
                                           		||                                                                             E:\iroFW\user\user.c
                                           		(                                                                              E:\iroFW\user\user.c
002444   0e02     MOVLW     0x2            			kINT == type                                                                  E:\iroFW\user\user.c
002446   6e30     MOVWF     0x30,0x0                                                                                        
002448   0efe     MOVLW     0xfe                                                                                            
00244a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00244c   5c30     SUBWF     0x30,0x0,0x0   			&&                                                                            E:\iroFW\user\user.c
                                           			(                                                                             E:\iroFW\user\user.c
002450   cfdf     MOVFF     0xfdf,0x31     				(acc > 32767)                                                                E:\iroFW\user\user.c
002452   f031                                                                                                               
002454   0e01     MOVLW     0x1                                                                                             
002456   cfdb     MOVFF     0xfdb,0x32                                                                                      
002458   f032                                                                                                               
00245a   0e02     MOVLW     0x2                                                                                             
00245c   cfdb     MOVFF     0xfdb,0x33                                                                                      
00245e   f033                                                                                                               
002460   3433     RLCF      0x33,0x0,0x0                                                                                    
002462   0e00     MOVLW     0x0                                                                                             
002464   1833     XORWF     0x33,0x0,0x0                                                                                    
002466   e607     BN        0x2476                                                                                          
002468   80d8     BSF       0xd8,0x0,0x0                                                                                    
00246a   0eff     MOVLW     0xff                                                                                            
00246c   5431     SUBFWB    0x31,0x0,0x0                                                                                    
00246e   0e7f     MOVLW     0x7f                                                                                            
002470   5432     SUBFWB    0x32,0x0,0x0                                                                                    
002472   0e00     MOVLW     0x0                                                                                             
002474   5433     SUBFWB    0x33,0x0,0x0                                                                                    
                                           				||                                                                           E:\iroFW\user\user.c
002478   cfd9     MOVFF     0xfd9,0xfe9    				(acc < -32768)                                                               E:\iroFW\user\user.c
00247a   ffe9                                                                                                               
00247c   cfda     MOVFF     0xfda,0xfea                                                                                     
00247e   ffea                                                                                                               
002480   0e02     MOVLW     0x2                                                                                             
002482   80d8     BSF       0xd8,0x0,0x0                                                                                    
002484   50eb     MOVF      0xeb,0x0,0x0                                                                                    
002486   0aff     XORLW     0xff                                                                                            
002488   e606     BN        0x2496                                                                                          
00248a   0e00     MOVLW     0x0                                                                                             
00248c   5cee     SUBWF     0xee,0x0,0x0                                                                                    
00248e   0e80     MOVLW     0x80                                                                                            
002490   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
002492   0eff     MOVLW     0xff                                                                                            
002494   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
002476   e33a     BNC       0x24ec         			)                                                                             E:\iroFW\user\user.c
002496   e32a     BNC       0x24ec                                                                                          
00244e   e124     BNZ       0x2498         		)                                                                              E:\iroFW\user\user.c
                                           		||                                                                             E:\iroFW\user\user.c
                                           		(                                                                              E:\iroFW\user\user.c
002498   0e03     MOVLW     0x3            			kUINT == type                                                                 E:\iroFW\user\user.c
00249a   6e34     MOVWF     0x34,0x0                                                                                        
00249c   0efe     MOVLW     0xfe                                                                                            
00249e   50db     MOVF      0xdb,0x0,0x0                                                                                    
0024a0   5c34     SUBWF     0x34,0x0,0x0   			&&                                                                            E:\iroFW\user\user.c
                                           			(                                                                             E:\iroFW\user\user.c
0024a4   cfdf     MOVFF     0xfdf,0x35     				(acc > 65535)                                                                E:\iroFW\user\user.c
0024a6   f035                                                                                                               
0024a8   0e01     MOVLW     0x1                                                                                             
0024aa   cfdb     MOVFF     0xfdb,0x36                                                                                      
0024ac   f036                                                                                                               
0024ae   0e02     MOVLW     0x2                                                                                             
0024b0   cfdb     MOVFF     0xfdb,0x37                                                                                      
0024b2   f037                                                                                                               
0024b4   3437     RLCF      0x37,0x0,0x0                                                                                    
0024b6   0e00     MOVLW     0x0                                                                                             
0024b8   1837     XORWF     0x37,0x0,0x0                                                                                    
0024ba   e607     BN        0x24ca                                                                                          
0024bc   80d8     BSF       0xd8,0x0,0x0                                                                                    
0024be   0eff     MOVLW     0xff                                                                                            
0024c0   5435     SUBFWB    0x35,0x0,0x0                                                                                    
0024c2   0eff     MOVLW     0xff                                                                                            
0024c4   5436     SUBFWB    0x36,0x0,0x0                                                                                    
0024c6   0e00     MOVLW     0x0                                                                                             
0024c8   5437     SUBFWB    0x37,0x0,0x0                                                                                    
                                           				||                                                                           E:\iroFW\user\user.c
0024cc   cfd9     MOVFF     0xfd9,0xfe9    				(acc < 0)                                                                    E:\iroFW\user\user.c
0024ce   ffe9                                                                                                               
0024d0   cfda     MOVFF     0xfda,0xfea                                                                                     
0024d2   ffea                                                                                                               
0024d4   0e02     MOVLW     0x2                                                                                             
0024d6   90d8     BCF       0xd8,0x0,0x0                                                                                    
0024d8   50eb     MOVF      0xeb,0x0,0x0                                                                                    
0024da   0a00     XORLW     0x0                                                                                             
0024dc   e606     BN        0x24ea                                                                                          
0024de   0e00     MOVLW     0x0                                                                                             
0024e0   5cee     SUBWF     0xee,0x0,0x0                                                                                    
0024e2   0e00     MOVLW     0x0                                                                                             
0024e4   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
0024e6   0e00     MOVLW     0x0                                                                                             
0024e8   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
0024ca   e310     BNC       0x24ec         			)                                                                             E:\iroFW\user\user.c
0024ea   e205     BC        0x24f6                                                                                          
0024a2   e129     BNZ       0x24f6         		)                                                                              E:\iroFW\user\user.c
                                           	)                                                                               E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
0024ec   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      E:\iroFW\user\user.c
0024ee   6a1d     CLRF      0x1d,0x0       		return (0);                                                                    E:\iroFW\user\user.c
0024f0   6a1e     CLRF      0x1e,0x0                                                                                        
0024f2   6a1f     CLRF      0x1f,0x0                                                                                        
0024f4   d00f     BRA       0x2514                                                                                          
                                           	}                                                                               E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
0024f6   cfdf     MOVFF     0xfdf,0x2a     	return(acc);	                                                                   E:\iroFW\user\user.c
0024f8   f02a                                                                                                               
0024fa   0e01     MOVLW     0x1                                                                                             
0024fc   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0024fe   f02b                                                                                                               
002500   0e02     MOVLW     0x2                                                                                             
002502   cfdb     MOVFF     0xfdb,0x2c                                                                                      
002504   f02c                                                                                                               
002506   c02a     MOVFF     0x2a,0x1d                                                                                       
002508   f01d                                                                                                               
00250a   c02b     MOVFF     0x2b,0x1e                                                                                       
00250c   f01e                                                                                                               
00250e   c02c     MOVFF     0x2c,0x1f                                                                                       
002510   f01f                                                                                                               
002512   d000     BRA       0x2514                                                                                          
002514   0e04     MOVLW     0x4            }                                                                                E:\iroFW\user\user.c
002516   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
002518   e202     BC        0x251e                                                                                          
00251a   6ae1     CLRF      0xe1,0x0                                                                                        
00251c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00251e   6ee1     MOVWF     0xe1,0x0                                                                                        
002520   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002522   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
002524   ffd9                                                                                                               
002526   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // Loop 'digits' number of times, looking at the                                 E:\iroFW\user\user.c
                                           // byte in input_buffer index *ptr, and if it is                                 E:\iroFW\user\user.c
                                           // a digit, adding it to acc. Take care of                                       E:\iroFW\user\user.c
                                           // powers of ten as well. If you hit a non-numerical                             E:\iroFW\user\user.c
                                           // char, then return FALSE, otherwise return TRUE.                               E:\iroFW\user\user.c
                                           // Store result as you go in *acc.                                               E:\iroFW\user\user.c
002528   cfd9     MOVFF     0xfd9,0xfe6    signed char extract_digit(signed short long * acc,	unsigned char digits)         E:\iroFW\user\user.c
00252a   ffe6                                                                                                               
00252c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00252e   ffd9                                                                                                               
002530   0e02     MOVLW     0x2                                                                                             
002532   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\user\user.c
                                           	unsigned char val;                                                              E:\iroFW\user\user.c
                                           	unsigned char digit_cnt;                                                        E:\iroFW\user\user.c
                                           	                                                                                E:\iroFW\user\user.c
002534   0efd     MOVLW     0xfd           	*acc = 0;                                                                       E:\iroFW\user\user.c
002536   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002538   ffe9                                                                                                               
00253a   0efe     MOVLW     0xfe                                                                                            
00253c   cfdb     MOVFF     0xfdb,0xfea                                                                                     
00253e   ffea                                                                                                               
002540   6aee     CLRF      0xee,0x0                                                                                        
002542   6aee     CLRF      0xee,0x0                                                                                        
002544   6aee     CLRF      0xee,0x0                                                                                        
                                                                                                                            E:\iroFW\user\user.c
002546   0e01     MOVLW     0x1            	for (digit_cnt = 0; digit_cnt < digits; digit_cnt++)                            E:\iroFW\user\user.c
002548   6adb     CLRF      0xdb,0x0                                                                                        
00254a   0efc     MOVLW     0xfc                                                                                            
00254c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00254e   6ef3     MOVWF     0xf3,0x0                                                                                        
002550   0e01     MOVLW     0x1                                                                                             
002552   cfdb     MOVFF     0xfdb,0xff4                                                                                     
002554   fff4                                                                                                               
002556   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002558   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
00255a   e255     BC        0x2606                                                                                          
002600   0e01     MOVLW     0x1                                                                                             
002602   2adb     INCF      0xdb,0x1,0x0                                                                                    
002604   d7a2     BRA       0x254a                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
00255c   0101     MOVLB     0x1            		val = g_RX_buf[g_RX_buf_out];                                                  E:\iroFW\user\user.c
00255e   51a1     MOVF      0xa1,0x0,0x1                                                                                    
002560   6aea     CLRF      0xea,0x0                                                                                        
002562   0f40     ADDLW     0x40                                                                                            
002564   6ee9     MOVWF     0xe9,0x0                                                                                        
002566   0e02     MOVLW     0x2                                                                                             
002568   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00256a   cfef     MOVFF     0xfef,0xfdf                                                                                     
00256c   ffdf                                                                                                               
00256e   0e30     MOVLW     0x30           		if ((val >= 48) && (val <= 57))                                                E:\iroFW\user\user.c
002570   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002572   e344     BNC       0x25fc                                                                                          
002574   50df     MOVF      0xdf,0x0,0x0                                                                                    
002576   0839     SUBLW     0x39                                                                                            
002578   e341     BNC       0x25fc                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
00257a   0efd     MOVLW     0xfd           			*acc = (*acc * 10) + (val - 48);                                              E:\iroFW\user\user.c
00257c   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00257e   ffe9                                                                                                               
002580   0efe     MOVLW     0xfe                                                                                            
002582   cfdb     MOVFF     0xfdb,0xfea                                                                                     
002584   ffea                                                                                                               
002586   cfee     MOVFF     0xfee,0x2d                                                                                      
002588   f02d                                                                                                               
00258a   cfee     MOVFF     0xfee,0x2e                                                                                      
00258c   f02e                                                                                                               
00258e   cfef     MOVFF     0xfef,0x2f                                                                                      
002590   f02f                                                                                                               
002592   0e0a     MOVLW     0xa                                                                                             
002594   6e22     MOVWF     0x22,0x0                                                                                        
002596   6a23     CLRF      0x23,0x0                                                                                        
002598   6a24     CLRF      0x24,0x0                                                                                        
00259a   c02d     MOVFF     0x2d,0x1d                                                                                       
00259c   f01d                                                                                                               
00259e   c02e     MOVFF     0x2e,0x1e                                                                                       
0025a0   f01e                                                                                                               
0025a2   c02f     MOVFF     0x2f,0x1f                                                                                       
0025a4   f01f                                                                                                               
0025a6   ecdf     CALL      0x41be,0x0                                                                                      
0025a8   f020                                                                                                               
0025aa   c01a     MOVFF     0x1a,0x2d                                                                                       
0025ac   f02d                                                                                                               
0025ae   c01b     MOVFF     0x1b,0x2e                                                                                       
0025b0   f02e                                                                                                               
0025b2   c01c     MOVFF     0x1c,0x2f                                                                                       
0025b4   f02f                                                                                                               
0025b6   0e30     MOVLW     0x30                                                                                            
0025b8   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0025ba   6e30     MOVWF     0x30,0x0                                                                                        
0025bc   6a31     CLRF      0x31,0x0                                                                                        
0025be   6a32     CLRF      0x32,0x0                                                                                        
0025c0   502d     MOVF      0x2d,0x0,0x0                                                                                    
0025c2   2430     ADDWF     0x30,0x0,0x0                                                                                    
0025c4   6e2a     MOVWF     0x2a,0x0                                                                                        
0025c6   502e     MOVF      0x2e,0x0,0x0                                                                                    
0025c8   2031     ADDWFC    0x31,0x0,0x0                                                                                    
0025ca   6e2b     MOVWF     0x2b,0x0                                                                                        
0025cc   502f     MOVF      0x2f,0x0,0x0                                                                                    
0025ce   2032     ADDWFC    0x32,0x0,0x0                                                                                    
0025d0   6e2c     MOVWF     0x2c,0x0                                                                                        
0025d2   0efd     MOVLW     0xfd                                                                                            
0025d4   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0025d6   ffe9                                                                                                               
0025d8   0efe     MOVLW     0xfe                                                                                            
0025da   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0025dc   ffea                                                                                                               
0025de   c02a     MOVFF     0x2a,0xfee                                                                                      
0025e0   ffee                                                                                                               
0025e2   c02b     MOVFF     0x2b,0xfee                                                                                      
0025e4   ffee                                                                                                               
0025e6   c02c     MOVFF     0x2c,0xfee                                                                                      
0025e8   ffee                                                                                                               
                                           			// Move to the next character                                                 E:\iroFW\user\user.c
0025ea   0101     MOVLB     0x1            			advance_RX_buf_out ();                                                        E:\iroFW\user\user.c
0025ec   2ba1     INCF      0xa1,0x1,0x1                                                                                    
0025ee   0e40     MOVLW     0x40                                                                                            
0025f0   0101     MOVLB     0x1                                                                                             
0025f2   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
0025f4   e102     BNZ       0x25fa                                                                                          
0025f6   0101     MOVLB     0x1                                                                                             
0025f8   6ba1     CLRF      0xa1,0x1                                                                                        
                                           		}                                                                              E:\iroFW\user\user.c
0025fa   d002     BRA       0x2600         		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
0025fc   0e00     MOVLW     0x0            			return (FALSE);                                                               E:\iroFW\user\user.c
0025fe   d005     BRA       0x260a                                                                                          
                                           		}                                                                              E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
002606   0e01     MOVLW     0x1            	return (TRUE);                                                                  E:\iroFW\user\user.c
002608   d000     BRA       0x260a                                                                                          
00260a   6e2a     MOVWF     0x2a,0x0       }                                                                                E:\iroFW\user\user.c
00260c   0e02     MOVLW     0x2                                                                                             
00260e   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
002610   e202     BC        0x2616                                                                                          
002612   6ae1     CLRF      0xe1,0x0                                                                                        
002614   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002616   6ee1     MOVWF     0xe1,0x0                                                                                        
002618   502a     MOVF      0x2a,0x0,0x0                                                                                    
00261a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00261c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00261e   ffd9                                                                                                               
002620   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\user\user.c
                                           // For debugging, this command will spit out a bunch of values.                  E:\iroFW\user\user.c
                                           void print_status(void)                                                          E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
                                           	printf(                                                                         E:\iroFW\user\user.c
                                           		(rom char*)"Status=%i\r\n"                                                     E:\iroFW\user\user.c
002622   5006     MOVF      0x6,0x0,0x0    		,ISR_D_FIFO_length                                                             E:\iroFW\user\user.c
002628   0e74     MOVLW     0x74                                                                                            
00262a   6e2a     MOVWF     0x2a,0x0                                                                                        
00262c   0e40     MOVLW     0x40                                                                                            
00262e   6e2b     MOVWF     0x2b,0x0                                                                                        
002630   6a2c     CLRF      0x2c,0x0                                                                                        
002632   c02a     MOVFF     0x2a,0xfe6                                                                                      
002634   ffe6                                                                                                               
002636   c02b     MOVFF     0x2b,0xfe6                                                                                      
002638   ffe6                                                                                                               
00263a   c02c     MOVFF     0x2c,0xfe6                                                                                      
00263c   ffe6                                                                                                               
002624   6ee6     MOVWF     0xe6,0x0       	);                                                                              E:\iroFW\user\user.c
002626   6ae6     CLRF      0xe6,0x0                                                                                        
00263e   ec0b     CALL      0x4416,0x0                                                                                      
002640   f022                                                                                                               
002642   6e2d     MOVWF     0x2d,0x0                                                                                        
002644   0e05     MOVLW     0x5                                                                                             
002646   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
002648   502d     MOVF      0x2d,0x0,0x0                                                                                    
00264a   0012     RETURN    0x0            }                                                                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           /******************************************************************************  E:\iroFW\user\user.c
                                            * Function:        void BlinkUSBStatus(void)                                    E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * PreCondition:    None                                                         E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * Input:           None                                                         E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * Output:          None                                                         E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * Side Effects:    None                                                         E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * Overview:        BlinkUSBStatus turns on and off LEDs corresponding to        E:\iroFW\user\user.c
                                            *                  the USB device state.                                        E:\iroFW\user\user.c
                                            *                                                                               E:\iroFW\user\user.c
                                            * Note:            mLED macros can be found in io_cfg.h                         E:\iroFW\user\user.c
                                            *                  usb_device_state is declared in usbmmap.c and is modified    E:\iroFW\user\user.c
                                            *                  in usbdrv.c, usbctrltrf.c, and usb9.c                        E:\iroFW\user\user.c
                                            *****************************************************************************/  E:\iroFW\user\user.c
                                           void BlinkUSBStatus(void)                                                        E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
                                               static word LEDCount = 0;                                                    E:\iroFW\user\user.c
                                           	static unsigned char LEDState = 0;                                              E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                               if (                                                                         E:\iroFW\user\user.c
00264c   0101     MOVLB     0x1            		usb_device_state == DETACHED_STATE                                             E:\iroFW\user\user.c
00264e   51e9     MOVF      0xe9,0x0,0x1                                                                                    
                                                  	||                                                                       E:\iroFW\user\user.c
002652   0e01     MOVLW     0x1                   	1 == UCONbits.SUSPND                                                     E:\iroFW\user\user.c
002654   6e2a     MOVWF     0x2a,0x0                                                                                        
002656   506d     MOVF      0x6d,0x0,0x0                                                                                    
002658   0b02     ANDLW     0x2                                                                                             
00265a   e001     BZ        0x265e                                                                                          
00265c   0e01     MOVLW     0x1                                                                                             
002650   e008     BZ        0x2662             )                                                                            E:\iroFW\user\user.c
00265e   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
002660   e102     BNZ       0x2666                                                                                          
                                               {                                                                            E:\iroFW\user\user.c
002662   908b     BCF       0x8b,0x0,0x0   		mLED_1_Off();                                                                  E:\iroFW\user\user.c
                                               }                                                                            E:\iroFW\user\user.c
002664   d05d     BRA       0x2720             else if (                                                                    E:\iroFW\user\user.c
                                           		usb_device_state == ATTACHED_STATE                                             E:\iroFW\user\user.c
002666   0101     MOVLB     0x1            		||                                                                             E:\iroFW\user\user.c
002668   05e9     DECF      0xe9,0x0,0x1                                                                                    
00266c   0e02     MOVLW     0x2            		usb_device_state == POWERED_STATE		                                            E:\iroFW\user\user.c
00266a   e00c     BZ        0x2684         		||                                                                             E:\iroFW\user\user.c
00266e   0101     MOVLB     0x1                                                                                             
002670   5de9     SUBWF     0xe9,0x0,0x1                                                                                    
002672   e008     BZ        0x2684                                                                                          
002674   0e03     MOVLW     0x3            		usb_device_state == DEFAULT_STATE                                              E:\iroFW\user\user.c
002676   0101     MOVLB     0x1            		||                                                                             E:\iroFW\user\user.c
002678   5de9     SUBWF     0xe9,0x0,0x1                                                                                    
00267a   e004     BZ        0x2684                                                                                          
00267c   0e05     MOVLW     0x5            		usb_device_state == ADDRESS_STATE                                              E:\iroFW\user\user.c
00267e   0101     MOVLB     0x1            	)                                                                               E:\iroFW\user\user.c
002680   5de9     SUBWF     0xe9,0x0,0x1                                                                                    
002682   e102     BNZ       0x2688                                                                                          
                                               {                                                                            E:\iroFW\user\user.c
002684   808b     BSF       0x8b,0x0,0x0           mLED_1_On();                                                             E:\iroFW\user\user.c
                                               }                                                                            E:\iroFW\user\user.c
002686   d04c     BRA       0x2720             else if (usb_device_state == CONFIGURED_STATE)                               E:\iroFW\user\user.c
002688   0e06     MOVLW     0x6                                                                                             
00268a   0101     MOVLB     0x1                                                                                             
00268c   5de9     SUBWF     0xe9,0x0,0x1                                                                                    
00268e   e148     BNZ       0x2720                                                                                          
                                               {                                                                            E:\iroFW\user\user.c
002690   0101     MOVLB     0x1            		LEDCount--;                                                                    E:\iroFW\user\user.c
002692   07ce     DECF      0xce,0x1,0x1                                                                                    
002694   0e00     MOVLW     0x0                                                                                             
002696   5bcf     SUBWFB    0xcf,0x1,0x1                                                                                    
002698   0101     MOVLB     0x1            		if (0 == LEDState)                                                             E:\iroFW\user\user.c
00269a   51d0     MOVF      0xd0,0x0,0x1                                                                                    
00269c   e10e     BNZ       0x26ba                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
00269e   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            E:\iroFW\user\user.c
0026a0   51ce     MOVF      0xce,0x0,0x1                                                                                    
0026a2   11cf     IORWF     0xcf,0x0,0x1                                                                                    
0026a4   e109     BNZ       0x26b8                                                                                          
                                           			{                                                                             E:\iroFW\user\user.c
0026a6   808b     BSF       0x8b,0x0,0x0   				mLED_1_On();                                                                 E:\iroFW\user\user.c
0026a8   0101     MOVLB     0x1            				LEDCount = 10000U;				                                                       E:\iroFW\user\user.c
0026aa   0e10     MOVLW     0x10                                                                                            
0026ac   6fce     MOVWF     0xce,0x1                                                                                        
0026ae   0e27     MOVLW     0x27                                                                                            
0026b0   6fcf     MOVWF     0xcf,0x1                                                                                        
0026b2   0101     MOVLB     0x1            				LEDState = 1;                                                                E:\iroFW\user\user.c
0026b4   0e01     MOVLW     0x1                                                                                             
0026b6   6fd0     MOVWF     0xd0,0x1                                                                                        
                                           			}                                                                             E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
0026b8   d033     BRA       0x2720         		else if (1 == LEDState)                                                        E:\iroFW\user\user.c
0026ba   0101     MOVLB     0x1                                                                                             
0026bc   05d0     DECF      0xd0,0x0,0x1                                                                                    
0026be   e10e     BNZ       0x26dc                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
0026c0   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            E:\iroFW\user\user.c
0026c2   51ce     MOVF      0xce,0x0,0x1                                                                                    
0026c4   11cf     IORWF     0xcf,0x0,0x1                                                                                    
0026c6   e109     BNZ       0x26da                                                                                          
                                           			{                                                                             E:\iroFW\user\user.c
0026c8   908b     BCF       0x8b,0x0,0x0   				mLED_1_Off();                                                                E:\iroFW\user\user.c
0026ca   0101     MOVLB     0x1            				LEDCount = 10000U;				                                                       E:\iroFW\user\user.c
0026cc   0e10     MOVLW     0x10                                                                                            
0026ce   6fce     MOVWF     0xce,0x1                                                                                        
0026d0   0e27     MOVLW     0x27                                                                                            
0026d2   6fcf     MOVWF     0xcf,0x1                                                                                        
0026d4   0101     MOVLB     0x1            				LEDState = 2;                                                                E:\iroFW\user\user.c
0026d6   0e02     MOVLW     0x2                                                                                             
0026d8   6fd0     MOVWF     0xd0,0x1                                                                                        
                                           			}                                                                             E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
0026da   d022     BRA       0x2720         		else if (2 == LEDState)                                                        E:\iroFW\user\user.c
0026dc   0e02     MOVLW     0x2                                                                                             
0026de   0101     MOVLB     0x1                                                                                             
0026e0   5dd0     SUBWF     0xd0,0x0,0x1                                                                                    
0026e2   e10e     BNZ       0x2700                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
0026e4   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            E:\iroFW\user\user.c
0026e6   51ce     MOVF      0xce,0x0,0x1                                                                                    
0026e8   11cf     IORWF     0xcf,0x0,0x1                                                                                    
0026ea   e109     BNZ       0x26fe                                                                                          
                                           			{                                                                             E:\iroFW\user\user.c
0026ec   808b     BSF       0x8b,0x0,0x0   				mLED_1_On();                                                                 E:\iroFW\user\user.c
0026ee   0101     MOVLB     0x1            				LEDCount = 100000U;				                                                      E:\iroFW\user\user.c
0026f0   0ea0     MOVLW     0xa0                                                                                            
0026f2   6fce     MOVWF     0xce,0x1                                                                                        
0026f4   0e86     MOVLW     0x86                                                                                            
0026f6   6fcf     MOVWF     0xcf,0x1                                                                                        
0026f8   0101     MOVLB     0x1            				LEDState = 3;                                                                E:\iroFW\user\user.c
0026fa   0e03     MOVLW     0x3                                                                                             
0026fc   6fd0     MOVWF     0xd0,0x1                                                                                        
                                           			}                                                                             E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
0026fe   d010     BRA       0x2720         		else if (LEDState >= 3)                                                        E:\iroFW\user\user.c
002700   0e03     MOVLW     0x3                                                                                             
002702   0101     MOVLB     0x1                                                                                             
002704   5dd0     SUBWF     0xd0,0x0,0x1                                                                                    
002706   e30c     BNC       0x2720                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
002708   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            E:\iroFW\user\user.c
00270a   51ce     MOVF      0xce,0x0,0x1                                                                                    
00270c   11cf     IORWF     0xcf,0x0,0x1                                                                                    
00270e   e108     BNZ       0x2720                                                                                          
                                           			{                                                                             E:\iroFW\user\user.c
002710   908b     BCF       0x8b,0x0,0x0   				mLED_1_Off();                                                                E:\iroFW\user\user.c
002712   0101     MOVLB     0x1            				LEDCount = 10000U;				                                                       E:\iroFW\user\user.c
002714   0e10     MOVLW     0x10                                                                                            
002716   6fce     MOVWF     0xce,0x1                                                                                        
002718   0e27     MOVLW     0x27                                                                                            
00271a   6fcf     MOVWF     0xcf,0x1                                                                                        
00271c   0101     MOVLB     0x1            				LEDState = 0;                                                                E:\iroFW\user\user.c
00271e   6bd0     CLRF      0xd0,0x1                                                                                        
                                           			}                                                                             E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                               }                                                                            E:\iroFW\user\user.c
002720   0012     RETURN    0x0            }                                                                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           BOOL SwitchIsPressed(void)                                                       E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
002722   b482     BTFSC     0x82,0x2,0x0   	if( 0 == UserSW)                   	// If pressed                               E:\iroFW\user\user.c
002724   d003     BRA       0x272c                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
002726   0e01     MOVLW     0x1            	    return (TRUE);                	// Was pressed                               E:\iroFW\user\user.c
002728   d003     BRA       0x2730                                                                                          
                                           	}                                                                               E:\iroFW\user\user.c
00272a   d002     BRA       0x2730         	else                                                                            E:\iroFW\user\user.c
                                           	{                                                                               E:\iroFW\user\user.c
00272c   0e00     MOVLW     0x0            		return (FALSE);					// Was not pressed                                         E:\iroFW\user\user.c
00272e   d000     BRA       0x2730                                                                                          
                                           	}                                                                               E:\iroFW\user\user.c
002730   0012     RETURN    0x0            }                                                                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           /** Start Luke Orland code **************************************************/   E:\iroFW\user\user.c
                                           unsigned int justBegun=1;                                                        E:\iroFW\user\user.c
                                           unsigned int prevValueSensor0;                                                   E:\iroFW\user\user.c
                                           unsigned int prevValueSensor1;                                                   E:\iroFW\user\user.c
                                           unsigned int currentValueSensor0;                                                E:\iroFW\user\user.c
                                           unsigned int currentValueSensor1;                                                E:\iroFW\user\user.c
                                           unsigned int Sensor0PortApin=0;                                                  E:\iroFW\user\user.c
                                           unsigned int Sensor1PortApin=1;                                                  E:\iroFW\user\user.c
                                           unsigned int riderOneTicks;                                                      E:\iroFW\user\user.c
                                           unsigned int riderTwoTicks;                                                      E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           void HallEffSensors(void)                                                        E:\iroFW\user\user.c
                                           {                                                                                E:\iroFW\user\user.c
002732   0101     MOVLB     0x1            	if(is_racing)                                                                   E:\iroFW\user\user.c
002734   51cc     MOVF      0xcc,0x0,0x1                                                                                    
002736   e101     BNZ       0x273a                                                                                          
002738   d0ae     BRA       0x2896                                                                                          
                                           	{                                                                               E:\iroFW\user\user.c
00273a   0101     MOVLB     0x1            		if(justBegun)                                                                  E:\iroFW\user\user.c
00273c   51d1     MOVF      0xd1,0x0,0x1                                                                                    
00273e   11d2     IORWF     0xd2,0x0,0x1                                                                                    
002740   e032     BZ        0x27a6                                                                                          
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// initialize the pins                                                        E:\iroFW\user\user.c
002742   0e01     MOVLW     0x1            			bitset (DDRA, Sensor0PortApin);     // set Port A Pin x as input              E:\iroFW\user\user.c
002744   c1d3     MOVFF     0x1d3,0xfe7                                                                                     
002746   ffe7                                                                                                               
002748   52e7     MOVF      0xe7,0x1,0x0                                                                                    
00274a   e004     BZ        0x2754                                                                                          
00274c   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
00274e   0bfe     ANDLW     0xfe                                                                                            
002750   06e7     DECF      0xe7,0x1,0x0                                                                                    
002752   e1fc     BNZ       0x274c                                                                                          
002754   1292     IORWF     0x92,0x1,0x0                                                                                    
002756   0e01     MOVLW     0x1            			bitset (DDRA, Sensor1PortApin);     // set Port A Pin x as input              E:\iroFW\user\user.c
002758   c1d5     MOVFF     0x1d5,0xfe7                                                                                     
00275a   ffe7                                                                                                               
00275c   52e7     MOVF      0xe7,0x1,0x0                                                                                    
00275e   e004     BZ        0x2768                                                                                          
002760   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
002762   0bfe     ANDLW     0xfe                                                                                            
002764   06e7     DECF      0xe7,0x1,0x0                                                                                    
002766   e1fc     BNZ       0x2760                                                                                          
002768   1292     IORWF     0x92,0x1,0x0                                                                                    
                                           			// read the pins                                                              E:\iroFW\user\user.c
00276a   0e01     MOVLW     0x1            			currentValueSensor0 = bittst (PORTA, Sensor0PortApin);  	// read Port A Pin x state E:\iroFW\user\user.c
00276c   c1d3     MOVFF     0x1d3,0xfe7                                                                                     
00276e   ffe7                                                                                                               
002770   52e7     MOVF      0xe7,0x1,0x0                                                                                    
002772   e004     BZ        0x277c                                                                                          
002774   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
002776   0bfe     ANDLW     0xfe                                                                                            
002778   06e7     DECF      0xe7,0x1,0x0                                                                                    
00277a   e1fc     BNZ       0x2774                                                                                          
00277c   1480     ANDWF     0x80,0x0,0x0                                                                                    
00277e   0101     MOVLB     0x1                                                                                             
002780   6fac     MOVWF     0xac,0x1                                                                                        
002782   6bad     CLRF      0xad,0x1                                                                                        
002784   0e01     MOVLW     0x1            			currentValueSensor1 = bittst (PORTA, Sensor1PortApin);  	// read Port A Pin x state E:\iroFW\user\user.c
002786   c1d5     MOVFF     0x1d5,0xfe7                                                                                     
002788   ffe7                                                                                                               
00278a   52e7     MOVF      0xe7,0x1,0x0                                                                                    
00278c   e004     BZ        0x2796                                                                                          
00278e   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
002790   0bfe     ANDLW     0xfe                                                                                            
002792   06e7     DECF      0xe7,0x1,0x0                                                                                    
002794   e1fc     BNZ       0x278e                                                                                          
002796   1480     ANDWF     0x80,0x0,0x0                                                                                    
002798   0101     MOVLB     0x1                                                                                             
00279a   6fae     MOVWF     0xae,0x1                                                                                        
00279c   6baf     CLRF      0xaf,0x1                                                                                        
                                           	                                                                                E:\iroFW\user\user.c
00279e   0101     MOVLB     0x1            			justBegun=0;                                                                  E:\iroFW\user\user.c
0027a0   6bd1     CLRF      0xd1,0x1                                                                                        
0027a2   6bd2     CLRF      0xd2,0x1                                                                                        
                                           		}                                                                              E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
0027a4   d078     BRA       0x2896         		else                                                                           E:\iroFW\user\user.c
                                           		{                                                                              E:\iroFW\user\user.c
                                           			// remember previous state of pins                                            E:\iroFW\user\user.c
0027a6   c1ac     MOVFF     0x1ac,0x1a8    			prevValueSensor0=currentValueSensor0;                                         E:\iroFW\user\user.c
0027a8   f1a8                                                                                                               
0027aa   c1ad     MOVFF     0x1ad,0x1a9                                                                                     
0027ac   f1a9                                                                                                               
0027ae   c1ae     MOVFF     0x1ae,0x1aa    			prevValueSensor1=currentValueSensor1;                                         E:\iroFW\user\user.c
0027b0   f1aa                                                                                                               
0027b2   c1af     MOVFF     0x1af,0x1ab                                                                                     
0027b4   f1ab                                                                                                               
                                           	                                                                                E:\iroFW\user\user.c
                                           			// read the pins                                                              E:\iroFW\user\user.c
0027b6   0e01     MOVLW     0x1            			currentValueSensor0 = bittst (PORTA, Sensor0PortApin);  	// read state of Port A Pin x E:\iroFW\user\user.c
0027b8   c1d3     MOVFF     0x1d3,0xfe7                                                                                     
0027ba   ffe7                                                                                                               
0027bc   52e7     MOVF      0xe7,0x1,0x0                                                                                    
0027be   e004     BZ        0x27c8                                                                                          
0027c0   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
0027c2   0bfe     ANDLW     0xfe                                                                                            
0027c4   06e7     DECF      0xe7,0x1,0x0                                                                                    
0027c6   e1fc     BNZ       0x27c0                                                                                          
0027c8   1480     ANDWF     0x80,0x0,0x0                                                                                    
0027ca   0101     MOVLB     0x1                                                                                             
0027cc   6fac     MOVWF     0xac,0x1                                                                                        
0027ce   6bad     CLRF      0xad,0x1                                                                                        
0027d0   0e01     MOVLW     0x1            			currentValueSensor1 = bittst (PORTA, Sensor1PortApin);  	// read state of Port A Pin x E:\iroFW\user\user.c
0027d2   c1d5     MOVFF     0x1d5,0xfe7                                                                                     
0027d4   ffe7                                                                                                               
0027d6   52e7     MOVF      0xe7,0x1,0x0                                                                                    
0027d8   e004     BZ        0x27e2                                                                                          
0027da   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
0027dc   0bfe     ANDLW     0xfe                                                                                            
0027de   06e7     DECF      0xe7,0x1,0x0                                                                                    
0027e0   e1fc     BNZ       0x27da                                                                                          
0027e2   1480     ANDWF     0x80,0x0,0x0                                                                                    
0027e4   0101     MOVLB     0x1                                                                                             
0027e6   6fae     MOVWF     0xae,0x1                                                                                        
0027e8   6baf     CLRF      0xaf,0x1                                                                                        
                                           		                                                                               E:\iroFW\user\user.c
0027ea   0101     MOVLB     0x1            			if((currentValueSensor0^prevValueSensor0)&~currentValueSensor0)               E:\iroFW\user\user.c
0027ec   0101     MOVLB     0x1                                                                                             
0027ee   51ac     MOVF      0xac,0x0,0x1                                                                                    
0027f0   0101     MOVLB     0x1                                                                                             
0027f2   19a8     XORWF     0xa8,0x0,0x1                                                                                    
0027f4   6e2c     MOVWF     0x2c,0x0                                                                                        
0027f6   0101     MOVLB     0x1                                                                                             
0027f8   0101     MOVLB     0x1                                                                                             
0027fa   51ad     MOVF      0xad,0x0,0x1                                                                                    
0027fc   0101     MOVLB     0x1                                                                                             
0027fe   19a9     XORWF     0xa9,0x0,0x1                                                                                    
002800   6e2d     MOVWF     0x2d,0x0                                                                                        
002802   c1ac     MOVFF     0x1ac,0x2e                                                                                      
002804   f02e                                                                                                               
002806   c1ad     MOVFF     0x1ad,0x2f                                                                                      
002808   f02f                                                                                                               
00280a   1e2e     COMF      0x2e,0x1,0x0                                                                                    
00280c   1e2f     COMF      0x2f,0x1,0x0                                                                                    
00280e   502c     MOVF      0x2c,0x0,0x0                                                                                    
002810   142e     ANDWF     0x2e,0x0,0x0                                                                                    
002812   6e2a     MOVWF     0x2a,0x0                                                                                        
002814   502d     MOVF      0x2d,0x0,0x0                                                                                    
002816   142f     ANDWF     0x2f,0x0,0x0                                                                                    
002818   6e2b     MOVWF     0x2b,0x0                                                                                        
00281a   502a     MOVF      0x2a,0x0,0x0                                                                                    
00281c   102b     IORWF     0x2b,0x0,0x0                                                                                    
00281e   e010     BZ        0x2840                                                                                          
                                           			{                                                                             E:\iroFW\user\user.c
                                           				// send a char string through USB packet stating that sensor x switched to high E:\iroFW\user\user.c
002820   0e70     MOVLW     0x70           				printf("1\r\n");                                                             E:\iroFW\user\user.c
002822   6e2a     MOVWF     0x2a,0x0                                                                                        
002824   0e40     MOVLW     0x40                                                                                            
002826   6e2b     MOVWF     0x2b,0x0                                                                                        
002828   6a2c     CLRF      0x2c,0x0                                                                                        
00282a   c02a     MOVFF     0x2a,0xfe6                                                                                      
00282c   ffe6                                                                                                               
00282e   c02b     MOVFF     0x2b,0xfe6                                                                                      
002830   ffe6                                                                                                               
002832   c02c     MOVFF     0x2c,0xfe6                                                                                      
002834   ffe6                                                                                                               
002836   ec0b     CALL      0x4416,0x0                                                                                      
002838   f022                                                                                                               
00283a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00283c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00283e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           			}                                                                             E:\iroFW\user\user.c
                                           		                                                                               E:\iroFW\user\user.c
002840   0101     MOVLB     0x1            			if((currentValueSensor1^prevValueSensor1)&~currentValueSensor1)               E:\iroFW\user\user.c
002842   0101     MOVLB     0x1                                                                                             
002844   51ae     MOVF      0xae,0x0,0x1                                                                                    
002846   0101     MOVLB     0x1                                                                                             
002848   19aa     XORWF     0xaa,0x0,0x1                                                                                    
00284a   6e2c     MOVWF     0x2c,0x0                                                                                        
00284c   0101     MOVLB     0x1                                                                                             
00284e   0101     MOVLB     0x1                                                                                             
002850   51af     MOVF      0xaf,0x0,0x1                                                                                    
002852   0101     MOVLB     0x1                                                                                             
002854   19ab     XORWF     0xab,0x0,0x1                                                                                    
002856   6e2d     MOVWF     0x2d,0x0                                                                                        
002858   c1ae     MOVFF     0x1ae,0x2e                                                                                      
00285a   f02e                                                                                                               
00285c   c1af     MOVFF     0x1af,0x2f                                                                                      
00285e   f02f                                                                                                               
002860   1e2e     COMF      0x2e,0x1,0x0                                                                                    
002862   1e2f     COMF      0x2f,0x1,0x0                                                                                    
002864   502c     MOVF      0x2c,0x0,0x0                                                                                    
002866   142e     ANDWF     0x2e,0x0,0x0                                                                                    
002868   6e2a     MOVWF     0x2a,0x0                                                                                        
00286a   502d     MOVF      0x2d,0x0,0x0                                                                                    
00286c   142f     ANDWF     0x2f,0x0,0x0                                                                                    
00286e   6e2b     MOVWF     0x2b,0x0                                                                                        
002870   502a     MOVF      0x2a,0x0,0x0                                                                                    
002872   102b     IORWF     0x2b,0x0,0x0                                                                                    
002874   e010     BZ        0x2896                                                                                          
                                           			{                                                                             E:\iroFW\user\user.c
                                           				// send a char string through USB packet stating that sensor x switched to high E:\iroFW\user\user.c
002876   0e6c     MOVLW     0x6c           				printf("2\r\n");                                                             E:\iroFW\user\user.c
002878   6e2a     MOVWF     0x2a,0x0                                                                                        
00287a   0e40     MOVLW     0x40                                                                                            
00287c   6e2b     MOVWF     0x2b,0x0                                                                                        
00287e   6a2c     CLRF      0x2c,0x0                                                                                        
002880   c02a     MOVFF     0x2a,0xfe6                                                                                      
002882   ffe6                                                                                                               
002884   c02b     MOVFF     0x2b,0xfe6                                                                                      
002886   ffe6                                                                                                               
002888   c02c     MOVFF     0x2c,0xfe6                                                                                      
00288a   ffe6                                                                                                               
00288c   ec0b     CALL      0x4416,0x0                                                                                      
00288e   f022                                                                                                               
002890   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002892   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002894   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           			}                                                                             E:\iroFW\user\user.c
                                           		}                                                                              E:\iroFW\user\user.c
                                           	}                                                                               E:\iroFW\user\user.c
002896   0012     RETURN    0x0            }                                                                                E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                                                                                                            E:\iroFW\user\user.c
                                           /** EOF user.c ***************************************************************/  E:\iroFW\user\user.c
                                           /*********************************************************************           E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            *             Microchip USB C18 Firmware -  CDC Version 1.0                     E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            *********************************************************************           E:\iroFW\system\usb\class\cdc\cdc.c
                                            * FileName:        cdc.c                                                        E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Dependencies:    See INCLUDES section below                                   E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Processor:       PIC18                                                        E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Compiler:        C18 2.30.01+                                                 E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Company:         Microchip Technology, Inc.                                   E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Software License Agreement                                                    E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * The software supplied herewith by Microchip Technology Incorporated           E:\iroFW\system\usb\class\cdc\cdc.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             E:\iroFW\system\usb\class\cdc\cdc.c
                                            * supplied to you, the Company’s customer, for use solely and                   E:\iroFW\system\usb\class\cdc\cdc.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * software is owned by the Company and/or its supplier, and is                  E:\iroFW\system\usb\class\cdc\cdc.c
                                            * protected under applicable copyright laws. All rights are reserved.           E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Any use in violation of the foregoing restrictions may subject the            E:\iroFW\system\usb\class\cdc\cdc.c
                                            * user to criminal sanctions under applicable laws, as well as to               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * civil liability for the breach of the terms and conditions of this            E:\iroFW\system\usb\class\cdc\cdc.c
                                            * license.                                                                      E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             E:\iroFW\system\usb\class\cdc\cdc.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             E:\iroFW\system\usb\class\cdc\cdc.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   E:\iroFW\system\usb\class\cdc\cdc.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             E:\iroFW\system\usb\class\cdc\cdc.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    E:\iroFW\system\usb\class\cdc\cdc.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Author               Date        Comment                                      E:\iroFW\system\usb\class\cdc\cdc.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Rawin Rojvanit       11/19/04    Original. RS-232 Emulation Subset            E:\iroFW\system\usb\class\cdc\cdc.c
                                            ********************************************************************/           E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           /** I N C L U D E S **********************************************************/  E:\iroFW\system\usb\class\cdc\cdc.c
                                           #include <p18cxxx.h>                                                             E:\iroFW\system\usb\class\cdc\cdc.c
                                           #include "system\typedefs.h"                                                     E:\iroFW\system\usb\class\cdc\cdc.c
                                           #include "system\usb\usb.h"                                                      E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           #ifdef USB_USE_CDC                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           /** V A R I A B L E S ********************************************************/  E:\iroFW\system\usb\class\cdc\cdc.c
                                           #pragma udata                                                                    E:\iroFW\system\usb\class\cdc\cdc.c
                                           byte cdc_rx_len;            // total rx length                                   E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           byte cdc_trf_state;         // States are defined cdc.h                          E:\iroFW\system\usb\class\cdc\cdc.c
                                           POINTER pCDCSrc;            // Dedicated source pointer                          E:\iroFW\system\usb\class\cdc\cdc.c
                                           POINTER pCDCDst;            // Dedicated destination pointer                     E:\iroFW\system\usb\class\cdc\cdc.c
                                           byte cdc_tx_len;            // total tx length                                   E:\iroFW\system\usb\class\cdc\cdc.c
                                           byte cdc_mem_type;          // _ROM, _RAM                                        E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           LINE_CODING line_coding;    // Buffer to store line coding information           E:\iroFW\system\usb\class\cdc\cdc.c
                                           CONTROL_SIGNAL_BITMAP control_signal_bitmap;                                     E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           /*                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * SEND_ENCAPSULATED_COMMAND and GET_ENCAPSULATED_RESPONSE are required          E:\iroFW\system\usb\class\cdc\cdc.c
                                            * requests according to the CDC specification.                                  E:\iroFW\system\usb\class\cdc\cdc.c
                                            * However, it is not really being used here, therefore a dummy buffer is        E:\iroFW\system\usb\class\cdc\cdc.c
                                            * used for conformance.                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            */                                                                              E:\iroFW\system\usb\class\cdc\cdc.c
                                           #define dummy_length    0x08                                                     E:\iroFW\system\usb\class\cdc\cdc.c
                                           byte dummy_encapsulated_cmd_response[dummy_length];                              E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           /** D E C L A R A T I O N S **************************************************/  E:\iroFW\system\usb\class\cdc\cdc.c
                                           #pragma code                                                                     E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           /** C L A S S  S P E C I F I C  R E Q ****************************************/  E:\iroFW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Function:        void USBCheckCDCRequest(void)                                E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Input:           None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Overview:        This routine checks the setup data packet to see if it       E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  knows how to handle it                                       E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Note:            None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  E:\iroFW\system\usb\class\cdc\cdc.c
                                           void USBCheckCDCRequest(void)                                                    E:\iroFW\system\usb\class\cdc\cdc.c
                                           {                                                                                E:\iroFW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * If request recipient is not an interface then return                      E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
0034ba   0104     MOVLB     0x4                if(SetupPkt.Recipient != RCPT_INTF) return;                                  E:\iroFW\system\usb\class\cdc\cdc.c
0034bc   5120     MOVF      0x20,0x0,0x1                                                                                    
0034be   0b1f     ANDLW     0x1f                                                                                            
0034c0   0801     SUBLW     0x1                                                                                             
0034c2   e001     BZ        0x34c6                                                                                          
0034c4   d060     BRA       0x3586                                                                                          
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * If request type is not class-specific then return                         E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
0034c6   0104     MOVLB     0x4                if(SetupPkt.RequestType != CLASS) return;                                    E:\iroFW\system\usb\class\cdc\cdc.c
0034c8   5120     MOVF      0x20,0x0,0x1                                                                                    
0034ca   0b60     ANDLW     0x60                                                                                            
0034cc   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0034ce   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0034d0   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0034d2   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0034d4   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
0034d6   0801     SUBLW     0x1                                                                                             
0034d8   e001     BZ        0x34dc                                                                                          
0034da   d055     BRA       0x3586                                                                                          
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Interface ID must match interface numbers associated with                 E:\iroFW\system\usb\class\cdc\cdc.c
                                                * CDC class, else return                                                    E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
0034dc   0104     MOVLB     0x4                if((SetupPkt.bIntfID != CDC_COMM_INTF_ID)&&                                  E:\iroFW\system\usb\class\cdc\cdc.c
0034de   5124     MOVF      0x24,0x0,0x1                                                                                    
0034e0   e004     BZ        0x34ea                (SetupPkt.bIntfID != CDC_DATA_INTF_ID)) return;                           E:\iroFW\system\usb\class\cdc\cdc.c
0034e2   0104     MOVLB     0x4                                                                                             
0034e4   0524     DECF      0x24,0x0,0x1                                                                                    
0034e6   e001     BZ        0x34ea                                                                                          
0034e8   d04e     BRA       0x3586                                                                                          
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
0034ea   0104     MOVLB     0x4                switch(SetupPkt.bRequest)                                                    E:\iroFW\system\usb\class\cdc\cdc.c
0034ec   5121     MOVF      0x21,0x0,0x1                                                                                    
0034ee   0a23     XORLW     0x23                                                                                            
0034f0   e048     BZ        0x3582                                                                                          
0034f2   0a01     XORLW     0x1                                                                                             
0034f4   e040     BZ        0x3576                                                                                          
0034f6   0a03     XORLW     0x3                                                                                             
0034f8   e030     BZ        0x355a                                                                                          
0034fa   0a01     XORLW     0x1                                                                                             
0034fc   e025     BZ        0x3548                                                                                          
0034fe   0a24     XORLW     0x24                                                                                            
003500   e022     BZ        0x3546                                                                                          
003502   0a07     XORLW     0x7                                                                                             
003504   e01f     BZ        0x3544                                                                                          
003506   0a01     XORLW     0x1                                                                                             
003508   e01c     BZ        0x3542                                                                                          
00350a   0a03     XORLW     0x3                                                                                             
00350c   e011     BZ        0x3530                                                                                          
00350e   0a01     XORLW     0x1                                                                                             
003510   e001     BZ        0x3514                                                                                          
003512   d038     BRA       0x3584                                                                                          
                                               {                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                                   case SEND_ENCAPSULATED_COMMAND:                                          E:\iroFW\system\usb\class\cdc\cdc.c
003514   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   E:\iroFW\system\usb\class\cdc\cdc.c
003516   0e03     MOVLW     0x3                                                                                             
003518   6fe2     MOVWF     0xe2,0x1                                                                                        
00351a   0101     MOVLB     0x1                        pSrc.bRam = (byte*)&dummy_encapsulated_cmd_response;                 E:\iroFW\system\usb\class\cdc\cdc.c
00351c   0ec4     MOVLW     0xc4                                                                                            
00351e   6fe3     MOVWF     0xe3,0x1                                                                                        
003520   0e01     MOVLW     0x1                                                                                             
003522   6fe4     MOVWF     0xe4,0x1                                                                                        
003524   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;                                        E:\iroFW\system\usb\class\cdc\cdc.c
003526   93ea     BCF       0xea,0x1,0x1                                                                                    
003528   0101     MOVLB     0x1                        LSB(wCount) = dummy_length;                                          E:\iroFW\system\usb\class\cdc\cdc.c
00352a   0e08     MOVLW     0x8                                                                                             
00352c   6fe7     MOVWF     0xe7,0x1                                                                                        
00352e   d02b     BRA       0x3586                     break;                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                                   case GET_ENCAPSULATED_RESPONSE:                                          E:\iroFW\system\usb\class\cdc\cdc.c
003530   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   E:\iroFW\system\usb\class\cdc\cdc.c
003532   0e03     MOVLW     0x3                                                                                             
003534   6fe2     MOVWF     0xe2,0x1                                                                                        
                                                       // Populate dummy_encapsulated_cmd_response first.                   E:\iroFW\system\usb\class\cdc\cdc.c
003536   0101     MOVLB     0x1                        pDst.bRam = (byte*)&dummy_encapsulated_cmd_response;                 E:\iroFW\system\usb\class\cdc\cdc.c
003538   0ec4     MOVLW     0xc4                                                                                            
00353a   6fe5     MOVWF     0xe5,0x1                                                                                        
00353c   0e01     MOVLW     0x1                                                                                             
00353e   6fe6     MOVWF     0xe6,0x1                                                                                        
003540   d022     BRA       0x3586                     break;                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                                   case SET_COMM_FEATURE:                  // Optional                      E:\iroFW\system\usb\class\cdc\cdc.c
003542   d021     BRA       0x3586                     break;                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                                   case GET_COMM_FEATURE:                  // Optional                      E:\iroFW\system\usb\class\cdc\cdc.c
003544   d020     BRA       0x3586                     break;                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                                   case CLEAR_COMM_FEATURE:                // Optional                      E:\iroFW\system\usb\class\cdc\cdc.c
003546   d01f     BRA       0x3586                     break;                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                                   case SET_LINE_CODING:                                                    E:\iroFW\system\usb\class\cdc\cdc.c
003548   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   E:\iroFW\system\usb\class\cdc\cdc.c
00354a   0e03     MOVLW     0x3                                                                                             
00354c   6fe2     MOVWF     0xe2,0x1                                                                                        
00354e   0101     MOVLB     0x1                        pDst.bRam = (byte*)&line_coding;    // Set destination               E:\iroFW\system\usb\class\cdc\cdc.c
003550   0ebc     MOVLW     0xbc                                                                                            
003552   6fe5     MOVWF     0xe5,0x1                                                                                        
003554   0e01     MOVLW     0x1                                                                                             
003556   6fe6     MOVWF     0xe6,0x1                                                                                        
003558   d016     BRA       0x3586                     break;                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                                   case GET_LINE_CODING:                                                    E:\iroFW\system\usb\class\cdc\cdc.c
00355a   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   E:\iroFW\system\usb\class\cdc\cdc.c
00355c   0e03     MOVLW     0x3                                                                                             
00355e   6fe2     MOVWF     0xe2,0x1                                                                                        
003560   0101     MOVLB     0x1                        pSrc.bRam = (byte*)&line_coding;    // Set source                    E:\iroFW\system\usb\class\cdc\cdc.c
003562   0ebc     MOVLW     0xbc                                                                                            
003564   6fe3     MOVWF     0xe3,0x1                                                                                        
003566   0e01     MOVLW     0x1                                                                                             
003568   6fe4     MOVWF     0xe4,0x1                                                                                        
00356a   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;       // Set memory type               E:\iroFW\system\usb\class\cdc\cdc.c
00356c   93ea     BCF       0xea,0x1,0x1                                                                                    
00356e   0101     MOVLB     0x1                        LSB(wCount) = LINE_CODING_LENGTH;   // Set data count                E:\iroFW\system\usb\class\cdc\cdc.c
003570   0e07     MOVLW     0x7                                                                                             
003572   6fe7     MOVWF     0xe7,0x1                                                                                        
003574   d008     BRA       0x3586                     break;                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                                   case SET_CONTROL_LINE_STATE:                                             E:\iroFW\system\usb\class\cdc\cdc.c
003576   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   E:\iroFW\system\usb\class\cdc\cdc.c
003578   0e03     MOVLW     0x3                                                                                             
00357a   6fe2     MOVWF     0xe2,0x1                                                                                        
00357c   c422     MOVFF     0x422,0x1c3                control_signal_bitmap._byte = LSB(SetupPkt.W_Value);                 E:\iroFW\system\usb\class\cdc\cdc.c
00357e   f1c3                                                                                                               
003580   d002     BRA       0x3586                     break;                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                                   case SEND_BREAK:                        // Optional                      E:\iroFW\system\usb\class\cdc\cdc.c
003582   d001     BRA       0x3586                     break;                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                                   default:                                                                 E:\iroFW\system\usb\class\cdc\cdc.c
003584   d000     BRA       0x3586                     break;                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                               }//end switch(SetupPkt.bRequest)                                             E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
003586   0012     RETURN    0x0            }//end USBCheckCDCRequest                                                        E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           /** U S E R  A P I ***********************************************************/  E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Function:        void CDCInitEP(void)                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Input:           None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Overview:        CDCInitEP initializes CDC endpoints, buffer descriptors,     E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  internal state-machine, and variables.                       E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  It should be called after the USB host has sent out a        E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  SET_CONFIGURATION request.                                   E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  See USBStdSetCfgHandler() in usb9.c for examples.            E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Note:            None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  E:\iroFW\system\usb\class\cdc\cdc.c
                                           void CDCInitEP(void)                                                             E:\iroFW\system\usb\class\cdc\cdc.c
                                           {                                                                                E:\iroFW\system\usb\class\cdc\cdc.c
                                               //Abstract line coding information                                           E:\iroFW\system\usb\class\cdc\cdc.c
003588   0101     MOVLB     0x1                line_coding.dwDTERate._dword = 115200;      // baud rate                     E:\iroFW\system\usb\class\cdc\cdc.c
00358a   6bbc     CLRF      0xbc,0x1                                                                                        
00358c   0ec2     MOVLW     0xc2                                                                                            
00358e   6fbd     MOVWF     0xbd,0x1                                                                                        
003590   0e01     MOVLW     0x1                                                                                             
003592   6fbe     MOVWF     0xbe,0x1                                                                                        
003594   6bbf     CLRF      0xbf,0x1                                                                                        
003596   0101     MOVLB     0x1                line_coding.bCharFormat = 0x00;             // 1 stop bit                    E:\iroFW\system\usb\class\cdc\cdc.c
003598   6bc0     CLRF      0xc0,0x1                                                                                        
00359a   0101     MOVLB     0x1                line_coding.bParityType = 0x00;             // None                          E:\iroFW\system\usb\class\cdc\cdc.c
00359c   6bc1     CLRF      0xc1,0x1                                                                                        
00359e   0101     MOVLB     0x1                line_coding.bDataBits = 0x08;               // 5,6,7,8, or 16                E:\iroFW\system\usb\class\cdc\cdc.c
0035a0   0e08     MOVLW     0x8                                                                                             
0035a2   6fc2     MOVWF     0xc2,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
0035a4   0101     MOVLB     0x1                cdc_trf_state = CDC_TX_READY;                                                E:\iroFW\system\usb\class\cdc\cdc.c
0035a6   6bb5     CLRF      0xb5,0x1                                                                                        
0035a8   0101     MOVLB     0x1                cdc_rx_len = 0;                                                              E:\iroFW\system\usb\class\cdc\cdc.c
0035aa   6bb4     CLRF      0xb4,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
0035ac   0e1a     MOVLW     0x1a               CDC_COMM_UEP = EP_IN|HSHK_EN;               // Enable 1 Comm pipe            E:\iroFW\system\usb\class\cdc\cdc.c
0035ae   6e72     MOVWF     0x72,0x0                                                                                        
0035b0   0e1e     MOVLW     0x1e               CDC_DATA_UEP = EP_OUT_IN|HSHK_EN;           // Enable 2 data pipes           E:\iroFW\system\usb\class\cdc\cdc.c
0035b2   6e73     MOVWF     0x73,0x0                                                                                        
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Do not have to init Cnt of IN pipes here.                                 E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Reason:  Number of bytes to send to the host                              E:\iroFW\system\usb\class\cdc\cdc.c
                                                *          varies from one transaction to                                   E:\iroFW\system\usb\class\cdc\cdc.c
                                                *          another. Cnt should equal the exact                              E:\iroFW\system\usb\class\cdc\cdc.c
                                                *          number of bytes to transmit for                                  E:\iroFW\system\usb\class\cdc\cdc.c
                                                *          a given IN transaction.                                          E:\iroFW\system\usb\class\cdc\cdc.c
                                                *          This number of bytes will only                                   E:\iroFW\system\usb\class\cdc\cdc.c
                                                *          be known right before the data is                                E:\iroFW\system\usb\class\cdc\cdc.c
                                                *          sent.                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
0035b4   0104     MOVLB     0x4                CDC_INT_BD_IN.ADR = (byte*)&cdc_notice;     // Set buffer address            E:\iroFW\system\usb\class\cdc\cdc.c
0035b6   0e00     MOVLW     0x0                                                                                             
0035b8   6f16     MOVWF     0x16,0x1                                                                                        
0035ba   0e05     MOVLW     0x5                                                                                             
0035bc   6f17     MOVWF     0x17,0x1                                                                                        
0035be   0104     MOVLB     0x4                CDC_INT_BD_IN.Stat._byte = _UCPU|_DAT1;     // Set status                    E:\iroFW\system\usb\class\cdc\cdc.c
0035c0   0e40     MOVLW     0x40                                                                                            
0035c2   6f14     MOVWF     0x14,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
0035c4   0104     MOVLB     0x4                CDC_BULK_BD_OUT.Cnt = sizeof(cdc_data_rx);  // Set buffer size               E:\iroFW\system\usb\class\cdc\cdc.c
0035c6   0e40     MOVLW     0x40                                                                                            
0035c8   6f19     MOVWF     0x19,0x1                                                                                        
0035ca   0104     MOVLB     0x4                CDC_BULK_BD_OUT.ADR = (byte*)&cdc_data_rx;  // Set buffer address            E:\iroFW\system\usb\class\cdc\cdc.c
0035cc   0e08     MOVLW     0x8                                                                                             
0035ce   6f1a     MOVWF     0x1a,0x1                                                                                        
0035d0   0e05     MOVLW     0x5                                                                                             
0035d2   6f1b     MOVWF     0x1b,0x1                                                                                        
0035d4   0104     MOVLB     0x4                CDC_BULK_BD_OUT.Stat._byte = _USIE|_DAT0|_DTSEN;// Set status                E:\iroFW\system\usb\class\cdc\cdc.c
0035d6   0e88     MOVLW     0x88                                                                                            
0035d8   6f18     MOVWF     0x18,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
0035da   0104     MOVLB     0x4                CDC_BULK_BD_IN.ADR = (byte*)&cdc_data_tx;   // Set buffer size               E:\iroFW\system\usb\class\cdc\cdc.c
0035dc   0e48     MOVLW     0x48                                                                                            
0035de   6f1e     MOVWF     0x1e,0x1                                                                                        
0035e0   0e05     MOVLW     0x5                                                                                             
0035e2   6f1f     MOVWF     0x1f,0x1                                                                                        
0035e4   0104     MOVLB     0x4                CDC_BULK_BD_IN.Stat._byte = _UCPU|_DAT1;    // Set buffer address            E:\iroFW\system\usb\class\cdc\cdc.c
0035e6   0e40     MOVLW     0x40                                                                                            
0035e8   6f1c     MOVWF     0x1c,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
0035ea   0012     RETURN    0x0            }//end CDCInitEP                                                                 E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Function:        byte getsUSBUSART(char *buffer,                              E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                    byte len)                                  E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    Value of input argument 'len' should be smaller than the     E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  maximum endpoint size responsible for receiving bulk         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  data from USB host for CDC class.                            E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  Input argument 'buffer' should point to a buffer area that   E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  is bigger or equal to the size specified by 'len'.           E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Input:           buffer  : Pointer to where received bytes are to be stored   E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  len     : The number of bytes expected.                      E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Output:          The number of bytes copied to buffer.                        E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    Publicly accessible variable cdc_rx_len is updated with      E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  the number of bytes copied to buffer.                        E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  Once getsUSBUSART is called, subsequent retrieval of         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  cdc_rx_len can be done by calling macro mCDCGetRxLength().   E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Overview:        getsUSBUSART copies a string of bytes received through       E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  USB CDC Bulk OUT endpoint to a user's specified location.    E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  It is a non-blocking function. It does not wait              E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  for data if there is no data available. Instead it returns   E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  '0' to notify the caller that there is no data available.    E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Note:            If the actual number of bytes received is larger than the    E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  number of bytes expected (len), only the expected number     E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  of bytes specified will be copied to buffer.                 E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  If the actual number of bytes received is smaller than the   E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  number of bytes expected (len), only the actual number       E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  of bytes received will be copied to buffer.                  E:\iroFW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  E:\iroFW\system\usb\class\cdc\cdc.c
0035ec   cfd9     MOVFF     0xfd9,0xfe6    byte getsUSBUSART(unsigned char *buffer, byte len)                               E:\iroFW\system\usb\class\cdc\cdc.c
0035ee   ffe6                                                                                                               
0035f0   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0035f2   ffd9                                                                                                               
                                           {                                                                                E:\iroFW\system\usb\class\cdc\cdc.c
0035f4   0101     MOVLB     0x1                cdc_rx_len = 0;                                                              E:\iroFW\system\usb\class\cdc\cdc.c
0035f6   6bb4     CLRF      0xb4,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
0035f8   0104     MOVLB     0x4                if(!mCDCUsartRxIsBusy())                                                     E:\iroFW\system\usb\class\cdc\cdc.c
0035fa   bf18     BTFSC     0x18,0x7,0x1                                                                                    
0035fc   d039     BRA       0x3670                                                                                          
                                               {                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       E:\iroFW\system\usb\class\cdc\cdc.c
                                                    * Adjust the expected number of bytes to equal                          E:\iroFW\system\usb\class\cdc\cdc.c
                                                    * the actual number of bytes received.                                  E:\iroFW\system\usb\class\cdc\cdc.c
                                                    */                                                                      E:\iroFW\system\usb\class\cdc\cdc.c
0035fe   0efc     MOVLW     0xfc                   if(len > CDC_BULK_BD_OUT.Cnt)                                            E:\iroFW\system\usb\class\cdc\cdc.c
003600   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003602   f02a                                                                                                               
003604   0104     MOVLB     0x4                                                                                             
003606   5119     MOVF      0x19,0x0,0x1                                                                                    
003608   80d8     BSF       0xd8,0x0,0x0                                                                                    
00360a   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
00360c   e203     BC        0x3614                                                                                          
00360e   0efc     MOVLW     0xfc                       len = CDC_BULK_BD_OUT.Cnt;                                           E:\iroFW\system\usb\class\cdc\cdc.c
003610   c419     MOVFF     0x419,0xfdb                                                                                     
003612   ffdb                                                                                                               
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       E:\iroFW\system\usb\class\cdc\cdc.c
                                                    * Copy data from dual-ram buffer to user's buffer                       E:\iroFW\system\usb\class\cdc\cdc.c
                                                    */                                                                      E:\iroFW\system\usb\class\cdc\cdc.c
003614   0101     MOVLB     0x1                    for(cdc_rx_len = 0; cdc_rx_len < len; cdc_rx_len++)                      E:\iroFW\system\usb\class\cdc\cdc.c
003616   6bb4     CLRF      0xb4,0x1                                                                                        
003618   0efc     MOVLW     0xfc                                                                                            
00361a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00361c   0101     MOVLB     0x1                                                                                             
00361e   5db4     SUBWF     0xb4,0x0,0x1                                                                                    
003620   e21c     BC        0x365a                                                                                          
003654   0101     MOVLB     0x1                                                                                             
003656   2bb4     INCF      0xb4,0x1,0x1                                                                                    
003658   d7df     BRA       0x3618                                                                                          
003622   0101     MOVLB     0x1                        buffer[cdc_rx_len] = cdc_data_rx[cdc_rx_len];                        E:\iroFW\system\usb\class\cdc\cdc.c
003624   51b4     MOVF      0xb4,0x0,0x1                                                                                    
003626   6aea     CLRF      0xea,0x0                                                                                        
003628   0f08     ADDLW     0x8                                                                                             
00362a   6ee9     MOVWF     0xe9,0x0                                                                                        
00362c   0e05     MOVLW     0x5                                                                                             
00362e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
003630   50ef     MOVF      0xef,0x0,0x0                                                                                    
003632   6ee6     MOVWF     0xe6,0x0                                                                                        
003634   0101     MOVLB     0x1                                                                                             
003636   51b4     MOVF      0xb4,0x0,0x1                                                                                    
003638   6ee7     MOVWF     0xe7,0x0                                                                                        
00363a   0efd     MOVLW     0xfd                                                                                            
00363c   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00363e   ffe9                                                                                                               
003640   0efe     MOVLW     0xfe                                                                                            
003642   cfdb     MOVFF     0xfdb,0xfea                                                                                     
003644   ffea                                                                                                               
003646   50e7     MOVF      0xe7,0x0,0x0                                                                                    
003648   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
00364a   0e00     MOVLW     0x0                                                                                             
00364c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00364e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003650   50e7     MOVF      0xe7,0x0,0x0                                                                                    
003652   6eef     MOVWF     0xef,0x0                                                                                        
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       E:\iroFW\system\usb\class\cdc\cdc.c
                                                    * Prepare dual-ram buffer for next OUT transaction                      E:\iroFW\system\usb\class\cdc\cdc.c
                                                    */                                                                      E:\iroFW\system\usb\class\cdc\cdc.c
00365a   0104     MOVLB     0x4                    CDC_BULK_BD_OUT.Cnt = sizeof(cdc_data_rx);                               E:\iroFW\system\usb\class\cdc\cdc.c
00365c   0e40     MOVLW     0x40                                                                                            
00365e   6f19     MOVWF     0x19,0x1                                                                                        
003660   0e40     MOVLW     0x40                   mUSBBufferReady(CDC_BULK_BD_OUT);                                        E:\iroFW\system\usb\class\cdc\cdc.c
003662   0104     MOVLB     0x4                                                                                             
003664   1718     ANDWF     0x18,0x1,0x1                                                                                    
003666   0104     MOVLB     0x4                                                                                             
003668   7d18     BTG       0x18,0x6,0x1                                                                                    
00366a   0e88     MOVLW     0x88                                                                                            
00366c   0104     MOVLB     0x4                                                                                             
00366e   1318     IORWF     0x18,0x1,0x1                                                                                    
                                               }//end if                                                                    E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
003670   0101     MOVLB     0x1                return cdc_rx_len;                                                           E:\iroFW\system\usb\class\cdc\cdc.c
003672   51b4     MOVF      0xb4,0x0,0x1                                                                                    
003674   d000     BRA       0x3676                                                                                          
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
003676   52e5     MOVF      0xe5,0x1,0x0   }//end getsUSBUSART                                                              E:\iroFW\system\usb\class\cdc\cdc.c
003678   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00367a   ffd9                                                                                                               
00367c   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Function:        void putsUSBUSART(char *data)                                E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    cdc_trf_state must be in the CDC_TX_READY state.             E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  The string of characters pointed to by 'data' must equal     E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  to or smaller than 255 bytes.                                E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Input:           data    : Pointer to a null-terminated string of data.       E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                            If a null character is not found, 255 bytes        E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                            of data will be transferred to the host.           E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Overview:        putsUSBUSART writes a string of data to the USB including    E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  the null character. Use this version, 'puts', to transfer    E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  data located in data memory.                                 E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Note:            The transfer mechanism for device-to-host(put) is more       E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  flexible than host-to-device(get). It can handle             E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  a string of data larger than the maximum size of bulk IN     E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  endpoint. A state machine is used to transfer a long         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  string of data over multiple USB transactions.               E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  See CDCTxService() for more details.                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  E:\iroFW\system\usb\class\cdc\cdc.c
00367e   cfd9     MOVFF     0xfd9,0xfe6    void putsUSBUSART(unsigned char *data)                                           E:\iroFW\system\usb\class\cdc\cdc.c
003680   ffe6                                                                                                               
003682   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003684   ffd9                                                                                                               
003686   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\system\usb\class\cdc\cdc.c
                                               byte len;                                                                    E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * User should have checked that cdc_trf_state is in CDC_TX_READY state      E:\iroFW\system\usb\class\cdc\cdc.c
                                                * before calling this function.                                             E:\iroFW\system\usb\class\cdc\cdc.c
                                                * As a safety precaution, this fuction checks the state one more time       E:\iroFW\system\usb\class\cdc\cdc.c
                                                * to make sure it does not override any pending transactions.               E:\iroFW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Currently it just quits the routine without reporting any errors back     E:\iroFW\system\usb\class\cdc\cdc.c
                                                * to the user.                                                              E:\iroFW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Bottomline: User MUST make sure that mUSBUSARTIsTxTrfReady()==1           E:\iroFW\system\usb\class\cdc\cdc.c
                                                *             before calling this function!                                 E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Example:                                                                  E:\iroFW\system\usb\class\cdc\cdc.c
                                                * if(mUSBUSARTIsTxTrfReady())                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  E:\iroFW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * IMPORTANT: Never use the following blocking while loop to wait:           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * while(!mUSBUSARTIsTxTrfReady())                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  E:\iroFW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * The whole firmware framework is written based on cooperative              E:\iroFW\system\usb\class\cdc\cdc.c
                                                * multi-tasking and a blocking code is not acceptable.                      E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Use a state machine instead.                                              E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
003688   0101     MOVLB     0x1                if(cdc_trf_state != CDC_TX_READY) return;                                    E:\iroFW\system\usb\class\cdc\cdc.c
00368a   51b5     MOVF      0xb5,0x0,0x1                                                                                    
00368c   e001     BZ        0x3690                                                                                          
00368e   d031     BRA       0x36f2                                                                                          
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * While loop counts the number of bytes to send including the               E:\iroFW\system\usb\class\cdc\cdc.c
                                                * null character.                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
003690   6adf     CLRF      0xdf,0x0           len = 0;                                                                     E:\iroFW\system\usb\class\cdc\cdc.c
                                               do                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                               {                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
003692   2adf     INCF      0xdf,0x1,0x0           len++;                                                                   E:\iroFW\system\usb\class\cdc\cdc.c
003694   50df     MOVF      0xdf,0x0,0x0           if(len == 256) break;       // Break loop once max len is reached.       E:\iroFW\system\usb\class\cdc\cdc.c
003696   6e2a     MOVWF     0x2a,0x0                                                                                        
003698   6a2b     CLRF      0x2b,0x0                                                                                        
00369a   502a     MOVF      0x2a,0x0,0x0                                                                                    
00369c   e102     BNZ       0x36a2                                                                                          
00369e   0e01     MOVLW     0x1                                                                                             
0036a0   182b     XORWF     0x2b,0x0,0x0                                                                                    
0036a2   e101     BNZ       0x36a6                                                                                          
0036a4   d00b     BRA       0x36bc                                                                                          
0036a6   0efd     MOVLW     0xfd               }while(*data++);                                                             E:\iroFW\system\usb\class\cdc\cdc.c
0036a8   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0036aa   ffe9                                                                                                               
0036ac   2adb     INCF      0xdb,0x1,0x0                                                                                    
0036ae   0efe     MOVLW     0xfe                                                                                            
0036b0   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0036b2   ffea                                                                                                               
0036b4   e301     BNC       0x36b8                                                                                          
0036b6   2adb     INCF      0xdb,0x1,0x0                                                                                    
0036b8   50ef     MOVF      0xef,0x0,0x0                                                                                    
0036ba   e1eb     BNZ       0x3692                                                                                          
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Re-adjust pointer to its initial location                                 E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
0036bc   50df     MOVF      0xdf,0x0,0x0       data-=len;                                                                   E:\iroFW\system\usb\class\cdc\cdc.c
0036be   6e2a     MOVWF     0x2a,0x0                                                                                        
0036c0   6a2b     CLRF      0x2b,0x0                                                                                        
0036c2   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0036c4   0ffd     ADDLW     0xfd                                                                                            
0036c6   6ee9     MOVWF     0xe9,0x0                                                                                        
0036c8   0eff     MOVLW     0xff                                                                                            
0036ca   20da     ADDWFC    0xda,0x0,0x0                                                                                    
0036cc   6eea     MOVWF     0xea,0x0                                                                                        
0036ce   502a     MOVF      0x2a,0x0,0x0                                                                                    
0036d0   5eee     SUBWF     0xee,0x1,0x0                                                                                    
0036d2   502b     MOVF      0x2b,0x0,0x0                                                                                    
0036d4   5aed     SUBWFB    0xed,0x1,0x0                                                                                    
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           	// BPS - 05/04/2006 I don't want the NULL at the end.                           E:\iroFW\system\usb\class\cdc\cdc.c
0036d6   06df     DECF      0xdf,0x1,0x0   	len--;                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Second piece of information (length of data to send) is ready.            E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Call mUSBUSARTTxRam to setup the transfer.                                E:\iroFW\system\usb\class\cdc\cdc.c
                                                * The actual transfer process will be handled by CDCTxService(),            E:\iroFW\system\usb\class\cdc\cdc.c
                                                * which should be called once per Main Program loop.                        E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
0036d8   0efd     MOVLW     0xfd               mUSBUSARTTxRam((byte*)data,len);     // See cdc.h                            E:\iroFW\system\usb\class\cdc\cdc.c
0036da   cfdb     MOVFF     0xfdb,0x1b6                                                                                     
0036dc   f1b6                                                                                                               
0036de   0efe     MOVLW     0xfe                                                                                            
0036e0   cfdb     MOVFF     0xfdb,0x1b7                                                                                     
0036e2   f1b7                                                                                                               
0036e4   cfdf     MOVFF     0xfdf,0x1ba                                                                                     
0036e6   f1ba                                                                                                               
0036e8   0101     MOVLB     0x1                                                                                             
0036ea   6bbb     CLRF      0xbb,0x1                                                                                        
0036ec   0101     MOVLB     0x1                                                                                             
0036ee   0e01     MOVLW     0x1                                                                                             
0036f0   6fb5     MOVWF     0xb5,0x1                                                                                        
0036f2   52e5     MOVF      0xe5,0x1,0x0   }//end putsUSBUSART                                                              E:\iroFW\system\usb\class\cdc\cdc.c
0036f4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0036f6   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0036f8   ffd9                                                                                                               
0036fa   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Function:        void putrsUSBUSART(const rom char *data)                     E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    cdc_trf_state must be in the CDC_TX_READY state.             E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  The string of characters pointed to by 'data' must equal     E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  to or smaller than 255 bytes.                                E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Input:           data    : Pointer to a null-terminated string of data.       E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                            If a null character is not found, 255 bytes        E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                            of data will be transferred to the host.           E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Overview:        putrsUSBUSART writes a string of data to the USB including   E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  the null character. Use this version, 'putrs', to transfer   E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  data literals and data located in program memory.            E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Note:            The transfer mechanism for device-to-host(put) is more       E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  flexible than host-to-device(get). It can handle             E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  a string of data larger than the maximum size of bulk IN     E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  endpoint. A state machine is used to transfer a long         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  string of data over multiple USB transactions.               E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  See CDCTxService() for more details.                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  E:\iroFW\system\usb\class\cdc\cdc.c
0036fc   cfd9     MOVFF     0xfd9,0xfe6    void putrsUSBUSART(const rom unsigned char *data)                                E:\iroFW\system\usb\class\cdc\cdc.c
0036fe   ffe6                                                                                                               
003700   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003702   ffd9                                                                                                               
003704   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\system\usb\class\cdc\cdc.c
                                               byte len;                                                                    E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * User should have checked that cdc_trf_state is in CDC_TX_READY state      E:\iroFW\system\usb\class\cdc\cdc.c
                                                * before calling this function.                                             E:\iroFW\system\usb\class\cdc\cdc.c
                                                * As a safety precaution, this fuction checks the state one more time       E:\iroFW\system\usb\class\cdc\cdc.c
                                                * to make sure it does not override any pending transactions.               E:\iroFW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Currently it just quits the routine without reporting any errors back     E:\iroFW\system\usb\class\cdc\cdc.c
                                                * to the user.                                                              E:\iroFW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Bottomline: User MUST make sure that mUSBUSARTIsTxTrfReady()              E:\iroFW\system\usb\class\cdc\cdc.c
                                                *             before calling this function!                                 E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Example:                                                                  E:\iroFW\system\usb\class\cdc\cdc.c
                                                * if(mUSBUSARTIsTxTrfReady())                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  E:\iroFW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * IMPORTANT: Never use the following blocking while loop to wait:           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * while(cdc_trf_state != CDC_TX_READY)                                      E:\iroFW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  E:\iroFW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * The whole firmware framework is written based on cooperative              E:\iroFW\system\usb\class\cdc\cdc.c
                                                * multi-tasking and a blocking code is not acceptable.                      E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Use a state machine instead.                                              E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
003706   0101     MOVLB     0x1                if(cdc_trf_state != CDC_TX_READY) return;                                    E:\iroFW\system\usb\class\cdc\cdc.c
003708   51b5     MOVF      0xb5,0x0,0x1                                                                                    
00370a   e001     BZ        0x370e                                                                                          
00370c   d033     BRA       0x3774                                                                                          
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * While loop counts the number of bytes to send including the               E:\iroFW\system\usb\class\cdc\cdc.c
                                                * null character.                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
00370e   6adf     CLRF      0xdf,0x0           len = 0;                                                                     E:\iroFW\system\usb\class\cdc\cdc.c
                                               do                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                               {                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
003710   2adf     INCF      0xdf,0x1,0x0           len++;                                                                   E:\iroFW\system\usb\class\cdc\cdc.c
003712   50df     MOVF      0xdf,0x0,0x0           if(len == 255) break;       // Break loop once max len is reached.       E:\iroFW\system\usb\class\cdc\cdc.c
003714   6e2a     MOVWF     0x2a,0x0                                                                                        
003716   6a2b     CLRF      0x2b,0x0                                                                                        
003718   0eff     MOVLW     0xff                                                                                            
00371a   182a     XORWF     0x2a,0x0,0x0                                                                                    
00371c   e101     BNZ       0x3720                                                                                          
00371e   502b     MOVF      0x2b,0x0,0x0                                                                                    
003720   e101     BNZ       0x3724                                                                                          
003722   d00c     BRA       0x373c                                                                                          
003724   0efd     MOVLW     0xfd               }while(*data++);                                                             E:\iroFW\system\usb\class\cdc\cdc.c
003726   cfdb     MOVFF     0xfdb,0xff6                                                                                     
003728   fff6                                                                                                               
00372a   2adb     INCF      0xdb,0x1,0x0                                                                                    
00372c   0efe     MOVLW     0xfe                                                                                            
00372e   cfdb     MOVFF     0xfdb,0xff7                                                                                     
003730   fff7                                                                                                               
003732   e301     BNC       0x3736                                                                                          
003734   2adb     INCF      0xdb,0x1,0x0                                                                                    
003736   0008     TBLRD                                                                                                     
003738   50f5     MOVF      0xf5,0x0,0x0                                                                                    
00373a   e1ea     BNZ       0x3710                                                                                          
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Re-adjust pointer to its initial location                                 E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
00373c   50df     MOVF      0xdf,0x0,0x0       data-=len;                                                                   E:\iroFW\system\usb\class\cdc\cdc.c
00373e   6e2a     MOVWF     0x2a,0x0                                                                                        
003740   6a2b     CLRF      0x2b,0x0                                                                                        
003742   50d9     MOVF      0xd9,0x0,0x0                                                                                    
003744   0ffd     ADDLW     0xfd                                                                                            
003746   6ee9     MOVWF     0xe9,0x0                                                                                        
003748   0eff     MOVLW     0xff                                                                                            
00374a   20da     ADDWFC    0xda,0x0,0x0                                                                                    
00374c   6eea     MOVWF     0xea,0x0                                                                                        
00374e   502a     MOVF      0x2a,0x0,0x0                                                                                    
003750   5eee     SUBWF     0xee,0x1,0x0                                                                                    
003752   502b     MOVF      0x2b,0x0,0x0                                                                                    
003754   5aed     SUBWFB    0xed,0x1,0x0                                                                                    
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           	// BPS - 05/04/2006 I don't want the NULL at the end.                           E:\iroFW\system\usb\class\cdc\cdc.c
003756   06df     DECF      0xdf,0x1,0x0   	len--;                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Second piece of information (length of data to send) is ready.            E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Call mUSBUSARTTxRom to setup the transfer.                                E:\iroFW\system\usb\class\cdc\cdc.c
                                                * The actual transfer process will be handled by CDCTxService(),            E:\iroFW\system\usb\class\cdc\cdc.c
                                                * which should be called once per Main Program loop.                        E:\iroFW\system\usb\class\cdc\cdc.c
                                                *                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * (BPS 5/16/2006) Don't add the zero byte at the end. Send len-1            E:\iroFW\system\usb\class\cdc\cdc.c
                                                * bytes intead of len bytes.                                                E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
003758   0efd     MOVLW     0xfd               mUSBUSARTTxRom((rom byte*)data,len); // See cdc.h                            E:\iroFW\system\usb\class\cdc\cdc.c
00375a   cfdb     MOVFF     0xfdb,0x1b6                                                                                     
00375c   f1b6                                                                                                               
00375e   0efe     MOVLW     0xfe                                                                                            
003760   cfdb     MOVFF     0xfdb,0x1b7                                                                                     
003762   f1b7                                                                                                               
003764   cfdf     MOVFF     0xfdf,0x1ba                                                                                     
003766   f1ba                                                                                                               
003768   0101     MOVLB     0x1                                                                                             
00376a   0e01     MOVLW     0x1                                                                                             
00376c   6fbb     MOVWF     0xbb,0x1                                                                                        
00376e   0101     MOVLB     0x1                                                                                             
003770   0e01     MOVLW     0x1                                                                                             
003772   6fb5     MOVWF     0xb5,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
003774   52e5     MOVF      0xe5,0x1,0x0   }//end putrsUSBUSART                                                             E:\iroFW\system\usb\class\cdc\cdc.c
003776   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003778   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00377a   ffd9                                                                                                               
00377c   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Function:        void CDCTxService(void)                                      E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Input:           None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Overview:        CDCTxService handles device-to-host transaction(s).          E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                  This function should be called once per Main Program loop.   E:\iroFW\system\usb\class\cdc\cdc.c
                                            *                                                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                            * Note:            None                                                         E:\iroFW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  E:\iroFW\system\usb\class\cdc\cdc.c
00377e   cfd9     MOVFF     0xfd9,0xfe6    void CDCTxService(void)                                                          E:\iroFW\system\usb\class\cdc\cdc.c
003780   ffe6                                                                                                               
003782   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003784   ffd9                                                                                                               
003786   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                E:\iroFW\system\usb\class\cdc\cdc.c
                                               byte byte_to_send;                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
003788   0104     MOVLB     0x4                if(mCDCUsartTxIsBusy()) return;                                              E:\iroFW\system\usb\class\cdc\cdc.c
00378a   bf1c     BTFSC     0x1c,0x7,0x1                                                                                    
00378c   d07d     BRA       0x3888                                                                                          
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Completing stage is necessary while [ mCDCUSartTxIsBusy()==1 ].           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * By having this stage, user can always check cdc_trf_state,                E:\iroFW\system\usb\class\cdc\cdc.c
                                                * and not having to call mCDCUsartTxIsBusy() directly.                      E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
00378e   0e03     MOVLW     0x3                if(cdc_trf_state == CDC_TX_COMPLETING)                                       E:\iroFW\system\usb\class\cdc\cdc.c
003790   0101     MOVLB     0x1                                                                                             
003792   5db5     SUBWF     0xb5,0x0,0x1                                                                                    
003794   e102     BNZ       0x379a                                                                                          
003796   0101     MOVLB     0x1                    cdc_trf_state = CDC_TX_READY;                                            E:\iroFW\system\usb\class\cdc\cdc.c
003798   6bb5     CLRF      0xb5,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * If CDC_TX_READY state, nothing to do, just return.                        E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
00379a   0101     MOVLB     0x1                if(cdc_trf_state == CDC_TX_READY) return;                                    E:\iroFW\system\usb\class\cdc\cdc.c
00379c   51b5     MOVF      0xb5,0x0,0x1                                                                                    
00379e   e101     BNZ       0x37a2                                                                                          
0037a0   d073     BRA       0x3888                                                                                          
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * If CDC_TX_BUSY_ZLP state, send zero length packet                         E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
0037a2   0e02     MOVLW     0x2                if(cdc_trf_state == CDC_TX_BUSY_ZLP)                                         E:\iroFW\system\usb\class\cdc\cdc.c
0037a4   0101     MOVLB     0x1                                                                                             
0037a6   5db5     SUBWF     0xb5,0x0,0x1                                                                                    
0037a8   e106     BNZ       0x37b6                                                                                          
                                               {                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
0037aa   0104     MOVLB     0x4                    CDC_BULK_BD_IN.Cnt = 0;                                                  E:\iroFW\system\usb\class\cdc\cdc.c
0037ac   6b1d     CLRF      0x1d,0x1                                                                                        
0037ae   0101     MOVLB     0x1                    cdc_trf_state = CDC_TX_COMPLETING;                                       E:\iroFW\system\usb\class\cdc\cdc.c
0037b0   0e03     MOVLW     0x3                                                                                             
0037b2   6fb5     MOVWF     0xb5,0x1                                                                                        
                                               }                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
0037b4   d061     BRA       0x3878             else if(cdc_trf_state == CDC_TX_BUSY)                                        E:\iroFW\system\usb\class\cdc\cdc.c
0037b6   0101     MOVLB     0x1                                                                                             
0037b8   05b5     DECF      0xb5,0x0,0x1                                                                                    
0037ba   e15e     BNZ       0x3878                                                                                          
                                               {                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       E:\iroFW\system\usb\class\cdc\cdc.c
                                                    * First, have to figure out how many byte of data to send.              E:\iroFW\system\usb\class\cdc\cdc.c
                                                    */                                                                      E:\iroFW\system\usb\class\cdc\cdc.c
0037bc   0e40     MOVLW     0x40               	if(cdc_tx_len > sizeof(cdc_data_tx))                                        E:\iroFW\system\usb\class\cdc\cdc.c
0037be   6e2a     MOVWF     0x2a,0x0                                                                                        
0037c0   6a2b     CLRF      0x2b,0x0                                                                                        
0037c2   0101     MOVLB     0x1                                                                                             
0037c4   51ba     MOVF      0xba,0x0,0x1                                                                                    
0037c6   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0037c8   0e00     MOVLW     0x0                                                                                             
0037ca   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
0037cc   e203     BC        0x37d4                                                                                          
0037ce   0e40     MOVLW     0x40               	    byte_to_send = sizeof(cdc_data_tx);                                     E:\iroFW\system\usb\class\cdc\cdc.c
0037d0   6edf     MOVWF     0xdf,0x0                                                                                        
0037d2   d002     BRA       0x37d8             	else                                                                        E:\iroFW\system\usb\class\cdc\cdc.c
0037d4   c1ba     MOVFF     0x1ba,0xfdf        	    byte_to_send = cdc_tx_len;                                              E:\iroFW\system\usb\class\cdc\cdc.c
0037d6   ffdf                                                                                                               
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       E:\iroFW\system\usb\class\cdc\cdc.c
                                                    * Next, load the number of bytes to send to Cnt in buffer descriptor    E:\iroFW\system\usb\class\cdc\cdc.c
                                                    */                                                                      E:\iroFW\system\usb\class\cdc\cdc.c
0037d8   cfdf     MOVFF     0xfdf,0x41d            CDC_BULK_BD_IN.Cnt = byte_to_send;                                       E:\iroFW\system\usb\class\cdc\cdc.c
0037da   f41d                                                                                                               
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       E:\iroFW\system\usb\class\cdc\cdc.c
                                                    * Subtract the number of bytes just about to be sent from the total.    E:\iroFW\system\usb\class\cdc\cdc.c
                                                    */                                                                      E:\iroFW\system\usb\class\cdc\cdc.c
0037dc   50df     MOVF      0xdf,0x0,0x0       	cdc_tx_len = cdc_tx_len - byte_to_send;                                     E:\iroFW\system\usb\class\cdc\cdc.c
0037de   0101     MOVLB     0x1                                                                                             
0037e0   5dba     SUBWF     0xba,0x0,0x1                                                                                    
0037e2   0101     MOVLB     0x1                                                                                             
0037e4   6fba     MOVWF     0xba,0x1                                                                                        
                                               	                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
0037e6   0101     MOVLB     0x1                    pCDCDst.bRam = (byte*)&cdc_data_tx; // Set destination pointer           E:\iroFW\system\usb\class\cdc\cdc.c
0037e8   0e48     MOVLW     0x48                                                                                            
0037ea   6fb8     MOVWF     0xb8,0x1                                                                                        
0037ec   0e05     MOVLW     0x5                                                                                             
0037ee   6fb9     MOVWF     0xb9,0x1                                                                                        
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
0037f0   0101     MOVLB     0x1                    if(cdc_mem_type == _ROM)            // Determine type of memory source   E:\iroFW\system\usb\class\cdc\cdc.c
0037f2   05bb     DECF      0xbb,0x0,0x1                                                                                    
0037f4   e118     BNZ       0x3826                                                                                          
                                                   {                                                                        E:\iroFW\system\usb\class\cdc\cdc.c
0037f6   50df     MOVF      0xdf,0x0,0x0               while(byte_to_send)                                                  E:\iroFW\system\usb\class\cdc\cdc.c
0037f8   e015     BZ        0x3824                                                                                          
003822   d7e9     BRA       0x37f6                                                                                          
                                                       {                                                                    E:\iroFW\system\usb\class\cdc\cdc.c
0037fa   c1b6     MOVFF     0x1b6,0xff6                    *pCDCDst.bRam = *pCDCSrc.bRom;                                   E:\iroFW\system\usb\class\cdc\cdc.c
0037fc   fff6                                                                                                               
0037fe   c1b7     MOVFF     0x1b7,0xff7                                                                                     
003800   fff7                                                                                                               
003802   0008     TBLRD                                                                                                     
003804   50f5     MOVF      0xf5,0x0,0x0                                                                                    
003806   c1b8     MOVFF     0x1b8,0xfe9                                                                                     
003808   ffe9                                                                                                               
00380a   c1b9     MOVFF     0x1b9,0xfea                                                                                     
00380c   ffea                                                                                                               
00380e   6eef     MOVWF     0xef,0x0                                                                                        
003810   0101     MOVLB     0x1                            pCDCDst.bRam++;                                                  E:\iroFW\system\usb\class\cdc\cdc.c
003812   2bb8     INCF      0xb8,0x1,0x1                                                                                    
003814   0e00     MOVLW     0x0                                                                                             
003816   23b9     ADDWFC    0xb9,0x1,0x1                                                                                    
003818   0101     MOVLB     0x1                            pCDCSrc.bRom++;                                                  E:\iroFW\system\usb\class\cdc\cdc.c
00381a   2bb6     INCF      0xb6,0x1,0x1                                                                                    
00381c   0e00     MOVLW     0x0                                                                                             
00381e   23b7     ADDWFC    0xb7,0x1,0x1                                                                                    
003820   06df     DECF      0xdf,0x1,0x0                   byte_to_send--;                                                  E:\iroFW\system\usb\class\cdc\cdc.c
                                                       }//end while(byte_to_send)                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                   }                                                                        E:\iroFW\system\usb\class\cdc\cdc.c
003824   d016     BRA       0x3852                 else // _RAM                                                             E:\iroFW\system\usb\class\cdc\cdc.c
                                                   {                                                                        E:\iroFW\system\usb\class\cdc\cdc.c
003826   50df     MOVF      0xdf,0x0,0x0               while(byte_to_send)                                                  E:\iroFW\system\usb\class\cdc\cdc.c
003828   e014     BZ        0x3852                                                                                          
003850   d7ea     BRA       0x3826                                                                                          
                                                       {                                                                    E:\iroFW\system\usb\class\cdc\cdc.c
00382a   c1b6     MOVFF     0x1b6,0xfe9                    *pCDCDst.bRam = *pCDCSrc.bRam;                                   E:\iroFW\system\usb\class\cdc\cdc.c
00382c   ffe9                                                                                                               
00382e   c1b7     MOVFF     0x1b7,0xfea                                                                                     
003830   ffea                                                                                                               
003832   50ef     MOVF      0xef,0x0,0x0                                                                                    
003834   c1b8     MOVFF     0x1b8,0xfe9                                                                                     
003836   ffe9                                                                                                               
003838   c1b9     MOVFF     0x1b9,0xfea                                                                                     
00383a   ffea                                                                                                               
00383c   6eef     MOVWF     0xef,0x0                                                                                        
00383e   0101     MOVLB     0x1                            pCDCDst.bRam++;                                                  E:\iroFW\system\usb\class\cdc\cdc.c
003840   2bb8     INCF      0xb8,0x1,0x1                                                                                    
003842   0e00     MOVLW     0x0                                                                                             
003844   23b9     ADDWFC    0xb9,0x1,0x1                                                                                    
003846   0101     MOVLB     0x1                            pCDCSrc.bRam++;                                                  E:\iroFW\system\usb\class\cdc\cdc.c
003848   2bb6     INCF      0xb6,0x1,0x1                                                                                    
00384a   0e00     MOVLW     0x0                                                                                             
00384c   23b7     ADDWFC    0xb7,0x1,0x1                                                                                    
00384e   06df     DECF      0xdf,0x1,0x0                   byte_to_send--;                                                  E:\iroFW\system\usb\class\cdc\cdc.c
                                                       }//end while(byte_to_send._word)                                     E:\iroFW\system\usb\class\cdc\cdc.c
                                                   }//end if(cdc_mem_type...)                                               E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       E:\iroFW\system\usb\class\cdc\cdc.c
                                                    * Lastly, determine if a zero length packet state is necessary.         E:\iroFW\system\usb\class\cdc\cdc.c
                                                    * See explanation in USB Specification 2.0: Section 5.8.3               E:\iroFW\system\usb\class\cdc\cdc.c
                                                    */                                                                      E:\iroFW\system\usb\class\cdc\cdc.c
003852   0101     MOVLB     0x1                    if(cdc_tx_len == 0)                                                      E:\iroFW\system\usb\class\cdc\cdc.c
003854   51ba     MOVF      0xba,0x0,0x1                                                                                    
003856   e110     BNZ       0x3878                                                                                          
                                                   {                                                                        E:\iroFW\system\usb\class\cdc\cdc.c
003858   0104     MOVLB     0x4                        if(CDC_BULK_BD_IN.Cnt == sizeof(cdc_data_tx))                        E:\iroFW\system\usb\class\cdc\cdc.c
00385a   511d     MOVF      0x1d,0x0,0x1                                                                                    
00385c   6e2a     MOVWF     0x2a,0x0                                                                                        
00385e   6a2b     CLRF      0x2b,0x0                                                                                        
003860   0e40     MOVLW     0x40                                                                                            
003862   182a     XORWF     0x2a,0x0,0x0                                                                                    
003864   e101     BNZ       0x3868                                                                                          
003866   502b     MOVF      0x2b,0x0,0x0                                                                                    
003868   e104     BNZ       0x3872                                                                                          
00386a   0101     MOVLB     0x1                            cdc_trf_state = CDC_TX_BUSY_ZLP;                                 E:\iroFW\system\usb\class\cdc\cdc.c
00386c   0e02     MOVLW     0x2                                                                                             
00386e   6fb5     MOVWF     0xb5,0x1                                                                                        
003870   d003     BRA       0x3878                     else                                                                 E:\iroFW\system\usb\class\cdc\cdc.c
003872   0101     MOVLB     0x1                            cdc_trf_state = CDC_TX_COMPLETING;                               E:\iroFW\system\usb\class\cdc\cdc.c
003874   0e03     MOVLW     0x3                                                                                             
003876   6fb5     MOVWF     0xb5,0x1                                                                                        
                                                   }//end if(cdc_tx_len...)                                                 E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                               }//end if(cdc_tx_sate == CDC_TX_BUSY)                                        E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                               /*                                                                           E:\iroFW\system\usb\class\cdc\cdc.c
                                                * Both CDC_TX_BUSY and CDC_TX_BUSY_ZLP states use the following macro       E:\iroFW\system\usb\class\cdc\cdc.c
                                                */                                                                          E:\iroFW\system\usb\class\cdc\cdc.c
003878   0e40     MOVLW     0x40               mUSBBufferReady(CDC_BULK_BD_IN);                                             E:\iroFW\system\usb\class\cdc\cdc.c
00387a   0104     MOVLB     0x4                                                                                             
00387c   171c     ANDWF     0x1c,0x1,0x1                                                                                    
00387e   0104     MOVLB     0x4                                                                                             
003880   7d1c     BTG       0x1c,0x6,0x1                                                                                    
003882   0e88     MOVLW     0x88                                                                                            
003884   0104     MOVLB     0x4                                                                                             
003886   131c     IORWF     0x1c,0x1,0x1                                                                                    
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
003888   52e5     MOVF      0xe5,0x1,0x0   }//end CDCTxService                                                              E:\iroFW\system\usb\class\cdc\cdc.c
00388a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00388c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00388e   ffd9                                                                                                               
003890   0012     RETURN    0x0                                                                                             
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           #endif //USB_USE_CDC                                                             E:\iroFW\system\usb\class\cdc\cdc.c
                                                                                                                            E:\iroFW\system\usb\class\cdc\cdc.c
                                           /** EOF cdc.c ****************************************************************/  E:\iroFW\system\usb\class\cdc\cdc.c
                                                   LIST P=18F2455                                                           C:\MCC18\SRC\TRADIT~1\PROC\p18f2455.asm
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\PROC\p18f2455.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\PROC\p18f2455.asm
                                           #include "p18cxxx.inc"                                                           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                   LIST                                                                     C:\MCC18\MPASM\p18cxxx.inc
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\p18cxxx.inc
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                                                                                                            C:\MCC18\MPASM\p18cxxx.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;/********************************************************************           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Function Name: Delay10TCYx                                      *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Return Value:  void                                             *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Parameters:    unit:                                            *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Description:   This routine delays for multiples of 10          *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  instruction cycles that is specified in unit.    *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Special Note:  This routine provides multiples of 10 Tcy.       *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  A value of 1 to 255 provides 10 to 2550   Tcy    *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  delay.  A value of 0 will provide a delay of     *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  2560 Tcy.                                        *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;********************************************************************/           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           D10TCYXCODE CODE                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           Delay10TCYx                                                                      C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004746   0eff     MOVLW     0xff               movlw   0xff                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004748   50e3     MOVF      0xe3,0x0,0x0       movf    PLUSW1,0                                                             C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00474a   4ee8     DCFSNZ    0xe8,0x1,0x0       dcfsnz  WREG,1                                                               C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00474c   0012     RETURN    0x0                return                                                                       C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           D10x                                                                             C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00474e   0000     NOP                          nop                                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004750   d000     BRA       0x4752             bra     $+2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004752   d000     BRA       0x4754             bra     $+2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004754   d000     BRA       0x4756             bra     $+2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           D10_1                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004756   2ee8     DECFSZ    0xe8,0x1,0x0       decfsz  WREG,1                                                               C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004758   d7fa     BRA       0x474e             bra     D10x                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
00475a   0012     RETURN    0x0                return                                                                       C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                               GLOBAL  Delay10TCYx                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                               END                                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;	RCS Header $Id: fxm2424u.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <P18CXXX.INC>		; general Golden Gate definitions                        C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <CMATH18.INC>		; Math library definitions                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: cmath18.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                               LIST                                                                         C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ; CMATH18.INC  v1.0  Microchip Technology, Inc. / F.J. Testa                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <AARG.INC>		; AARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: aarg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN	__AARGB0, __AARGB1, __AARGB2, __AARGB3                                   C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                   EXTERN  __AARGB4, __AARGB5, __AARGB6, __AARGB7                           C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __AEXP                                                                  C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __REMB3, __REMB2, __REMB1, __REMB0                                      C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <BARG.INC>		; BARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: barg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BARGB3, __BARGB2, __BARGB1, __BARGB0                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BEXP                                                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <TEMPARG.INC>		; TEMPARG declarations                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: temparg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                   EXTERN  __TEMPB3, __TEMPB2, __TEMPB1, __TEMPB0, __TEMP                   C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       24x24 Bit Unsigned Fixed Point Multiply 24 x 24 -> 48                    C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Input:  24 bit unsigned fixed point multiplicand in AARGB0, AARGB1,      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               AARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               24 bit unsigned fixed point multiplier in BARGB0, BARGB1,        C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               BARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Use:    CALL    FXM2424U                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Output: 48 bit unsigned fixed point product in AARGB0, AARGB1,           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               AARGB2, AARGB3, AARGB4, AARGB5                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Result: AARG  <--  AARG * BARG                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Max Timing:     65 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Min Timing:     65 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       PM: 64              DM: 12                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           PROG	CODE                                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           FXM2424U                                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           		GLOBAL	FXM2424U                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041be   c01f     MOVFF     0x1f,0x29      		MOVFF	__AARGB0,__TEMPB0	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041c0   f029                                                                                                               
0041c2   c01e     MOVFF     0x1e,0x28      		MOVFF	__AARGB1,__TEMPB1	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041c4   f028                                                                                                               
0041c6   c01d     MOVFF     0x1d,0x27      		MOVFF	__AARGB2,__TEMPB2	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041c8   f027                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041ca   501d     MOVF      0x1d,0x0,0x0   		MOVF	__AARGB2,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041cc   0222     MULWF     0x22,0x0       		MULWF	__BARGB2                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041ce   cff4     MOVFF     0xff4,0x1b     		MOVFF	PRODH,__AARGB4                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041d0   f01b                                                                                                               
0041d2   cff3     MOVFF     0xff3,0x1a     		MOVFF	PRODL,__AARGB5                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041d4   f01a                                                                                                               
                                           		                                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041d6   501e     MOVF      0x1e,0x0,0x0   		MOVF	__AARGB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041d8   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041da   cff4     MOVFF     0xff4,0x1d     		MOVFF	PRODH,__AARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041dc   f01d                                                                                                               
0041de   cff3     MOVFF     0xff3,0x1c     		MOVFF	PRODL,__AARGB3                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041e0   f01c                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041e2   0222     MULWF     0x22,0x0       		MULWF	__BARGB2                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041e4   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041e6   261b     ADDWF     0x1b,0x1,0x0   		ADDWF	__AARGB4,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041e8   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041ea   221c     ADDWFC    0x1c,0x1,0x0   		ADDWFC	__AARGB3,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041ec   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041ee   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041f0   5027     MOVF      0x27,0x0,0x0   		MOVF	__TEMPB2,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041f2   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041f4   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041f6   261b     ADDWF     0x1b,0x1,0x0   		ADDWF	__AARGB4,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041f8   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041fa   221c     ADDWFC    0x1c,0x1,0x0   		ADDWFC	__AARGB3,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041fc   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0041fe   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004200   501f     MOVF      0x1f,0x0,0x0   		MOVF	__AARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004202   0222     MULWF     0x22,0x0       		MULWF	__BARGB2                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004204   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004206   261c     ADDWF     0x1c,0x1,0x0   		ADDWF	__AARGB3,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004208   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00420a   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00420c   501f     MOVF      0x1f,0x0,0x0   		MOVF	__AARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00420e   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004210   6a1e     CLRF      0x1e,0x0       		CLRF	__AARGB1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004212   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004214   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004216   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004218   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00421a   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00421c   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00421e   5027     MOVF      0x27,0x0,0x0   		MOVF	__TEMPB2,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004220   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004222   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004224   261c     ADDWF     0x1c,0x1,0x0   		ADDWF	__AARGB3,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004226   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004228   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00422a   6a1f     CLRF      0x1f,0x0       		CLRF	__AARGB0                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00422c   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00422e   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004230   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004232   5028     MOVF      0x28,0x0,0x0   		MOVF	__TEMPB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004234   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004236   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004238   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00423a   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00423c   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00423e   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004240   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004242   5029     MOVF      0x29,0x0,0x0   		MOVF	__TEMPB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004244   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004246   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004248   261e     ADDWF     0x1e,0x1,0x0   		ADDWF	__AARGB1,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00424a   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00424c   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00424e   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           		END                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: cmath18.asm,v 1.5 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           SIGN		RES 1       ; save location for sign in MSB                                C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           __FPFLAGSbits                                                                    C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           __FPFLAGS		RES 1       ; floating point library exception flags                  C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                   GLOBAL  SIGN, __FPFLAGS, __FPFLAGSbits                                   C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;	RCS Header $Id: aarg.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB3                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB7		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB2                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB6		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB1                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB5		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB0                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB4		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB3		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB2		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB1		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB0		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AEXP		RES 1       ; 8 bit biased exponent for argument A                       C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           	GLOBAL	__AARGB0, __AARGB1, __AARGB2, __AARGB3                                   C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                   GLOBAL  __AARGB4, __AARGB5, __AARGB6, __AARGB7                           C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           	GLOBAL  __AEXP                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           	GLOBAL  __REMB3, __REMB2, __REMB1, __REMB0                                      C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;	RCS Header $Id: barg.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB3		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB2		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB1		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB0		RES 1       ; most significant byte of argument B                      C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BEXP		RES 1       ; 8 bit biased exponent for argument B                       C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                   GLOBAL  __BARGB3, __BARGB2, __BARGB1, __BARGB0                           C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                   GLOBAL  __BEXP                                                           C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;	RCS Header $Id: temparg.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB3		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB2		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB1		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMP                                                                           C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB0		RES 1       ; temporary storage                                        C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                   GLOBAL  __TEMPB3, __TEMPB2, __TEMPB1, __TEMPB0, __TEMP                   C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                           /* printf() is a wrapper function which calls vfprintf() with stdout as the      C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                              destination output stream. EOF is returned on error, else the number          C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                              of characters output. */                                                      C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                           int                                                                              C:\MCC18\src\TRADIT~1\stdclib\printf.c
004416   cfd9     MOVFF     0xfd9,0xfe6    printf (const rom char *fmt, ...)                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
004418   ffe6                                                                                                               
00441a   cfda     MOVFF     0xfda,0xfe6                                                                                     
00441c   ffe6                                                                                                               
00441e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
004420   ffd9                                                                                                               
004422   cfe2     MOVFF     0xfe2,0xfda                                                                                     
004424   ffda                                                                                                               
004426   52e6     MOVF      0xe6,0x1,0x0                                                                                    
004428   52e6     MOVF      0xe6,0x1,0x0                                                                                    
00442a   52e6     MOVF      0xe6,0x1,0x0                                                                                    
00442c   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                             va_list ap;                                                                    C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                             int n;                                                                         C:\MCC18\src\TRADIT~1\stdclib\printf.c
00442e   50d9     MOVF      0xd9,0x0,0x0     va_start (ap, fmt);                                                            C:\MCC18\src\TRADIT~1\stdclib\printf.c
004430   0ffb     ADDLW     0xfb                                                                                            
004432   6e2a     MOVWF     0x2a,0x0                                                                                        
004434   0eff     MOVLW     0xff                                                                                            
004436   20da     ADDWFC    0xda,0x0,0x0                                                                                    
004438   6e2b     MOVWF     0x2b,0x0                                                                                        
00443a   c02a     MOVFF     0x2a,0xfde                                                                                      
00443c   ffde                                                                                                               
00443e   6edd     MOVWF     0xdd,0x0                                                                                        
004440   cfde     MOVFF     0xfde,0xfe6      n = vfprintf (stdout, fmt, ap);                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
004442   ffe6                                                                                                               
004444   cfdd     MOVFF     0xfdd,0xfe6                                                                                     
004446   ffe6                                                                                                               
004448   0efb     MOVLW     0xfb                                                                                            
00444a   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00444c   ffe6                                                                                                               
00444e   0efc     MOVLW     0xfc                                                                                            
004450   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
004452   ffe6                                                                                                               
004454   0efd     MOVLW     0xfd                                                                                            
004456   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
004458   ffe6                                                                                                               
00445a   c1ef     MOVFF     0x1ef,0xfe6                                                                                     
00445c   ffe6                                                                                                               
00445e   c1f0     MOVFF     0x1f0,0xfe6                                                                                     
004460   ffe6                                                                                                               
004462   ec62     CALL      0x28c4,0x0                                                                                      
004464   f014                                                                                                               
004466   6e2a     MOVWF     0x2a,0x0                                                                                        
004468   0e07     MOVLW     0x7                                                                                             
00446a   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00446c   e202     BC        0x4472                                                                                          
00446e   6ae1     CLRF      0xe1,0x0                                                                                        
004470   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004472   6ee1     MOVWF     0xe1,0x0                                                                                        
004474   502a     MOVF      0x2a,0x0,0x0                                                                                    
004476   0e02     MOVLW     0x2                                                                                             
004478   cff3     MOVFF     0xff3,0xfdb                                                                                     
00447a   ffdb                                                                                                               
00447c   0e03     MOVLW     0x3                                                                                             
00447e   cff4     MOVFF     0xff4,0xfdb                                                                                     
004480   ffdb                                                                                                               
                                             va_end (ap);                                                                   C:\MCC18\src\TRADIT~1\stdclib\printf.c
004482   0e02     MOVLW     0x2              return n;                                                                      C:\MCC18\src\TRADIT~1\stdclib\printf.c
004484   cfdb     MOVFF     0xfdb,0x2a                                                                                      
004486   f02a                                                                                                               
004488   0e03     MOVLW     0x3                                                                                             
00448a   cfdb     MOVFF     0xfdb,0x2b                                                                                      
00448c   f02b                                                                                                               
00448e   c02a     MOVFF     0x2a,0xff3                                                                                      
004490   fff3                                                                                                               
004492   c02b     MOVFF     0x2b,0xff4                                                                                      
004494   fff4                                                                                                               
004496   0e04     MOVLW     0x4            }                                                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
004498   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00449a   e202     BC        0x44a0                                                                                          
00449c   6ae1     CLRF      0xe1,0x0                                                                                        
00449e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0044a0   6ee1     MOVWF     0xe1,0x0                                                                                        
0044a2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0044a4   cfe5     MOVFF     0xfe5,0xfda                                                                                     
0044a6   ffda                                                                                                               
0044a8   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0044aa   ffd9                                                                                                               
0044ac   0012     RETURN    0x0                                                                                             
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                           /* by default stdout issues to the USART */                                      C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                           FILE *stdout = _H_USART;                                                         C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; @name toupper                                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;The {\bf toupper} function converts a lower case character to the               C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;corresponding upper case character.                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;@return If {\bf islower} is true for the value of {\bf c}, the corresponding    C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;upper case equivalent is returned, else the value of {\bf c} is returned        C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;unchanged.                                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; int toupper (int c);                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           CTYPE CODE                                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           toupper                                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             global toupper                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; Proceedure: Use FSR0 as pointer to 'c'                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;         Return with result in PROD                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Set FSR0 = FSR1 - 2 ( location of 'c') after checking upper byte for 0       C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004608   0eff     MOVLW     0xff                     StkSetPtrToOffset FSR0L,-1                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
00460a   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
00460c   6ee9     MOVWF     0xe9,0x0                                                                                        
00460e   0eff     MOVLW     0xff                                                                                            
004610   20e2     ADDWFC    0xe2,0x0,0x0                                                                                    
004612   6eea     MOVWF     0xea,0x0                                                                                        
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Copy 'c' into target location                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004614   cfed     MOVFF     0xfed,0xff4    	  movff POSTDEC0, PRODH                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004616   fff4                                                                                                               
004618   cfef     MOVFF     0xfef,0xff3    	  movff INDF0, PRODL                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
00461a   fff3                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
00461c   66f4     TSTFSZ    0xf4,0x0                 tstfsz    PRODH,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
00461e   d007     BRA       0x462e                   bra       jNoMatch            ; upper byte must be 0                   C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Test for lower case condition                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004620   0e60     MOVLW     0x60                     jmpFleL   PRODL,ACCESS,'a'-1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004622   64f3     CPFSGT    0xf3,0x0                                                                                        
004624   d004     BRA       0x462e                                                                                          
004626   0e7b     MOVLW     0x7b                     jmpFgeL   PRODL,ACCESS,'z'+1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004628   60f3     CPFSLT    0xf3,0x0                                                                                        
00462a   d001     BRA       0x462e                                                                                          
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Convert char from lower to upper by clearing bit 5                           C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
00462c   9af3     BCF       0xf3,0x5,0x0             bcf       PRODL,5,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           jNoMatch:                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
00462e   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #include <ctype.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #include <string.h>                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_MINUS 0x1                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_PLUS  0x2                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_SPACE 0x4                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_OCTO  0x8                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_ZERO  0x10                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_SIGNED 0x80                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           static const rom char s_digits[] = "0123456789abcdef";                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           static unsigned char                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002898   ec88     CALL      0x3310,0x0     s_put_n_chars (FILE * handle, unsigned char n, char c)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00289a   f019                                                                                                               
003310   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
003312   ffe6                                                                                                               
003314   cfda     MOVFF     0xfda,0xfe6                                                                                     
003316   ffe6                                                                                                               
003318   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00331a   ffd9                                                                                                               
00331c   cfe2     MOVFF     0xfe2,0xfda                                                                                     
00331e   ffda                                                                                                               
003320   0012     RETURN    0x0                                                                                             
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00289c   0efb     MOVLW     0xfb             while (n--)                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00289e   cfdb     MOVFF     0xfdb,0xff3                                                                                     
0028a0   fff3                                                                                                               
0028a2   06db     DECF      0xdb,0x1,0x0                                                                                    
0028a4   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0028a6   0900     IORLW     0x0                                                                                             
0028a8   e00a     BZ        0x28be                                                                                          
0028aa   ecd6     CALL      0x33ac,0x0         if (putc (c, handle) == EOF)                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0028ac   f019                                                                                                               
0028ae   0efa     MOVLW     0xfa                                                                                            
0028b0   ec41     CALL      0x3482,0x0                                                                                      
0028b2   f01a                                                                                                               
0028b4   e1f3     BNZ       0x289c                                                                                          
0028b6   1c2b     COMF      0x2b,0x0,0x0                                                                                    
0028b8   e1f1     BNZ       0x289c                                                                                          
0028ba   0e01     MOVLW     0x1                  return 1;                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0028bc   d001     BRA       0x28c0                                                                                          
0028be   0e00     MOVLW     0x0              return 0;                                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0028c0   efb7     GOTO      0x336e         }                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0028c2   f019                                                                                                               
00336e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003370   cfe5     MOVFF     0xfe5,0xfda                                                                                     
003372   ffda                                                                                                               
003374   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003376   ffd9                                                                                                               
003378   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_UNSPECIFIED 0                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_LONG 1                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_SHLONG 2                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_BYTE   3                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           int                                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0028c4   ec88     CALL      0x3310,0x0     vfprintf (auto FILE *handle, auto const rom char *f, auto va_list ap)            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0028c6   f019                                                                                                               
0028c8   0e3b     MOVLW     0x3b                                                                                            
0028ca   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
0028cc   e302     BNC       0x28d2                                                                                          
0028ce   68e1     SETF      0xe1,0x0                                                                                        
0028d0   52e6     MOVF      0xe6,0x1,0x0                                                                                    
0028d2   6ee1     MOVWF     0xe1,0x0                                                                                        
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                             unsigned char c;                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0028d4   0e01     MOVLW     0x1              int count = 0;                                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0028d6   6adb     CLRF      0xdb,0x0                                                                                        
0028d8   0e02     MOVLW     0x2                                                                                             
0028da   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0028dc   0ef9     MOVLW     0xf9             for (c = *f; c; c = *++f)                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0028de   cfdb     MOVFF     0xfdb,0xff6                                                                                     
0028e0   fff6                                                                                                               
0028e2   0efa     MOVLW     0xfa                                                                                            
0028e4   cfdb     MOVFF     0xfdb,0xff7                                                                                     
0028e6   fff7                                                                                                               
0028e8   0efb     MOVLW     0xfb                                                                                            
0028ea   cfdb     MOVFF     0xfdb,0xff8                                                                                     
0028ec   fff8                                                                                                               
0028ee   0008     TBLRD                                                                                                     
0028f0   50f5     MOVF      0xf5,0x0,0x0                                                                                    
0028f2   6edf     MOVWF     0xdf,0x0                                                                                        
0028f4   50df     MOVF      0xdf,0x0,0x0                                                                                    
0028f6   e102     BNZ       0x28fc                                                                                          
0028f8   efdb     GOTO      0x31b6                                                                                          
0028fa   f018                                                                                                               
0031b0   d979     RCALL     0x34a4                                                                                          
0031b2   ef77     GOTO      0x28ee                                                                                          
0031b4   f014                                                                                                               
0034a4   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0034a6   0ff9     ADDLW     0xf9                                                                                            
0034a8   6ee9     MOVWF     0xe9,0x0                                                                                        
0034aa   0eff     MOVLW     0xff                                                                                            
0034ac   efeb     GOTO      0x33d6                                                                                          
0034ae   f019                                                                                                               
                                               {                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0028fc   0e25     MOVLW     0x25                 if (c == '%')                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0028fe   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002900   e002     BZ        0x2906                                                                                          
002902   efce     GOTO      0x319c                                                                                          
002904   f018                                                                                                               
                                                   {                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002906   0e03     MOVLW     0x3                      unsigned char flags = 0;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002908   6adb     CLRF      0xdb,0x0                                                                                        
00290a   0e04     MOVLW     0x4                      unsigned char width = 0;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00290c   6adb     CLRF      0xdb,0x0                                                                                        
00290e   0e05     MOVLW     0x5                      unsigned char precision = 0;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002910   6adb     CLRF      0xdb,0x0                                                                                        
002912   0e06     MOVLW     0x6                      unsigned char have_precision = 0;                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002914   6adb     CLRF      0xdb,0x0                                                                                        
002916   0e07     MOVLW     0x7                      unsigned char size = 0;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002918   6adb     CLRF      0xdb,0x0                                                                                        
                                                     unsigned char space_cnt;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     unsigned char cval;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     unsigned long larg;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     far rom char *romstring;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     char *ramstring;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     int n;                                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* get the first character of the conversion specifier */              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00291a   ecf0     CALL      0x31e0,0x0               c = *++f;                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00291c   f018                                                                                                               
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /**  The conversion specification has, after the '%' character:        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         7.9.6.1                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * Zero or more flags (in any order) that modify the meaning of the  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specification.                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * An optional minimum field width. If the converted value has       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          fewer characters than the field width, it will be padded with     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          spaces (by default) on the left (or right, if the left            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          adjustment flag, described later, has been given) to the field    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          width. The field width takes the form of an asterisk *            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          (described later) or a decimal integer.                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * An optional precision that gives the minimum number of digits     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          to appear for the d, i, o, u, x, and X conversions, the           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          maximum number of digits to appear after the decimal point        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          character for e, E, and f conversions, the maximum number         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          of significant digits for the g and G conversions, or the         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          maximum number of characters to be written from a string in       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          s conversion. The precision takes the form of a period (.)        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          followed by an asterisk * (described later) or by an optional     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          decimal integer; if only the period is specified, the precision   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          is taken as zero. If a precision appears with any other           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specifier, the behaviour is undefined.                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * An optional h specifying that a following d, i, o, u, x, or X     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specifier applies to a short int or unsigned short     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          int argument (the argument will have been promoted according      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          to the integer promotions, and its value shall be converted       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          to short int or unsigned short int before printing); an           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          optional h specifying that a following n conversion specifier     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          applies to a pointer to a short int argument; an optional l       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          (ell) specifying that a following d, i, o, u, x, or X             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specifier applies to a long int or unsigned long int   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          argument; or an optional L specifying that a following e, E,      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          f, g, or G conversion specifier applies to a long double          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          argument. If an h, l, or L appears with any other conversion      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          specifier, the behaviour is undefined.                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * A character that specifies the type of conversion to be applied.  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       */                                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /** check for a flag.                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        7.9.6.1                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        The flag characters and their meanings are:                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        - The result of the conversion will be left-justified within        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          the field. (It will be right justified if this flag is not        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          specified.)                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        + The result of a signed conversion will always begin with a        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          plus or a minus sign. (It will begin with a sign only when        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          a negative value is converted if this flag is not specified.)     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        space  If the first character of a signed conversion is not a       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          sign, or if a signed conversion results in no characters, a       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          space will be prefixed to the result. If the space and + flags    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          both appear, the space flag will be ignored.                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        # The result is to be converted to an "alternate form." For o       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion, it increases the precision to force the first digit   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          of the result to be a zero. For x (or X) conversion, a nonzero    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          result will have 0x (or 0X) prefixed to it. For e, E, f, g,       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          and G conversions, the result will always contain a decimal-      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          point character, even if no digits follow it. (Normally, a        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          decimal point character appears in the result of these            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversions only if a digit follows it.) For g and G              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversions, trailing zeros will not be removed from the          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          result. For other conversions the behaviour is undefined.         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        0 For d, i, o, u, x, X, e, E, f, g, and G conversions, leading      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          zeros (following any indication of sign or base) are used to      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          pad to the field width; no space padding is performed. If         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          the 0 and - flags both appear, the 0 flag will be ignored.        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          For other conversions, the behaviour is undefined.                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       */                                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00291e   0e2d     MOVLW     0x2d                     while (c == '-' || c == '+' || c == ' ' || c == '#'                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002920   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002922   e00c     BZ        0x293c                                                                                          
002924   0e2b     MOVLW     0x2b                                                                                            
002926   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002928   e009     BZ        0x293c                                                                                          
00292a   0e20     MOVLW     0x20                                                                                            
00292c   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00292e   e006     BZ        0x293c                                                                                          
002930   0e23     MOVLW     0x23                                                                                            
00296e   d7d5     BRA       0x291a                                                                                          
002932   5cdf     SUBWF     0xdf,0x0,0x0                    || c == '0')                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002934   e003     BZ        0x293c                                                                                          
002936   0e30     MOVLW     0x30                                                                                            
002938   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00293a   e11a     BNZ       0x2970                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00293c   50df     MOVF      0xdf,0x0,0x0                 switch (c)                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00293e   0a30     XORLW     0x30                                                                                            
002940   e014     BZ        0x296a                                                                                          
002942   0a13     XORLW     0x13                                                                                            
002944   e00f     BZ        0x2964                                                                                          
002946   0a03     XORLW     0x3                                                                                             
002948   e00a     BZ        0x295e                                                                                          
00294a   0a0b     XORLW     0xb                                                                                             
00294c   e005     BZ        0x2958                                                                                          
00294e   0a06     XORLW     0x6                                                                                             
002950   e1e4     BNZ       0x291a                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '-':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002952   0e03     MOVLW     0x3                              flags |= _FLAG_MINUS;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002954   80db     BSF       0xdb,0x0,0x0                                                                                    
002956   d7e1     BRA       0x291a                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '+':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002958   0e03     MOVLW     0x3                              flags |= _FLAG_PLUS;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00295a   82db     BSF       0xdb,0x1,0x0                                                                                    
00295c   d7de     BRA       0x291a                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case ' ':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00295e   0e03     MOVLW     0x3                              flags |= _FLAG_SPACE;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002960   84db     BSF       0xdb,0x2,0x0                                                                                    
002962   d7db     BRA       0x291a                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '#':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002964   0e03     MOVLW     0x3                              flags |= _FLAG_OCTO;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002966   86db     BSF       0xdb,0x3,0x0                                                                                    
002968   d7d8     BRA       0x291a                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '0':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00296a   0e03     MOVLW     0x3                              flags |= _FLAG_ZERO;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00296c   88db     BSF       0xdb,0x4,0x0                                                                                    
                                                             break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the optional width field is next */                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002970   0e2a     MOVLW     0x2a                     if (c == '*')                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002972   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002974   e11b     BNZ       0x29ac                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002976   ecec     CALL      0x31d8,0x0                   n = va_arg (ap, int);                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002978   f018                                                                                                               
00297a   ec3a     CALL      0x3274,0x0                                                                                      
00297c   f019                                                                                                               
003274   0e13     MOVLW     0x13                                                                                            
003276   cfee     MOVFF     0xfee,0xfdb                                                                                     
003278   ffdb                                                                                                               
00327a   0e14     MOVLW     0x14                                                                                            
00327c   cfed     MOVFF     0xfed,0xfdb                                                                                     
00327e   ffdb                                                                                                               
00297e   e010     BZ        0x29a0                       if (n < 0)                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003280   0e13     MOVLW     0x13                                                                                            
003282   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003284   f02a                                                                                                               
003286   0e14     MOVLW     0x14                                                                                            
003288   cfdb     MOVFF     0xfdb,0x2b                                                                                      
00328a   f02b                                                                                                               
00328c   0100     MOVLB     0x0                                                                                             
00328e   0e80     MOVLW     0x80                                                                                            
003290   142b     ANDWF     0x2b,0x0,0x0                                                                                    
003292   0012     RETURN    0x0                                                                                             
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002980   0e03     MOVLW     0x3                              flags |= _FLAG_MINUS;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002982   80db     BSF       0xdb,0x0,0x0                                                                                    
002984   681e     SETF      0x1e,0x0                         width = -n;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002986   681f     SETF      0x1f,0x0                                                                                        
002988   0e13     MOVLW     0x13                                                                                            
00298a   cfdb     MOVFF     0xfdb,0x23                                                                                      
00298c   f023                                                                                                               
00298e   0e14     MOVLW     0x14                                                                                            
002990   cfdb     MOVFF     0xfdb,0x24                                                                                      
002992   f024                                                                                                               
002994   ec28     CALL      0x4250,0x0                                                                                      
002996   f021                                                                                                               
002998   0e04     MOVLW     0x4                                                                                             
00299a   c01c     MOVFF     0x1c,0xfdb                                                                                      
00299c   ffdb                                                                                                               
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00299e   d003     BRA       0x29a6                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029a0   0e13     MOVLW     0x13                           width = n;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029a2   ec23     CALL      0x3246,0x0                                                                                      
0029a4   f019                                                                                                               
0029a6   ecf0     CALL      0x31e0,0x0                   c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029a8   f018                                                                                                               
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029aa   d00b     BRA       0x29c2                   else                                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029ac   0e09     MOVLW     0x9                          cval = 0;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029ae   6adb     CLRF      0xdb,0x0                                                                                        
0029b0   ec91     CALL      0x3322,0x0                   while ((unsigned char) isdigit (c))                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029b2   f019                                                                                                               
0029b4   e003     BZ        0x29bc                                                                                          
0029ba   d7fa     BRA       0x29b0                                                                                          
003322   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
003324   ffe6                                                                                                               
003326   6ae6     CLRF      0xe6,0x0                                                                                        
003328   ec18     CALL      0x4630,0x0                                                                                      
00332a   f023                                                                                                               
00332c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00332e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003330   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003332   0012     RETURN    0x0                                                                                             
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029b6   ec05     CALL      0x340a,0x0                       cval = cval * 10 + c - '0';                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029b8   f01a                                                                                                               
00340a   0e09     MOVLW     0x9                                                                                             
00340c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00340e   0d0a     MULLW     0xa                                                                                             
003410   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003412   24df     ADDWF     0xdf,0x0,0x0                                                                                    
003414   0fd0     ADDLW     0xd0                                                                                            
003416   6ee7     MOVWF     0xe7,0x0                                                                                        
003418   0e09     MOVLW     0x9                                                                                             
00341a   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
00341c   ffdb                                                                                                               
00341e   eff0     GOTO      0x31e0                           c = *++f;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003420   f018                                                                                                               
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029bc   0e09     MOVLW     0x9                          width = cval;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029be   ec23     CALL      0x3246,0x0                                                                                      
0029c0   f019                                                                                                               
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* if '-' is specified, '0' is ignored */                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029c2   0e03     MOVLW     0x3                      if (flags & _FLAG_MINUS)                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029c4   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
0029c6   98db     BCF       0xdb,0x4,0x0               flags &= ~_FLAG_ZERO;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the optional precision field is next */                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029c8   0e2e     MOVLW     0x2e                     if (c == '.')                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029ca   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0029cc   e11b     BNZ       0x2a04                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029ce   ecf0     CALL      0x31e0,0x0                   c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029d0   f018                                                                                                               
0029d2   0e2a     MOVLW     0x2a                         if (c == '*')                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029d4   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0029d6   e10b     BNZ       0x29ee                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029d8   ecec     CALL      0x31d8,0x0                       n = va_arg (ap, int);                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029da   f018                                                                                                               
0029dc   ec3a     CALL      0x3274,0x0                                                                                      
0029de   f019                                                                                                               
0031d8   d929     RCALL     0x342c                                                                                          
0031da   0e02     MOVLW     0x2                                                                                             
0031dc   efdd     GOTO      0x33ba                                                                                          
0031de   f019                                                                                                               
0033ba   5e2a     SUBWF     0x2a,0x1,0x0                                                                                    
0033bc   0e00     MOVLW     0x0                                                                                             
0033be   5a2b     SUBWFB    0x2b,0x1,0x0                                                                                    
0033c0   0ef7     MOVLW     0xf7                                                                                            
0033c2   c02a     MOVFF     0x2a,0xfdb                                                                                      
0033c4   ffdb                                                                                                               
0033c6   0ef8     MOVLW     0xf8                                                                                            
0033c8   c02b     MOVFF     0x2b,0xfdb                                                                                      
0033ca   ffdb                                                                                                               
0033cc   c02a     MOVFF     0x2a,0xfe9                                                                                      
0033ce   ffe9                                                                                                               
0033d0   c02b     MOVFF     0x2b,0xfea                                                                                      
0033d2   ffea                                                                                                               
0033d4   0012     RETURN    0x0                                                                                             
00342c   0ef7     MOVLW     0xf7                                                                                            
00342e   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003430   f02a                                                                                                               
003432   0ef8     MOVLW     0xf8                                                                                            
003434   cfdb     MOVFF     0xfdb,0x2b                                                                                      
003436   f02b                                                                                                               
003438   0012     RETURN    0x0                                                                                             
0029e0   e103     BNZ       0x29e8                           if (n >= 0)                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               {                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029e2   0e13     MOVLW     0x13                                 precision = n;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029e4   ec75     CALL      0x32ea,0x0                                                                                      
0029e6   f019                                                                                                               
0032ea   50db     MOVF      0xdb,0x0,0x0                                                                                    
0032ec   d8ce     RCALL     0x348a                                                                                          
00348a   6ee7     MOVWF     0xe7,0x0                                                                                        
00348c   0e05     MOVLW     0x5                                                                                             
00348e   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
003490   ffdb                                                                                                               
003492   0012     RETURN    0x0                                                                                             
0032ee   0e01     MOVLW     0x1                                  have_precision = 1;                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032f0   6ef3     MOVWF     0xf3,0x0                                                                                        
0032f2   0e06     MOVLW     0x6                                                                                             
0032f4   cff3     MOVFF     0xff3,0xfdb                                                                                     
0032f6   ffdb                                                                                                               
0032f8   0012     RETURN    0x0                                                                                             
                                                               }                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029e8   ecf0     CALL      0x31e0,0x0                       c = *++f;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029ea   f018                                                                                                               
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029ec   d00b     BRA       0x2a04                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029ee   0e09     MOVLW     0x9                              cval = 0;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029f0   6adb     CLRF      0xdb,0x0                                                                                        
0029f2   ec91     CALL      0x3322,0x0                       while ((unsigned char) isdigit (c))                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029f4   f019                                                                                                               
0029f6   e003     BZ        0x29fe                                                                                          
0029fc   d7fa     BRA       0x29f2                                                                                          
                                                               {                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029f8   ec05     CALL      0x340a,0x0                           cval = cval * 10 + c - '0';                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029fa   f01a                                                                                                               
                                                                 c = *++f;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               }                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0029fe   0e09     MOVLW     0x9                              precision = cval;                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a00   ec75     CALL      0x32ea,0x0                                                                                      
002a02   f019                                                                                                               
                                                             have_precision = 1;                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the optional 'h' specifier. since int and short int are             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        the same size for MPLAB C18, this is a NOP for us. */               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a04   0e68     MOVLW     0x68                     if (c == 'h')                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a06   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a08   e107     BNZ       0x2a18                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a0a   ecf0     CALL      0x31e0,0x0                   c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a0c   f018                                                                                                               
                                                         /* if 'c' is another 'h' character, this is an 'hh'                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specifier and the size is 8 bits */                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a0e   0e68     MOVLW     0x68                         if (c == 'h')                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a10   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a12   e11d     BNZ       0x2a4e                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a14   0e03     MOVLW     0x3                              size = _FMT_BYTE;                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             c = *++f;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* 'z' and 't' are both 16-bit and so are NOPs */                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a16   d018     BRA       0x2a48                   else if (c == 't' || c == 'z')                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a18   0e74     MOVLW     0x74                                                                                            
002a1a   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a1c   e017     BZ        0x2a4c                                                                                          
002a1e   0e7a     MOVLW     0x7a                                                                                            
002a20   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a22   e014     BZ        0x2a4c                                                                                          
                                                       c = *++f;                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the 'H' specifier tells us to deal with 24-bit integers.            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        the 'T' and 'Z' specifiers are also 24 bit */                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a24   0e48     MOVLW     0x48                     else if (c == 'H' || c == 'T' || c == 'Z')                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a26   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a28   e006     BZ        0x2a36                                                                                          
002a2a   0e54     MOVLW     0x54                                                                                            
002a2c   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a2e   e003     BZ        0x2a36                                                                                          
002a30   0e5a     MOVLW     0x5a                                                                                            
002a32   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a34   e102     BNZ       0x2a3a                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a36   0e02     MOVLW     0x2                          size = _FMT_SHLONG;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the 'l' specifier tells us to deal with 32-bit integers             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        'j' specifies intmax_t (long in our case). */                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a38   d007     BRA       0x2a48                   else if (c == 'l' || c == 'j')                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a3a   0e6c     MOVLW     0x6c                                                                                            
002a3c   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a3e   e003     BZ        0x2a46                                                                                          
002a40   0e6a     MOVLW     0x6a                                                                                            
002a42   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a44   e104     BNZ       0x2a4e                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a46   0e01     MOVLW     0x1                          size = _FMT_LONG;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a48   ecc8     CALL      0x3390,0x0                                                                                      
002a4a   f019                                                                                                               
002a4c   dbc9     RCALL     0x31e0                       c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031e0   d961     RCALL     0x34a4                                                                                          
0031e2   0008     TBLRD                                                                                                     
0031e4   50f5     MOVF      0xf5,0x0,0x0                                                                                    
0031e6   6edf     MOVWF     0xdf,0x0                                                                                        
0031e8   0012     RETURN    0x0                                                                                             
0033d6   20da     ADDWFC    0xda,0x0,0x0                                                                                    
0033d8   6eea     MOVWF     0xea,0x0                                                                                        
0033da   2aef     INCF      0xef,0x1,0x0                                                                                    
0033dc   cfee     MOVFF     0xfee,0xff6                                                                                     
0033de   fff6                                                                                                               
0033e0   0e00     MOVLW     0x0                                                                                             
0033e2   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
0033e4   cfee     MOVFF     0xfee,0xff7                                                                                     
0033e6   fff7                                                                                                               
0033e8   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
0033ea   cfee     MOVFF     0xfee,0xff8                                                                                     
0033ec   fff8                                                                                                               
0033ee   0012     RETURN    0x0                                                                                             
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a4e   50df     MOVF      0xdf,0x0,0x0             switch (c)                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a50   0a6e     XORLW     0x6e                                                                                            
002a52   e101     BNZ       0x2a56                                                                                          
002a54   d37f     BRA       0x3154                                                                                          
002a56   0a1e     XORLW     0x1e                                                                                            
002a58   e101     BNZ       0x2a5c                                                                                          
002a5a   d192     BRA       0x2d80                                                                                          
002a5c   0a20     XORLW     0x20                                                                                            
002a5e   e101     BNZ       0x2a62                                                                                          
002a60   d18f     BRA       0x2d80                                                                                          
002a62   0a3f     XORLW     0x3f                                                                                            
002a64   e101     BNZ       0x2a68                                                                                          
002a66   d149     BRA       0x2cfa                                                                                          
002a68   0a1a     XORLW     0x1a                                                                                            
002a6a   e101     BNZ       0x2a6e                                                                                          
002a6c   d146     BRA       0x2cfa                                                                                          
002a6e   0a0d     XORLW     0xd                                                                                             
002a70   e101     BNZ       0x2a74                                                                                          
002a72   d143     BRA       0x2cfa                                                                                          
002a74   0a20     XORLW     0x20                                                                                            
002a76   e101     BNZ       0x2a7a                                                                                          
002a78   d140     BRA       0x2cfa                                                                                          
002a7a   0a3a     XORLW     0x3a                                                                                            
002a7c   e101     BNZ       0x2a80                                                                                          
002a7e   d13d     BRA       0x2cfa                                                                                          
002a80   0a20     XORLW     0x20                                                                                            
002a82   e101     BNZ       0x2a86                                                                                          
002a84   d13a     BRA       0x2cfa                                                                                          
002a86   0a26     XORLW     0x26                                                                                            
002a88   e101     BNZ       0x2a8c                                                                                          
002a8a   d135     BRA       0x2cf6                                                                                          
002a8c   0a0d     XORLW     0xd                                                                                             
002a8e   e101     BNZ       0x2a92                                                                                          
002a90   d132     BRA       0x2cf6                                                                                          
002a92   0a1a     XORLW     0x1a                                                                                            
002a94   e101     BNZ       0x2a98                                                                                          
002a96   d0d9     BRA       0x2c4a                                                                                          
002a98   0a20     XORLW     0x20                                                                                            
002a9a   e04a     BZ        0x2b30                                                                                          
002a9c   0a30     XORLW     0x30                                                                                            
002a9e   e01f     BZ        0x2ade                                                                                          
002aa0   0a46     XORLW     0x46                                                                                            
002aa2   e00e     BZ        0x2ac0                                                                                          
002aa4   0a25     XORLW     0x25                                                                                            
002aa6   e001     BZ        0x2aaa                                                                                          
002aa8   d383     BRA       0x31b0                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case '\0':                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* this is undefined behaviour. we have a trailing '%' character   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            in the string, perhaps with some flags, width, precision        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            stuff as well, but no format specifier. We'll, arbitrarily,     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            back up a character so that the loop will terminate             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            properly when it loops back and we'll output a '%'              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            character. */                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aaa   50d9     MOVF      0xd9,0x0,0x0                 --f;                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aac   0ff9     ADDLW     0xf9                                                                                            
002aae   6ee9     MOVWF     0xe9,0x0                                                                                        
002ab0   0eff     MOVLW     0xff                                                                                            
002ab2   20da     ADDWFC    0xda,0x0,0x0                                                                                    
002ab4   6eea     MOVWF     0xea,0x0                                                                                        
002ab6   0e01     MOVLW     0x1                                                                                             
002ab8   5eee     SUBWF     0xee,0x1,0x0                                                                                    
002aba   0e00     MOVLW     0x0                                                                                             
002abc   5aee     SUBWFB    0xee,0x1,0x0                                                                                    
002abe   5aee     SUBWFB    0xee,0x1,0x0                                                                                    
                                                         /* fallthrough */                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case '%':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ac0   ecd6     CALL      0x33ac,0x0                   if (putc ('%', handle) == EOF)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ac2   f019                                                                                                               
002ac4   0e25     MOVLW     0x25                                                                                            
002ac6   6ee6     MOVWF     0xe6,0x0                                                                                        
002ac8   db95     RCALL     0x31f4                                                                                          
002aca   e103     BNZ       0x2ad2                                                                                          
002acc   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002ace   e101     BNZ       0x2ad2                                                                                          
002ad0   d369     BRA       0x31a4                                                                                          
                                                           return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ad2   ecd2     CALL      0x33a4,0x0                   ++count;                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ad4   f019                                                                                                               
002ad6   e201     BC        0x2ada                                                                                          
002ad8   d36b     BRA       0x31b0                                                                                          
002ada   2adb     INCF      0xdb,0x1,0x0                                                                                    
002adc   d369     BRA       0x31b0                       break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'c':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ade   0e08     MOVLW     0x8                          space_cnt = 0;                                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ae0   6adb     CLRF      0xdb,0x0                                                                                        
002ae2   0e04     MOVLW     0x4                          if (width > 1)                                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ae4   50db     MOVF      0xdb,0x0,0x0                                                                                    
002ae6   0801     SUBLW     0x1                                                                                             
002ae8   e206     BC        0x2af6                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aea   0e04     MOVLW     0x4                              space_cnt = width - 1;                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aec   04db     DECF      0xdb,0x0,0x0                                                                                    
002aee   ec9a     CALL      0x3334,0x0                                                                                      
002af0   f019                                                                                                               
002af2   50db     MOVF      0xdb,0x0,0x0                     count += space_cnt;                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002af4   db8b     RCALL     0x320c                                                                                          
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002af6   0e08     MOVLW     0x8                          if (space_cnt && !(flags & _FLAG_MINUS))                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002af8   50db     MOVF      0xdb,0x0,0x0                                                                                    
002afa   e009     BZ        0x2b0e                                                                                          
002afc   0e03     MOVLW     0x3                                                                                             
002afe   50db     MOVF      0xdb,0x0,0x0                                                                                    
002b00   0b01     ANDLW     0x1                                                                                             
002b02   e105     BNZ       0x2b0e                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b04   db72     RCALL     0x31ea                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b06   e001     BZ        0x2b0a                                                                                          
002b08   d34d     BRA       0x31a4                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b0a   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b0c   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b0e   db64     RCALL     0x31d8                       c = va_arg (ap, int);                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b10   cfef     MOVFF     0xfef,0xfdf                                                                                     
002b12   ffdf                                                                                                               
002b14   ec4a     CALL      0x3494,0x0                   if (putc (c, handle) == EOF)                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b16   f01a                                                                                                               
002b18   e103     BNZ       0x2b20                                                                                          
002b1a   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002b1c   e101     BNZ       0x2b20                                                                                          
002b1e   d342     BRA       0x31a4                                                                                          
                                                           return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b20   ecd2     CALL      0x33a4,0x0                   ++count;                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b22   f019                                                                                                               
002b24   e301     BNC       0x2b28                                                                                          
002b26   2adb     INCF      0xdb,0x1,0x0                                                                                    
002b28   db60     RCALL     0x31ea                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b2a   e101     BNZ       0x2b2e                                                                                          
002b2c   d341     BRA       0x31b0                                                                                          
002b2e   d33a     BRA       0x31a4                         return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'S':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b30   0e07     MOVLW     0x7                          if (size == _FMT_SHLONG)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b32   50db     MOVF      0xdb,0x0,0x0                                                                                    
002b34   0802     SUBLW     0x2                                                                                             
002b36   e10f     BNZ       0x2b56                                                                                          
002b38   ec16     CALL      0x342c,0x0                     romstring = va_arg (ap, rom far char *);                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b3a   f01a                                                                                                               
002b3c   0e03     MOVLW     0x3                                                                                             
002b3e   ecdd     CALL      0x33ba,0x0                                                                                      
002b40   f019                                                                                                               
002b42   0e0e     MOVLW     0xe                                                                                             
002b44   cfee     MOVFF     0xfee,0xfdb                                                                                     
002b46   ffdb                                                                                                               
002b48   0e0f     MOVLW     0xf                                                                                             
002b4a   cfee     MOVFF     0xfee,0xfdb                                                                                     
002b4c   ffdb                                                                                                               
002b4e   0e10     MOVLW     0x10                                                                                            
002b50   cfee     MOVFF     0xfee,0xfdb                                                                                     
002b52   ffdb                                                                                                               
002b54   d020     BRA       0x2b96                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b56   0ef7     MOVLW     0xf7                           romstring = (far rom char*)va_arg (ap, rom near char *);         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b58   cfdb     MOVFF     0xfdb,0x2d                                                                                      
002b5a   f02d                                                                                                               
002b5c   0ef8     MOVLW     0xf8                                                                                            
002b5e   cfdb     MOVFF     0xfdb,0x2e                                                                                      
002b60   f02e                                                                                                               
002b62   0e02     MOVLW     0x2                                                                                             
002b64   5e2d     SUBWF     0x2d,0x1,0x0                                                                                    
002b66   0e00     MOVLW     0x0                                                                                             
002b68   5a2e     SUBWFB    0x2e,0x1,0x0                                                                                    
002b6a   0ef7     MOVLW     0xf7                                                                                            
002b6c   c02d     MOVFF     0x2d,0xfdb                                                                                      
002b6e   ffdb                                                                                                               
002b70   0ef8     MOVLW     0xf8                                                                                            
002b72   c02e     MOVFF     0x2e,0xfdb                                                                                      
002b74   ffdb                                                                                                               
002b76   c02d     MOVFF     0x2d,0xfe9                                                                                      
002b78   ffe9                                                                                                               
002b7a   c02e     MOVFF     0x2e,0xfea                                                                                      
002b7c   ffea                                                                                                               
002b7e   eccd     CALL      0x339a,0x0                                                                                      
002b80   f019                                                                                                               
002b82   6a2c     CLRF      0x2c,0x0                                                                                        
002b84   0e0e     MOVLW     0xe                                                                                             
002b86   c02a     MOVFF     0x2a,0xfdb                                                                                      
002b88   ffdb                                                                                                               
002b8a   0e0f     MOVLW     0xf                                                                                             
002b8c   c02b     MOVFF     0x2b,0xfdb                                                                                      
002b8e   ffdb                                                                                                               
002b90   0e10     MOVLW     0x10                                                                                            
002b92   c02c     MOVFF     0x2c,0xfdb                                                                                      
002b94   ffdb                                                                                                               
002b96   0e0e     MOVLW     0xe                          n = strlenpgm (romstring);                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b98   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002b9a   ffe6                                                                                                               
002b9c   0e0f     MOVLW     0xf                                                                                             
002b9e   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002ba0   ffe6                                                                                                               
002ba2   0e10     MOVLW     0x10                                                                                            
002ba4   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002ba6   ffe6                                                                                                               
002ba8   ecdf     CALL      0x45be,0x0                                                                                      
002baa   f022                                                                                                               
002bac   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002bae   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002bb0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002bb2   0e13     MOVLW     0x13                                                                                            
002bb4   c01d     MOVFF     0x1d,0xfdb                                                                                      
002bb6   ffdb                                                                                                               
002bb8   0e14     MOVLW     0x14                                                                                            
002bba   c01e     MOVFF     0x1e,0xfdb                                                                                      
002bbc   ffdb                                                                                                               
                                                         /* Normalize the width based on the length of the actual           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string and the precision. */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bbe   0e06     MOVLW     0x6                          if (have_precision && precision < (unsigned char) n)               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bc0   50db     MOVF      0xdb,0x0,0x0                                                                                    
002bc2   e005     BZ        0x2bce                                                                                          
002bc4   0e13     MOVLW     0x13                                                                                            
002bc6   ec11     CALL      0x3422,0x0                                                                                      
002bc8   f01a                                                                                                               
002bca   e201     BC        0x2bce                                                                                          
002bcc   db6a     RCALL     0x32a2                         n = precision;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032a2   0e05     MOVLW     0x5                                                                                             
0032a4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0032a6   6ee6     MOVWF     0xe6,0x0                                                                                        
0032a8   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0032aa   0f13     ADDLW     0x13                                                                                            
0032ac   d901     RCALL     0x34b0                                                                                          
0032ae   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0032b0   50e7     MOVF      0xe7,0x0,0x0                                                                                    
0032b2   6eee     MOVWF     0xee,0x0                                                                                        
0032b4   6aed     CLRF      0xed,0x0                                                                                        
0032b6   0012     RETURN    0x0                                                                                             
002bce   ec35     CALL      0x346a,0x0                   if (width < (unsigned char) n)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bd0   f01a                                                                                                               
002bd2   e202     BC        0x2bd8                                                                                          
00346a   0e13     MOVLW     0x13                                                                                            
00346c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00346e   6ef3     MOVWF     0xf3,0x0                                                                                        
003470   0e04     MOVLW     0x4                                                                                             
003472   ef1e     GOTO      0x323c                                                                                          
003474   f019                                                                                                               
002bd4   0e13     MOVLW     0x13                           width = n;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bd6   db37     RCALL     0x3246                                                                                          
002bd8   ecf8     CALL      0x33f0,0x0                   space_cnt = width - (unsigned char) n;                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bda   f019                                                                                                               
0033f0   0e04     MOVLW     0x4                                                                                             
0033f2   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0033f4   ffe6                                                                                                               
0033f6   0e13     MOVLW     0x13                                                                                            
0033f8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0033fa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0033fc   5ce7     SUBWF     0xe7,0x0,0x0                                                                                    
0033fe   df9a     RCALL     0x3334                                                                                          
003400   50db     MOVF      0xdb,0x0,0x0                 count += space_cnt;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003402   df04     RCALL     0x320c                                                                                          
                                                         /* we've already calculated the space count that the width         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            will require. now we want the width field to have the           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            number of character to display from the string itself,          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            limited by the length of the actual string and the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specified precision. */                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bdc   e006     BZ        0x2bea                       if (have_precision && precision < width)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bde   0e04     MOVLW     0x4                                                                                             
002be0   ec11     CALL      0x3422,0x0                                                                                      
002be2   f01a                                                                                                               
002be4   e202     BC        0x2bea                                                                                          
003404   0e06     MOVLW     0x6                                                                                             
003406   50db     MOVF      0xdb,0x0,0x0                                                                                    
003408   0012     RETURN    0x0                                                                                             
002be6   0e05     MOVLW     0x5                            width = precision;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002be8   db2e     RCALL     0x3246                                                                                          
                                                         /* if right justified, we print the spaces before the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string */                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bea   0e03     MOVLW     0x3                          if (!(flags & _FLAG_MINUS))                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bec   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
002bee   d005     BRA       0x2bfa                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bf0   dafc     RCALL     0x31ea                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bf2   e001     BZ        0x2bf6                                                                                          
002bf4   d2d7     BRA       0x31a4                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bf6   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bf8   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bfa   0e09     MOVLW     0x9                          cval = 0;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bfc   6adb     CLRF      0xdb,0x0                                                                                        
002bfe   0e0e     MOVLW     0xe                          for (c = *romstring; c && cval < width; c = *++romstring)          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c00   cfdb     MOVFF     0xfdb,0xff6                                                                                     
002c02   fff6                                                                                                               
002c04   0e0f     MOVLW     0xf                                                                                             
002c06   cfdb     MOVFF     0xfdb,0xff7                                                                                     
002c08   fff7                                                                                                               
002c0a   0e10     MOVLW     0x10                                                                                            
002c0c   cfdb     MOVFF     0xfdb,0xff8                                                                                     
002c0e   fff8                                                                                                               
002c10   0008     TBLRD                                                                                                     
002c12   50f5     MOVF      0xf5,0x0,0x0                                                                                    
002c14   6edf     MOVWF     0xdf,0x0                                                                                        
002c16   50df     MOVF      0xdf,0x0,0x0                                                                                    
002c18   e014     BZ        0x2c42                                                                                          
002c1a   ec3b     CALL      0x3476,0x0                                                                                      
002c1c   f01a                                                                                                               
002c1e   e211     BC        0x2c42                                                                                          
002c36   50d9     MOVF      0xd9,0x0,0x0                                                                                    
002c38   0f0e     ADDLW     0xe                                                                                             
002c3a   6ee9     MOVWF     0xe9,0x0                                                                                        
002c3c   0e00     MOVLW     0x0                                                                                             
002c3e   dbcb     RCALL     0x33d6                                                                                          
002c40   d7e7     BRA       0x2c10                                                                                          
003476   0e04     MOVLW     0x4                                                                                             
003478   50db     MOVF      0xdb,0x0,0x0                                                                                    
00347a   6ef3     MOVWF     0xf3,0x0                                                                                        
00347c   0e09     MOVLW     0x9                                                                                             
00347e   ef1e     GOTO      0x323c                                                                                          
003480   f019                                                                                                               
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c20   ec4a     CALL      0x3494,0x0                       if (putc (c, handle) == EOF)                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c22   f01a                                                                                                               
002c24   e103     BNZ       0x2c2c                                                                                          
002c26   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002c28   e101     BNZ       0x2c2c                                                                                          
002c2a   d2bc     BRA       0x31a4                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c2c   dbbb     RCALL     0x33a4                           ++count;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c2e   e301     BNC       0x2c32                                                                                          
002c30   2adb     INCF      0xdb,0x1,0x0                                                                                    
002c32   0e09     MOVLW     0x9                              ++cval;                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c34   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* If there are spaces left, it's left justified.                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            Either way, calling the function unconditionally                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            is smaller code. */                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c42   dad3     RCALL     0x31ea                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c44   e101     BNZ       0x2c48                                                                                          
002c46   d2b4     BRA       0x31b0                                                                                          
002c48   d2ad     BRA       0x31a4                         return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 's':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c4a   dac6     RCALL     0x31d8                       ramstring = va_arg (ap, char *);                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c4c   0e11     MOVLW     0x11                                                                                            
002c4e   cfee     MOVFF     0xfee,0xfdb                                                                                     
002c50   ffdb                                                                                                               
002c52   0e12     MOVLW     0x12                                                                                            
002c54   cfed     MOVFF     0xfed,0xfdb                                                                                     
002c56   ffdb                                                                                                               
002c58   0e11     MOVLW     0x11                         n = strlen (ramstring);                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c5a   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002c5c   ffe6                                                                                                               
002c5e   0e12     MOVLW     0x12                                                                                            
002c60   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002c62   ffe6                                                                                                               
002c64   ecd1     CALL      0x45a2,0x0                                                                                      
002c66   f022                                                                                                               
002c68   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002c6a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002c6c   0e13     MOVLW     0x13                                                                                            
002c6e   cff3     MOVFF     0xff3,0xfdb                                                                                     
002c70   ffdb                                                                                                               
002c72   0e14     MOVLW     0x14                                                                                            
002c74   cff4     MOVFF     0xff4,0xfdb                                                                                     
002c76   ffdb                                                                                                               
                                                         /* Normalize the width based on the length of the actual           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string and the precision. */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c78   0e06     MOVLW     0x6                          if (have_precision && precision < (unsigned char) n)               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c7a   50db     MOVF      0xdb,0x0,0x0                                                                                    
002c7c   e004     BZ        0x2c86                                                                                          
002c7e   0e13     MOVLW     0x13                                                                                            
002c80   dbd0     RCALL     0x3422                                                                                          
002c82   e201     BC        0x2c86                                                                                          
002c84   db0e     RCALL     0x32a2                         n = precision;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c86   ec35     CALL      0x346a,0x0                   if (width < (unsigned char) n)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c88   f01a                                                                                                               
002c8a   e202     BC        0x2c90                                                                                          
002c8c   0e13     MOVLW     0x13                           width = n;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c8e   dadb     RCALL     0x3246                                                                                          
002c90   dbaf     RCALL     0x33f0                       space_cnt = width - (unsigned char) n;                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003334   6ee7     MOVWF     0xe7,0x0                                                                                        
003336   0e08     MOVLW     0x8                                                                                             
003338   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
00333a   ffdb                                                                                                               
00333c   0012     RETURN    0x0                                                                                             
                                                         count += space_cnt;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* we've already calculated the space count that the width         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            will require. now we want the width field to have the           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            number of character to display from the string itself,          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            limited by the length of the actual string and the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specified precision. */                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c92   e005     BZ        0x2c9e                       if (have_precision && precision < width)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c94   0e04     MOVLW     0x4                                                                                             
002c96   dbc5     RCALL     0x3422                                                                                          
002c98   e202     BC        0x2c9e                                                                                          
003422   50db     MOVF      0xdb,0x0,0x0                                                                                    
003424   6ef3     MOVWF     0xf3,0x0                                                                                        
003426   0e05     MOVLW     0x5                                                                                             
003428   ef1e     GOTO      0x323c                                                                                          
00342a   f019                                                                                                               
002c9a   0e05     MOVLW     0x5                            width = precision;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c9c   dad4     RCALL     0x3246                                                                                          
003246   50db     MOVF      0xdb,0x0,0x0                                                                                    
003248   6ee7     MOVWF     0xe7,0x0                                                                                        
00324a   0e04     MOVLW     0x4                                                                                             
00324c   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
00324e   ffdb                                                                                                               
003250   0012     RETURN    0x0                                                                                             
                                                         /* if right justified, we print the spaces before the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string */                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c9e   0e03     MOVLW     0x3                          if (!(flags & _FLAG_MINUS))                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ca0   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
002ca2   d005     BRA       0x2cae                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ca4   daa2     RCALL     0x31ea                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ca6   e001     BZ        0x2caa                                                                                          
002ca8   d27d     BRA       0x31a4                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002caa   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cac   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cae   0e09     MOVLW     0x9                          cval = 0;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cb0   6adb     CLRF      0xdb,0x0                                                                                        
002cb2   0e11     MOVLW     0x11                         for (c = *ramstring; c && cval < width; c = *++ramstring)          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cb4   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002cb6   ffe9                                                                                                               
002cb8   0e12     MOVLW     0x12                                                                                            
002cba   cfdb     MOVFF     0xfdb,0xfea                                                                                     
002cbc   ffea                                                                                                               
002cbe   cfef     MOVFF     0xfef,0xfdf                                                                                     
002cc0   ffdf                                                                                                               
002cc2   50df     MOVF      0xdf,0x0,0x0                                                                                    
002cc4   e014     BZ        0x2cee                                                                                          
002cc6   dbd7     RCALL     0x3476                                                                                          
002cc8   e212     BC        0x2cee                                                                                          
002cde   0e11     MOVLW     0x11                                                                                            
002ce0   2adb     INCF      0xdb,0x1,0x0                                                                                    
002ce2   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002ce4   ffe9                                                                                                               
002ce6   0e12     MOVLW     0x12                                                                                            
002ce8   e3e8     BNC       0x2cba                                                                                          
002cea   2adb     INCF      0xdb,0x1,0x0                                                                                    
002cec   d7e6     BRA       0x2cba                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cca   dbe4     RCALL     0x3494                           if (putc (c, handle) == EOF)                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ccc   e103     BNZ       0x2cd4                                                                                          
002cce   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002cd0   e101     BNZ       0x2cd4                                                                                          
002cd2   d268     BRA       0x31a4                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cd4   db67     RCALL     0x33a4                           ++count;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cd6   e301     BNC       0x2cda                                                                                          
002cd8   2adb     INCF      0xdb,0x1,0x0                                                                                    
002cda   0e09     MOVLW     0x9                              ++cval;                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cdc   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* If there are spaces left, it's left justified.                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            Either way, calling the function unconditionally                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            is smaller code. */                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cee   da7d     RCALL     0x31ea                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cf0   e101     BNZ       0x2cf4                                                                                          
002cf2   d25e     BRA       0x31b0                                                                                          
002cf4   d257     BRA       0x31a4                         return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'd':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'i':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cf6   0e03     MOVLW     0x3                          flags |= _FLAG_SIGNED;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cf8   8edb     BSF       0xdb,0x7,0x0                                                                                    
                                                         /* fall through */                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'o':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'u':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'x':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'X':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'b':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'B':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* This is a bit of a sneaky trick. The 'l' and 'hh' size          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specifiers are valid only for the integer conversions,          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            not the 'p' or 'P' conversions, and are ignored for the         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            latter. By jumping over the additional size specifier           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            checks here we get the best code size since we can              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            limit the size checks in the remaining code. */                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cfa   0e07     MOVLW     0x7                          if (size == _FMT_LONG)                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cfc   04db     DECF      0xdb,0x0,0x0                                                                                    
002cfe   e110     BNZ       0x2d20                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d00   db95     RCALL     0x342c                           larg = va_arg (ap, long int);                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d02   0e04     MOVLW     0x4                                                                                             
002d04   db5a     RCALL     0x33ba                                                                                          
002d06   0e0a     MOVLW     0xa                                                                                             
002d08   cfee     MOVFF     0xfee,0xfdb                                                                                     
002d0a   ffdb                                                                                                               
002d0c   0e0b     MOVLW     0xb                                                                                             
002d0e   cfee     MOVFF     0xfee,0xfdb                                                                                     
002d10   ffdb                                                                                                               
002d12   0e0c     MOVLW     0xc                                                                                             
002d14   cfee     MOVFF     0xfee,0xfdb                                                                                     
002d16   ffdb                                                                                                               
002d18   0e0d     MOVLW     0xd                                                                                             
002d1a   cfee     MOVFF     0xfee,0xfdb                                                                                     
002d1c   ffdb                                                                                                               
002d1e   d06c     BRA       0x2df8                           goto _do_integer_conversion;                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d20   0e07     MOVLW     0x7                          else if (size == _FMT_BYTE)                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d22   50db     MOVF      0xdb,0x0,0x0                                                                                    
002d24   0803     SUBLW     0x3                                                                                             
002d26   e12c     BNZ       0x2d80                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d28   0e03     MOVLW     0x3                              if (flags & _FLAG_SIGNED)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d2a   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
002d2c   d00d     BRA       0x2d48                                                                                          
002d2e   dab2     RCALL     0x3294                             larg = (signed char) va_arg (ap, int);                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d30   0e02     MOVLW     0x2                                                                                             
002d32   da76     RCALL     0x3220                                                                                          
002d34   cfef     MOVFF     0xfef,0x2a                                                                                      
002d36   f02a                                                                                                               
002d38   6a2b     CLRF      0x2b,0x0                                                                                        
002d3a   6a2c     CLRF      0x2c,0x0                                                                                        
002d3c   6a2d     CLRF      0x2d,0x0                                                                                        
002d3e   ae2a     BTFSS     0x2a,0x7,0x0                                                                                    
002d40   d039     BRA       0x2db4                                                                                          
002d42   682b     SETF      0x2b,0x0                                                                                        
002d44   682c     SETF      0x2c,0x0                                                                                        
002d46   d035     BRA       0x2db2                           else                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d48   0ef7     MOVLW     0xf7                               larg = (unsigned char) va_arg (ap, unsigned int);            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d4a   cfdb     MOVFF     0xfdb,0x2b                                                                                      
002d4c   f02b                                                                                                               
002d4e   0ef8     MOVLW     0xf8                                                                                            
002d50   cfdb     MOVFF     0xfdb,0x2c                                                                                      
002d52   f02c                                                                                                               
002d54   0e02     MOVLW     0x2                                                                                             
002d56   5e2b     SUBWF     0x2b,0x1,0x0                                                                                    
002d58   0e00     MOVLW     0x0                                                                                             
002d5a   5a2c     SUBWFB    0x2c,0x1,0x0                                                                                    
002d5c   0ef7     MOVLW     0xf7                                                                                            
002d5e   c02b     MOVFF     0x2b,0xfdb                                                                                      
002d60   ffdb                                                                                                               
002d62   0ef8     MOVLW     0xf8                                                                                            
002d64   c02c     MOVFF     0x2c,0xfdb                                                                                      
002d66   ffdb                                                                                                               
002d68   c02b     MOVFF     0x2b,0xfe9                                                                                      
002d6a   ffe9                                                                                                               
002d6c   c02c     MOVFF     0x2c,0xfea                                                                                      
002d6e   ffea                                                                                                               
002d70   cfef     MOVFF     0xfef,0x2a                                                                                      
002d72   f02a                                                                                                               
002d74   0e0a     MOVLW     0xa                                                                                             
002d76   c02a     MOVFF     0x2a,0xfdb                                                                                      
002d78   ffdb                                                                                                               
002d7a   0e0b     MOVLW     0xb                                                                                             
002d7c   6adb     CLRF      0xdb,0x0                                                                                        
002d7e   d038     BRA       0x2df0                           goto _do_integer_conversion;                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* fall through */                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'p':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'P':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d80   0e07     MOVLW     0x7                          if (size == _FMT_SHLONG)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d82   50db     MOVF      0xdb,0x0,0x0                                                                                    
002d84   0802     SUBLW     0x2                                                                                             
002d86   e109     BNZ       0x2d9a                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d88   0e03     MOVLW     0x3                              if (flags & _FLAG_SIGNED)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d8a   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
002d8c   d004     BRA       0x2d96                                                                                          
002d8e   db59     RCALL     0x3442                             larg = va_arg (ap, short long int);                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d90   ae2c     BTFSS     0x2c,0x7,0x0                                                                                    
002d92   d010     BRA       0x2db4                                                                                          
00333e   cfee     MOVFF     0xfee,0x2a                                                                                      
003340   f02a                                                                                                               
003342   cfee     MOVFF     0xfee,0x2b                                                                                      
003344   f02b                                                                                                               
003346   cfef     MOVFF     0xfef,0x2c                                                                                      
003348   f02c                                                                                                               
00334a   6a2d     CLRF      0x2d,0x0                                                                                        
00334c   0012     RETURN    0x0                                                                                             
003442   df28     RCALL     0x3294                                                                                          
003444   0e03     MOVLW     0x3                                                                                             
003446   deec     RCALL     0x3220                                                                                          
003448   ef9f     GOTO      0x333e                                                                                          
00344a   f019                                                                                                               
002d94   d00e     BRA       0x2db2                           else                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d96   db55     RCALL     0x3442                             larg = va_arg (ap, unsigned short long int);                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d98   d00d     BRA       0x2db4                       else if (flags & _FLAG_SIGNED)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d9a   0e03     MOVLW     0x3                                                                                             
002d9c   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
002d9e   d012     BRA       0x2dc4                                                                                          
002da0   da79     RCALL     0x3294                         larg = va_arg (ap, int);                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002da2   0e02     MOVLW     0x2                                                                                             
002da4   da3d     RCALL     0x3220                                                                                          
002da6   daf9     RCALL     0x339a                                                                                          
002da8   6a2c     CLRF      0x2c,0x0                                                                                        
002daa   6a2d     CLRF      0x2d,0x0                                                                                        
002dac   ae2b     BTFSS     0x2b,0x7,0x0                                                                                    
002dae   d002     BRA       0x2db4                                                                                          
002db0   682c     SETF      0x2c,0x0                                                                                        
002db2   682d     SETF      0x2d,0x0                                                                                        
002db4   dae2     RCALL     0x337a                                                                                          
002db6   0e0c     MOVLW     0xc                                                                                             
002db8   c02c     MOVFF     0x2c,0xfdb                                                                                      
002dba   ffdb                                                                                                               
002dbc   0e0d     MOVLW     0xd                                                                                             
002dbe   c02d     MOVFF     0x2d,0xfdb                                                                                      
002dc0   ffdb                                                                                                               
003220   5e2e     SUBWF     0x2e,0x1,0x0                                                                                    
003222   0e00     MOVLW     0x0                                                                                             
003224   5a2f     SUBWFB    0x2f,0x1,0x0                                                                                    
003226   0ef7     MOVLW     0xf7                                                                                            
003228   c02e     MOVFF     0x2e,0xfdb                                                                                      
00322a   ffdb                                                                                                               
00322c   0ef8     MOVLW     0xf8                                                                                            
00322e   c02f     MOVFF     0x2f,0xfdb                                                                                      
003230   ffdb                                                                                                               
003232   c02e     MOVFF     0x2e,0xfe9                                                                                      
003234   ffe9                                                                                                               
003236   c02f     MOVFF     0x2f,0xfea                                                                                      
003238   ffea                                                                                                               
00323a   0012     RETURN    0x0                                                                                             
003294   0ef7     MOVLW     0xf7                                                                                            
003296   cfdb     MOVFF     0xfdb,0x2e                                                                                      
003298   f02e                                                                                                               
00329a   0ef8     MOVLW     0xf8                                                                                            
00329c   cfdb     MOVFF     0xfdb,0x2f                                                                                      
00329e   f02f                                                                                                               
0032a0   0012     RETURN    0x0                                                                                             
00337a   0e0a     MOVLW     0xa                                                                                             
00337c   c02a     MOVFF     0x2a,0xfdb                                                                                      
00337e   ffdb                                                                                                               
003380   0e0b     MOVLW     0xb                                                                                             
003382   c02b     MOVFF     0x2b,0xfdb                                                                                      
003384   ffdb                                                                                                               
003386   0012     RETURN    0x0                                                                                             
00339a   cfee     MOVFF     0xfee,0x2a                                                                                      
00339c   f02a                                                                                                               
00339e   cfef     MOVFF     0xfef,0x2b                                                                                      
0033a0   f02b                                                                                                               
0033a2   0012     RETURN    0x0                                                                                             
002dc2   d01a     BRA       0x2df8                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dc4   0ef7     MOVLW     0xf7                           larg = va_arg (ap, unsigned int);                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dc6   cfdb     MOVFF     0xfdb,0x2c                                                                                      
002dc8   f02c                                                                                                               
002dca   0ef8     MOVLW     0xf8                                                                                            
002dcc   cfdb     MOVFF     0xfdb,0x2d                                                                                      
002dce   f02d                                                                                                               
002dd0   0e02     MOVLW     0x2                                                                                             
002dd2   5e2c     SUBWF     0x2c,0x1,0x0                                                                                    
002dd4   0e00     MOVLW     0x0                                                                                             
002dd6   5a2d     SUBWFB    0x2d,0x1,0x0                                                                                    
002dd8   0ef7     MOVLW     0xf7                                                                                            
002dda   c02c     MOVFF     0x2c,0xfdb                                                                                      
002ddc   ffdb                                                                                                               
002dde   0ef8     MOVLW     0xf8                                                                                            
002de0   c02d     MOVFF     0x2d,0xfdb                                                                                      
002de2   ffdb                                                                                                               
002de4   c02c     MOVFF     0x2c,0xfe9                                                                                      
002de6   ffe9                                                                                                               
002de8   c02d     MOVFF     0x2d,0xfea                                                                                      
002dea   ffea                                                                                                               
002dec   dad6     RCALL     0x339a                                                                                          
002dee   dac5     RCALL     0x337a                                                                                          
002df0   0e0c     MOVLW     0xc                                                                                             
002df2   6adb     CLRF      0xdb,0x0                                                                                        
002df4   0e0d     MOVLW     0xd                                                                                             
002df6   6adb     CLRF      0xdb,0x0                                                                                        
                                                       _do_integer_conversion:                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* default precision is 1 */                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002df8   0e06     MOVLW     0x6                          if (!have_precision)                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dfa   50db     MOVF      0xdb,0x0,0x0                                                                                    
002dfc   e105     BNZ       0x2e08                                                                                          
002dfe   0e01     MOVLW     0x1                            precision = 1;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e00   6ef3     MOVWF     0xf3,0x0                                                                                        
002e02   0e05     MOVLW     0x5                                                                                             
002e04   cff3     MOVFF     0xff3,0xfdb                                                                                     
002e06   ffdb                                                                                                               
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         {                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e08   0e15     MOVLW     0x15                           unsigned char digit_cnt = 0;                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e0a   6adb     CLRF      0xdb,0x0                                                                                        
002e0c   0e16     MOVLW     0x16                           unsigned char prefix_cnt = 0;                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e0e   6adb     CLRF      0xdb,0x0                                                                                        
                                                           unsigned char sign_char;                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* A 32 bit number will require at most 32 digits in the         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              string representation (binary format). */                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           char buf[33];                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* Start storing digits least-significant first */               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e10   50d9     MOVF      0xd9,0x0,0x0                   char *q = &buf[31];                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e12   0f37     ADDLW     0x37                                                                                            
002e14   6e2a     MOVWF     0x2a,0x0                                                                                        
002e16   0e00     MOVLW     0x0                                                                                             
002e18   20da     ADDWFC    0xda,0x0,0x0                                                                                    
002e1a   6e2b     MOVWF     0x2b,0x0                                                                                        
002e1c   0e39     MOVLW     0x39                                                                                            
002e1e   c02a     MOVFF     0x2a,0xfdb                                                                                      
002e20   ffdb                                                                                                               
002e22   0e3a     MOVLW     0x3a                                                                                            
002e24   c02b     MOVFF     0x2b,0xfdb                                                                                      
002e26   ffdb                                                                                                               
                                                           /* null terminate the string */                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e28   0e38     MOVLW     0x38                           buf[32] = '\0';                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e2a   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e2c   0e08     MOVLW     0x8                            space_cnt = 0;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e2e   6adb     CLRF      0xdb,0x0                                                                                        
002e30   0e0a     MOVLW     0xa                            size = 10;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e32   daae     RCALL     0x3390                                                                                          
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e34   50df     MOVF      0xdf,0x0,0x0                   switch (c)                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e36   0a78     XORLW     0x78                                                                                            
002e38   e012     BZ        0x2e5e                                                                                          
002e3a   0a20     XORLW     0x20                                                                                            
002e3c   e010     BZ        0x2e5e                                                                                          
002e3e   0a28     XORLW     0x28                                                                                            
002e40   e00c     BZ        0x2e5a                                                                                          
002e42   0a20     XORLW     0x20                                                                                            
002e44   e00a     BZ        0x2e5a                                                                                          
002e46   0a3f     XORLW     0x3f                                                                                            
002e48   e006     BZ        0x2e56                                                                                          
002e4a   0a0d     XORLW     0xd                                                                                             
002e4c   e002     BZ        0x2e52                                                                                          
002e4e   0a20     XORLW     0x20                                                                                            
002e50   e108     BNZ       0x2e62                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'b':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'B':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e52   0e02     MOVLW     0x2                                size = 2;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e54   d005     BRA       0x2e60                             break;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'o':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e56   0e08     MOVLW     0x8                                size = 8;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e58   d003     BRA       0x2e60                             break;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'p':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'P':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               /* from here on out, treat 'p' conversions just              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                  like 'x' conversions. */                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e5a   0e08     MOVLW     0x8                                c += 'x' - 'p';                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e5c   26df     ADDWF     0xdf,0x1,0x0                                                                                    
                                                               /* fall through */                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'x':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'X':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e5e   0e10     MOVLW     0x10                               size = 16;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e60   da97     RCALL     0x3390                                                                                          
003390   6ef3     MOVWF     0xf3,0x0                                                                                        
003392   0e07     MOVLW     0x7                                                                                             
003394   cff3     MOVFF     0xff3,0xfdb                                                                                     
003396   ffdb                                                                                                               
003398   0012     RETURN    0x0                                                                                             
                                                               break;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if it's an unsigned conversion, we should ignore the          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              ' ' and '+' flags */                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e62   0e03     MOVLW     0x3                            if (!(flags & _FLAG_SIGNED))                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e64   bedb     BTFSC     0xdb,0x7,0x0                                                                                    
002e66   d002     BRA       0x2e6c                                                                                          
002e68   92db     BCF       0xdb,0x1,0x0                     flags &= ~(_FLAG_PLUS | _FLAG_SPACE);                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e6a   94db     BCF       0xdb,0x2,0x0                                                                                    
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if it's a negative value, we need to negate the               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              unsigned version before we convert to text. Using             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              unsigned for this allows us to (ab)use the 2's                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              complement system to avoid overflow and be able to            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              adequately handle LONG_MIN.                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              We'll figure out what sign character to print, if             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              any, here as well. */                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e6c   50db     MOVF      0xdb,0x0,0x0                   if (flags & _FLAG_SIGNED && ((long) larg < 0))                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e6e   0b80     ANDLW     0x80                                                                                            
002e70   e024     BZ        0x2eba                                                                                          
002e72   da8a     RCALL     0x3388                                                                                          
002e74   90d8     BCF       0xd8,0x0,0x0                                                                                    
002e76   0e03     MOVLW     0x3                                                                                             
002e78   50eb     MOVF      0xeb,0x0,0x0                                                                                    
002e7a   0a00     XORLW     0x0                                                                                             
002e7c   e608     BN        0x2e8e                                                                                          
002e7e   0e00     MOVLW     0x0                                                                                             
002e80   5cee     SUBWF     0xee,0x0,0x0                                                                                    
002e82   0e00     MOVLW     0x0                                                                                             
002e84   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
002e86   0e00     MOVLW     0x0                                                                                             
002e88   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
002e8a   0e00     MOVLW     0x0                                                                                             
002e8c   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
002e8e   e215     BC        0x2eba                                                                                          
003388   50d9     MOVF      0xd9,0x0,0x0                                                                                    
00338a   0f0a     ADDLW     0xa                                                                                             
00338c   ef58     GOTO      0x34b0                                                                                          
00338e   f01a                                                                                                               
0034b0   6ee9     MOVWF     0xe9,0x0                                                                                        
0034b2   0e00     MOVLW     0x0                                                                                             
0034b4   20da     ADDWFC    0xda,0x0,0x0                                                                                    
0034b6   6eea     MOVWF     0xea,0x0                                                                                        
0034b8   0012     RETURN    0x0                                                                                             
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e90   da13     RCALL     0x32b8                             larg = -(long) larg;                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e92   6821     SETF      0x21,0x0                                                                                        
002e94   6822     SETF      0x22,0x0                                                                                        
002e96   6823     SETF      0x23,0x0                                                                                        
002e98   6824     SETF      0x24,0x0                                                                                        
002e9a   ec99     CALL      0x4532,0x0                                                                                      
002e9c   f022                                                                                                               
002e9e   0e0a     MOVLW     0xa                                                                                             
002ea0   c018     MOVFF     0x18,0xfdb                                                                                      
002ea2   ffdb                                                                                                               
002ea4   0e0b     MOVLW     0xb                                                                                             
002ea6   c019     MOVFF     0x19,0xfdb                                                                                      
002ea8   ffdb                                                                                                               
002eaa   0e0c     MOVLW     0xc                                                                                             
002eac   c01a     MOVFF     0x1a,0xfdb                                                                                      
002eae   ffdb                                                                                                               
002eb0   0e0d     MOVLW     0xd                                                                                             
002eb2   c01b     MOVFF     0x1b,0xfdb                                                                                      
002eb4   ffdb                                                                                                               
0032b8   0e0a     MOVLW     0xa                                                                                             
0032ba   cfdb     MOVFF     0xfdb,0x1c                                                                                      
0032bc   f01c                                                                                                               
0032be   0e0b     MOVLW     0xb                                                                                             
0032c0   cfdb     MOVFF     0xfdb,0x1d                                                                                      
0032c2   f01d                                                                                                               
0032c4   0e0c     MOVLW     0xc                                                                                             
0032c6   cfdb     MOVFF     0xfdb,0x1e                                                                                      
0032c8   f01e                                                                                                               
0032ca   0e0d     MOVLW     0xd                                                                                             
0032cc   cfdb     MOVFF     0xfdb,0x1f                                                                                      
0032ce   f01f                                                                                                               
0032d0   0012     RETURN    0x0                                                                                             
002eb6   0e2d     MOVLW     0x2d                               sign_char = '-';                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               ++digit_cnt;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eb8   d008     BRA       0x2eca                         else if (flags & _FLAG_PLUS)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eba   0e03     MOVLW     0x3                                                                                             
002ebc   a2db     BTFSS     0xdb,0x1,0x0                                                                                    
002ebe   d002     BRA       0x2ec4                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ec0   0e2b     MOVLW     0x2b                               sign_char = '+';                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               ++digit_cnt;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ec2   d003     BRA       0x2eca                         else if (flags & _FLAG_SPACE)                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ec4   a4db     BTFSS     0xdb,0x2,0x0                                                                                    
002ec6   d008     BRA       0x2ed8                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ec8   0e20     MOVLW     0x20                               sign_char = ' ';                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eca   6ef3     MOVWF     0xf3,0x0                                                                                        
002ecc   0e17     MOVLW     0x17                                                                                            
002ece   cff3     MOVFF     0xff3,0xfdb                                                                                     
002ed0   ffdb                                                                                                               
002ed2   0e15     MOVLW     0x15                               ++digit_cnt;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ed4   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ed6   d002     BRA       0x2edc                         else                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ed8   0e17     MOVLW     0x17                             sign_char = '\0';                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eda   6adb     CLRF      0xdb,0x0                                                                                        
                                                           /* get the digits for the actual number. If the                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              precision is zero and the value is zero, the result           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              is no characters. */                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002edc   0e05     MOVLW     0x5                            if (precision || larg)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ede   50db     MOVF      0xdb,0x0,0x0                                                                                    
002ee0   e103     BNZ       0x2ee8                                                                                          
002ee2   d9b7     RCALL     0x3252                                                                                          
002ee4   e101     BNZ       0x2ee8                                                                                          
002ee6   d089     BRA       0x2ffa                                                                                          
003252   0e0a     MOVLW     0xa                                                                                             
003254   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003256   f02a                                                                                                               
003258   0e0b     MOVLW     0xb                                                                                             
00325a   cfdb     MOVFF     0xfdb,0x2b                                                                                      
00325c   f02b                                                                                                               
00325e   0e0c     MOVLW     0xc                                                                                             
003260   cfdb     MOVFF     0xfdb,0x2c                                                                                      
003262   f02c                                                                                                               
003264   0e0d     MOVLW     0xd                                                                                             
003266   cfdb     MOVFF     0xfdb,0x2d                                                                                      
003268   f02d                                                                                                               
00326a   502a     MOVF      0x2a,0x0,0x0                                                                                    
00326c   102b     IORWF     0x2b,0x0,0x0                                                                                    
00326e   102c     IORWF     0x2c,0x0,0x0                                                                                    
003270   102d     IORWF     0x2d,0x0,0x0                                                                                    
003272   0012     RETURN    0x0                                                                                             
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               do                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                 {                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ee8   0e5c     MOVLW     0x5c                                   cval = s_digits[larg % size];                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eea   6e2a     MOVWF     0x2a,0x0                                                                                        
002eec   0e47     MOVLW     0x47                                                                                            
002eee   6e2b     MOVWF     0x2b,0x0                                                                                        
002ef0   0e00     MOVLW     0x0                                                                                             
002ef2   6e2c     MOVWF     0x2c,0x0                                                                                        
002ef4   0e07     MOVLW     0x7                                                                                             
002ef6   cfdb     MOVFF     0xfdb,0x2d                                                                                      
002ef8   f02d                                                                                                               
002efa   6a2e     CLRF      0x2e,0x0                                                                                        
002efc   6a2f     CLRF      0x2f,0x0                                                                                        
002efe   6a30     CLRF      0x30,0x0                                                                                        
002f00   c02d     MOVFF     0x2d,0x21                                                                                       
002f02   f021                                                                                                               
002f04   c02e     MOVFF     0x2e,0x22                                                                                       
002f06   f022                                                                                                               
002f08   c02f     MOVFF     0x2f,0x23                                                                                       
002f0a   f023                                                                                                               
002f0c   c030     MOVFF     0x30,0x24                                                                                       
002f0e   f024                                                                                                               
002f10   d9d3     RCALL     0x32b8                                                                                          
002f12   ec2a     CALL      0x4654,0x0                                                                                      
002f14   f023                                                                                                               
002f16   502a     MOVF      0x2a,0x0,0x0                                                                                    
002f18   2418     ADDWF     0x18,0x0,0x0                                                                                    
002f1a   6ef3     MOVWF     0xf3,0x0                                                                                        
002f1c   502b     MOVF      0x2b,0x0,0x0                                                                                    
002f1e   2019     ADDWFC    0x19,0x0,0x0                                                                                    
002f20   6ef4     MOVWF     0xf4,0x0                                                                                        
002f22   502c     MOVF      0x2c,0x0,0x0                                                                                    
002f24   201a     ADDWFC    0x1a,0x0,0x0                                                                                    
002f26   6ef8     MOVWF     0xf8,0x0                                                                                        
002f28   cff4     MOVFF     0xff4,0xff7                                                                                     
002f2a   fff7                                                                                                               
002f2c   cff3     MOVFF     0xff3,0xff6                                                                                     
002f2e   fff6                                                                                                               
002f30   0008     TBLRD                                                                                                     
002f32   0e09     MOVLW     0x9                                                                                             
002f34   cff5     MOVFF     0xff5,0xfdb                                                                                     
002f36   ffdb                                                                                                               
002f38   0e58     MOVLW     0x58                                   if (c == 'X' && cval >= 'a')                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f3a   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002f3c   e10f     BNZ       0x2f5c                                                                                          
002f3e   0e61     MOVLW     0x61                                                                                            
002f40   6ef3     MOVWF     0xf3,0x0                                                                                        
002f42   0e09     MOVLW     0x9                                                                                             
002f44   d97b     RCALL     0x323c                                                                                          
002f46   e30a     BNC       0x2f5c                                                                                          
00323c   cfdb     MOVFF     0xfdb,0xff4                                                                                     
00323e   fff4                                                                                                               
003240   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003242   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
003244   0012     RETURN    0x0                                                                                             
002f48   0e20     MOVLW     0x20                                     cval -= 'a' - 'A';                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f4a   6e2a     MOVWF     0x2a,0x0                                                                                        
002f4c   0e09     MOVLW     0x9                                                                                             
002f4e   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
002f50   ffe7                                                                                                               
002f52   502a     MOVF      0x2a,0x0,0x0                                                                                    
002f54   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
002f56   0e09     MOVLW     0x9                                                                                             
002f58   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
002f5a   ffdb                                                                                                               
002f5c   0e07     MOVLW     0x7                                    larg /= size;                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f5e   cfdb     MOVFF     0xfdb,0x2a                                                                                      
002f60   f02a                                                                                                               
002f62   6a2b     CLRF      0x2b,0x0                                                                                        
002f64   6a2c     CLRF      0x2c,0x0                                                                                        
002f66   6a2d     CLRF      0x2d,0x0                                                                                        
002f68   da0f     RCALL     0x3388                                                                                          
002f6a   c02a     MOVFF     0x2a,0x21                                                                                       
002f6c   f021                                                                                                               
002f6e   c02b     MOVFF     0x2b,0x22                                                                                       
002f70   f022                                                                                                               
002f72   c02c     MOVFF     0x2c,0x23                                                                                       
002f74   f023                                                                                                               
002f76   c02d     MOVFF     0x2d,0x24                                                                                       
002f78   f024                                                                                                               
002f7a   cfee     MOVFF     0xfee,0x1c                                                                                      
002f7c   f01c                                                                                                               
002f7e   cfee     MOVFF     0xfee,0x1d                                                                                      
002f80   f01d                                                                                                               
002f82   cfee     MOVFF     0xfee,0x1e                                                                                      
002f84   f01e                                                                                                               
002f86   cfef     MOVFF     0xfef,0x1f                                                                                      
002f88   f01f                                                                                                               
002f8a   ec2a     CALL      0x4654,0x0                                                                                      
002f8c   f023                                                                                                               
002f8e   c01f     MOVFF     0x1f,0xfed                                                                                      
002f90   ffed                                                                                                               
002f92   c01e     MOVFF     0x1e,0xfed                                                                                      
002f94   ffed                                                                                                               
002f96   c01d     MOVFF     0x1d,0xfed                                                                                      
002f98   ffed                                                                                                               
002f9a   c01c     MOVFF     0x1c,0xfef                                                                                      
002f9c   ffef                                                                                                               
002f9e   0e39     MOVLW     0x39                                   *q-- = cval;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fa0   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002fa2   ffe9                                                                                                               
002fa4   06db     DECF      0xdb,0x1,0x0                                                                                    
002fa6   0e3a     MOVLW     0x3a                                                                                            
002fa8   cfdb     MOVFF     0xfdb,0xfea                                                                                     
002faa   ffea                                                                                                               
002fac   e201     BC        0x2fb0                                                                                          
002fae   06db     DECF      0xdb,0x1,0x0                                                                                    
002fb0   0e09     MOVLW     0x9                                                                                             
002fb2   cfdb     MOVFF     0xfdb,0xfef                                                                                     
002fb4   ffef                                                                                                               
002fb6   0e15     MOVLW     0x15                                   ++digit_cnt;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fb8   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                                 }                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fba   d94b     RCALL     0x3252                             while (larg);                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fbc   e195     BNZ       0x2ee8                                                                                          
                                                               /* if the '#' flag was specified and we're dealing           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                  with an 'o', 'b', 'B', 'x', or 'X' conversion,            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                  we need a bit more. */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fbe   0e03     MOVLW     0x3                                if (flags & _FLAG_OCTO)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fc0   a6db     BTFSS     0xdb,0x3,0x0                                                                                    
002fc2   d01d     BRA       0x2ffe                                                                                          
                                                                 {                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fc4   0e6f     MOVLW     0x6f                                   if (c == 'o')                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fc6   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002fc8   e106     BNZ       0x2fd6                                                                                          
                                                                     {                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                       /* per the standard, for octal, the '#' flag         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                          makes the precision be at least one more          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                          than the number of digits in the number */        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fca   d9c1     RCALL     0x334e                                     if (precision <= digit_cnt)                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fcc   e318     BNC       0x2ffe                                                                                          
00334e   0e05     MOVLW     0x5                                                                                             
003350   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003352   f02a                                                                                                               
003354   0e15     MOVLW     0x15                                                                                            
003356   50db     MOVF      0xdb,0x0,0x0                                                                                    
003358   80d8     BSF       0xd8,0x0,0x0                                                                                    
00335a   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
00335c   0012     RETURN    0x0                                                                                             
002fce   0e15     MOVLW     0x15                                         precision = digit_cnt + 1;                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fd0   28db     INCF      0xdb,0x0,0x0                                                                                    
002fd2   da5b     RCALL     0x348a                                                                                          
                                                                     }                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fd4   d014     BRA       0x2ffe                                 else if (c == 'x'                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fd6   0e78     MOVLW     0x78                                                                                            
002fd8   5cdf     SUBWF     0xdf,0x0,0x0                                    || c == 'X' || c == 'b' || c == 'B')            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fda   e009     BZ        0x2fee                                                                                          
002fdc   0e58     MOVLW     0x58                                                                                            
002fde   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002fe0   e006     BZ        0x2fee                                                                                          
002fe2   0e62     MOVLW     0x62                                                                                            
002fe4   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002fe6   e003     BZ        0x2fee                                                                                          
002fe8   0e42     MOVLW     0x42                                                                                            
002fea   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002fec   e108     BNZ       0x2ffe                                                                                          
002fee   0e02     MOVLW     0x2                                      prefix_cnt = 2;                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ff0   6ef3     MOVWF     0xf3,0x0                                                                                        
002ff2   0e16     MOVLW     0x16                                                                                            
002ff4   cff3     MOVFF     0xff3,0xfdb                                                                                     
002ff6   ffdb                                                                                                               
                                                                 }                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ff8   d002     BRA       0x2ffe                         else                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ffa   0e15     MOVLW     0x15                             digit_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ffc   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* The leading zero count depends on whether the '0'             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              flag was specified or not. If it was not, then the            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              count is the difference between the specified                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              precision and the number of digits (including the             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              sign character, if any) to be printed; otherwise,             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              it's as if the precision were equal to the max of             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              the specified precision and the field width. If a             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              precision was specified, the '0' flag is ignored,             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              however. */                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ffe   0e03     MOVLW     0x3                            if ((flags & _FLAG_ZERO) && (width > precision)                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003000   50db     MOVF      0xdb,0x0,0x0                                                                                    
003002   0b10     ANDLW     0x10                                                                                            
003006   0e04     MOVLW     0x4                                                                                             
003008   cfdb     MOVFF     0xfdb,0x2a                                                                                      
00300a   f02a                                                                                                               
00300c   0e05     MOVLW     0x5                                                                                             
00300e   50db     MOVF      0xdb,0x0,0x0                                                                                    
003010   80d8     BSF       0xd8,0x0,0x0                                                                                    
003012   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
003004   e00e     BZ        0x3022                             && !have_precision)                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003014   e206     BC        0x3022                                                                                          
003016   0e06     MOVLW     0x6                                                                                             
003018   50db     MOVF      0xdb,0x0,0x0                                                                                    
00301a   e103     BNZ       0x3022                                                                                          
00301c   0e04     MOVLW     0x4                              precision = width;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00301e   50db     MOVF      0xdb,0x0,0x0                                                                                    
003020   da34     RCALL     0x348a                                                                                          
                                                           /* for the rest of the processing, precision contains            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              the leading zero count for the conversion. */                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003022   d995     RCALL     0x334e                         if (precision > digit_cnt)                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003024   e20a     BC        0x303a                                                                                          
003026   0e05     MOVLW     0x5                              precision -= digit_cnt;                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003028   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
00302a   ffe7                                                                                                               
00302c   0e15     MOVLW     0x15                                                                                            
00302e   50db     MOVF      0xdb,0x0,0x0                                                                                    
003030   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
003032   0e05     MOVLW     0x5                                                                                             
003034   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
003036   ffdb                                                                                                               
003038   d002     BRA       0x303e                         else                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00303a   0e05     MOVLW     0x5                              precision = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00303c   6adb     CLRF      0xdb,0x0                                                                                        
                                                           /* the space count is the difference between the field           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              width and the digit count plus the leading zero               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              count. If the width is less than the digit count              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              plus the leading zero count, the space count is               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              zero. */                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00303e   0e04     MOVLW     0x4                            if (width > precision + digit_cnt + prefix_cnt)                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003040   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003042   f02a                                                                                                               
003044   0e16     MOVLW     0x16                                                                                            
003046   d945     RCALL     0x32d2                                                                                          
003048   80d8     BSF       0xd8,0x0,0x0                                                                                    
00304a   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
00304c   e214     BC        0x3076                                                                                          
0032d2   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0032d4   ffe6                                                                                                               
0032d6   0e15     MOVLW     0x15                                                                                            
0032d8   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0032da   ffe6                                                                                                               
0032dc   0e05     MOVLW     0x5                                                                                             
0032de   50db     MOVF      0xdb,0x0,0x0                                                                                    
0032e0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0032e2   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
0032e4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0032e6   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
0032e8   0012     RETURN    0x0                                                                                             
                                                             space_cnt =                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00304e   0e16     MOVLW     0x16                               width - precision - digit_cnt - prefix_cnt;                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003050   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003052   ffe6                                                                                                               
003054   0e15     MOVLW     0x15                                                                                            
003056   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003058   ffe6                                                                                                               
00305a   0e04     MOVLW     0x4                                                                                             
00305c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00305e   ffe6                                                                                                               
003060   0e05     MOVLW     0x5                                                                                             
003062   50db     MOVF      0xdb,0x0,0x0                                                                                    
003064   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003066   5ce7     SUBWF     0xe7,0x0,0x0                                                                                    
003068   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00306a   80d8     BSF       0xd8,0x0,0x0                                                                                    
00306c   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
00306e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003070   80d8     BSF       0xd8,0x0,0x0                                                                                    
003072   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
003074   d95f     RCALL     0x3334                                                                                          
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* for output, we check the justification, if it's               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              right justified and the space count is positive, we           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              emit the space characters first. */                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003076   0e03     MOVLW     0x3                            if (!(flags & _FLAG_MINUS) && space_cnt)                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003078   50db     MOVF      0xdb,0x0,0x0                                                                                    
00307a   0b01     ANDLW     0x1                                                                                             
00307c   e10b     BNZ       0x3094                                                                                          
00307e   0e08     MOVLW     0x8                                                                                             
003080   50db     MOVF      0xdb,0x0,0x0                                                                                    
003082   e008     BZ        0x3094                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003084   d8b2     RCALL     0x31ea                             if (s_put_n_chars (handle, space_cnt, ' '))                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003086   e001     BZ        0x308a                                                                                          
003088   d08d     BRA       0x31a4                                                                                          
                                                                 return EOF;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00308a   0e08     MOVLW     0x8                                count += space_cnt;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00308c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00308e   d8be     RCALL     0x320c                                                                                          
003090   0e08     MOVLW     0x8                                space_cnt = 0;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003092   6adb     CLRF      0xdb,0x0                                                                                        
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if we have a sign character to print, that comes              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              next */                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003094   0e17     MOVLW     0x17                           if (sign_char)                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003096   50db     MOVF      0xdb,0x0,0x0                                                                                    
003098   e007     BZ        0x30a8                                                                                          
00309a   d988     RCALL     0x33ac                           if (putc (sign_char, handle) == EOF)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00309c   0e17     MOVLW     0x17                                                                                            
00309e   d9f1     RCALL     0x3482                                                                                          
0030a0   e103     BNZ       0x30a8                                                                                          
0030a2   1c2b     COMF      0x2b,0x0,0x0                                                                                    
0030a4   e101     BNZ       0x30a8                                                                                          
0030a6   d07e     BRA       0x31a4                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if we have a prefix (0b, 0B, 0x or 0X), that's next */        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030a8   0e16     MOVLW     0x16                           if (prefix_cnt)                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030aa   50db     MOVF      0xdb,0x0,0x0                                                                                    
0030ac   e016     BZ        0x30da                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030ae   d97e     RCALL     0x33ac                             if (putc ('0', handle) == EOF)                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030b0   0e30     MOVLW     0x30                                                                                            
0030b2   6ee6     MOVWF     0xe6,0x0                                                                                        
0030b4   d89f     RCALL     0x31f4                                                                                          
0030b6   e102     BNZ       0x30bc                                                                                          
0030b8   1c2b     COMF      0x2b,0x0,0x0                                                                                    
0030ba   e074     BZ        0x31a4                                                                                          
                                                                 return EOF;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030bc   d977     RCALL     0x33ac                             if (putc (c, handle) == EOF)                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030be   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
0030c0   ffe6                                                                                                               
0030c2   ec57     CALL      0x44ae,0x0                                                                                      
0030c4   f022                                                                                                               
0030c6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0030c8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0030ca   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0030cc   cff4     MOVFF     0xff4,0x2b                                                                                      
0030ce   f02b                                                                                                               
0030d0   0100     MOVLB     0x0                                                                                             
0030d2   1cf3     COMF      0xf3,0x0,0x0                                                                                    
0030d4   e102     BNZ       0x30da                                                                                          
0030d6   1c2b     COMF      0x2b,0x0,0x0                                                                                    
0030d8   e065     BZ        0x31a4                                                                                          
                                                                 return EOF;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if we have leading zeros, they follow. the prefix, if any     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              is included in the number of digits when determining how      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              many leading zeroes are needed. */                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030da   0e05     MOVLW     0x5                            if (precision > prefix_cnt)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030dc   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0030de   f02a                                                                                                               
0030e0   0e16     MOVLW     0x16                                                                                            
0030e2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0030e4   80d8     BSF       0xd8,0x0,0x0                                                                                    
0030e6   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
0030e8   e209     BC        0x30fc                                                                                          
0030ea   0e05     MOVLW     0x5                              precision -= prefix_cnt;                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030ec   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
0030ee   ffe7                                                                                                               
0030f0   0e16     MOVLW     0x16                                                                                            
0030f2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0030f4   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
0030f6   0e05     MOVLW     0x5                                                                                             
0030f8   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0030fa   ffdb                                                                                                               
0030fc   0e30     MOVLW     0x30                           if (s_put_n_chars (handle, precision, '0'))                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030fe   6ee6     MOVWF     0xe6,0x0                                                                                        
003100   0e05     MOVLW     0x5                                                                                             
003102   d9cb     RCALL     0x349a                                                                                          
003104   e14f     BNZ       0x31a4                                                                                          
00344c   ec4c     CALL      0x2898,0x0                                                                                      
00344e   f014                                                                                                               
003450   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003452   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003454   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003456   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003458   0900     IORLW     0x0                                                                                             
00345a   0012     RETURN    0x0                                                                                             
00349a   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00349c   ffe6                                                                                                               
00349e   df86     RCALL     0x33ac                                                                                          
0034a0   ef26     GOTO      0x344c                                                                                          
0034a2   f01a                                                                                                               
                                                             return EOF;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* print the actual number */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003106   0e39     MOVLW     0x39                           for (cval = *++q; cval; cval = *++q)                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003108   2adb     INCF      0xdb,0x1,0x0                                                                                    
00310a   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00310c   ffe9                                                                                                               
00310e   0e3a     MOVLW     0x3a                                                                                            
003110   e301     BNC       0x3114                                                                                          
003112   2adb     INCF      0xdb,0x1,0x0                                                                                    
003114   cfdb     MOVFF     0xfdb,0xfea                                                                                     
003116   ffea                                                                                                               
003118   0e09     MOVLW     0x9                                                                                             
00311a   cfef     MOVFF     0xfef,0xfdb                                                                                     
00311c   ffdb                                                                                                               
00311e   50db     MOVF      0xdb,0x0,0x0                                                                                    
003120   e00e     BZ        0x313e                                                                                          
00312e   0e39     MOVLW     0x39                                                                                            
003130   2adb     INCF      0xdb,0x1,0x0                                                                                    
003132   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
003134   ffe9                                                                                                               
003136   0e3a     MOVLW     0x3a                                                                                            
003138   e3ed     BNC       0x3114                                                                                          
00313a   2adb     INCF      0xdb,0x1,0x0                                                                                    
00313c   d7eb     BRA       0x3114                                                                                          
003122   d944     RCALL     0x33ac                           if (putc (cval, handle) == EOF)                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003124   0e09     MOVLW     0x9                                                                                             
003126   d9ad     RCALL     0x3482                                                                                          
003128   e102     BNZ       0x312e                                                                                          
00312a   1c2b     COMF      0x2b,0x0,0x0                                                                                    
00312c   e03b     BZ        0x31a4                                                                                          
003482   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003484   ffe6                                                                                                               
003486   effa     GOTO      0x31f4                                                                                          
003488   f018                                                                                                               
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if there are any spaces left, they go to right-pad            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              the field */                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00313e   d855     RCALL     0x31ea                         if (s_put_n_chars (handle, space_cnt, ' '))                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003140   e131     BNZ       0x31a4                                                                                          
0031ea   0e20     MOVLW     0x20                                                                                            
0031ec   6ee6     MOVWF     0xe6,0x0                                                                                        
0031ee   0e08     MOVLW     0x8                                                                                             
0031f0   ef4d     GOTO      0x349a                                                                                          
0031f2   f01a                                                                                                               
0033ac   0efc     MOVLW     0xfc                                                                                            
0033ae   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0033b0   ffe6                                                                                                               
0033b2   0efd     MOVLW     0xfd                                                                                            
0033b4   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0033b6   ffe6                                                                                                               
0033b8   0012     RETURN    0x0                                                                                             
                                                             return EOF;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003142   0e16     MOVLW     0x16                           count += precision + digit_cnt + space_cnt + prefix_cnt;         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003144   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003146   ffe6                                                                                                               
003148   0e08     MOVLW     0x8                                                                                             
00314a   d8c3     RCALL     0x32d2                                                                                          
00314c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00314e   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
003150   d85d     RCALL     0x320c                                                                                          
00320c   6e2a     MOVWF     0x2a,0x0                                                                                        
00320e   6a2b     CLRF      0x2b,0x0                                                                                        
003210   50d9     MOVF      0xd9,0x0,0x0                                                                                    
003212   0f01     ADDLW     0x1                                                                                             
003214   d94d     RCALL     0x34b0                                                                                          
003216   502a     MOVF      0x2a,0x0,0x0                                                                                    
003218   26ee     ADDWF     0xee,0x1,0x0                                                                                    
00321a   502b     MOVF      0x2b,0x0,0x0                                                                                    
00321c   22ed     ADDWFC    0xed,0x1,0x0                                                                                    
00321e   0012     RETURN    0x0                                                                                             
                                                         }                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003152   d02e     BRA       0x31b0                       break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'n':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003154   0e07     MOVLW     0x7                          switch (size)                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003156   50db     MOVF      0xdb,0x0,0x0                                                                                    
003158   0a03     XORLW     0x3                                                                                             
00315a   e01c     BZ        0x3194                                                                                          
00315c   0a01     XORLW     0x1                                                                                             
00315e   e014     BZ        0x3188                                                                                          
003160   0a03     XORLW     0x3                                                                                             
003162   e007     BZ        0x3172                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case _FMT_LONG:                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003172   d8f5     RCALL     0x335e                           *(long *) va_arg (ap, long *) = count;                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003174   6a2f     CLRF      0x2f,0x0                                                                                        
003176   ae2d     BTFSS     0x2d,0x7,0x0                                                                                    
003178   d002     BRA       0x317e                                                                                          
00317a   682e     SETF      0x2e,0x0                                                                                        
00317c   682f     SETF      0x2f,0x0                                                                                        
00317e   d82c     RCALL     0x31d8                                                                                          
003180   d8bc     RCALL     0x32fa                                                                                          
003182   c02f     MOVFF     0x2f,0xfee                                                                                      
003184   ffee                                                                                                               
0032fa   50ee     MOVF      0xee,0x0,0x0                                                                                    
0032fc   cfef     MOVFF     0xfef,0xfea                                                                                     
0032fe   ffea                                                                                                               
003300   6ee9     MOVWF     0xe9,0x0                                                                                        
003302   c02c     MOVFF     0x2c,0xfee                                                                                      
003304   ffee                                                                                                               
003306   c02d     MOVFF     0x2d,0xfee                                                                                      
003308   ffee                                                                                                               
00330a   c02e     MOVFF     0x2e,0xfee                                                                                      
00330c   ffee                                                                                                               
00330e   0012     RETURN    0x0                                                                                             
00335e   0e01     MOVLW     0x1                                                                                             
003360   cfdb     MOVFF     0xfdb,0x2c                                                                                      
003362   f02c                                                                                                               
003364   0e02     MOVLW     0x2                                                                                             
003366   cfdb     MOVFF     0xfdb,0x2d                                                                                      
003368   f02d                                                                                                               
00336a   6a2e     CLRF      0x2e,0x0                                                                                        
00336c   0012     RETURN    0x0                                                                                             
003186   d014     BRA       0x31b0                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case _FMT_SHLONG:                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003188   d8ea     RCALL     0x335e                           *(short long *) va_arg (ap, short long *) = count;             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00318a   be2d     BTFSC     0x2d,0x7,0x0                                                                                    
00318c   682e     SETF      0x2e,0x0                                                                                        
00318e   d824     RCALL     0x31d8                                                                                          
003190   d8b4     RCALL     0x32fa                                                                                          
003192   d00e     BRA       0x31b0                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case _FMT_BYTE:                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003194   d963     RCALL     0x345c                           *(signed char *) va_arg (ap, signed char *) = count;           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003196   cfdb     MOVFF     0xfdb,0xfef                                                                                     
003198   ffef                                                                                                               
00319a   d00a     BRA       0x31b0                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           default:                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003164   d97b     RCALL     0x345c                           *(int *) va_arg (ap, int *) = count;                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003166   cfdb     MOVFF     0xfdb,0xfee                                                                                     
003168   ffee                                                                                                               
00316a   0e02     MOVLW     0x2                                                                                             
00316c   cfdb     MOVFF     0xfdb,0xfed                                                                                     
00316e   ffed                                                                                                               
00345c   debd     RCALL     0x31d8                                                                                          
00345e   50ee     MOVF      0xee,0x0,0x0                                                                                    
003460   cfef     MOVFF     0xfef,0xfea                                                                                     
003462   ffea                                                                                                               
003464   6ee9     MOVWF     0xe9,0x0                                                                                        
003466   0e01     MOVLW     0x1                                                                                             
003468   0012     RETURN    0x0                                                                                             
                                                             break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003170   d01f     BRA       0x31b0                       break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       default:                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* undefined behaviour. we do nothing */                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                   }                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                 else                                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                   {                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00319c   d97b     RCALL     0x3494                   if (putc (c, handle) == EOF)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00319e   e105     BNZ       0x31aa                                                                                          
0031a0   1c2b     COMF      0x2b,0x0,0x0                                                                                    
0031a2   e103     BNZ       0x31aa                                                                                          
0031f4   ec57     CALL      0x44ae,0x0                                                                                      
0031f6   f022                                                                                                               
0031f8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0031fa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0031fc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0031fe   cff3     MOVFF     0xff3,0x2a                                                                                      
003200   f02a                                                                                                               
003202   cff4     MOVFF     0xff4,0x2b                                                                                      
003204   f02b                                                                                                               
003206   0100     MOVLB     0x0                                                                                             
003208   1cf3     COMF      0xf3,0x0,0x0                                                                                    
00320a   0012     RETURN    0x0                                                                                             
00343a   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
00343c   ffe6                                                                                                               
00343e   effa     GOTO      0x31f4                                                                                          
003440   f018                                                                                                               
003494   df8b     RCALL     0x33ac                                                                                          
003496   ef1d     GOTO      0x343a                                                                                          
003498   f01a                                                                                                               
0031a4   68f3     SETF      0xf3,0x0                   return EOF;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031a6   68f4     SETF      0xf4,0x0                                                                                        
0031a8   d010     BRA       0x31ca                                                                                          
0031aa   d8fc     RCALL     0x33a4                   ++count;                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031ac   e301     BNC       0x31b0                                                                                          
0031ae   2adb     INCF      0xdb,0x1,0x0                                                                                    
0033a4   0e01     MOVLW     0x1                                                                                             
0033a6   2adb     INCF      0xdb,0x1,0x0                                                                                    
0033a8   0e02     MOVLW     0x2                                                                                             
0033aa   0012     RETURN    0x0                                                                                             
                                                   }                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                               }                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031b6   0e01     MOVLW     0x1              return count;                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031b8   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0031ba   f02a                                                                                                               
0031bc   0e02     MOVLW     0x2                                                                                             
0031be   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0031c0   f02b                                                                                                               
0031c2   c02a     MOVFF     0x2a,0xff3                                                                                      
0031c4   fff3                                                                                                               
0031c6   c02b     MOVFF     0x2b,0xff4                                                                                      
0031c8   fff4                                                                                                               
0031ca   0e3b     MOVLW     0x3b           }                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031cc   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0031ce   e202     BC        0x31d4                                                                                          
0031d0   6ae1     CLRF      0xe1,0x0                                                                                        
0031d2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0031d4   6ee1     MOVWF     0xe1,0x0                                                                                        
0031d6   d0cb     BRA       0x336e                                                                                          
                                           /*** Unsigned Integer Division: 32-bit by 32-bit                                 C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***                                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            *** Optimized: Dec. 21, 2000                                                    C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***        by: Daniel R. Madill, Quanser Consulting Inc.                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***       for: Saved (for the worst case) at least 8*32 = 256 instruction cycles C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***            over the code supplied with MCC18 v1.00.12                       C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***/                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           void  FXD3232U(void/* ulong aarg, ulong barg */)                                 C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           {                                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                             // use INDF1 for the counter...                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               _asm                                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               // REM = 0                                                                   C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004654   6a1b     CLRF      0x1b,0x0           clrf __REMB0, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004656   6a1a     CLRF      0x1a,0x0           clrf __REMB1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004658   6a19     CLRF      0x19,0x0           clrf __REMB2, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00465a   6a18     CLRF      0x18,0x0           clrf __REMB3, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               // INDF1 = 32                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00465c   0e20     MOVLW     0x20               movlw 32                                                                     C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00465e   6ee7     MOVWF     0xe7,0x0           movwf INDF1, 0                                                               C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               // Clear the carry                                                           C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004660   90d8     BCF       0xd8,0x0,0x0       bcf STATUS, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           loop:                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	//AARG32 <<= 1; The carry is always clear at the top of the loop.               C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004662   361c     RLCF      0x1c,0x1,0x0   	rlcf __AARGB3, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004664   361d     RLCF      0x1d,0x1,0x0   	rlcf __AARGB2, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004666   361e     RLCF      0x1e,0x1,0x0   	rlcf __AARGB1, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004668   361f     RLCF      0x1f,0x1,0x0   	rlcf __AARGB0, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	//REM32 = (REM32 << 1) | (AARG32 >> 32)                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00466a   3618     RLCF      0x18,0x1,0x0   	rlcf __REMB3, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00466c   3619     RLCF      0x19,0x1,0x0   	rlcf __REMB2, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00466e   361a     RLCF      0x1a,0x1,0x0   	rlcf __REMB1, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004670   361b     RLCF      0x1b,0x1,0x0   	rlcf __REMB0, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	                                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	//if (PROD >= BARG32)                                                           C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004672   5021     MOVF      0x21,0x0,0x0   	movf __BARGB3, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004674   5c18     SUBWF     0x18,0x0,0x0   	subwf __REMB3, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004676   5022     MOVF      0x22,0x0,0x0   	movf __BARGB2, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004678   5819     SUBWFB    0x19,0x0,0x0   	subwfb __REMB2, 0, 0                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00467a   5023     MOVF      0x23,0x0,0x0   	movf __BARGB1, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00467c   581a     SUBWFB    0x1a,0x0,0x0   	subwfb __REMB1, 0, 0                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00467e   5024     MOVF      0x24,0x0,0x0   	movf __BARGB0, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004680   581b     SUBWFB    0x1b,0x0,0x0   	subwfb __REMB0, 0, 0                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004682   e309     BNC       0x4696         	bnc _false                                                                      C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               //{                                                                          C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	    //REM32-= BARG32;                                                           C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004684   5021     MOVF      0x21,0x0,0x0   	    movf __BARGB3, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004686   5e18     SUBWF     0x18,0x1,0x0   	    subwf __REMB3, 1, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004688   5022     MOVF      0x22,0x0,0x0   	    movf __BARGB2, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00468a   5a19     SUBWFB    0x19,0x1,0x0   	    subwfb __REMB2, 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00468c   5023     MOVF      0x23,0x0,0x0   	    movf __BARGB1, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00468e   5a1a     SUBWFB    0x1a,0x1,0x0   	    subwfb __REMB1, 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004690   5024     MOVF      0x24,0x0,0x0   	    movf __BARGB0, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004692   5a1b     SUBWFB    0x1b,0x1,0x0   	    subwfb __REMB0, 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	    //++AARG32; Since AARG32 was shift to the left above, we only need to set   C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                   //          the lowest bit. Use incf so that the carry flag will also be cleared. C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                   //          Thus, the carry will always be clear at the top of the loop. C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004694   2a1c     INCF      0x1c,0x1,0x0   	    incf __AARGB3, 1, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               //}                                                                          C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           _false:                                                                          C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004696   2ee7     DECFSZ    0xe7,0x1,0x0       decfsz INDF1, 1, 0    // does not affect the carry bit                       C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004698   d7e4     BRA       0x4662             bra loop                                                                     C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                             /* result in AARG already... */                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                             _endasm                                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00469a   0012     RETURN    0x0            }                                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           ;	RCS Header $Id: fxm1616s.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <P18CXXX.INC>		; general Golden Gate definitions                        C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <CMATH18.INC>		; Math library definitions                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: cmath18.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                               LIST                                                                         C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ; CMATH18.INC  v1.0  Microchip Technology, Inc. / F.J. Testa                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <AARG.INC>		; AARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: aarg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN	__AARGB0, __AARGB1, __AARGB2, __AARGB3                                   C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                   EXTERN  __AARGB4, __AARGB5, __AARGB6, __AARGB7                           C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __AEXP                                                                  C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __REMB3, __REMB2, __REMB1, __REMB0                                      C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <BARG.INC>		; BARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: barg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BARGB3, __BARGB2, __BARGB1, __BARGB0                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BEXP                                                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <TEMPARG.INC>		; TEMPARG declarations                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: temparg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                   EXTERN  __TEMPB3, __TEMPB2, __TEMPB1, __TEMPB0, __TEMP                   C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       16x16 Bit Signed Fixed Point Multiply 16 x 16 -> 32                      C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Input:  16 bit signed fixed point multiplicand in AARGB0, AARGB1         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;               16 bit signed fixed point multiplier in BARGB0, BARGB1           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Use:    CALL    FXM1616S                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Output: 32 bit signed fixed point product in AARGB0, AARGB1,             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;               AARGB2, AARGB3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Result: AARG  <--  AARG * BARG                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Max Timing:     39 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Min Timing:     31 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       PM: 38              DM: 8                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           PROG	CODE                                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           FXM1616S                                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           		GLOBAL	FXM1616S                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004250   c01f     MOVFF     0x1f,0x29      		MOVFF	__AARGB0,__TEMPB0                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004252   f029                                                                                                               
004254   c01e     MOVFF     0x1e,0x28      		MOVFF	__AARGB1,__TEMPB1	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004256   f028                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004258   501e     MOVF      0x1e,0x0,0x0   		MOVF	__AARGB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00425a   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00425c   cff4     MOVFF     0xff4,0x1d     		MOVFF	PRODH,__AARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00425e   f01d                                                                                                               
004260   cff3     MOVFF     0xff3,0x1c     		MOVFF	PRODL,__AARGB3                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004262   f01c                                                                                                               
                                           		                                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004264   501f     MOVF      0x1f,0x0,0x0   		MOVF	__AARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004266   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004268   cff4     MOVFF     0xff4,0x1f     		MOVFF	PRODH,__AARGB0                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00426a   f01f                                                                                                               
00426c   cff3     MOVFF     0xff3,0x1e     		MOVFF	PRODL,__AARGB1                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00426e   f01e                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004270   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004272   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004274   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004276   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004278   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00427a   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00427c   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00427e   5028     MOVF      0x28,0x0,0x0   		MOVF	__TEMPB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004280   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004282   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004284   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004286   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004288   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00428a   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00428c   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00428e   ae24     BTFSS     0x24,0x7,0x0   		BTFSS	__BARGB0,MSB                                                             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004290   ef4e     GOTO      0x429c         		GOTO	TSIGN1616A                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004292   f021                                                                                                               
004294   5028     MOVF      0x28,0x0,0x0   		MOVF	__TEMPB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004296   5e1e     SUBWF     0x1e,0x1,0x0   		SUBWF	__AARGB1,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004298   5029     MOVF      0x29,0x0,0x0   		MOVF	__TEMPB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00429a   5a1f     SUBWFB    0x1f,0x1,0x0   		SUBWFB	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           TSIGN1616A                                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00429c   ae29     BTFSS     0x29,0x7,0x0   		BTFSS	__TEMPB0,MSB                                                             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00429e   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0042a0   5023     MOVF      0x23,0x0,0x0   		MOVF	__BARGB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0042a2   5e1e     SUBWF     0x1e,0x1,0x0   		SUBWF	__AARGB1,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0042a4   5024     MOVF      0x24,0x0,0x0   		MOVF	__BARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0042a6   5a1f     SUBWFB    0x1f,0x1,0x0   		SUBWFB	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           		                                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0042a8   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           		END                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           /* a signed multiply is only different from an unsigned multiply                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                            * if the upper bytes of the result matter, which for us they                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                            * don't.                                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                            */                                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           #define PRODH	(PRODL + 1)                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           extern near unsigned char __AARGB3, __BARGB3;                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           extern near unsigned char __AARGB7;                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           void FXM3232 (void)                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           {                                                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                             _asm                                                                           C:\MCC18\src\TRADIT~1\math\fxm3232.c
004532   501c     MOVF      0x1c,0x0,0x0       movf __AARGB3, 0, 0                                                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
004534   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // low byte of both operands, so result adds into the low order              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // result bytes                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
004536   cff3     MOVFF     0xff3,0x18         movff PRODL, __AARGB7                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
004538   f018                                                                                                               
00453a   cff4     MOVFF     0xff4,0x19         movff PRODH, __AARGB7 + 1                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
00453c   f019                                                                                                               
                                               // W still contains AARGB3                                                   C:\MCC18\src\TRADIT~1\math\fxm3232.c
00453e   0222     MULWF     0x22,0x0           mulwf __BARGB3 + 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // BARGB3[1], so result adds into AARGB7[1,2]                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
004540   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004542   2619     ADDWF     0x19,0x1,0x0       addwf __AARGB7 + 1, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
004544   0e00     MOVLW     0x0                movlw 0                                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004546   20f4     ADDWFC    0xf4,0x0,0x0       addwfc PRODH, 0, 0                                                           C:\MCC18\src\TRADIT~1\math\fxm3232.c
004548   6e1a     MOVWF     0x1a,0x0           movwf __AARGB7 + 2, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3 to continue                                                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
00454a   501c     MOVF      0x1c,0x0,0x0       movf __AARGB3, 0, 0                                                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
00454c   0223     MULWF     0x23,0x0           mulwf __BARGB3 + 2, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // BARGB3[2], so result adds into AARGB7[2,3]                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
00454e   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004550   261a     ADDWF     0x1a,0x1,0x0       addwf __AARGB7 + 2, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
004552   0e00     MOVLW     0x0                movlw 0                                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004554   20f4     ADDWFC    0xf4,0x0,0x0       addwfc PRODH, 0, 0                                                           C:\MCC18\src\TRADIT~1\math\fxm3232.c
004556   6e1b     MOVWF     0x1b,0x0           movwf __AARGB7 + 3, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3 to continue                                                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
004558   501c     MOVF      0x1c,0x0,0x0       movf __AARGB3, 0, 0                                                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
00455a   0224     MULWF     0x24,0x0           mulwf __BARGB3 + 3, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // BARGB3[3], so result adds into AARGB7[3].                                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\MCC18\src\TRADIT~1\math\fxm3232.c
00455c   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
00455e   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // that's the end of all terms involving AARGB3[0].                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // load AARGB3[1] to continue                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
004560   501d     MOVF      0x1d,0x0,0x0       movf __AARGB3 + 1, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004562   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[1], so result adds into AARGB7[1,2]                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
004564   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004566   2619     ADDWF     0x19,0x1,0x0       addwf __AARGB7 + 1, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
004568   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
00456a   221a     ADDWFC    0x1a,0x1,0x0       addwfc __AARGB7 + 2, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
00456c   0e00     MOVLW     0x0                movlw 0                                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
00456e   221b     ADDWFC    0x1b,0x1,0x0       addwfc __AARGB7 + 3, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3[1] to continue                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
004570   501d     MOVF      0x1d,0x0,0x0       movf __AARGB3 + 1, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004572   0222     MULWF     0x22,0x0           mulwf __BARGB3 + 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[1] and BARGB3[1], so result adds into AARGB7[2,3]                  C:\MCC18\src\TRADIT~1\math\fxm3232.c
004574   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004576   261a     ADDWF     0x1a,0x1,0x0       addwf __AARGB7 + 2, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
004578   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
00457a   221b     ADDWFC    0x1b,0x1,0x0       addwfc __AARGB7 + 3, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3[1] to continue                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
00457c   501d     MOVF      0x1d,0x0,0x0       movf __AARGB3 + 1, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
00457e   0223     MULWF     0x23,0x0           mulwf __BARGB3 + 2, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[1] and BARGB3[2], so result adds into AARGB7[3]                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004580   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004582   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // all bytes of the term from the product of AARGB3[1] and BARGB3[3] are     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // above our 32-bit result, don't even need to bother calculating            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // that term.                                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // load AARGB3[2] to continue                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
004584   501e     MOVF      0x1e,0x0,0x0       movf __AARGB3 + 2, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004586   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[2] and BARGB3[0], so result adds into AARGB7[2,3]                  C:\MCC18\src\TRADIT~1\math\fxm3232.c
004588   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
00458a   261a     ADDWF     0x1a,0x1,0x0       addwf __AARGB7 + 2, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
00458c   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
00458e   221b     ADDWFC    0x1b,0x1,0x0       addwfc __AARGB7 + 3, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3[2] to continue                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
004590   501e     MOVF      0x1e,0x0,0x0       movf __AARGB3 + 2, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004592   0222     MULWF     0x22,0x0           mulwf __BARGB3 + 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[2] and BARGB3[1], so result adds into AARGB7[3]                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004594   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004596   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // all bytes of the termsfrom the products of AARGB3[2] and BARGB3[2,3] are  C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // above our 32-bit result, don't even need to bother calculating            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // those terms.                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // load AARGB3[3] to continue                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
004598   501f     MOVF      0x1f,0x0,0x0       movf __AARGB3 + 3, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
00459a   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[3] and BARGB3[0], so result adds into AARGB7[3]                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
00459c   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
00459e   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               _endasm;                                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
0045a0   0012     RETURN    0x0            }                                                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; @name isdigit                                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;The {\bf isdigit} function tests the value of {\bf c} to determine if it        C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;is a digit character. A digit character is defined as any decimal digit         C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;character (0, 1, 2, 3, 4, 5, 6, 7, 8, 9).                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; int isdigit (int c);                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           CTYPE CODE                                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           isdigit                                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             global isdigit                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; Proceedure: Use FSR0 as pointer to 'c'                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;         Return with result in PROD                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             ; Clear out result                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004630   6af3     CLRF      0xf3,0x0                 clrf      PRODL, ACCESS                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004632   6af4     CLRF      0xf4,0x0       	  clrf      PRODH, ACCESS                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             ; Set FSR0 = FSR1 - 2 ( location of 'c')                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004634   0eff     MOVLW     0xff                     StkSetPtrToOffset FSR0L,-1                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004636   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
004638   6ee9     MOVWF     0xe9,0x0                                                                                        
00463a   0eff     MOVLW     0xff                                                                                            
00463c   20e2     ADDWFC    0xe2,0x0,0x0                                                                                    
00463e   6eea     MOVWF     0xea,0x0                                                                                        
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004640   66ed     TSTFSZ    0xed,0x0                 tstfsz    POSTDEC0,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004642   d007     BRA       0x4652                   bra       jNoMatch            ; upper byte must be 0 to match          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             ; Test for condition                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004644   0e2f     MOVLW     0x2f                     jmpFleL   INDF0,ACCESS,'0'-1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004646   64ef     CPFSGT    0xef,0x0                                                                                        
004648   d004     BRA       0x4652                                                                                          
00464a   0e3a     MOVLW     0x3a                     jmpFgeL   INDF0,ACCESS,'9'+1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
00464c   60ef     CPFSLT    0xef,0x0                                                                                        
00464e   d001     BRA       0x4652                                                                                          
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           jMatch:                                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004650   2af3     INCF      0xf3,0x1,0x0             incf      PRODL,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           jNoMatch:                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
004652   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                           int _user_putc (char c);                                                         C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                           int _usart_putc (char c);                                                        C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                           int                                                                              C:\MCC18\src\TRADIT~1\stdclib\putc.c
0044ae   cfd9     MOVFF     0xfd9,0xfe6    putc (char c, FILE * f)                                                          C:\MCC18\src\TRADIT~1\stdclib\putc.c
0044b0   ffe6                                                                                                               
0044b2   cfda     MOVFF     0xfda,0xfe6                                                                                     
0044b4   ffe6                                                                                                               
0044b6   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0044b8   ffd9                                                                                                               
0044ba   cfe2     MOVFF     0xfe2,0xfda                                                                                     
0044bc   ffda                                                                                                               
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                             /* if the handle > 0 then it's a pointer to a string buffer address.           C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                specifically, a pointer to a pointer referencing the next available         C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                byte in the buffer, to which the character will be stored. */               C:\MCC18\src\TRADIT~1\stdclib\putc.c
0044be   0efb     MOVLW     0xfb             if ((int) f >= 0)                                                              C:\MCC18\src\TRADIT~1\stdclib\putc.c
0044c0   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0044c2   f02a                                                                                                               
0044c4   0efc     MOVLW     0xfc                                                                                            
0044c6   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0044c8   f02b                                                                                                               
0044ca   0100     MOVLB     0x0                                                                                             
0044cc   0e80     MOVLW     0x80                                                                                            
0044ce   142b     ANDWF     0x2b,0x0,0x0                                                                                    
0044d0   e11a     BNZ       0x4506                                                                                          
0044d2   0efb     MOVLW     0xfb               return (unsigned char) (*(*(char **) f)++ = c);                              C:\MCC18\src\TRADIT~1\stdclib\putc.c
0044d4   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0044d6   ffe9                                                                                                               
0044d8   0efc     MOVLW     0xfc                                                                                            
0044da   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0044dc   ffea                                                                                                               
0044de   cfee     MOVFF     0xfee,0xff3                                                                                     
0044e0   fff3                                                                                                               
0044e2   cfed     MOVFF     0xfed,0xff4                                                                                     
0044e4   fff4                                                                                                               
0044e6   2aee     INCF      0xee,0x1,0x0                                                                                    
0044e8   0e00     MOVLW     0x0                                                                                             
0044ea   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
0044ec   cff3     MOVFF     0xff3,0xfe9                                                                                     
0044ee   ffe9                                                                                                               
0044f0   cff4     MOVFF     0xff4,0xfea                                                                                     
0044f2   ffea                                                                                                               
0044f4   0efd     MOVLW     0xfd                                                                                            
0044f6   cfdb     MOVFF     0xfdb,0xfef                                                                                     
0044f8   ffef                                                                                                               
0044fa   50ef     MOVF      0xef,0x0,0x0                                                                                    
0044fc   6a2b     CLRF      0x2b,0x0                                                                                        
0044fe   6ef3     MOVWF     0xf3,0x0                                                                                        
004500   c02b     MOVFF     0x2b,0xff4                                                                                      
004502   fff4                                                                                                               
004504   d010     BRA       0x4526                                                                                          
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
004506   0efb     MOVLW     0xfb             if ((signed char) f == (signed char) _H_USART)                                 C:\MCC18\src\TRADIT~1\stdclib\putc.c
004508   50db     MOVF      0xdb,0x0,0x0                                                                                    
00450a   08fe     SUBLW     0xfe                                                                                            
00450c   e106     BNZ       0x451a                                                                                          
                                               {                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                 /* the invocation of the USART function is direct, as it's our             C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    default value and we want it to work without needing any                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    direct initialization from the user */                                  C:\MCC18\src\TRADIT~1\stdclib\putc.c
00450e   0efd     MOVLW     0xfd                 return _usart_putc (c);                                                    C:\MCC18\src\TRADIT~1\stdclib\putc.c
004510   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
004512   ffe6                                                                                                               
004514   ec89     CALL      0x4712,0x0                                                                                      
004516   f023                                                                                                               
004518   d005     BRA       0x4524                                                                                          
                                               }                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                             else                                                                           C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                               {                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                 /* the invocation of the user function is direct, not via a                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    function pointer. We just put an empty definition of the                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    function in the library and if the user specifies their own             C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    version it will be found first and the library definition will          C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    be ignored. We do it this way because it's generally better to          C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    spend 2 bytes of program memory for the RETURN instruction of           C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    the empty function than three bytes of data memory for the              C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    function pointer. */                                                    C:\MCC18\src\TRADIT~1\stdclib\putc.c
00451a   0efd     MOVLW     0xfd                 return _user_putc (c);                                                     C:\MCC18\src\TRADIT~1\stdclib\putc.c
00451c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00451e   ffe6                                                                                                               
004520   ecb4     CALL      0xf68,0x0                                                                                       
004522   f007                                                                                                               
004524   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                               }                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
004526   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\MCC18\src\TRADIT~1\stdclib\putc.c
004528   cfe5     MOVFF     0xfe5,0xfda                                                                                     
00452a   ffda                                                                                                               
00452c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00452e   ffd9                                                                                                               
004530   0012     RETURN    0x0                                                                                             
                                             include <P18CXXX.INC>                                                          C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\p18F2455.INC
                                                                                                                            C:\MCC18\MPASM\p18F2455.INC
                                           ;==========================================================================      C:\MCC18\MPASM\p18F2455.INC
                                           ;  MPASM PIC18F2455 processor include                                            C:\MCC18\MPASM\p18F2455.INC
                                           ;                                                                                C:\MCC18\MPASM\p18F2455.INC
                                           ;  (c) Copyright 1999-2007 Microchip Technology, All rights reserved             C:\MCC18\MPASM\p18F2455.INC
                                           ;==========================================================================      C:\MCC18\MPASM\p18F2455.INC
                                                                                                                            C:\MCC18\MPASM\p18F2455.INC
                                                   LIST                                                                     C:\MCC18\MPASM\p18F2455.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1220                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1230                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1231                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1320                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1330                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1331                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                             GLOBAL _usart_putc                                                             C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           STDIO CODE                                                                       C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           _usart_putc                                                                      C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004712   0eff     MOVLW     0xff                         MOVLW     0xff                                                     C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004714   50e3     MOVF      0xe3,0x0,0x0                 MOVF      PLUSW1, w                                                C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004716   baac     BTFSC     0xac,0x5,0x0                 BTFSC     TXSTA, 0x5                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004718   d004     BRA       0x4722                       BRA       loop                                                     C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
00471a   6aaf     CLRF      0xaf,0x0                     CLRF      SPBRG                                                    C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
00471c   8eab     BSF       0xab,0x7,0x0                 BSF       RCSTA, 0x7                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
00471e   8aac     BSF       0xac,0x5,0x0                 BSF       TXSTA, 0x5                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __USE_PORTB                                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                         BCF       TRISB, 0x1                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #else                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004720   9c94     BCF       0x94,0x6,0x0                 BCF       TRISC, 0x6                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004722   a2ac     BTFSS     0xac,0x1,0x0   loop:         BTFSS     TXSTA, 0x1                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004724   d7fe     BRA       0x4722                       BRA       loop                                                     C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004726   6ead     MOVWF     0xad,0x0                     MOVWF     TXREG                                                    C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
004728   6ef3     MOVWF     0xf3,0x0                     MOVWF     PRODL                                                    C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
00472a   6af4     CLRF      0xf4,0x0                     CLRF      PRODL + 1                                                C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
00472c   0012     RETURN    0x0                          RETURN                                                             C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                               END                                                                          C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           ; $Id: strlen.asm,v 1.1 2003/12/09 22:53:20 GrosbaJ Exp $                        C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; @name strlen                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;``The {\bf strlen} function computes the length of the string pointed           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;to by {\bf s}.''                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;Stack usage: 2 bytes. Re-entrant.                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;@param s pointer to the string                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;@return ``The {\bf strlen} function returns the number of characters            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;that precede the terminating null character.''                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; size_t strlen (const char *s);                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           STRING CODE                                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           strlen                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             global strlen                                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; Proceedure: Use FSR0 for 's' and use PROD for 'n'.                             C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Load FSR0 by copying 's' off stack into FSR0.                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
0045a2   0efe     MOVLW     0xfe                     Stk2CpyToReg -2,FSR0L                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
0045a4   cfe3     MOVFF     0xfe3,0xfe9                                                                                     
0045a6   ffe9                                                                                                               
0045a8   0eff     MOVLW     0xff                                                                                            
0045aa   cfe3     MOVFF     0xfe3,0xfea                                                                                     
0045ac   ffea                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Clear PROD                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
0045ae   6af3     CLRF      0xf3,0x0                 clrf      PRODL,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
0045b0   6af4     CLRF      0xf4,0x0                 clrf      PRODH,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Test for '\0'                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
0045b2   52ee     MOVF      0xee,0x1,0x0             movf      POSTINC0,F,ACCESS   ; set Z flag                             C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
0045b4   e003     BZ        0x45bc                   bz        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Count it                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
0045b6   4af3     INFSNZ    0xf3,0x1,0x0   	  infsnz    PRODL, F, ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
0045b8   2af4     INCF      0xf4,0x1,0x0   	  incf      PRODH, F, ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
0045ba   d7fb     BRA       0x45b2                   bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           jEnd                                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
0045bc   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; $Id: slenpgm.asm,v 1.4 2006/02/04 00:06:53 nairnj Exp $                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; @name strlenpgm                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;``The {\bf strlenpgm} function computes the length of the string pointed        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;to by {\bf s}.''                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;@param s pointer to the string                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;@return ``The {\bf strlenpgm} function returns the number of characters         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;that precede the terminating null character.''                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; sizerom_t strlenpgm (const rom char *s);                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             extern __AARGB2                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           STRING CODE                                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           strlenpgm                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             global strlenpgm                                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #ifdef __SMALL__                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                            messg "strlenpgm - SMALL"                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; Procedure: Use TBLPTR for 's' and create 'n' on stack.  Return 'n' in          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; __AARGB0:__AARGB1:__AARGB2.                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Load TBLPTR by POPing 's' off stack.                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk2PopToReg TBLPTRL                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTDEC1,ACCESS    ; provide extra byte below stack          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Push 3 bytes of 0 onto stack. This is initial value of 'n'.                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Test for '\0'                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     tblrd     *+                  ; read & increment                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     movf      TABLAT, F, ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     bz        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Count it                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk3Inc   -3                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jEnd                                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk3CpyToReg -3, __AARGB2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #else                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #ifdef __LARGE__                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                            messg "strlenpgm - LARGE"                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; Procedure: Use TBLPTR for 's' and create 'n' on stack.  Return 'n' in          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; __AARGB0:__AARGB1:__AARGB2.                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Load TBLPTR by POPing 's' off stack.                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0045be   0eff     MOVLW     0xff                     Stk3PopToReg TBLPTRL                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0045c0   cfe3     MOVFF     0xfe3,0xff8                                                                                     
0045c2   fff8                                                                                                               
0045c4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0045c6   0eff     MOVLW     0xff                                                                                            
0045c8   cfe3     MOVFF     0xfe3,0xff7                                                                                     
0045ca   fff7                                                                                                               
0045cc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0045ce   0eff     MOVLW     0xff                                                                                            
0045d0   cfe3     MOVFF     0xfe3,0xff6                                                                                     
0045d2   fff6                                                                                                               
0045d4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Push 3 bytes of 0 onto stack. This is initial value of 'n'.                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0045d6   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0045d8   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0045da   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Test for '\0'                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0045dc   0009     TBLRDPOSTINC                       tblrd     *+                  ; read & increment                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0045de   52f5     MOVF      0xf5,0x1,0x0             movf      TABLAT, F, ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0045e0   e009     BZ        0x45f4                   bz        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Count it                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0045e2   0efd     MOVLW     0xfd                     Stk3Inc   -3                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0045e4   2ae3     INCF      0xe3,0x1,0x0                                                                                    
0045e6   e105     BNZ       0x45f2                                                                                          
0045e8   0efe     MOVLW     0xfe                                                                                            
0045ea   2ae3     INCF      0xe3,0x1,0x0                                                                                    
0045ec   e102     BNZ       0x45f2                                                                                          
0045ee   0eff     MOVLW     0xff                                                                                            
0045f0   2ae3     INCF      0xe3,0x1,0x0                                                                                    
0045f2   d7f4     BRA       0x45dc                   bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jEnd                                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0045f4   0efd     MOVLW     0xfd                     Stk3CpyToReg -3, __AARGB2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
0045f6   cfe3     MOVFF     0xfe3,0x1d                                                                                      
0045f8   f01d                                                                                                               
0045fa   0efe     MOVLW     0xfe                                                                                            
0045fc   cfe3     MOVFF     0xfe3,0x1e                                                                                      
0045fe   f01e                                                                                                               
004600   0eff     MOVLW     0xff                                                                                            
004602   cfe3     MOVFF     0xfe3,0x1f                                                                                      
004604   f01f                                                                                                               
004606   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #else                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                            error "No Model Specified"                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
