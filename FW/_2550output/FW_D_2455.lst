MP2COD 4.12, COFF to COD File Converter
Copyright (c) 2007 Microchip Technology Inc.
Listing File Generated: Fri Sep 28 20:33:48 2007


Address  Value    Disassembly              Source                                                                           File
-------  -------  -----------------------  -------------------------------------------------------------------------------  -----
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            *                Microchip USB C18 Firmware Version 1.0                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\main.c
                                            * FileName:        main.c                                                       e:\iro_svn\opensprints\FW\main.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\main.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\main.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\main.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\main.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\main.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\main.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\main.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\main.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\main.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\main.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\main.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\main.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\main.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\main.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\main.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\main.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\main.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Author               Date        Comment                                      e:\iro_svn\opensprints\FW\main.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           e:\iro_svn\opensprints\FW\main.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    e:\iro_svn\opensprints\FW\main.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           /** I N C L U D E S **********************************************************/  e:\iro_svn\opensprints\FW\main.c
                                           #include <p18cxxx.h>                                                             e:\iro_svn\opensprints\FW\main.c
                                           #include "system\typedefs.h"                        // Required                  e:\iro_svn\opensprints\FW\main.c
                                           #include "system\usb\usb.h"                         // Required                  e:\iro_svn\opensprints\FW\main.c
                                           #include "io_cfg.h"                                 // Required                  e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           #include "system\usb\usb_compile_time_validation.h" // Optional                  e:\iro_svn\opensprints\FW\main.c
                                           #include "user\user.h"                              // Modifiable                e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           /** V A R I A B L E S ********************************************************/  e:\iro_svn\opensprints\FW\main.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  e:\iro_svn\opensprints\FW\main.c
                                           static void InitializeSystem(void);                                              e:\iro_svn\opensprints\FW\main.c
                                           void USBTasks(void);                                                             e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           #pragma code high_vector_section = 0x000808                                      e:\iro_svn\opensprints\FW\main.c
                                           void high_vector (void)                                                          e:\iro_svn\opensprints\FW\main.c
                                           {                                                                                e:\iro_svn\opensprints\FW\main.c
000808   efcc     GOTO      0xb98              _asm goto high_ISR _endasm                                                   e:\iro_svn\opensprints\FW\main.c
00080a   f005                                                                                                               
00080c   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\main.c
                                           #pragma code low_vector_section = 0x000818                                       e:\iro_svn\opensprints\FW\main.c
                                           void low_vector (void)                                                           e:\iro_svn\opensprints\FW\main.c
                                           {                                                                                e:\iro_svn\opensprints\FW\main.c
000818   ef22     GOTO      0x844              _asm goto low_ISR _endasm                                                    e:\iro_svn\opensprints\FW\main.c
00081a   f004                                                                                                               
00081c   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\main.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           /** D E C L A R A T I O N S **************************************************/  e:\iro_svn\opensprints\FW\main.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\main.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\main.c
                                            * Function:        void main(void)                                              e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Overview:        Main program entry point.                                    e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\main.c
                                           void main(void)                                                                  e:\iro_svn\opensprints\FW\main.c
                                           {                                                                                e:\iro_svn\opensprints\FW\main.c
004854   d805     RCALL     0x4860             InitializeSystem();                                                          e:\iro_svn\opensprints\FW\main.c
00485c   d7fc     BRA       0x4856         	while(1)                                                                        e:\iro_svn\opensprints\FW\main.c
                                               {                                                                            e:\iro_svn\opensprints\FW\main.c
004856   d811     RCALL     0x487a                 USBTasks();         // USB Tasks                                         e:\iro_svn\opensprints\FW\main.c
004858   eca0     CALL      0xd40,0x0              ProcessIO();        // See user.c and user.h                             e:\iro_svn\opensprints\FW\main.c
00485a   f006                                                                                                               
                                               }//end while                                                                 e:\iro_svn\opensprints\FW\main.c
00485e   0012     RETURN    0x0            }//end main                                                                      e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\main.c
                                            * Function:        static void InitializeSystem(void)                           e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Overview:        InitializeSystem is a centralize initialization routine.     e:\iro_svn\opensprints\FW\main.c
                                            *                  All required USB initialization routines are called from     e:\iro_svn\opensprints\FW\main.c
                                            *                  here.                                                        e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            *                  User application initialization routine should also be       e:\iro_svn\opensprints\FW\main.c
                                            *                  called from here.                                            e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\main.c
                                           static void InitializeSystem(void)                                               e:\iro_svn\opensprints\FW\main.c
                                           {                                                                                e:\iro_svn\opensprints\FW\main.c
004860   0e0f     MOVLW     0xf                ADCON1 |= 0x0F;                 // Default all pins to digital               e:\iro_svn\opensprints\FW\main.c
004862   12c1     IORWF     0xc1,0x1,0x0                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
004864   0e14     MOVLW     0x14               mInitializeUSBDriver();         // See usbdrv.h                              e:\iro_svn\opensprints\FW\main.c
004866   6e6f     MOVWF     0x6f,0x0                                                                                        
004868   0101     MOVLB     0x1                                                                                             
00486a   6bf7     CLRF      0xf7,0x1                                                                                        
00486c   0101     MOVLB     0x1                                                                                             
00486e   6bf8     CLRF      0xf8,0x1                                                                                        
004870   0101     MOVLB     0x1                                                                                             
004872   6bf9     CLRF      0xf9,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
004874   ecd5     CALL      0xbaa,0x0          UserInit();                     // See user.c & .h                           e:\iro_svn\opensprints\FW\main.c
004876   f005                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
004878   0012     RETURN    0x0            }//end InitializeSystem                                                          e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\main.c
                                            * Function:        void USBTasks(void)                                          e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * PreCondition:    InitializeSystem has been called.                            e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Overview:        Service loop for USB tasks.                                  e:\iro_svn\opensprints\FW\main.c
                                            *                                                                               e:\iro_svn\opensprints\FW\main.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\main.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\main.c
                                           void USBTasks(void)                                                              e:\iro_svn\opensprints\FW\main.c
                                           {                                                                                e:\iro_svn\opensprints\FW\main.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\main.c
                                                * Servicing Hardware                                                        e:\iro_svn\opensprints\FW\main.c
                                                */                                                                          e:\iro_svn\opensprints\FW\main.c
00487a   ec2c     CALL      0x4058,0x0         USBCheckBusStatus();                    // Must use polling method           e:\iro_svn\opensprints\FW\main.c
00487c   f020                                                                                                               
00487e   be6f     BTFSC     0x6f,0x7,0x0       if(UCFGbits.UTEYE!=1)                                                        e:\iro_svn\opensprints\FW\main.c
004880   d002     BRA       0x4886                                                                                          
004882   ec4c     CALL      0x4098,0x0             USBDriverService();                 // Interrupt or polling method       e:\iro_svn\opensprints\FW\main.c
004884   f020                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                               #if defined(USB_USE_CDC)                                                     e:\iro_svn\opensprints\FW\main.c
004886   ec76     CALL      0x38ec,0x0         CDCTxService();                                                              e:\iro_svn\opensprints\FW\main.c
004888   f01c                                                                                                               
                                               #endif                                                                       e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
00488a   0012     RETURN    0x0            }// end USBTasks                                                                 e:\iro_svn\opensprints\FW\main.c
                                                                                                                            e:\iro_svn\opensprints\FW\main.c
                                           /** EOF main.c ***************************************************************/  e:\iro_svn\opensprints\FW\main.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                Microchip USB C18 Firmware Version 1.0                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * FileName:        usbmmap.c                                                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Author               Date        Comment                                      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * -usbmmap.c-                                                                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * USB Memory Map                                                                e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * This file is the USB memory manager; it serves as a compile-time memory       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * allocator for the USB endpoints. It uses the compile time options passed      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * from usbcfg.h to instantiate endpoints and endpoint buffer.                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Each endpoint requires to have a set of Buffer Descriptor registers(BDT).     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * A BDT is 4-byte long and has a specific RAM location for each endpoint.       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The BDT for endpoint 0 out is located at address 0x400 to 0x403.              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The BDT for endpoint 0 in is located at address 0x404 to 0x407.               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The BDT for endpoint 1 out is located at address 0x408 to 0x40B.              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * and so on... The above allocation assumes the Ping-Pong Buffer Mode 0 is      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * used. These locations are already hard-wired in the silicon. The point        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * of doing instantiation, i.e. volatile far BDT ep0Bo;, is to provide the       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * C compiler a way to address each variable directly. This is very important    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * because when a register can be accessed directly, it saves execution time     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * and reduces program size.                                                     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Endpoints are defined using the endpoint number and the direction             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * of transfer. For simplicity, usbmmap.c only uses the endpoint number          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * in the BDT register allocation scheme. This means if the usbcfg.h states      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * that the MAX_EP_NUMBER is number 1, then four BDTs will be                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * instantiated: one each for endpoint0 in and endpoint0 out, which must         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * always be instantiated for control transfer by default, and one each sets     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * for endpoint1 in and endpoint1 out. The naming convention for instantiating   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * BDT is                                                                        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * ep<#>B<d>                                                                     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * where # is the endpoint number, and d is the direction of                     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * transfer, which could be either <i> or <o>.                                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The USB memory manager uses MAX_EP_NUMBER, as defined in usbcfg.h, to define  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * the endpoints to be instantiated. This represents the highest endpoint        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * number to be allocated, not how many endpoints are used. Since the BDTs for   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * endpoints have hardware-assigned addresses in Bank 4, setting this value too  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * high may lead to inefficient use of data RAM. For example, if an application  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * uses only endpoints EP0 and EP4, then the MAX_EP_NUMBER is 4, and not 2.      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The in-between endpoint BDTs in this example (EP1, EP2, and EP3) go unused,   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * and the 24 bytes of memory associated with them are wasted. It does not make  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * much sense to skip endpoints, but the final decision lies with the user.      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The next step is to assign the instantiated BDTs to different                 e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * USB functions. The firmware framework fundamentally assumes that every USB    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * function should know which endpoint it is using, i.e., the default control    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * transfer should know that it is using endpoint 0 in and endpoint 0 out.       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * A HID class can choose which endpoint it wants to use, but once chosen, it    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * should always know the number of the endpoint.                                e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The assignment of endpoints to USB functions is managed centrally             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * in usbcfg.h. This helps prevent the mistake of having more                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * than one USB function using the same endpoint. The "Endpoint Allocation"      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * section in usbcfg.h provides examples for how to map USB endpoints to USB     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * functions.                                                                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Quite a few things can be mapped in that section. There is no                 e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * one correct way to do the mapping and the user has the choice to              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * choose a method that is most suitable to the application.                     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Typically, however, a user will want to map the following for a given         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * USB interface function:                                                       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * 1. The USB interface ID                                                       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * 2. The endpoint control registers (UEPn)                                      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * 3. The BDT registers (ep<#>B<d>)                                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * 4. The endpoint size                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Example: Assume a USB device class "foo", which uses one out endpoint         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *          of size 64-byte and one in endpoint of size 64-byte, then:           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * #define FOO_INTF_ID          0x00                                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * #define FOO_UEP              UEP1                                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * #define FOO_BD_OUT           ep1Bo                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * #define FOO_BD_IN            ep1Bi                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * #define FOO_EP_SIZE          64                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The mapping above has chosen class "foo" to use endpoint 1.                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The names are arbitrary and can be anything other than FOO_??????.            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * For abstraction, the code for class "foo" should use the abstract             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * definitions of FOO_BD_OUT,FOO_BD_IN, and not ep1Bo or ep1Bi.                  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Note that the endpoint size defined in the usbcfg.h file is again             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * used in the usbmmap.c file. This shows that the relationship between          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * the two files are tightly related.                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The endpoint buffer for each USB function must be located in the              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * dual-port RAM area and has to come after all the BDTs have been               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * instantiated. An example declaration is:                                      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * volatile far unsigned char[FOO_EP_SIZE] data;                                 e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * The 'volatile' keyword tells the compiler not to perform any code             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * optimization on this variable because its content could be modified           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * by the hardware. The 'far' keyword tells the compiler that this variable      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * is not located in the Access RAM area (0x000 - 0x05F).                        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * For the variable to be globally accessible by other files, it should be       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * declared in the header file usbmmap.h as an extern definition, such as        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * extern volatile far unsigned char[FOO_EP_SIZE] data;                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Conclusion:                                                                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * In a short summary, the dependencies between usbcfg and usbmmap can           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * be shown as:                                                                  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * usbcfg[MAX_EP_NUMBER] -> usbmmap                                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * usbmmap[ep<#>B<d>] -> usbcfg                                                  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * usbcfg[EP size] -> usbmmap                                                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * usbcfg[abstract ep definitions] -> usb9/hid/cdc/etc class code                e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * usbmmap[endpoint buffer variable] -> usb9/hid/cdc/etc class code              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Data mapping provides a means for direct addressing of BDT and endpoint       e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * buffer. This means less usage of pointers, which equates to a faster and      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * smaller program code.                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /** I N C L U D E S **********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #include "system\typedefs.h"                                                     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #include "system\usb\usb.h"                                                      e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /** U S B  G L O B A L  V A R I A B L E S ************************************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           byte usb_device_state;          // Device States: DETACHED, ATTACHED, ...        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           USB_DEVICE_STATUS usb_stat;     // Global USB flags                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           byte usb_active_cfg;            // Value of current configuration                e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           byte usb_alt_intf[MAX_NUM_INT]; // Array to keep track of the current alternate  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                           // setting for each interface ID                 e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /** U S B  F I X E D  L O C A T I O N  V A R I A B L E S *********************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #pragma udata usbram4=0x400     //See Linker Script,usb4:0x400-0x4FF(256-byte)   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Section A: Buffer Descriptor Table                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * - 0x400 - 0x4FF(max)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * - MAX_EP_NUMBER is defined in autofiles\usbcfg.h                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * - BDT data type is defined in system\usb\usbmmap.h                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(0 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep0Bo;         //Endpoint #0 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep0Bi;         //Endpoint #0 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(1 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep1Bo;         //Endpoint #1 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep1Bi;         //Endpoint #1 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(2 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep2Bo;         //Endpoint #2 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep2Bi;         //Endpoint #2 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(3 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep3Bo;         //Endpoint #3 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep3Bi;         //Endpoint #3 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(4 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep4Bo;         //Endpoint #4 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep4Bi;         //Endpoint #4 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(5 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep5Bo;         //Endpoint #5 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep5Bi;         //Endpoint #5 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(6 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep6Bo;         //Endpoint #6 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep6Bi;         //Endpoint #6 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(7 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep7Bo;         //Endpoint #7 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep7Bi;         //Endpoint #7 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(8 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep8Bo;         //Endpoint #8 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep8Bi;         //Endpoint #8 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(9 <= MAX_EP_NUMBER)                                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep9Bo;         //Endpoint #9 BD Out                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep9Bi;         //Endpoint #9 BD In                              e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(10 <= MAX_EP_NUMBER)                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep10Bo;        //Endpoint #10 BD Out                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep10Bi;        //Endpoint #10 BD In                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(11 <= MAX_EP_NUMBER)                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep11Bo;        //Endpoint #11 BD Out                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep11Bi;        //Endpoint #11 BD In                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(12 <= MAX_EP_NUMBER)                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep12Bo;        //Endpoint #12 BD Out                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep12Bi;        //Endpoint #12 BD In                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(13 <= MAX_EP_NUMBER)                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep13Bo;        //Endpoint #13 BD Out                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep13Bi;        //Endpoint #13 BD In                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(14 <= MAX_EP_NUMBER)                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep14Bo;        //Endpoint #14 BD Out                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep14Bi;        //Endpoint #14 BD In                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if(15 <= MAX_EP_NUMBER)                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep15Bo;        //Endpoint #15 BD Out                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far BDT ep15Bi;        //Endpoint #15 BD In                             e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Section B: EP0 Buffer Space                                                   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            ******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * - Two buffer areas are defined:                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *   A. CTRL_TRF_SETUP                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *      - Size = EP0_BUFF_SIZE as defined in autofiles\usbcfg.h                  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *      - Detailed data structure allows direct adddressing of bits and bytes.   e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *   B. CTRL_TRF_DATA                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *      - Size = EP0_BUFF_SIZE as defined in autofiles\usbcfg.h                  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *      - Data structure allows direct adddressing of the first 8 bytes.         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * - Both data types are defined in system\usb\usbdefs\usbdefs_ep0_buff.h        e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far CTRL_TRF_SETUP SetupPkt;                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far CTRL_TRF_DATA CtrlTrfData;                                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            * Section C: CDC Buffer                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            ******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #pragma udata usbram5a=0x500    //See Linker Script,usb5:0x500-...               e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #if defined(USB_USE_CDC)                                                         e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far unsigned char cdc_notice[CDC_INT_EP_SIZE];                          e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far unsigned char cdc_data_rx[CDC_BULK_OUT_EP_SIZE];                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           volatile far unsigned char cdc_data_tx[CDC_BULK_IN_EP_SIZE];                     e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /** EOF usbmmap.c ************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbmmap.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                Microchip USB C18 Firmware Version 1.0                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * FileName:        usbdrv.c                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Author               Date        Comment                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /** I N C L U D E S **********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #include <p18cxxx.h>                                                             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #include "system\typedefs.h"                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #include "system\usb\usb.h"                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #include "io_cfg.h"             // Required for USBCheckBusStatus()              e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /** V A R I A B L E S ********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleEnable(void);                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleDisable(void);                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBSuspend(void);                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBWakeFromSuspend(void);                                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBProtocolResetHandler(void);                                              e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USB_SOF_Handler(void);                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBStallHandler(void);                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBErrorHandler(void);                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /** D E C L A R A T I O N S **************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBCheckBusStatus(void)                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine enables/disables the USB module by monitoring   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the USB power signal.                                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBCheckBusStatus(void)                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /**************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Bus Attachment & Detachment Detection                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * usb_bus_sense is an i/o pin defined in io_cfg.h                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               #define USB_BUS_ATTACHED    1                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               #define USB_BUS_DETACHED    0                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               if(usb_bus_sense == USB_BUS_ATTACHED)       // Is USB bus attached?          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004058   a66d     BTFSS     0x6d,0x3,0x0           if(UCONbits.USBEN == 0)                 // Is the module off?            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00405a   d810     RCALL     0x407c                     USBModuleEnable();                  // Is off, enable it             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00405c   d002     BRA       0x4062             else                                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00405e   b66d     BTFSC     0x6d,0x3,0x0           if(UCONbits.USBEN == 1)                 // Is the module on?             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004060   d814     RCALL     0x408a                     USBModuleDisable();                 // Is on, disable it             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }//end if(usb_bus_sense...)                                                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * After enabling the USB module, it takes some time for the voltage         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * on the D+ or D- line to rise high enough to get out of the SE0 condition. e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * The USB Reset interrupt should not be unmasked until the SE0 condition is e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * cleared. This helps preventing the firmware from misinterpreting this     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * unique event as a USB bus reset from the USB host.                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004062   0101     MOVLB     0x1                if(usb_device_state == ATTACHED_STATE)                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004064   05f7     DECF      0xf7,0x0,0x1                                                                                    
004066   e109     BNZ       0x407a                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004068   ba6d     BTFSC     0x6d,0x5,0x0           if(!UCONbits.SE0)                                                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00406a   d007     BRA       0x407a                                                                                          
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00406c   6a68     CLRF      0x68,0x0                   UIR = 0;                        // Clear all USB interrupts          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00406e   6a69     CLRF      0x69,0x0                   UIE = 0;                        // Mask all USB interrupts           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004070   8069     BSF       0x69,0x0,0x0               UIEbits.URSTIE = 1;             // Unmask RESET interrupt            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004072   8869     BSF       0x69,0x4,0x0               UIEbits.IDLEIE = 1;             // Unmask IDLE interrupt             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004074   0101     MOVLB     0x1                        usb_device_state = POWERED_STATE;                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004076   0e02     MOVLW     0x2                                                                                             
004078   6ff7     MOVWF     0xf7,0x1                                                                                        
                                                   }//end if                           // else wait until SE0 is cleared    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }//end if(usb_device_state == ATTACHED_STATE)                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00407a   0012     RETURN    0x0            }//end USBCheckBusStatus                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBModuleEnable(void)                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine enables the USB module.                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  An end designer should never have to call this routine       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  manually. This routine should only be called from            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  USBCheckBusStatus().                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            See USBCheckBusStatus() for more information.                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleEnable(void)                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00407c   6a6d     CLRF      0x6d,0x0           UCON = 0;                                                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00407e   6a69     CLRF      0x69,0x0           UIE = 0;                                // Mask all USB interrupts           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004080   866d     BSF       0x6d,0x3,0x0       UCONbits.USBEN = 1;                     // Enable module & attach to bus     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004082   0101     MOVLB     0x1                usb_device_state = ATTACHED_STATE;      // Defined in usbmmap.c & .h         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004084   0e01     MOVLW     0x1                                                                                             
004086   6ff7     MOVWF     0xf7,0x1                                                                                        
004088   0012     RETURN    0x0            }//end USBModuleEnable                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBModuleDisable(void)                                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine disables the USB module.                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  An end designer should never have to call this routine       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  manually. This routine should only be called from            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  USBCheckBusStatus().                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            See USBCheckBusStatus() for more information.                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBModuleDisable(void)                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00408a   6a6d     CLRF      0x6d,0x0           UCON = 0;                               // Disable module & detach from bus  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00408c   6a69     CLRF      0x69,0x0           UIE = 0;                                // Mask all USB interrupts           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00408e   0101     MOVLB     0x1                usb_device_state = DETACHED_STATE;      // Defined in usbmmap.c & .h         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004090   6bf7     CLRF      0xf7,0x1                                                                                        
004092   0012     RETURN    0x0            }//end USBModuleDisable                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBSoftDetach(void)                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    The device will have to be re-enumerated to function again.  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        USBSoftDetach electrically disconnects the device from       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the bus. This is done by stop supplying Vusb voltage to      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  pull-up resistor. The pull-down resistors on the host        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  side will pull both differential signal lines low and        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the host registers the event as a disconnect.                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  Since the USB cable is not physically disconnected, the      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  power supply through the cable can still be sensed by        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the device. The next time USBCheckBusStatus() function       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  is called, it will reconnect the device back to the bus.     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBSoftDetach(void)                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004094   dffa     RCALL     0x408a             USBModuleDisable();                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004096   0012     RETURN    0x0            }//end USBSoftDetach                                                             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBDriverService(void)                                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This routine is the heart of this firmware. It manages       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  all USB interrupts.                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            Device state transitions through the following stages:       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  DETACHED -> ATTACHED -> POWERED -> DEFAULT ->                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  ADDRESS_PENDING -> ADDRESSED -> CONFIGURED -> READY          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBDriverService(void)                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Pointless to continue servicing if USB cable is not even attached.        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004098   0101     MOVLB     0x1                if(usb_device_state == DETACHED_STATE) return;                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00409a   51f7     MOVF      0xf7,0x0,0x1                                                                                    
00409c   e101     BNZ       0x40a0                                                                                          
00409e   d03a     BRA       0x4114                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Task A: Service USB Activity Interrupt                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040a0   5068     MOVF      0x68,0x0,0x0       if(UIRbits.ACTVIF && UIEbits.ACTVIE)    USBWakeFromSuspend();                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040a2   0b04     ANDLW     0x4                                                                                             
0040a4   e004     BZ        0x40ae                                                                                          
0040a6   5069     MOVF      0x69,0x0,0x0                                                                                    
0040a8   0b04     ANDLW     0x4                                                                                             
0040aa   e001     BZ        0x40ae                                                                                          
0040ac   d83c     RCALL     0x4126                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Pointless to continue servicing if the device is in suspend mode.         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040ae   b26d     BTFSC     0x6d,0x1,0x0       if(UCONbits.SUSPND==1) return;                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040b0   d031     BRA       0x4114                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Task B: Service USB Bus Reset Interrupt.                                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * When bus reset is received during suspend, ACTVIF will be set first,      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * once the UCONbits.SUSPND is clear, then the URSTIF bit will be asserted.  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * This is why URSTIF is checked after ACTVIF.                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040b2   5068     MOVF      0x68,0x0,0x0       if(UIRbits.URSTIF && UIEbits.URSTIE)    USBProtocolResetHandler();           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040b4   0b01     ANDLW     0x1                                                                                             
0040b6   e004     BZ        0x40c0                                                                                          
0040b8   5069     MOVF      0x69,0x0,0x0                                                                                    
0040ba   0b01     ANDLW     0x1                                                                                             
0040bc   e001     BZ        0x40c0                                                                                          
0040be   d856     RCALL     0x416c                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Task C: Service other USB interrupts                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040c0   5068     MOVF      0x68,0x0,0x0       if(UIRbits.IDLEIF && UIEbits.IDLEIE)    USBSuspend();                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040c2   0b10     ANDLW     0x10                                                                                            
0040c4   e004     BZ        0x40ce                                                                                          
0040c6   5069     MOVF      0x69,0x0,0x0                                                                                    
0040c8   0b10     ANDLW     0x10                                                                                            
0040ca   e001     BZ        0x40ce                                                                                          
0040cc   d824     RCALL     0x4116                                                                                          
0040ce   5068     MOVF      0x68,0x0,0x0       if(UIRbits.SOFIF && UIEbits.SOFIE)      USB_SOF_Handler();                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040d0   0b40     ANDLW     0x40                                                                                            
0040d2   e004     BZ        0x40dc                                                                                          
0040d4   5069     MOVF      0x69,0x0,0x0                                                                                    
0040d6   0b40     ANDLW     0x40                                                                                            
0040d8   e001     BZ        0x40dc                                                                                          
0040da   d83d     RCALL     0x4156                                                                                          
0040dc   5068     MOVF      0x68,0x0,0x0       if(UIRbits.STALLIF && UIEbits.STALLIE)  USBStallHandler();                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040de   0b20     ANDLW     0x20                                                                                            
0040e0   e004     BZ        0x40ea                                                                                          
0040e2   5069     MOVF      0x69,0x0,0x0                                                                                    
0040e4   0b20     ANDLW     0x20                                                                                            
0040e6   e001     BZ        0x40ea                                                                                          
0040e8   d838     RCALL     0x415a                                                                                          
0040ea   5068     MOVF      0x68,0x0,0x0       if(UIRbits.UERRIF && UIEbits.UERRIE)    USBErrorHandler();                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040ec   0b02     ANDLW     0x2                                                                                             
0040ee   e004     BZ        0x40f8                                                                                          
0040f0   5069     MOVF      0x69,0x0,0x0                                                                                    
0040f2   0b02     ANDLW     0x2                                                                                             
0040f4   e001     BZ        0x40f8                                                                                          
0040f6   d838     RCALL     0x4168                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Pointless to continue servicing if the host has not sent a bus reset.     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Once bus reset is received, the device transitions into the DEFAULT       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * state and is ready for communication.                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040f8   0e03     MOVLW     0x3                if(usb_device_state < DEFAULT_STATE) return;                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0040fa   0101     MOVLB     0x1                                                                                             
0040fc   5df7     SUBWF     0xf7,0x0,0x1                                                                                    
0040fe   e201     BC        0x4102                                                                                          
004100   d009     BRA       0x4114                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Task D: Servicing USB Transaction Complete Interrupt                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004102   5068     MOVF      0x68,0x0,0x0       if(UIRbits.TRNIF && UIEbits.TRNIE)                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004104   0b08     ANDLW     0x8                                                                                             
004106   e006     BZ        0x4114                                                                                          
004108   5069     MOVF      0x69,0x0,0x0                                                                                    
00410a   0b08     ANDLW     0x8                                                                                             
00410c   e003     BZ        0x4114                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * USBCtrlEPService only services transactions over EP0.                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * It ignores all other EP transactions.                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00410e   ec00     CALL      0x3a00,0x0             USBCtrlEPService();                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004110   f01d                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * Other EP can be serviced later by responsible device class firmware.  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * Each device driver knows when an OUT or IN transaction is ready by    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * checking the buffer ownership bit.                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * An OUT EP should always be owned by SIE until the data is ready.      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * An IN EP should always be owned by CPU until the data is ready.       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    *                                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * Because of this logic, it is not necessary to save the USTAT value    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    * of non-EP0 transactions.                                              e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004112   9668     BCF       0x68,0x3,0x0           UIRbits.TRNIF = 0;                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }//end if(UIRbits.TRNIF && UIEbits.TRNIE)                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004114   0012     RETURN    0x0            }//end USBDriverService                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBSuspend(void)                                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:                                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBSuspend(void)                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * NOTE: Do not clear UIRbits.ACTVIF here!                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Reason:                                                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * ACTVIF is only generated once an IDLEIF has been generated.               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * This is a 1:1 ratio interrupt generation.                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * For every IDLEIF, there will be only one ACTVIF regardless of             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * the number of subsequent bus transitions.                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * If the ACTIF is cleared here, a problem could occur when:                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * [       IDLE       ][bus activity ->                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * <--- 3 ms ----->     ^                                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                ^     ACTVIF=1                                             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                IDLEIF=1                                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *  #           #           #           #   (#=Program polling flags)        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          ^                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          This polling loop will see both                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          IDLEIF=1 and ACTVIF=1.                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          However, the program services IDLEIF first       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          because ACTIVIE=0.                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          If this routine clears the only ACTIVIF,         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          then it can never get out of the suspend         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                *                          mode.                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004116   8469     BSF       0x69,0x2,0x0       UIEbits.ACTVIE = 1;                     // Enable bus activity interrupt     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004118   9868     BCF       0x68,0x4,0x0       UIRbits.IDLEIF = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00411a   826d     BSF       0x6d,0x1,0x0       UCONbits.SUSPND = 1;                    // Put USB module in power conserve  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                       // mode, SIE clock inactive          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * At this point the PIC can go into sleep,idle, or                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * switch to a slower clock, etc.                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /* Modifiable Section */                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00411c   9aa1     BCF       0xa1,0x5,0x0       PIR2bits.USBIF = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00411e   8aa0     BSF       0xa0,0x5,0x0       PIE2bits.USBIE = 1;                     // Set USB wakeup source             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004120   0003     SLEEP                        Sleep();                                // Goto sleep                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004122   9aa0     BCF       0xa0,0x5,0x0       PIE2bits.USBIE = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /* End Modifiable Section */                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004124   0012     RETURN    0x0            }//end USBSuspend                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBWakeFromSuspend(void)                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:                                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBWakeFromSuspend(void)                                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * If using clock switching, this is the place to restore the                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * original clock frequency.                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004126   926d     BCF       0x6d,0x1,0x0       UCONbits.SUSPND = 0;                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004128   9469     BCF       0x69,0x2,0x0       UIEbits.ACTVIE = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00412a   9468     BCF       0x68,0x2,0x0       UIRbits.ACTVIF = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00412c   0012     RETURN    0x0            }//end USBWakeFromSuspend                                                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBRemoteWakeup(void)                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        This function should be called by user when the device       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  is waken up by an external stimulus other than ACTIVIF.      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  Please read the note below to understand the limitations.    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            The modifiable section in this routine should be changed     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  to meet the application needs. Current implementation        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  temporary blocks other functions from executing for a        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  period of 1-13 ms depending on the core frequency.           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  According to USB 2.0 specification section 7.1.7.7,          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  "The remote wakeup device must hold the resume signaling     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  for at lest 1 ms but for no more than 15 ms."                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  The idea here is to use a delay counter loop, using a        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  common value that would work over a wide range of core       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  frequencies.                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  That value selected is 1800. See table below:                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  ==========================================================   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  Core Freq(MHz)      MIP         RESUME Signal Period (ms)    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  ==========================================================   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                      48              12          1.05                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                       4              1           12.6                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  ==========================================================   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  * These timing could be incorrect when using code            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                    optimization or extended instruction mode,                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                    or when having other interrupts enabled.                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                    Make sure to verify using the MPLAB SIM's Stopwatch        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBRemoteWakeup(void)                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               static word delay_count;                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00412e   0101     MOVLB     0x1                if(usb_stat.RemoteWakeup == 1)          // Check if RemoteWakeup function    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004130   a1f8     BTFSS     0xf8,0x0,0x1                                                                                    
004132   d010     BRA       0x4154                                                                                          
                                               {                                       // has been enabled by the host.     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004134   dff8     RCALL     0x4126                 USBWakeFromSuspend();               // Unsuspend USB modue               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004136   846d     BSF       0x6d,0x2,0x0           UCONbits.RESUME = 1;                // Start RESUME signaling            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   /* Modifiable Section */                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004138   0101     MOVLB     0x1                    delay_count = 1800U;                // Set RESUME line for 1-13 ms       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00413a   0e08     MOVLW     0x8                                                                                             
00413c   6ffb     MOVWF     0xfb,0x1                                                                                        
00413e   0e07     MOVLW     0x7                                                                                             
004140   6ffc     MOVWF     0xfc,0x1                                                                                        
                                                   do                                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004142   0101     MOVLB     0x1                        delay_count--;                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004144   07fb     DECF      0xfb,0x1,0x1                                                                                    
004146   0e00     MOVLW     0x0                                                                                             
004148   5bfc     SUBWFB    0xfc,0x1,0x1                                                                                    
00414a   0101     MOVLB     0x1                    }while(delay_count);                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00414c   51fb     MOVF      0xfb,0x0,0x1                                                                                    
00414e   11fc     IORWF     0xfc,0x0,0x1                                                                                    
004150   e1f8     BNZ       0x4142                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   /* End Modifiable Section */                                             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004152   946d     BCF       0x6d,0x2,0x0           UCONbits.RESUME = 0;                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }//endif                                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004154   0012     RETURN    0x0            }//end USBRemoteWakeup                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USB_SOF_Handler(void)                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        The USB host sends out a SOF packet to full-speed devices    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  every 1 ms. This interrupt may be useful for isochronous     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  pipes. End designers should implement callback routine       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  as necessary.                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USB_SOF_Handler(void)                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /* Callback routine here */                                                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004156   9c68     BCF       0x68,0x6,0x0       UIRbits.SOFIF = 0;                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004158   0012     RETURN    0x0            }//end USB_SOF_Handler                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBStallHandler(void)                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    A STALL packet is sent to the host by the SIE.               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        The STALLIF is set anytime the SIE sends out a STALL         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  packet regardless of which endpoint causes it.               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  A Setup transaction overrides the STALL function. A stalled  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  endpoint stops stalling once it receives a setup packet.     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  In this case, the SIE will accepts the Setup packet and      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  set the TRNIF flag to notify the firmware. STALL function    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  for that particular endpoint pipe will be automatically      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  disabled (direction specific).                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  There are a few reasons for an endpoint to be stalled.       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  1. When a non-supported USB request is received.             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                     Example: GET_DESCRIPTOR(DEVICE_QUALIFIER)                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  2. When an endpoint is currently halted.                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  3. When the device class specifies that an endpoint must     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                     stall in response to a specific event.                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                     Example: Mass Storage Device Class                        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                              If the CBW is not valid, the device shall        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                              STALL the Bulk-In pipe.                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                              See USB Mass Storage Class Bulk-only Transport   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                              Specification for more details.                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            UEPn.EPSTALL can be scanned to see which endpoint causes     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the stall event.                                             e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  If                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBStallHandler(void)                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * Does not really have to do anything here,                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * even for the control endpoint.                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * All BDs of Endpoint 0 are owned by SIE right now,                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * but once a Setup Transaction is received, the ownership                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * for EP0_OUT will be returned to CPU.                                      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * When the Setup Transaction is serviced, the ownership                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                * for EP0_IN will then be forced back to CPU by firmware.                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00415a   a070     BTFSS     0x70,0x0,0x0       if(UEP0bits.EPSTALL == 1)                                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00415c   d003     BRA       0x4164                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00415e   ec8d     CALL      0x3d1a,0x0             USBPrepareForNextSetupTrf();        // Firmware work-around              e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004160   f01e                                                                                                               
004162   9070     BCF       0x70,0x0,0x0           UEP0bits.EPSTALL = 0;                                                    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004164   9a68     BCF       0x68,0x5,0x0       UIRbits.STALLIF = 0;                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004166   0012     RETURN    0x0            }//end USBStallHandler                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBErrorHandler(void)                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        The purpose of this interrupt is mainly for debugging        e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  during development. Check UEIR to see which error causes     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  the interrupt.                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBErrorHandler(void)                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004168   9268     BCF       0x68,0x1,0x0       UIRbits.UERRIF = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00416a   0012     RETURN    0x0            }//end USBErrorHandler                                                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Function:        void USBProtocolResetHandler(void)                           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * PreCondition:    A USB bus reset is received from the host.                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Side Effects:    Currently, this routine flushes any pending USB              e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  transactions. It empties out the USTAT FIFO. This action     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  might not be desirable in some applications.                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Overview:        Once a USB bus reset is received from the host, this         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  routine should be called. It resets the device address to    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  zero, disables all non-EP0 endpoints, initializes EP0 to     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  be ready for default communication, clears all USB           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  interrupt flags, unmasks applicable USB interrupts, and      e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                  reinitializes internal state-machine variables.              e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           void USBProtocolResetHandler(void)                                               e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00416c   6a6a     CLRF      0x6a,0x0           UEIR = 0;                       // Clear all USB error flags                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00416e   6a68     CLRF      0x68,0x0           UIR = 0;                        // Clears all USB interrupts                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004170   0e9f     MOVLW     0x9f               UEIE = 0b10011111;              // Unmask all USB error interrupts           e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004172   6e6b     MOVWF     0x6b,0x0                                                                                        
004174   0e7b     MOVLW     0x7b               UIE = 0b01111011;               // Enable all interrupts except ACTVIE       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004176   6e69     MOVWF     0x69,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004178   6a6e     CLRF      0x6e,0x0           UADDR = 0x00;                   // Reset to default address                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00417a   0e0f     MOVLW     0xf                mDisableEP1to15();              // Reset all non-EP0 UEPn registers          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00417c   6ee6     MOVWF     0xe6,0x0                                                                                        
00417e   0e71     MOVLW     0x71                                                                                            
004180   6ee6     MOVWF     0xe6,0x0                                                                                        
004182   0e0f     MOVLW     0xf                                                                                             
004184   6ee6     MOVWF     0xe6,0x0                                                                                        
004186   d814     RCALL     0x41b0                                                                                          
004188   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00418a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00418c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00418e   0e16     MOVLW     0x16               UEP0 = EP_CTRL|HSHK_EN;         // Init EP0 as a Ctrl EP, see usbdrv.h       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004190   6e70     MOVWF     0x70,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004192   a668     BTFSS     0x68,0x3,0x0       while(UIRbits.TRNIF == 1)       // Flush any pending transactions            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
004194   d002     BRA       0x419a                                                                                          
004198   d7fc     BRA       0x4192                                                                                          
004196   9668     BCF       0x68,0x3,0x0           UIRbits.TRNIF = 0;                                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00419a   986d     BCF       0x6d,0x4,0x0       UCONbits.PKTDIS = 0;            // Make sure packet processing is enabled    e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00419c   ec8d     CALL      0x3d1a,0x0         USBPrepareForNextSetupTrf();    // Declared in usbctrltrf.c                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
00419e   f01e                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041a0   0101     MOVLB     0x1                usb_stat.RemoteWakeup = 0;      // Default status flag to disable            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041a2   91f8     BCF       0xf8,0x0,0x1                                                                                    
0041a4   0101     MOVLB     0x1                usb_active_cfg = 0;             // Clear active configuration                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041a6   6bf9     CLRF      0xf9,0x1                                                                                        
0041a8   0101     MOVLB     0x1                usb_device_state = DEFAULT_STATE;                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041aa   0e03     MOVLW     0x3                                                                                             
0041ac   6ff7     MOVWF     0xf7,0x1                                                                                        
0041ae   0012     RETURN    0x0            }//end USBProtocolResetHandler                                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /* Auxiliary Function */                                                         e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041b0   cfd9     MOVFF     0xfd9,0xfe6    void ClearArray(byte* startAdr,byte count)                                       e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041b2   ffe6                                                                                                               
0041b4   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0041b6   ffd9                                                                                                               
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041b8   0efd     MOVLW     0xfd               *startAdr;                                                                   e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041ba   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0041bc   ffe9                                                                                                               
0041be   0efe     MOVLW     0xfe                                                                                            
0041c0   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0041c2   ffea                                                                                                               
0041c4   0efc     MOVLW     0xfc               while(count)                                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041c6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0041c8   e004     BZ        0x41d2                                                                                          
0041d0   d7f9     BRA       0x41c4                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   _asm                                                                     e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041ca   6aee     CLRF      0xee,0x0               clrf POSTINC0,0                                                          e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                                   _endasm                                                                  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041cc   0efc     MOVLW     0xfc                   count--;                                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041ce   06db     DECF      0xdb,0x1,0x0                                                                                    
                                               }//end while                                                                 e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041d2   52e5     MOVF      0xe5,0x1,0x0   }//end ClearArray                                                                e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
0041d4   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0041d6   ffd9                                                                                                               
0041d8   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /** EOF usbdrv.c *************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbdrv\usbdrv.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                Microchip USB C18 Firmware Version 1.0                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * FileName:        usb9.c                                                       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Author               Date        Comment                                      e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /** I N C L U D E S **********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #include <p18cxxx.h>                                                             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #include "system\typedefs.h"                                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #include "system\usb\usb.h"                                                      e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #include "io_cfg.h"                     // Required for self_power status        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /** V A R I A B L E S ********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdGetDscHandler(void);                                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdSetCfgHandler(void);                                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdGetStatusHandler(void);                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdFeatureReqHandler(void);                                              e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /** D E C L A R A T I O N S **************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Function:        void USBCheckStdRequest(void)                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Overview:        This routine checks the setup data packet to see if it       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  knows how to handle it                                       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBCheckStdRequest(void)                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d3a   0104     MOVLB     0x4                if(SetupPkt.RequestType != STANDARD) return;                                 e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d3c   5120     MOVF      0x20,0x0,0x1                                                                                    
003d3e   0b60     ANDLW     0x60                                                                                            
003d40   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003d42   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003d44   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003d46   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003d48   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003d4a   0900     IORLW     0x0                                                                                             
003d4c   e001     BZ        0x3d50                                                                                          
003d4e   d058     BRA       0x3e00                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d50   0104     MOVLB     0x4                switch(SetupPkt.bRequest)                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d52   5121     MOVF      0x21,0x0,0x1                                                                                    
003d54   0a07     XORLW     0x7                                                                                             
003d56   e053     BZ        0x3dfe                                                                                          
003d58   0a0b     XORLW     0xb                                                                                             
003d5a   e051     BZ        0x3dfe                                                                                          
003d5c   0a07     XORLW     0x7                                                                                             
003d5e   e042     BZ        0x3de4                                                                                          
003d60   0a01     XORLW     0x1                                                                                             
003d62   e02c     BZ        0x3dbc                                                                                          
003d64   0a0b     XORLW     0xb                                                                                             
003d66   e028     BZ        0x3db8                                                                                          
003d68   0a02     XORLW     0x2                                                                                             
003d6a   e026     BZ        0x3db8                                                                                          
003d6c   0a03     XORLW     0x3                                                                                             
003d6e   e022     BZ        0x3db4                                                                                          
003d70   0a08     XORLW     0x8                                                                                             
003d72   e012     BZ        0x3d98                                                                                          
003d74   0a01     XORLW     0x1                                                                                             
003d76   e00e     BZ        0x3d94                                                                                          
003d78   0a0f     XORLW     0xf                                                                                             
003d7a   e00a     BZ        0x3d90                                                                                          
003d7c   0a03     XORLW     0x3                                                                                             
003d7e   e001     BZ        0x3d82                                                                                          
003d80   d03e     BRA       0x3dfe                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SET_ADR:                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d82   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d84   0e01     MOVLW     0x1                                                                                             
003d86   6ff0     MOVWF     0xf0,0x1                                                                                        
003d88   0101     MOVLB     0x1                        usb_device_state = ADR_PENDING_STATE;       // Update state only     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d8a   0e04     MOVLW     0x4                                                                                             
003d8c   6ff7     MOVWF     0xf7,0x1                                                                                        
                                                       /* See USBCtrlTrfInHandler() in usbctrltrf.c for the next step */    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d8e   d038     BRA       0x3e00                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case GET_DSC:                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d90   d838     RCALL     0x3e02                     USBStdGetDscHandler();                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d92   d036     BRA       0x3e00                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SET_CFG:                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d94   d893     RCALL     0x3ebc                     USBStdSetCfgHandler();                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d96   d034     BRA       0x3e00                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case GET_CFG:                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d98   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003d9a   0e01     MOVLW     0x1                                                                                             
003d9c   6ff0     MOVWF     0xf0,0x1                                                                                        
003d9e   0101     MOVLB     0x1                        pSrc.bRam = (byte*)&usb_active_cfg;         // Set Source            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003da0   0ef9     MOVLW     0xf9                                                                                            
003da2   6ff1     MOVWF     0xf1,0x1                                                                                        
003da4   0e01     MOVLW     0x1                                                                                             
003da6   6ff2     MOVWF     0xf2,0x1                                                                                        
003da8   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;               // Set memory type       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003daa   93f8     BCF       0xf8,0x1,0x1                                                                                    
003dac   0101     MOVLB     0x1                        LSB(wCount) = 1;                            // Set data count        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dae   0e01     MOVLW     0x1                                                                                             
003db0   6ff5     MOVWF     0xf5,0x1                                                                                        
003db2   d026     BRA       0x3e00                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case GET_STATUS:                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003db4   d8ab     RCALL     0x3f0c                     USBStdGetStatusHandler();                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003db6   d024     BRA       0x3e00                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case CLR_FEATURE:                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SET_FEATURE:                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003db8   d8f9     RCALL     0x3fac                     USBStdFeatureReqHandler();                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dba   d022     BRA       0x3e00                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case GET_INTF:                                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dbc   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dbe   0e01     MOVLW     0x1                                                                                             
003dc0   6ff0     MOVWF     0xf0,0x1                                                                                        
003dc2   0104     MOVLB     0x4                        pSrc.bRam = (byte*)&usb_alt_intf+SetupPkt.bIntfID;  // Set source    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dc4   5124     MOVF      0x24,0x0,0x1                                                                                    
003dc6   0101     MOVLB     0x1                                                                                             
003dc8   6ff1     MOVWF     0xf1,0x1                                                                                        
003dca   6bf2     CLRF      0xf2,0x1                                                                                        
003dcc   0efa     MOVLW     0xfa                                                                                            
003dce   0101     MOVLB     0x1                                                                                             
003dd0   27f1     ADDWF     0xf1,0x1,0x1                                                                                    
003dd2   0e01     MOVLW     0x1                                                                                             
003dd4   0101     MOVLB     0x1                                                                                             
003dd6   23f2     ADDWFC    0xf2,0x1,0x1                                                                                    
003dd8   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;               // Set memory type       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dda   93f8     BCF       0xf8,0x1,0x1                                                                                    
003ddc   0101     MOVLB     0x1                        LSB(wCount) = 1;                            // Set data count        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dde   0e01     MOVLW     0x1                                                                                             
003de0   6ff5     MOVWF     0xf5,0x1                                                                                        
003de2   d00e     BRA       0x3e00                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SET_INTF:                                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003de4   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003de6   0e01     MOVLW     0x1                                                                                             
003de8   6ff0     MOVWF     0xf0,0x1                                                                                        
003dea   0104     MOVLB     0x4                        usb_alt_intf[SetupPkt.bIntfID] = SetupPkt.bAltID;                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dec   5124     MOVF      0x24,0x0,0x1                                                                                    
003dee   6aea     CLRF      0xea,0x0                                                                                        
003df0   0ffa     ADDLW     0xfa                                                                                            
003df2   6ee9     MOVWF     0xe9,0x0                                                                                        
003df4   0e01     MOVLW     0x1                                                                                             
003df6   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
003df8   c422     MOVFF     0x422,0xfef                                                                                     
003dfa   ffef                                                                                                               
003dfc   d001     BRA       0x3e00                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SET_DSC:                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case SYNCH_FRAME:                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   default:                                                                 e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003dfe   d000     BRA       0x3e00                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                               }//end switch                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e00   0012     RETURN    0x0            }//end USBCheckStdRequest                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdGetDscHandler(void)                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Overview:        This routine handles the standard GET_DESCRIPTOR request.    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  It utilizes tables dynamically looks up descriptor size.     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  This routine should never have to be modified if the tables  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  in usbdsc.c are declared correctly.                          e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdGetDscHandler(void)                                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e02   0e80     MOVLW     0x80               if(SetupPkt.bmRequestType == 0x80)                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e04   0104     MOVLB     0x4                                                                                             
003e06   5d20     SUBWF     0x20,0x0,0x1                                                                                    
003e08   e158     BNZ       0x3eba                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e0a   0104     MOVLB     0x4                    switch(SetupPkt.bDscType)                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e0c   5123     MOVF      0x23,0x0,0x1                                                                                    
003e0e   0a03     XORLW     0x3                                                                                             
003e10   e034     BZ        0x3e7a                                                                                          
003e12   0a01     XORLW     0x1                                                                                             
003e14   e010     BZ        0x3e36                                                                                          
003e16   0a03     XORLW     0x3                                                                                             
003e18   e001     BZ        0x3e1c                                                                                          
003e1a   d04d     BRA       0x3eb6                                                                                          
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                       case DSC_DEV:                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e1c   0101     MOVLB     0x1                            ctrl_trf_session_owner = MUID_USB9;                              e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e1e   0e01     MOVLW     0x1                                                                                             
003e20   6ff0     MOVWF     0xf0,0x1                                                                                        
003e22   0101     MOVLB     0x1                            pSrc.bRom = (rom byte*)&device_dsc;                              e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e24   0e24     MOVLW     0x24                                                                                            
003e26   6ff1     MOVWF     0xf1,0x1                                                                                        
003e28   0e44     MOVLW     0x44                                                                                            
003e2a   6ff2     MOVWF     0xf2,0x1                                                                                        
003e2c   0e12     MOVLW     0x12                           wCount._word = sizeof(device_dsc);          // Set data count    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e2e   0101     MOVLB     0x1                                                                                             
003e30   6ff5     MOVWF     0xf5,0x1                                                                                        
003e32   6bf6     CLRF      0xf6,0x1                                                                                        
003e34   d040     BRA       0x3eb6                         break;                                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                       case DSC_CFG:                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e36   0101     MOVLB     0x1                            ctrl_trf_session_owner = MUID_USB9;                              e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e38   0e01     MOVLW     0x1                                                                                             
003e3a   6ff0     MOVWF     0xf0,0x1                                                                                        
003e3c   0104     MOVLB     0x4                            pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e3e   5122     MOVF      0x22,0x0,0x1                                                                                    
003e40   6ef6     MOVWF     0xf6,0x0                                                                                        
003e42   6af7     CLRF      0xf7,0x0                                                                                        
003e44   90d8     BCF       0xd8,0x0,0x0                                                                                    
003e46   36f6     RLCF      0xf6,0x1,0x0                                                                                    
003e48   36f7     RLCF      0xf7,0x1,0x0                                                                                    
003e4a   0ee5     MOVLW     0xe5                                                                                            
003e4c   26f6     ADDWF     0xf6,0x1,0x0                                                                                    
003e4e   0e44     MOVLW     0x44                                                                                            
003e50   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
003e52   0009     TBLRDPOSTINC                                                                                              
003e54   cff5     MOVFF     0xff5,0x1f1                                                                                     
003e56   f1f1                                                                                                               
003e58   000a     TBLRDPOSTDEC                                                                                              
003e5a   cff5     MOVFF     0xff5,0x1f2                                                                                     
003e5c   f1f2                                                                                                               
003e5e   0e02     MOVLW     0x2                            wCount._word = *(pSrc.wRom+1);              // Set data count    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e60   0101     MOVLB     0x1                                                                                             
003e62   6af7     CLRF      0xf7,0x0                                                                                        
003e64   25f1     ADDWF     0xf1,0x0,0x1                                                                                    
003e66   6ef6     MOVWF     0xf6,0x0                                                                                        
003e68   51f2     MOVF      0xf2,0x0,0x1                                                                                    
003e6a   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
003e6c   0009     TBLRDPOSTINC                                                                                              
003e6e   cff5     MOVFF     0xff5,0x1f5                                                                                     
003e70   f1f5                                                                                                               
003e72   000a     TBLRDPOSTDEC                                                                                              
003e74   cff5     MOVFF     0xff5,0x1f6                                                                                     
003e76   f1f6                                                                                                               
003e78   d01e     BRA       0x3eb6                         break;                                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                       case DSC_STR:                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e7a   0101     MOVLB     0x1                            ctrl_trf_session_owner = MUID_USB9;                              e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e7c   0e01     MOVLW     0x1                                                                                             
003e7e   6ff0     MOVWF     0xf0,0x1                                                                                        
003e80   0104     MOVLB     0x4                            pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003e82   5122     MOVF      0x22,0x0,0x1                                                                                    
003e84   6ef6     MOVWF     0xf6,0x0                                                                                        
003e86   6af7     CLRF      0xf7,0x0                                                                                        
003e88   90d8     BCF       0xd8,0x0,0x0                                                                                    
003e8a   36f6     RLCF      0xf6,0x1,0x0                                                                                    
003e8c   36f7     RLCF      0xf7,0x1,0x0                                                                                    
003e8e   0ee9     MOVLW     0xe9                                                                                            
003e90   26f6     ADDWF     0xf6,0x1,0x0                                                                                    
003e92   0e44     MOVLW     0x44                                                                                            
003e94   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
003e96   0009     TBLRDPOSTINC                                                                                              
003e98   cff5     MOVFF     0xff5,0x1f1                                                                                     
003e9a   f1f1                                                                                                               
003e9c   000a     TBLRDPOSTDEC                                                                                              
003e9e   cff5     MOVFF     0xff5,0x1f2                                                                                     
003ea0   f1f2                                                                                                               
003ea2   c1f1     MOVFF     0x1f1,0xff6                    wCount._word = *pSrc.bRom;                  // Set data count    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ea4   fff6                                                                                                               
003ea6   c1f2     MOVFF     0x1f2,0xff7                                                                                     
003ea8   fff7                                                                                                               
003eaa   0008     TBLRD                                                                                                     
003eac   50f5     MOVF      0xf5,0x0,0x0                                                                                    
003eae   0101     MOVLB     0x1                                                                                             
003eb0   6ff5     MOVWF     0xf5,0x1                                                                                        
003eb2   6bf6     CLRF      0xf6,0x1                                                                                        
003eb4   d000     BRA       0x3eb6                         break;                                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   }//end switch                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003eb6   0101     MOVLB     0x1                    usb_stat.ctrl_trf_mem = _ROM;                       // Set memory type   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003eb8   83f8     BSF       0xf8,0x1,0x1                                                                                    
                                               }//end if                                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003eba   0012     RETURN    0x0            }//end USBStdGetDscHandler                                                       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdSetCfgHandler(void)                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Overview:        This routine first disables all endpoints by clearing        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  UEP registers. It then configures (initializes) endpoints    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  specified in the modifiable section.                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdSetCfgHandler(void)                                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ebc   0101     MOVLB     0x1                ctrl_trf_session_owner = MUID_USB9;                                          e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ebe   0e01     MOVLW     0x1                                                                                             
003ec0   6ff0     MOVWF     0xf0,0x1                                                                                        
003ec2   0e0f     MOVLW     0xf                mDisableEP1to15();                          // See usbdrv.h                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ec4   6ee6     MOVWF     0xe6,0x0                                                                                        
003ec6   0e71     MOVLW     0x71                                                                                            
003ec8   6ee6     MOVWF     0xe6,0x0                                                                                        
003eca   0e0f     MOVLW     0xf                                                                                             
003ecc   6ee6     MOVWF     0xe6,0x0                                                                                        
003ece   ecd8     CALL      0x41b0,0x0                                                                                      
003ed0   f020                                                                                                               
003ed2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003ed4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003ed6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003ed8   0e01     MOVLW     0x1                ClearArray((byte*)&usb_alt_intf,MAX_NUM_INT);                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003eda   6ee6     MOVWF     0xe6,0x0                                                                                        
003edc   0efa     MOVLW     0xfa                                                                                            
003ede   6ee6     MOVWF     0xe6,0x0                                                                                        
003ee0   0e01     MOVLW     0x1                                                                                             
003ee2   6ee6     MOVWF     0xe6,0x0                                                                                        
003ee4   ecd8     CALL      0x41b0,0x0                                                                                      
003ee6   f020                                                                                                               
003ee8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003eea   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003eec   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003eee   c422     MOVFF     0x422,0x1f9        usb_active_cfg = SetupPkt.bCfgValue;                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ef0   f1f9                                                                                                               
003ef2   0104     MOVLB     0x4                if(SetupPkt.bCfgValue == 0)                                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ef4   5122     MOVF      0x22,0x0,0x1                                                                                    
003ef6   e104     BNZ       0x3f00                                                                                          
003ef8   0101     MOVLB     0x1                    usb_device_state = ADDRESS_STATE;                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003efa   0e05     MOVLW     0x5                                                                                             
003efc   6ff7     MOVWF     0xf7,0x1                                                                                        
003efe   d005     BRA       0x3f0a             else                                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f00   0101     MOVLB     0x1                    usb_device_state = CONFIGURED_STATE;                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f02   0e06     MOVLW     0x6                                                                                             
003f04   6ff7     MOVWF     0xf7,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   /* Modifiable Section */                                                 e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   #if defined(USB_USE_CDC)                // See autofiles\usbcfg.h        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f06   ec7b     CALL      0x36f6,0x0             CDCInitEP();                                                             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f08   f01b                                                                                                               
                                                   #endif                                                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   /* End modifiable section */                                             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                               }//end if(SetupPkt.bcfgValue == 0)                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f0a   0012     RETURN    0x0            }//end USBStdSetCfgHandler                                                       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdGetStatusHandler(void)                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Overview:        This routine handles the standard GET_STATUS request         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdGetStatusHandler(void)                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f0c   0104     MOVLB     0x4                CtrlTrfData._byte0 = 0;                         // Initialize content        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f0e   6b28     CLRF      0x28,0x1                                                                                        
003f10   0104     MOVLB     0x4                CtrlTrfData._byte1 = 0;                                                      e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f12   6b29     CLRF      0x29,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f14   0104     MOVLB     0x4                switch(SetupPkt.Recipient)                                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f16   5120     MOVF      0x20,0x0,0x1                                                                                    
003f18   0b1f     ANDLW     0x1f                                                                                            
003f1a   0a02     XORLW     0x2                                                                                             
003f1c   e014     BZ        0x3f46                                                                                          
003f1e   0a03     XORLW     0x3                                                                                             
003f20   e00e     BZ        0x3f3e                                                                                          
003f22   0a01     XORLW     0x1                                                                                             
003f24   e001     BZ        0x3f28                                                                                          
003f26   d034     BRA       0x3f90                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case RCPT_DEV:                                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f28   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f2a   0e01     MOVLW     0x1                                                                                             
003f2c   6ff0     MOVWF     0xf0,0x1                                                                                        
                                                       /*                                                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                        * _byte0: bit0: Self-Powered Status [0] Bus-Powered [1] Self-Powered e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                        *         bit1: RemoteWakeup        [0] Disabled    [1] Enabled     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                        */                                                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                       if(self_power == 1)                     // self_power defined in io_cfg.h e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f2e   0104     MOVLB     0x4                            CtrlTrfData._byte0|=0b000000001;    // Set bit0                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f30   8128     BSF       0x28,0x0,0x1                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f32   0101     MOVLB     0x1                        if(usb_stat.RemoteWakeup == 1)          // usb_stat defined in usbmmap.c e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f34   a1f8     BTFSS     0xf8,0x0,0x1                                                                                    
003f36   d002     BRA       0x3f3c                                                                                          
003f38   0104     MOVLB     0x4                            CtrlTrfData._byte0|=0b00000010;     // Set bit1                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f3a   8328     BSF       0x28,0x1,0x1                                                                                    
003f3c   d029     BRA       0x3f90                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case RCPT_INTF:                                                          e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f3e   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;     // No data to update         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f40   0e01     MOVLW     0x1                                                                                             
003f42   6ff0     MOVWF     0xf0,0x1                                                                                        
003f44   d025     BRA       0x3f90                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   case RCPT_EP:                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f46   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_USB9;                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f48   0e01     MOVLW     0x1                                                                                             
003f4a   6ff0     MOVWF     0xf0,0x1                                                                                        
                                                       /*                                                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                        * _byte0: bit0: Halt Status [0] Not Halted [1] Halted               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                        */                                                                  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f4c   0104     MOVLB     0x4                        pDst.bRam = (byte*)&ep0Bo+(SetupPkt.EPNum*8)+(SetupPkt.EPDir*4);     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f4e   5124     MOVF      0x24,0x0,0x1                                                                                    
003f50   0b0f     ANDLW     0xf                                                                                             
003f52   0d08     MULLW     0x8                                                                                             
003f54   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003f56   6a2b     CLRF      0x2b,0x0                                                                                        
003f58   0f00     ADDLW     0x0                                                                                             
003f5a   6e2a     MOVWF     0x2a,0x0                                                                                        
003f5c   0e04     MOVLW     0x4                                                                                             
003f5e   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
003f60   0104     MOVLB     0x4                                                                                             
003f62   5124     MOVF      0x24,0x0,0x1                                                                                    
003f64   0b80     ANDLW     0x80                                                                                            
003f66   e001     BZ        0x3f6a                                                                                          
003f68   0e01     MOVLW     0x1                                                                                             
003f6a   0d04     MULLW     0x4                                                                                             
003f6c   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003f6e   0101     MOVLB     0x1                                                                                             
003f70   242a     ADDWF     0x2a,0x0,0x0                                                                                    
003f72   6ff3     MOVWF     0xf3,0x1                                                                                        
003f74   0e00     MOVLW     0x0                                                                                             
003f76   202b     ADDWFC    0x2b,0x0,0x0                                                                                    
003f78   6ff4     MOVWF     0xf4,0x1                                                                                        
003f7a   c1f3     MOVFF     0x1f3,0xfe9                if(*pDst.bRam & _BSTALL)    // Use _BSTALL as a bit mask             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f7c   ffe9                                                                                                               
003f7e   c1f4     MOVFF     0x1f4,0xfea                                                                                     
003f80   ffea                                                                                                               
003f82   50ef     MOVF      0xef,0x0,0x0                                                                                    
003f84   0b04     ANDLW     0x4                                                                                             
003f86   e003     BZ        0x3f8e                                                                                          
003f88   0104     MOVLB     0x4                            CtrlTrfData._byte0=0x01;// Set bit0                              e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f8a   0e01     MOVLW     0x1                                                                                             
003f8c   6f28     MOVWF     0x28,0x1                                                                                        
003f8e   d000     BRA       0x3f90                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                               }//end switch                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f90   0101     MOVLB     0x1                if(ctrl_trf_session_owner == MUID_USB9)                                      e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f92   05f0     DECF      0xf0,0x0,0x1                                                                                    
003f94   e10a     BNZ       0x3faa                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f96   0101     MOVLB     0x1                    pSrc.bRam = (byte*)&CtrlTrfData;            // Set Source                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003f98   0e28     MOVLW     0x28                                                                                            
003f9a   6ff1     MOVWF     0xf1,0x1                                                                                        
003f9c   0e04     MOVLW     0x4                                                                                             
003f9e   6ff2     MOVWF     0xf2,0x1                                                                                        
003fa0   0101     MOVLB     0x1                    usb_stat.ctrl_trf_mem = _RAM;               // Set memory type           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fa2   93f8     BCF       0xf8,0x1,0x1                                                                                    
003fa4   0101     MOVLB     0x1                    LSB(wCount) = 2;                            // Set data count            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fa6   0e02     MOVLW     0x2                                                                                             
003fa8   6ff5     MOVWF     0xf5,0x1                                                                                        
                                               }//end if(...)                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003faa   0012     RETURN    0x0            }//end USBStdGetStatusHandler                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Function:        void USBStdFeatureReqHandler(void)                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Overview:        This routine handles the standard SET & CLEAR FEATURES       e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                  requests                                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           void USBStdFeatureReqHandler(void)                                               e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fac   0104     MOVLB     0x4                if((SetupPkt.bFeature == DEVICE_REMOTE_WAKEUP)&&                             e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fae   0522     DECF      0x22,0x0,0x1                                                                                    
003fb0   e111     BNZ       0x3fd4                (SetupPkt.Recipient == RCPT_DEV))                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fb2   0104     MOVLB     0x4                                                                                             
003fb4   5120     MOVF      0x20,0x0,0x1                                                                                    
003fb6   0b1f     ANDLW     0x1f                                                                                            
003fb8   0900     IORLW     0x0                                                                                             
003fba   e10c     BNZ       0x3fd4                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fbc   0101     MOVLB     0x1                    ctrl_trf_session_owner = MUID_USB9;                                      e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fbe   0e01     MOVLW     0x1                                                                                             
003fc0   6ff0     MOVWF     0xf0,0x1                                                                                        
003fc2   0e03     MOVLW     0x3                    if(SetupPkt.bRequest == SET_FEATURE)                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fc4   0104     MOVLB     0x4                                                                                             
003fc6   5d21     SUBWF     0x21,0x0,0x1                                                                                    
003fc8   e103     BNZ       0x3fd0                                                                                          
003fca   0101     MOVLB     0x1                        usb_stat.RemoteWakeup = 1;                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fcc   81f8     BSF       0xf8,0x0,0x1                                                                                    
003fce   d002     BRA       0x3fd4                 else                                                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fd0   0101     MOVLB     0x1                        usb_stat.RemoteWakeup = 0;                                           e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fd2   91f8     BCF       0xf8,0x0,0x1                                                                                    
                                               }//end if                                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fd4   0104     MOVLB     0x4                if((SetupPkt.bFeature == ENDPOINT_HALT)&&                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fd6   5122     MOVF      0x22,0x0,0x1                                                                                    
003fd8   e13e     BNZ       0x4056                (SetupPkt.Recipient == RCPT_EP)&&                                         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fda   0104     MOVLB     0x4                                                                                             
003fdc   5120     MOVF      0x20,0x0,0x1                                                                                    
003fde   0b1f     ANDLW     0x1f                                                                                            
003fe0   0802     SUBLW     0x2                                                                                             
003fe2   e139     BNZ       0x4056                                                                                          
003fe4   0104     MOVLB     0x4                   (SetupPkt.EPNum != 0))                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fe6   5124     MOVF      0x24,0x0,0x1                                                                                    
003fe8   0b0f     ANDLW     0xf                                                                                             
003fea   0900     IORLW     0x0                                                                                             
003fec   e034     BZ        0x4056                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003fee   0101     MOVLB     0x1                    ctrl_trf_session_owner = MUID_USB9;                                      e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ff0   0e01     MOVLW     0x1                                                                                             
003ff2   6ff0     MOVWF     0xf0,0x1                                                                                        
                                                   /* Must do address calculation here */                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ff4   0104     MOVLB     0x4                    pDst.bRam = (byte*)&ep0Bo+(SetupPkt.EPNum*8)+(SetupPkt.EPDir*4);         e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
003ff6   5124     MOVF      0x24,0x0,0x1                                                                                    
003ff8   0b0f     ANDLW     0xf                                                                                             
003ffa   0d08     MULLW     0x8                                                                                             
003ffc   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003ffe   6a2b     CLRF      0x2b,0x0                                                                                        
004000   0f00     ADDLW     0x0                                                                                             
004002   6e2a     MOVWF     0x2a,0x0                                                                                        
004004   0e04     MOVLW     0x4                                                                                             
004006   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
004008   0104     MOVLB     0x4                                                                                             
00400a   5124     MOVF      0x24,0x0,0x1                                                                                    
00400c   0b80     ANDLW     0x80                                                                                            
00400e   e001     BZ        0x4012                                                                                          
004010   0e01     MOVLW     0x1                                                                                             
004012   0d04     MULLW     0x4                                                                                             
004014   50f3     MOVF      0xf3,0x0,0x0                                                                                    
004016   0101     MOVLB     0x1                                                                                             
004018   242a     ADDWF     0x2a,0x0,0x0                                                                                    
00401a   6ff3     MOVWF     0xf3,0x1                                                                                        
00401c   0e00     MOVLW     0x0                                                                                             
00401e   202b     ADDWFC    0x2b,0x0,0x0                                                                                    
004020   6ff4     MOVWF     0xf4,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004022   0e03     MOVLW     0x3                    if(SetupPkt.bRequest == SET_FEATURE)                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004024   0104     MOVLB     0x4                                                                                             
004026   5d21     SUBWF     0x21,0x0,0x1                                                                                    
004028   e107     BNZ       0x4038                                                                                          
00402a   0e84     MOVLW     0x84                       *pDst.bRam = _USIE|_BSTALL;                                          e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
00402c   c1f3     MOVFF     0x1f3,0xfe9                                                                                     
00402e   ffe9                                                                                                               
004030   c1f4     MOVFF     0x1f4,0xfea                                                                                     
004032   ffea                                                                                                               
004034   6eef     MOVWF     0xef,0x0                                                                                        
004036   d00f     BRA       0x4056                 else                                                                     e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004038   0104     MOVLB     0x4                        if(SetupPkt.EPDir == 1) // IN                                        e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
00403a   af24     BTFSS     0x24,0x7,0x1                                                                                    
00403c   d006     BRA       0x404a                                                                                          
00403e   c1f3     MOVFF     0x1f3,0xfe9                    *pDst.bRam = _UCPU;                                              e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004040   ffe9                                                                                                               
004042   c1f4     MOVFF     0x1f4,0xfea                                                                                     
004044   ffea                                                                                                               
004046   6aef     CLRF      0xef,0x0                                                                                        
004048   d006     BRA       0x4056                     else                                                                 e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
00404a   0e88     MOVLW     0x88                           *pDst.bRam = _USIE|_DAT0|_DTSEN;                                 e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
00404c   c1f3     MOVFF     0x1f3,0xfe9                                                                                     
00404e   ffe9                                                                                                               
004050   c1f4     MOVFF     0x1f4,0xfea                                                                                     
004052   ffea                                                                                                               
004054   6eef     MOVWF     0xef,0x0                                                                                        
                                                   }//end if                                                                e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                               }//end if                                                                    e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
004056   0012     RETURN    0x0            }//end USBStdFeatureReqHandler                                                   e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /** EOF usb9.c ***************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usb9\usb9.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                Microchip USB C18 Firmware Version 1.0                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * FileName:        usbdsc.c                                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -usbdsc.c-                                                                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * This file contains the USB descriptor information. It is used                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * in conjunction with the usbdsc.h file. When a descriptor is added             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * or removed from the main configuration descriptor, i.e. CFG01,                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * the user must also change the descriptor structure defined in                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * the usbdsc.h file. The structure is used to calculate the                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * descriptor size, i.e. sizeof(CFG01).                                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * A typical configuration descriptor consists of:                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * At least one configuration descriptor (USB_CFG_DSC)                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * One or more interface descriptors (USB_INTF_DSC)                              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * One or more endpoint descriptors (USB_EP_DSC)                                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Naming Convention:                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * To resolve ambiguity, the naming convention are as followed:                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * - USB_CFG_DSC type should be named cdxx, where xx is the                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   configuration number. This number should match the actual                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   index value of this configuration.                                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * - USB_INTF_DSC type should be named i<yy>a<zz>, where yy is the               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   interface number and zz is the alternate interface number.                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * - USB_EP_DSC type should be named ep<##><d>_i<yy>a<zz>, where                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   ## is the endpoint number and d is the direction of transfer.               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   The interface name should also be listed as a suffix to identify            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *   which interface does the endpoint belong to.                                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Example:                                                                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * If a device has one configuration, two interfaces; interface 0                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * has two endpoints (in and out), and interface 1 has one endpoint(in).         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Then the CFG01 structure in the usbdsc.h should be:                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * #define CFG01 rom struct                            \                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * {   USB_CFG_DSC             cd01;                   \                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *     USB_INTF_DSC            i00a00;                 \                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *     USB_EP_DSC              ep01o_i00a00;           \                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *     USB_EP_DSC              ep01i_i00a00;           \                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *     USB_INTF_DSC            i01a00;                 \                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *     USB_EP_DSC              ep02i_i01a00;           \                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * } cfg01                                                                       e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Note the hierarchy of the descriptors above, it follows the USB               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * specification requirement. All endpoints belonging to an interface            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * should be listed immediately after that interface.                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Filling in the descriptor values in the usbdsc.c file:                        e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Most items should be self-explanatory, however, a few will be                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * explained for clarification.                                                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * [Configuration Descriptor(USB_CFG_DSC)]                                       e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The configuration attribute must always have the _DEFAULT                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * definition at the minimum. Additional options can be ORed                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * to the _DEFAULT attribute. Available options are _SELF and _RWU.              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * These definitions are defined in the usbdefs_std_dsc.h file. The              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * _SELF tells the USB host that this device is self-powered. The                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * _RWU tells the USB host that this device supports Remote Wakeup.              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * [Endpoint Descriptor(USB_EP_DSC)]                                             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Assume the following example:                                                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * sizeof(USB_EP_DSC),DSC_EP,_EP01_OUT,_BULK,64,0x00                             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The first two parameters are self-explanatory. They specify the               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * length of this endpoint descriptor (7) and the descriptor type.               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The next parameter identifies the endpoint, the definitions are               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * defined in usbdefs_std_dsc.h and has the following naming                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * convention:                                                                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * _EP<##>_<dir>                                                                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * where ## is the endpoint number and dir is the direction of                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * transfer. The dir has the value of either 'OUT' or 'IN'.                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The next parameter identifies the type of the endpoint. Available             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * options are _BULK, _INT, _ISO, and _CTRL. The _CTRL is not                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * typically used because the default control transfer endpoint is               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * not defined in the USB descriptors. When _ISO option is used,                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * addition options can be ORed to _ISO. Example:                                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * _ISO|_AD|_FE                                                                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * This describes the endpoint as an isochronous pipe with adaptive              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * and feedback attributes. See usbdefs_std_dsc.h and the USB                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * specification for details. The next parameter defines the size of             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * the endpoint. The last parameter in the polling interval.                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Adding a USB String                                                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * A string descriptor array should have the following format:                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * rom struct{byte bLength;byte bDscType;word string[size];}sdxxx={              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * sizeof(sdxxx),DSC_STR,<text>};                                                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The above structure provides a means for the C compiler to                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * calculate the length of string descriptor sdxxx, where xxx is the             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * index number. The first two bytes of the descriptor are descriptor            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * length and type. The rest <text> are string texts which must be               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * in the unicode format. The unicode format is achieved by declaring            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * each character as a word type. The whole text string is declared              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * as a word array with the number of characters equals to <size>.               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * <size> has to be manually counted and entered into the array                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * declaration. Let's study this through an example:                             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * if the string is "USB" , then the string descriptor should be:                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * (Using index 02)                                                              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * rom struct{byte bLength;byte bDscType;word string[3];}sd002={                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * sizeof(sd002),DSC_STR,'U','S','B'};                                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * A USB project may have multiple strings and the firmware supports             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * the management of multiple strings through a look-up table.                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The look-up table is defined as:                                              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * rom const unsigned char *rom USB_SD_Ptr[]={&sd000,&sd001,&sd002};             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The above declaration has 3 strings, sd000, sd001, and sd002.                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Strings can be removed or added. sd000 is a specialized string                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * descriptor. It defines the language code, usually this is                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * US English (0x0409). The index of the string must match the index             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * position of the USB_SD_Ptr array, &sd000 must be in position                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * USB_SD_Ptr[0], &sd001 must be in position USB_SD_Ptr[1] and so on.            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The look-up table USB_SD_Ptr is used by the get string handler                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * function in usb9.c.                                                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * -------------------------------------------------------------------           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The look-up table scheme also applies to the configuration                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * descriptor. A USB device may have multiple configuration                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * descriptors, i.e. CFG01, CFG02, etc. To add a configuration                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * descriptor, user must implement a structure similar to CFG01.                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * The next step is to add the configuration descriptor name, i.e.               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * cfg01, cfg02,.., to the look-up table USB_CD_Ptr. USB_CD_Ptr[0]               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * is a dummy place holder since configuration 0 is the un-configured            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * state according to the definition in the USB specification.                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Descriptor specific type definitions are defined in:                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * system\usb\usbdefs\usbdefs_std_dsc.h                                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * Configuration information is defined in:                                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            * autofiles\usbcfg.h                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /** I N C L U D E S *************************************************/           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           #include "system\typedefs.h"                                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           #include "system\usb\usb.h"                                                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /** C O N S T A N T S ************************************************/          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           #pragma romdata                                                                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /* Device Descriptor */                                                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom USB_DEV_DSC device_dsc=                                                      e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           {                                                                                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_DEV_DSC),    // Size of this descriptor in bytes                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               DSC_DEV,                // DEVICE descriptor type                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x0200,                 // USB Spec Release Number in BCD format             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               CDC_DEVICE,             // Class Code                                        e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x00,                   // Subclass code                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x00,                   // Protocol code                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               EP0_BUFF_SIZE,          // Max packet size for EP0, see usbcfg.h             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x04D8,                 // Vendor ID                                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x000A,                 // Product ID: CDC RS-232 Emulation Demo             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x0000,                 // Device release number in BCD format               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x01,                   // Manufacturer string index                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x02,                   // Product string index                              e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x00,                   // Device serial number string index                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0x01                    // Number of possible configurations                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           };                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /* Configuration 1 Descriptor */                                                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           CFG01=                                                                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           {                                                                                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* Configuration Descriptor */                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_CFG_DSC),    // Size of this descriptor in bytes                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               DSC_CFG,                // CONFIGURATION descriptor type                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(cfg01),          // Total length of data for this cfg                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               2,                      // Number of interfaces in this cfg                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               1,                      // Index value of this configuration                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Configuration string index                        e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               _DEFAULT,               // Attributes, see usbdefs_std_dsc.h                 e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               50,                     // Max power consumption (2X mA)                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* Interface Descriptor */                                                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_INTF_DSC),   // Size of this descriptor in bytes                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               DSC_INTF,               // INTERFACE descriptor type                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Interface Number                                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Alternate Setting Number                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               1,                      // Number of endpoints in this intf                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               COMM_INTF,              // Class code                                        e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               ABSTRACT_CONTROL_MODEL, // Subclass code                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               V25TER,                 // Protocol code                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Interface string index                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* CDC Class-Specific Descriptors */                                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_HEADER_FN_DSC),CS_INTERFACE,DSC_FN_HEADER,0x0110,             e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_ACM_FN_DSC),CS_INTERFACE,DSC_FN_ACM,0x02,                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_UNION_FN_DSC),CS_INTERFACE,DSC_FN_UNION,CDC_COMM_INTF_ID,CDC_DATA_INTF_ID, e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_CDC_CALL_MGT_FN_DSC),CS_INTERFACE,DSC_FN_CALL_MGT,0x00,CDC_DATA_INTF_ID, e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* Endpoint Descriptor */                                                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_EP_DSC),DSC_EP,_EP02_IN,_INT,CDC_INT_EP_SIZE,0x02,                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* Interface Descriptor */                                                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_INTF_DSC),   // Size of this descriptor in bytes                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               DSC_INTF,               // INTERFACE descriptor type                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               1,                      // Interface Number                                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Alternate Setting Number                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               2,                      // Number of endpoints in this intf                  e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               DATA_INTF,              // Class code                                        e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Subclass code                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               NO_PROTOCOL,            // Protocol code                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               0,                      // Interface string index                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               /* Endpoint Descriptors */                                                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_EP_DSC),DSC_EP,_EP03_OUT,_BULK,CDC_BULK_OUT_EP_SIZE,0x00,         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               sizeof(USB_EP_DSC),DSC_EP,_EP03_IN,_BULK,CDC_BULK_IN_EP_SIZE,0x00            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           };                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom struct{byte bLength;byte bDscType;word string[1];}sd000={                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           sizeof(sd000),DSC_STR,0x0409};                                                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom struct{byte bLength;byte bDscType;word string[25];}sd001={                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           sizeof(sd001),DSC_STR,                                                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           'M','i','c','r','o','c','h','i','p',' ',                                         e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           'T','e','c','h','n','o','l','o','g','y',' ','I','n','c','.'};                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom struct{byte bLength;byte bDscType;word string[25];}sd002={                   e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           sizeof(sd002),DSC_STR,                                                           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           'C','D','C',' ','R','S','-','2','3','2',' ',                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           'E','m','u','l','a','t','i','o','n',' ','D','e','m','o'};                        e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom const unsigned char *rom USB_CD_Ptr[]={&cfg01,&cfg01};                       e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom const unsigned char *rom USB_SD_Ptr[]={&sd000,&sd001,&sd002};                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           rom pFunc ClassReqHandler[1]=                                                    e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           {                                                                                e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                               &USBCheckCDCRequest                                                          e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           };                                                                               e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                                                                                                            e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /** EOF usbdsc.c ****************************************************/           e:\iro_svn\opensprints\FW\autofiles\usbdsc.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                Microchip USB C18 Firmware Version 1.0                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * FileName:        usbctrltrf.c                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Author               Date        Comment                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** I N C L U D E S **********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           #include <p18cxxx.h>                                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           #include "system\typedefs.h"                                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           #include "system\usb\usb.h"                                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** V A R I A B L E S ********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           byte ctrl_trf_state;                // Control Transfer State                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           byte ctrl_trf_session_owner;        // Current transfer session owner            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           POINTER pSrc;                       // Data source pointer                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           POINTER pDst;                       // Data destination pointer                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           WORD wCount;                        // Data counter                              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfSetupHandler(void);                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfOutHandler(void);                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfInHandler(void);                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** D E C L A R A T I O N S **************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlEPService(void)                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    USTAT is loaded with a valid endpoint address.               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        USBCtrlEPService checks for three transaction types that     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  it knows how to service and services them:                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  1. EP0 SETUP                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  2. EP0 OUT                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  3. EP0 IN                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  It ignores all other types (i.e. EP1, EP2, etc.)             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlEPService(void)                                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a00   506c     MOVF      0x6c,0x0,0x0       if(USTAT == EP00_OUT)                                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a02   e002     BZ        0x3a08                                                                                          
003a04   0e00     MOVLW     0x0                                                                                             
003a06   d001     BRA       0x3a0a                                                                                          
003a08   0e01     MOVLW     0x1                                                                                             
003a0a   0900     IORLW     0x0                                                                                             
003a0c   e00b     BZ        0x3a24                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a0e   0104     MOVLB     0x4                    if(ep0Bo.Stat.PID == SETUP_TOKEN)           // EP0 SETUP                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a10   5100     MOVF      0x0,0x0,0x1                                                                                     
003a12   0b3c     ANDLW     0x3c                                                                                            
003a14   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003a16   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003a18   080d     SUBLW     0xd                                                                                             
003a1a   e102     BNZ       0x3a20                                                                                          
003a1c   d80c     RCALL     0x3a36                     USBCtrlTrfSetupHandler();                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a1e   d001     BRA       0x3a22                 else                                        // EP0 OUT                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a20   d842     RCALL     0x3aa6                     USBCtrlTrfOutHandler();                                              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a22   d008     BRA       0x3a34             else if(USTAT == EP00_IN)                       // EP0 IN                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a24   506c     MOVF      0x6c,0x0,0x0                                                                                    
003a26   e002     BZ        0x3a2c                                                                                          
003a28   0e00     MOVLW     0x0                                                                                             
003a2a   d001     BRA       0x3a2e                                                                                          
003a2c   0e01     MOVLW     0x1                                                                                             
003a2e   0904     IORLW     0x4                                                                                             
003a30   e001     BZ        0x3a34                                                                                          
003a32   d84b     RCALL     0x3aca                 USBCtrlTrfInHandler();                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a34   0012     RETURN    0x0            }//end USBCtrlEPService                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfSetupHandler(void)                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    SetupPkt buffer is loaded with valid USB Setup Data          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine is a task dispatcher and has 3 stages.          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  1. It initializes the control transfer state machine.        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  2. It calls on each of the module that may know how to       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     service the Setup Request from the host.                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     Module Example: USB9, HID, CDC, MSD, ...                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     As new classes are added, ClassReqHandler table in        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     usbdsc.c should be updated to call all available          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     class handlers.                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  3. Once each of the modules has had a chance to check if     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     it is responsible for servicing the request, stage 3      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     then checks direction of the transfer to determine how    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     to prepare EP0 for the control transfer.                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     Refer to USBCtrlEPServiceComplete() for more details.     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            Microchip USB Firmware has three different states for        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  the control transfer state machine:                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  1. WAIT_SETUP                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  2. CTRL_TRF_TX                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  3. CTRL_TRF_RX                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  Refer to firmware manual to find out how one state           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  is transitioned to another.                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  A Control Transfer is composed of many USB transactions.     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  When transferring data over multiple transactions,           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  it is important to keep track of data source, data           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  destination, and data count. These three parameters are      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  stored in pSrc,pDst, and wCount. A flag is used to           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  note if the data source is from ROM or RAM.                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a36   cfd9     MOVFF     0xfd9,0xfe6    void USBCtrlTrfSetupHandler(void)                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a38   ffe6                                                                                                               
003a3a   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003a3c   ffd9                                                                                                               
003a3e   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               byte i;                                                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /* Stage 1 */                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a40   0101     MOVLB     0x1                ctrl_trf_state = WAIT_SETUP;                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a42   6bef     CLRF      0xef,0x1                                                                                        
003a44   0101     MOVLB     0x1                ctrl_trf_session_owner = MUID_NULL;     // Set owner to NULL                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a46   6bf0     CLRF      0xf0,0x1                                                                                        
003a48   0101     MOVLB     0x1                wCount._word = 0;                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a4a   6bf5     CLRF      0xf5,0x1                                                                                        
003a4c   6bf6     CLRF      0xf6,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /* Stage 2 */                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a4e   ec9d     CALL      0x3d3a,0x0         USBCheckStdRequest();                   // See system\usb9\usb9.c            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a50   f01e                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a52   6adf     CLRF      0xdf,0x0           for(i=0;i < (sizeof(ClassReqHandler)/sizeof(pFunc));i++)                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a54   50df     MOVF      0xdf,0x0,0x0                                                                                    
003a56   6e2a     MOVWF     0x2a,0x0                                                                                        
003a58   6a2b     CLRF      0x2b,0x0                                                                                        
003a5a   0e01     MOVLW     0x1                                                                                             
003a5c   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
003a5e   0e00     MOVLW     0x0                                                                                             
003a60   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
003a62   e21b     BC        0x3a9a                                                                                          
003a96   2adf     INCF      0xdf,0x1,0x0                                                                                    
003a98   d7dd     BRA       0x3a54                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a64   0101     MOVLB     0x1                    if(ctrl_trf_session_owner != MUID_NULL)break;                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a66   51f0     MOVF      0xf0,0x0,0x1                                                                                    
003a68   e001     BZ        0x3a6c                                                                                          
003a6a   d017     BRA       0x3a9a                                                                                          
003a6c   6af7     CLRF      0xf7,0x0               ClassReqHandler[i]();               // See autofiles\usbdsc.c            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a6e   34df     RLCF      0xdf,0x0,0x0                                                                                    
003a70   0bfe     ANDLW     0xfe                                                                                            
003a72   36f7     RLCF      0xf7,0x1,0x0                                                                                    
003a74   6ef6     MOVWF     0xf6,0x0                                                                                        
003a76   0eef     MOVLW     0xef                                                                                            
003a78   26f6     ADDWF     0xf6,0x1,0x0                                                                                    
003a7a   0e44     MOVLW     0x44                                                                                            
003a7c   22f7     ADDWFC    0xf7,0x1,0x0                                                                                    
003a7e   0009     TBLRDPOSTINC                                                                                              
003a80   cff5     MOVFF     0xff5,0x2a                                                                                      
003a82   f02a                                                                                                               
003a84   0008     TBLRD                                                                                                     
003a86   cff5     MOVFF     0xff5,0x2b                                                                                      
003a88   f02b                                                                                                               
003a8a   d004     BRA       0x3a94                                                                                          
003a8c   c02b     MOVFF     0x2b,0xffa                                                                                      
003a8e   fffa                                                                                                               
003a90   502a     MOVF      0x2a,0x0,0x0                                                                                    
003a92   6ef9     MOVWF     0xf9,0x0                                                                                        
003a94   dffb     RCALL     0x3a8c                                                                                          
                                               }//end while                                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /* Stage 3 */                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a9a   d8f0     RCALL     0x3c7c             USBCtrlEPServiceComplete();                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a9c   52e5     MOVF      0xe5,0x1,0x0   }//end USBCtrlTrfSetupHandler                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003a9e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003aa0   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003aa2   ffd9                                                                                                               
003aa4   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfOutHandler(void)                              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine handles an OUT transaction according to         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  which control transfer state is currently active.            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            Note that if the the control transfer was from               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  host to device, the session owner should be notified         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  at the end of each OUT transaction to service the            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  received data.                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfOutHandler(void)                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aa6   0e02     MOVLW     0x2                if(ctrl_trf_state == CTRL_TRF_RX)                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aa8   0101     MOVLB     0x1                                                                                             
003aaa   5def     SUBWF     0xef,0x0,0x1                                                                                    
003aac   e10c     BNZ       0x3ac6                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aae   d8a4     RCALL     0x3bf8                 USBCtrlTrfRxService();                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * Don't have to worry about overwriting _KEEP bit                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * because if _KEEP was set, TRNIF would not have been                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * generated in the first place.                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ab0   0104     MOVLB     0x4                    if(ep0Bo.Stat.DTS == 0)                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ab2   bd00     BTFSC     0x0,0x6,0x1                                                                                     
003ab4   d004     BRA       0x3abe                                                                                          
003ab6   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE|_DAT1|_DTSEN;                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ab8   0ec8     MOVLW     0xc8                                                                                            
003aba   6f00     MOVWF     0x0,0x1                                                                                         
003abc   d003     BRA       0x3ac4                 else                                                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003abe   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE|_DAT0|_DTSEN;                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ac0   0e88     MOVLW     0x88                                                                                            
003ac2   6f00     MOVWF     0x0,0x1                                                                                         
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ac4   d001     BRA       0x3ac8             else    // CTRL_TRF_TX                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ac6   d929     RCALL     0x3d1a                 USBPrepareForNextSetupTrf();                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ac8   0012     RETURN    0x0            }//end USBCtrlTrfOutHandler                                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfInHandler(void)                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine handles an IN transaction according to          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  which control transfer state is currently active.            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            A Set Address Request must not change the acutal address     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  of the device until the completion of the control            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transfer. The end of the control transfer for Set Address    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  Request is an IN transaction. Therefore it is necessary      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  to service this unique situation when the condition is       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  right. Macro mUSBCheckAdrPendingState is defined in          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  usb9.h and its function is to specifically service this      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  event.                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlTrfInHandler(void)                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aca   0e04     MOVLW     0x4                mUSBCheckAdrPendingState();         // Must check if in ADR_PENDING_STATE    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003acc   0101     MOVLB     0x1                                                                                             
003ace   5df7     SUBWF     0xf7,0x0,0x1                                                                                    
003ad0   e10c     BNZ       0x3aea                                                                                          
003ad2   c422     MOVFF     0x422,0xf6e                                                                                     
003ad4   ff6e                                                                                                               
003ad6   506e     MOVF      0x6e,0x0,0x0                                                                                    
003ad8   0800     SUBLW     0x0                                                                                             
003ada   e204     BC        0x3ae4                                                                                          
003adc   0101     MOVLB     0x1                                                                                             
003ade   0e05     MOVLW     0x5                                                                                             
003ae0   6ff7     MOVWF     0xf7,0x1                                                                                        
003ae2   d003     BRA       0x3aea                                                                                          
003ae4   0101     MOVLB     0x1                                                                                             
003ae6   0e03     MOVLW     0x3                                                                                             
003ae8   6ff7     MOVWF     0xf7,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aea   0101     MOVLB     0x1                if(ctrl_trf_state == CTRL_TRF_TX)                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003aec   05ef     DECF      0xef,0x0,0x1                                                                                    
003aee   e10c     BNZ       0x3b08                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003af0   d80d     RCALL     0x3b0c                 USBCtrlTrfTxService();                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003af2   0104     MOVLB     0x4                    if(ep0Bi.Stat.DTS == 0)                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003af4   bd04     BTFSC     0x4,0x6,0x1                                                                                     
003af6   d004     BRA       0x3b00                                                                                          
003af8   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT1|_DTSEN;                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003afa   0ec8     MOVLW     0xc8                                                                                            
003afc   6f04     MOVWF     0x4,0x1                                                                                         
003afe   d003     BRA       0x3b06                 else                                                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b00   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT0|_DTSEN;                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b02   0e88     MOVLW     0x88                                                                                            
003b04   6f04     MOVWF     0x4,0x1                                                                                         
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b06   d001     BRA       0x3b0a             else // CTRL_TRF_RX                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b08   d908     RCALL     0x3d1a                 USBPrepareForNextSetupTrf();                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b0a   0012     RETURN    0x0            }//end USBCtrlTrfInHandler                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfTxService(void)                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    pSrc, wCount, and usb_stat.ctrl_trf_mem are setup properly.  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine should be called from only two places.          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  One from USBCtrlEPServiceComplete() and one from             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  USBCtrlTrfInHandler(). It takes care of managing a           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transfer over multiple USB transactions.                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            This routine works with isochronous endpoint larger than     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  256 bytes and is shown here as an example of how to deal     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  with BC9 and BC8. In reality, a control endpoint can never   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  be larger than 64 bytes.                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b0c   cfd9     MOVFF     0xfd9,0xfe6    void USBCtrlTrfTxService(void)                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b0e   ffe6                                                                                                               
003b10   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003b12   ffd9                                                                                                               
003b14   0e02     MOVLW     0x2                                                                                             
003b16   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               WORD byte_to_send;                                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * First, have to figure out how many byte of data to send.                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b18   0101     MOVLB     0x1                if(wCount._word < EP0_BUFF_SIZE)                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b1a   0e08     MOVLW     0x8                                                                                             
003b1c   5df5     SUBWF     0xf5,0x0,0x1                                                                                    
003b1e   0e00     MOVLW     0x0                                                                                             
003b20   59f6     SUBWFB    0xf6,0x0,0x1                                                                                    
003b22   e205     BC        0x3b2e                                                                                          
003b24   c1f5     MOVFF     0x1f5,0xfde            byte_to_send._word = wCount._word;                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b26   ffde                                                                                                               
003b28   c1f6     MOVFF     0x1f6,0xfdd                                                                                     
003b2a   ffdd                                                                                                               
003b2c   d003     BRA       0x3b34             else                                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b2e   0e08     MOVLW     0x8                    byte_to_send._word = EP0_BUFF_SIZE;                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b30   6ede     MOVWF     0xde,0x0                                                                                        
003b32   6add     CLRF      0xdd,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Next, load the number of bytes to send to BC9..0 in buffer descriptor     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b34   0104     MOVLB     0x4                ep0Bi.Stat.BC9 = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b36   9304     BCF       0x4,0x1,0x1                                                                                     
003b38   0104     MOVLB     0x4                ep0Bi.Stat.BC8 = 0;                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b3a   9104     BCF       0x4,0x0,0x1                                                                                     
003b3c   0e01     MOVLW     0x1                ep0Bi.Stat._byte |= MSB(byte_to_send);                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b3e   50db     MOVF      0xdb,0x0,0x0                                                                                    
003b40   0104     MOVLB     0x4                                                                                             
003b42   1304     IORWF     0x4,0x1,0x1                                                                                     
003b44   cfdf     MOVFF     0xfdf,0x405        ep0Bi.Cnt = LSB(byte_to_send);                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b46   f405                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Subtract the number of bytes just about to be sent from the total.        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b48   0e00     MOVLW     0x0                wCount._word = wCount._word - byte_to_send._word;                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b4a   50db     MOVF      0xdb,0x0,0x0                                                                                    
003b4c   0101     MOVLB     0x1                                                                                             
003b4e   5ff5     SUBWF     0xf5,0x1,0x1                                                                                    
003b50   0e01     MOVLW     0x1                                                                                             
003b52   50db     MOVF      0xdb,0x0,0x0                                                                                    
003b54   0101     MOVLB     0x1                                                                                             
003b56   5bf6     SUBWFB    0xf6,0x1,0x1                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b58   0101     MOVLB     0x1                pDst.bRam = (byte*)&CtrlTrfData;        // Set destination pointer           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b5a   0e28     MOVLW     0x28                                                                                            
003b5c   6ff3     MOVWF     0xf3,0x1                                                                                        
003b5e   0e04     MOVLW     0x4                                                                                             
003b60   6ff4     MOVWF     0xf4,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b62   0101     MOVLB     0x1                if(usb_stat.ctrl_trf_mem == _ROM)       // Determine type of memory source   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b64   a3f8     BTFSS     0xf8,0x1,0x1                                                                                    
003b66   d020     BRA       0x3ba8                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b68   cfd9     MOVFF     0xfd9,0xfe9            while(byte_to_send._word)                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b6a   ffe9                                                                                                               
003b6c   cfda     MOVFF     0xfda,0xfea                                                                                     
003b6e   ffea                                                                                                               
003b70   50ee     MOVF      0xee,0x0,0x0                                                                                    
003b72   10ed     IORWF     0xed,0x0,0x0                                                                                    
003b74   e018     BZ        0x3ba6                                                                                          
003ba4   d7e1     BRA       0x3b68                                                                                          
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b76   c1f1     MOVFF     0x1f1,0xff6                *pDst.bRam = *pSrc.bRom;                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b78   fff6                                                                                                               
003b7a   c1f2     MOVFF     0x1f2,0xff7                                                                                     
003b7c   fff7                                                                                                               
003b7e   0008     TBLRD                                                                                                     
003b80   50f5     MOVF      0xf5,0x0,0x0                                                                                    
003b82   c1f3     MOVFF     0x1f3,0xfe9                                                                                     
003b84   ffe9                                                                                                               
003b86   c1f4     MOVFF     0x1f4,0xfea                                                                                     
003b88   ffea                                                                                                               
003b8a   6eef     MOVWF     0xef,0x0                                                                                        
003b8c   0101     MOVLB     0x1                        pDst.bRam++;                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b8e   2bf3     INCF      0xf3,0x1,0x1                                                                                    
003b90   0e00     MOVLW     0x0                                                                                             
003b92   23f4     ADDWFC    0xf4,0x1,0x1                                                                                    
003b94   0101     MOVLB     0x1                        pSrc.bRom++;                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b96   2bf1     INCF      0xf1,0x1,0x1                                                                                    
003b98   0e00     MOVLW     0x0                                                                                             
003b9a   23f2     ADDWFC    0xf2,0x1,0x1                                                                                    
003b9c   06df     DECF      0xdf,0x1,0x0               byte_to_send._word--;                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003b9e   0e01     MOVLW     0x1                                                                                             
003ba0   e201     BC        0x3ba4                                                                                          
003ba2   06db     DECF      0xdb,0x1,0x0                                                                                    
                                                   }//end while(byte_to_send._word)                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ba6   d01e     BRA       0x3be4             else // RAM                                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ba8   cfd9     MOVFF     0xfd9,0xfe9            while(byte_to_send._word)                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003baa   ffe9                                                                                                               
003bac   cfda     MOVFF     0xfda,0xfea                                                                                     
003bae   ffea                                                                                                               
003bb0   50ee     MOVF      0xee,0x0,0x0                                                                                    
003bb2   10ed     IORWF     0xed,0x0,0x0                                                                                    
003bb4   e017     BZ        0x3be4                                                                                          
003be2   d7e2     BRA       0x3ba8                                                                                          
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bb6   c1f1     MOVFF     0x1f1,0xfe9                *pDst.bRam = *pSrc.bRam;                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bb8   ffe9                                                                                                               
003bba   c1f2     MOVFF     0x1f2,0xfea                                                                                     
003bbc   ffea                                                                                                               
003bbe   50ef     MOVF      0xef,0x0,0x0                                                                                    
003bc0   c1f3     MOVFF     0x1f3,0xfe9                                                                                     
003bc2   ffe9                                                                                                               
003bc4   c1f4     MOVFF     0x1f4,0xfea                                                                                     
003bc6   ffea                                                                                                               
003bc8   6eef     MOVWF     0xef,0x0                                                                                        
003bca   0101     MOVLB     0x1                        pDst.bRam++;                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bcc   2bf3     INCF      0xf3,0x1,0x1                                                                                    
003bce   0e00     MOVLW     0x0                                                                                             
003bd0   23f4     ADDWFC    0xf4,0x1,0x1                                                                                    
003bd2   0101     MOVLB     0x1                        pSrc.bRam++;                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bd4   2bf1     INCF      0xf1,0x1,0x1                                                                                    
003bd6   0e00     MOVLW     0x0                                                                                             
003bd8   23f2     ADDWFC    0xf2,0x1,0x1                                                                                    
003bda   06df     DECF      0xdf,0x1,0x0               byte_to_send._word--;                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bdc   0e01     MOVLW     0x1                                                                                             
003bde   e201     BC        0x3be2                                                                                          
003be0   06db     DECF      0xdb,0x1,0x0                                                                                    
                                                   }//end while(byte_to_send._word)                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               }//end if(usb_stat.ctrl_trf_mem == _ROM)                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003be4   0e02     MOVLW     0x2            }//end USBCtrlTrfTxService                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003be6   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
003be8   e202     BC        0x3bee                                                                                          
003bea   6ae1     CLRF      0xe1,0x0                                                                                        
003bec   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003bee   6ee1     MOVWF     0xe1,0x0                                                                                        
003bf0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003bf2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003bf4   ffd9                                                                                                               
003bf6   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlTrfRxService(void)                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    pDst and wCount are setup properly.                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  pSrc is always &CtrlTrfData                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  usb_stat.ctrl_trf_mem is always _RAM.                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  wCount should be set to 0 at the start of each control       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transfer.                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        *** This routine is only partially complete. Check for       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  new version of the firmware.                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bf8   cfd9     MOVFF     0xfd9,0xfe6    void USBCtrlTrfRxService(void)                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003bfa   ffe6                                                                                                               
003bfc   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003bfe   ffd9                                                                                                               
003c00   0e02     MOVLW     0x2                                                                                             
003c02   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               WORD byte_to_read;                                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c04   0e03     MOVLW     0x3                MSB(byte_to_read) = 0x03 & ep0Bo.Stat._byte;    // Filter out last 2 bits    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c06   0104     MOVLB     0x4                                                                                             
003c08   1500     ANDWF     0x0,0x0,0x1                                                                                     
003c0a   6ee7     MOVWF     0xe7,0x0                                                                                        
003c0c   0e01     MOVLW     0x1                                                                                             
003c0e   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
003c10   ffdb                                                                                                               
003c12   c401     MOVFF     0x401,0xfdf        LSB(byte_to_read) = ep0Bo.Cnt;                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c14   ffdf                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Accumulate total number of bytes read                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c16   50de     MOVF      0xde,0x0,0x0       wCount._word = wCount._word + byte_to_read._word;                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c18   0101     MOVLB     0x1                                                                                             
003c1a   27f5     ADDWF     0xf5,0x1,0x1                                                                                    
003c1c   50dd     MOVF      0xdd,0x0,0x0                                                                                    
003c1e   0101     MOVLB     0x1                                                                                             
003c20   23f6     ADDWFC    0xf6,0x1,0x1                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c22   0101     MOVLB     0x1                pSrc.bRam = (byte*)&CtrlTrfData;                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c24   0e28     MOVLW     0x28                                                                                            
003c26   6ff1     MOVWF     0xf1,0x1                                                                                        
003c28   0e04     MOVLW     0x4                                                                                             
003c2a   6ff2     MOVWF     0xf2,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c2c   cfd9     MOVFF     0xfd9,0xfe9        while(byte_to_read._word)                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c2e   ffe9                                                                                                               
003c30   cfda     MOVFF     0xfda,0xfea                                                                                     
003c32   ffea                                                                                                               
003c34   50ee     MOVF      0xee,0x0,0x0                                                                                    
003c36   10ed     IORWF     0xed,0x0,0x0                                                                                    
003c38   e017     BZ        0x3c68                                                                                          
003c66   d7e2     BRA       0x3c2c                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c3a   c1f1     MOVFF     0x1f1,0xfe9            *pDst.bRam = *pSrc.bRam;                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c3c   ffe9                                                                                                               
003c3e   c1f2     MOVFF     0x1f2,0xfea                                                                                     
003c40   ffea                                                                                                               
003c42   50ef     MOVF      0xef,0x0,0x0                                                                                    
003c44   c1f3     MOVFF     0x1f3,0xfe9                                                                                     
003c46   ffe9                                                                                                               
003c48   c1f4     MOVFF     0x1f4,0xfea                                                                                     
003c4a   ffea                                                                                                               
003c4c   6eef     MOVWF     0xef,0x0                                                                                        
003c4e   0101     MOVLB     0x1                    pDst.bRam++;                                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c50   2bf3     INCF      0xf3,0x1,0x1                                                                                    
003c52   0e00     MOVLW     0x0                                                                                             
003c54   23f4     ADDWFC    0xf4,0x1,0x1                                                                                    
003c56   0101     MOVLB     0x1                    pSrc.bRam++;                                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c58   2bf1     INCF      0xf1,0x1,0x1                                                                                    
003c5a   0e00     MOVLW     0x0                                                                                             
003c5c   23f2     ADDWFC    0xf2,0x1,0x1                                                                                    
003c5e   06df     DECF      0xdf,0x1,0x0           byte_to_read._word--;                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c60   0e01     MOVLW     0x1                                                                                             
003c62   e201     BC        0x3c66                                                                                          
003c64   06db     DECF      0xdb,0x1,0x0                                                                                    
                                               }//end while(byte_to_read._word)                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c68   0e02     MOVLW     0x2            }//end USBCtrlTrfRxService                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c6a   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
003c6c   e202     BC        0x3c72                                                                                          
003c6e   6ae1     CLRF      0xe1,0x0                                                                                        
003c70   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003c72   6ee1     MOVWF     0xe1,0x0                                                                                        
003c74   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003c76   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003c78   ffd9                                                                                                               
003c7a   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBCtrlEPServiceComplete(void)                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        This routine wrap up the ramaining tasks in servicing        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  a Setup Request. Its main task is to set the endpoint        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  controls appropriately for a given situation. See code       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  below.                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  There are three main scenarios:                              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  a) There was no handler for the Request, in this case        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     a STALL should be sent out.                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  b) The host has requested a read control transfer,           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     endpoints are required to be setup in a specific way.     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  c) The host has requested a write control transfer, or       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     a control data stage is not required, endpoints are       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                     required to be setup in a specific way.                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  Packet processing is resumed by clearing PKTDIS bit.         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBCtrlEPServiceComplete(void)                                              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * PKTDIS bit is set when a Setup Transaction is received.                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                * Clear to resume packet processing.                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c7c   986d     BCF       0x6d,0x4,0x0       UCONbits.PKTDIS = 0;                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c7e   0101     MOVLB     0x1                if(ctrl_trf_session_owner == MUID_NULL)                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c80   51f0     MOVF      0xf0,0x0,0x1                                                                                    
003c82   e10f     BNZ       0x3ca2                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * If no one knows how to service this request then stall.               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    * Must also prepare EP0 to receive the next SETUP transaction.          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c84   0104     MOVLB     0x4                    ep0Bo.Cnt = EP0_BUFF_SIZE;                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c86   0e08     MOVLW     0x8                                                                                             
003c88   6f01     MOVWF     0x1,0x1                                                                                         
003c8a   0104     MOVLB     0x4                    ep0Bo.ADR = (byte*)&SetupPkt;                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c8c   0e20     MOVLW     0x20                                                                                            
003c8e   6f02     MOVWF     0x2,0x1                                                                                         
003c90   0e04     MOVLW     0x4                                                                                             
003c92   6f03     MOVWF     0x3,0x1                                                                                         
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c94   0104     MOVLB     0x4                    ep0Bo.Stat._byte = _USIE|_BSTALL;                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c96   0e84     MOVLW     0x84                                                                                            
003c98   6f00     MOVWF     0x0,0x1                                                                                         
003c9a   0104     MOVLB     0x4                    ep0Bi.Stat._byte = _USIE|_BSTALL;                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003c9c   0e84     MOVLW     0x84                                                                                            
003c9e   6f04     MOVWF     0x4,0x1                                                                                         
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ca0   d03b     BRA       0x3d18             else    // A module has claimed ownership of the control transfer session.   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ca2   0104     MOVLB     0x4                    if(SetupPkt.DataDir == DEV_TO_HOST)                                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ca4   af20     BTFSS     0x20,0x7,0x1                                                                                    
003ca6   d025     BRA       0x3cf2                                                                                          
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ca8   0101     MOVLB     0x1                        if(SetupPkt.wLength < wCount._word)                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003caa   51f5     MOVF      0xf5,0x0,0x1                                                                                    
003cac   0104     MOVLB     0x4                                                                                             
003cae   5d26     SUBWF     0x26,0x0,0x1                                                                                    
003cb0   0101     MOVLB     0x1                                                                                             
003cb2   51f6     MOVF      0xf6,0x0,0x1                                                                                    
003cb4   0104     MOVLB     0x4                                                                                             
003cb6   5927     SUBWFB    0x27,0x0,0x1                                                                                    
003cb8   e204     BC        0x3cc2                                                                                          
003cba   c426     MOVFF     0x426,0x1f5                    wCount._word = SetupPkt.wLength;                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cbc   f1f5                                                                                                               
003cbe   c427     MOVFF     0x427,0x1f6                                                                                     
003cc0   f1f6                                                                                                               
003cc2   df24     RCALL     0x3b0c                     USBCtrlTrfTxService();                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cc4   0101     MOVLB     0x1                        ctrl_trf_state = CTRL_TRF_TX;                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cc6   0e01     MOVLW     0x1                                                                                             
003cc8   6fef     MOVWF     0xef,0x1                                                                                        
                                                       /*                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Control Read:                                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * <SETUP[0]><IN[1]><IN[0]>...<OUT[1]> | <SETUP[0]>                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 1. Prepare OUT EP to respond to early termination                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * NOTE:                                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * If something went wrong during the control transfer,              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * the last status stage may not be sent by the host.                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * When this happens, two different things could happen              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * depending on the host.                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * a) The host could send out a RESET.                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * b) The host could send out a new SETUP transaction                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    without sending a RESET first.                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * To properly handle case (b), the OUT EP must be setup             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * to receive either a zero length OUT transaction, or a             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * new SETUP transaction.                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Since the SETUP transaction requires the DTS bit to be            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * DAT0 while the zero length OUT status requires the DTS            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * bit to be DAT1, the DTS bit check by the hardware should          e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * be disabled. This way the SIE could accept either of              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * the two transactions.                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Furthermore, the Cnt byte should be set to prepare for            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * the SETUP data (8-byte or more), and the buffer address           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * should be pointed to SetupPkt.                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cca   0104     MOVLB     0x4                        ep0Bo.Cnt = EP0_BUFF_SIZE;                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ccc   0e08     MOVLW     0x8                                                                                             
003cce   6f01     MOVWF     0x1,0x1                                                                                         
003cd0   0104     MOVLB     0x4                        ep0Bo.ADR = (byte*)&SetupPkt;                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cd2   0e20     MOVLW     0x20                                                                                            
003cd4   6f02     MOVWF     0x2,0x1                                                                                         
003cd6   0e04     MOVLW     0x4                                                                                             
003cd8   6f03     MOVWF     0x3,0x1                                                                                         
003cda   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE;           // Note: DTSEN is 0!             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cdc   0e80     MOVLW     0x80                                                                                            
003cde   6f00     MOVWF     0x0,0x1                                                                                         
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                       /*                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 2. Prepare IN EP to transfer data, Cnt should have                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    been initialized by responsible request owner.                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ce0   0104     MOVLB     0x4                        ep0Bi.ADR = (byte*)&CtrlTrfData;                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003ce2   0e28     MOVLW     0x28                                                                                            
003ce4   6f06     MOVWF     0x6,0x1                                                                                         
003ce6   0e04     MOVLW     0x4                                                                                             
003ce8   6f07     MOVWF     0x7,0x1                                                                                         
003cea   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT1|_DTSEN;                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cec   0ec8     MOVLW     0xc8                                                                                            
003cee   6f04     MOVWF     0x4,0x1                                                                                         
                                                   }                                                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cf0   d013     BRA       0x3d18                 else    // (SetupPkt.DataDir == HOST_TO_DEV)                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cf2   0101     MOVLB     0x1                        ctrl_trf_state = CTRL_TRF_RX;                                        e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cf4   0e02     MOVLW     0x2                                                                                             
003cf6   6fef     MOVWF     0xef,0x1                                                                                        
                                                       /*                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * Control Write:                                                    e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * <SETUP[0]><OUT[1]><OUT[0]>...<IN[1]> | <SETUP[0]>                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 1. Prepare IN EP to respond to early termination                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    This is the same as a Zero Length Packet Response              e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        *    for control transfer without a data stage                      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cf8   0104     MOVLB     0x4                        ep0Bi.Cnt = 0;                                                       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cfa   6b05     CLRF      0x5,0x1                                                                                         
003cfc   0104     MOVLB     0x4                        ep0Bi.Stat._byte = _USIE|_DAT1|_DTSEN;                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003cfe   0ec8     MOVLW     0xc8                                                                                            
003d00   6f04     MOVWF     0x4,0x1                                                                                         
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                       /*                                                                   e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        * 2. Prepare OUT EP to receive data.                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                        */                                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d02   0104     MOVLB     0x4                        ep0Bo.Cnt = EP0_BUFF_SIZE;                                           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d04   0e08     MOVLW     0x8                                                                                             
003d06   6f01     MOVWF     0x1,0x1                                                                                         
003d08   0104     MOVLB     0x4                        ep0Bo.ADR = (byte*)&CtrlTrfData;                                     e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d0a   0e28     MOVLW     0x28                                                                                            
003d0c   6f02     MOVWF     0x2,0x1                                                                                         
003d0e   0e04     MOVLW     0x4                                                                                             
003d10   6f03     MOVWF     0x3,0x1                                                                                         
003d12   0104     MOVLB     0x4                        ep0Bo.Stat._byte = _USIE|_DAT1|_DTSEN;                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d14   0ec8     MOVLW     0xc8                                                                                            
003d16   6f00     MOVWF     0x0,0x1                                                                                         
                                                   }//end if(SetupPkt.DataDir == DEV_TO_HOST)                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                               }//end if(ctrl_trf_session_owner == MUID_NULL)                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d18   0012     RETURN    0x0            }//end USBCtrlEPServiceComplete                                                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Function:        void USBPrepareForNextSetupTrf(void)                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Overview:        The routine forces EP0 OUT to be ready for a new Setup       e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                  transaction, and forces EP0 IN to be owned by CPU.           e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           void USBPrepareForNextSetupTrf(void)                                             e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d1a   0101     MOVLB     0x1                ctrl_trf_state = WAIT_SETUP;            // See usbctrltrf.h                  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d1c   6bef     CLRF      0xef,0x1                                                                                        
003d1e   0104     MOVLB     0x4                ep0Bo.Cnt = EP0_BUFF_SIZE;              // Defined in usbcfg.h               e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d20   0e08     MOVLW     0x8                                                                                             
003d22   6f01     MOVWF     0x1,0x1                                                                                         
003d24   0104     MOVLB     0x4                ep0Bo.ADR = (byte*)&SetupPkt;                                                e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d26   0e20     MOVLW     0x20                                                                                            
003d28   6f02     MOVWF     0x2,0x1                                                                                         
003d2a   0e04     MOVLW     0x4                                                                                             
003d2c   6f03     MOVWF     0x3,0x1                                                                                         
003d2e   0104     MOVLB     0x4                ep0Bo.Stat._byte = _USIE|_DAT0|_DTSEN;  // EP0 buff dsc init, see usbmmap.h  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d30   0e88     MOVLW     0x88                                                                                            
003d32   6f00     MOVWF     0x0,0x1                                                                                         
003d34   0104     MOVLB     0x4                ep0Bi.Stat._byte = _UCPU;               // EP0 IN buffer initialization      e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
003d36   6b04     CLRF      0x4,0x1                                                                                         
003d38   0012     RETURN    0x0            }//end USBPrepareForNextSetupTrf                                                 e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /** EOF usbctrltrf.c *********************************************************/  e:\iro_svn\opensprints\FW\system\usb\usbctrltrf\usbctrltrf.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            *                Microchip USB C18 Firmware Version 1.0                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\user\user.c
                                            * FileName:        user.c                                                       e:\iro_svn\opensprints\FW\user\user.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\user\user.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\user\user.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\user\user.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\user\user.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\user\user.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\user\user.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\user\user.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\user\user.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\user\user.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\user\user.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\user\user.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\user\user.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\user\user.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\user\user.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\user\user.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\user\user.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\user\user.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Author               Date        Comment                                      e:\iro_svn\opensprints\FW\user\user.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           e:\iro_svn\opensprints\FW\user\user.c
                                            * Rawin Rojvanit       11/19/04    Original.                                    e:\iro_svn\opensprints\FW\user\user.c
                                            * Brian Schmalz		03/15/06	Added user code to impliment                          e:\iro_svn\opensprints\FW\user\user.c
                                            *									firmware version D v1.0 for UBW                                       e:\iro_svn\opensprints\FW\user\user.c
                                            *									project. See www.greta.dhs.org/UBW                                    e:\iro_svn\opensprints\FW\user\user.c
                                            * Brian Schmalz		05/04/06	Starting version 1.1, which will                      e:\iro_svn\opensprints\FW\user\user.c
                                            * 									include several fixes. See website.                                  e:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					06/21/06	Starting v1.2 -                                              e:\iro_svn\opensprints\FW\user\user.c
                                            * - Fixed problem with I packets (from T command) filling up TX buffer          e:\iro_svn\opensprints\FW\user\user.c
                                            * 		and not letting any incoming commands be received. (strange)                e:\iro_svn\opensprints\FW\user\user.c
                                            * - Adding several commands - Analog inputs being the biggest set.              e:\iro_svn\opensprints\FW\user\user.c
                                            * - Also Byte read/Byte write (PEEK/POKE) anywhere in memory                    e:\iro_svn\opensprints\FW\user\user.c
                                            * - Individual pin I/O and direction                                            e:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					08/16/06	v1.3 - Fixed bug with USB startup                            e:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					09/09/06	v1.4 - Starting 1.4                                          e:\iro_svn\opensprints\FW\user\user.c
                                            * - Fixed Microchip bug with early silicon - UCONbits.PKTDIS = 0;               e:\iro_svn\opensprints\FW\user\user.c
                                            * - Adding BO and BC commands for parallel output to graphics pannels           e:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					12/06/06	v1.4 - More work on 1.4                                      e:\iro_svn\opensprints\FW\user\user.c
                                            * - Re-wrote all I/O buffering code for increased speed and functionality       e:\iro_svn\opensprints\FW\user\user.c
                                            * - Re-wrote error handling code                                                e:\iro_svn\opensprints\FW\user\user.c
                                            * - Added delays to BC/BO commands to help Corey                                e:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					01/06/07	v1.4 - Added RC command for servos                           e:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					03/07/07	v1.4.1 - Changed blink rate for SFE                          e:\iro_svn\opensprints\FW\user\user.c
                                            * BPS					05/24/07	v1.4.2 - Fixed RC command bug - it                           e:\iro_svn\opensprints\FW\user\user.c
                                            *									wouldn't shut off.                                                    e:\iro_svn\opensprints\FW\user\user.c
                                            * Luke Orland			2007/08/28	added some stuff                                     e:\iro_svn\opensprints\FW\user\user.c
                                            * Luke Orland			2007/09/29  added race test mode and timeclock                  e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /** I N C L U D E S **********************************************************/  e:\iro_svn\opensprints\FW\user\user.c
                                           #include <p18cxxx.h>                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           #include <usart.h>                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #include <stdio.h>                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #include <ctype.h>                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #include <delays.h>                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           #include "system\typedefs.h"                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           #include "system\usb\usb.h"                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           #include "io_cfg.h"             // I/O pin mapping                               e:\iro_svn\opensprints\FW\user\user.c
                                           #include "user\user.h"                                                           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /** D E F I N E S ********************************************************/      e:\iro_svn\opensprints\FW\user\user.c
                                           #define bitset(var,bitno) ((var) |= (1 << (bitno)))                              e:\iro_svn\opensprints\FW\user\user.c
                                           #define bitclr(var,bitno) ((var) &= ~(1 << (bitno)))                             e:\iro_svn\opensprints\FW\user\user.c
                                           #define bittst(var,bitno) (var& (1 << (bitno)))                                  e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // For the RC command, we define a little data structure that holds the          e:\iro_svn\opensprints\FW\user\user.c
                                           // values assoicated with a particular servo connection                          e:\iro_svn\opensprints\FW\user\user.c
                                           // It's port, pin, value (position) and state (INACTIVE, PRIMED or TIMING)       e:\iro_svn\opensprints\FW\user\user.c
                                           // Later on we make an array of these (19 elements long - 19 pins) to track      e:\iro_svn\opensprints\FW\user\user.c
                                           // the values of all of the servos.                                              e:\iro_svn\opensprints\FW\user\user.c
                                           typedef enum {                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           	 kOFF = 1                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	,kWAITING                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	,kPRIMED                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	,kTIMING                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           } tRC_state;                                                                     e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #define kRC_DATA_SIZE			24				// In structs, since there are 3 ports of 8 bits each e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #define kTX_BUF_SIZE 			64				// In bytes                                        e:\iro_svn\opensprints\FW\user\user.c
                                           #define kRX_BUF_SIZE			64				// In bytes                                         e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #define kUSART_TX_BUF_SIZE		64				// In bytes                                    e:\iro_svn\opensprints\FW\user\user.c
                                           #define kUSART_RX_BUF_SIZE		64				// In bytes                                    e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Enum for extract_num() function parameter                                     e:\iro_svn\opensprints\FW\user\user.c
                                           typedef enum {                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           	 kCHAR                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	,kUCHAR                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           	,kINT                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	,kUINT                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	,kASCII_CHAR                                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	,kUCASE_ASCII_CHAR                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           } tExtractType;                                                                  e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #define advance_RX_buf_out()						\                                              e:\iro_svn\opensprints\FW\user\user.c
                                           { 													\                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	g_RX_buf_out++;									\                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	if (kRX_BUF_SIZE == g_RX_buf_out)				\                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	{												\                                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           		g_RX_buf_out = 0;							\                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           	}												\                                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #define kISR_FIFO_A_DEPTH		3                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           #define kISR_FIFO_D_DEPTH		3                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           #define kPR2_RELOAD				250		// For 1ms TMR2 tick                                 e:\iro_svn\opensprints\FW\user\user.c
                                           #define kCR						0x0D                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #define kLF						0x0A                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // defines for the error_byte byte - each bit has a meaning                      e:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_TX_BUF_OVERRUN			2                                           e:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_RX_BUFFER_OVERRUN		3                                         e:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_MISSING_PARAMETER		4                                         e:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_PRINTED_ERROR			5			// We've already printed out an error    e:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT	6                                    e:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_EXTRA_CHARACTERS 		7                                         e:\iro_svn\opensprints\FW\user\user.c
                                           #define kERROR_BYTE_UNKNOWN_COMMAND			8			// Part of command parser, not error handler e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /** V A R I A B L E S ********************************************************/  e:\iro_svn\opensprints\FW\user\user.c
                                           #pragma udata access fast_vars                                                   e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Rate variable - how fast does interrupt fire to capture inputs?               e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned int time_between_updates;                                          e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned int ISR_D_RepeatRate;			// How many 1ms ticks between Digital updates e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_D_FIFO_in;				// In pointer                      e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_D_FIFO_out;				// Out pointer                    e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_D_FIFO_length;			// Current FIFO depth           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned int ISR_A_RepeatRate;			// How many 1ms ticks between Analog updates e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_A_FIFO_in;				// In pointer                      e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_A_FIFO_out;				// Out pointer                    e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char ISR_A_FIFO_length;			// Current FIFO depth           e:\iro_svn\opensprints\FW\user\user.c
                                           near volatile unsigned char AnalogEnable;				// Maximum ADC channel to convert   e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // This byte has each of its bits used as a seperate error flag                  e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned char error_byte;                                                   e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // RC servo variables                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // First the main array of data for each servo                                   e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned char g_RC_primed_ptr;                                              e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned char g_RC_next_ptr;                                                e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned char g_RC_timing_ptr;                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Used only in LowISR                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned int D_tick_counter;                                                e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned int A_tick_counter;                                                e:\iro_svn\opensprints\FW\user\user.c
                                           near unsigned char A_cur_channel;                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // ROM strings                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           const rom char st_OK[] = {"OK\r\n"};                                             e:\iro_svn\opensprints\FW\user\user.c
                                           const rom char st_LFCR[] = {"\r\n"};                                             e:\iro_svn\opensprints\FW\user\user.c
                                           const rom char st_version[] = {"opensprints FW 0.32 based on UBW FW D Version 1.4.2\r\n"}; e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #pragma udata ISR_buf=0x100                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           volatile unsigned int ISR_A_FIFO[12][kISR_FIFO_A_DEPTH];	// Stores the most recent analog conversions e:\iro_svn\opensprints\FW\user\user.c
                                           volatile unsigned char ISR_D_FIFO[3][kISR_FIFO_D_DEPTH];	// FIFO of actual data  e:\iro_svn\opensprints\FW\user\user.c
                                           volatile tRC_state g_RC_state[kRC_DATA_SIZE];				// Stores states for each pin for RC command e:\iro_svn\opensprints\FW\user\user.c
                                           volatile unsigned int g_RC_value[kRC_DATA_SIZE];			// Stores reload values for TMR0 e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #pragma udata com_buf=0x200                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           // USB Transmit buffer for packets (back to PC)                                  e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_TX_buf[kTX_BUF_SIZE];                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // USB Receiving buffer for commands as they come from PC                        e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_RX_buf[kRX_BUF_SIZE];                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // USART Receiving buffer for data coming from the USART                         e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_RX_buf[kUSART_RX_BUF_SIZE];                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // USART Transmit buffer for data going to the USART                             e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_TX_buf[kUSART_TX_BUF_SIZE];                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // These variables are in normal storage space                                   e:\iro_svn\opensprints\FW\user\user.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // These are used for the Fast Parallel Output routines                          e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_BO_init;                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_BO_strobe_mask;                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_BO_wait_mask;                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_BO_wait_delay;                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_BO_strobe_delay;                                                 e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Pointers to USB transmit (back to PC) buffer                                  e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_TX_buf_in;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_TX_buf_out;                                                      e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Pointers to USB receive (from PC) buffer                                      e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_RX_buf_in;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_RX_buf_out;                                                      e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // In and out pointers to our USART input buffer                                 e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_RX_buf_in;                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_RX_buf_out;                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // In and out pointers to our USART output buffer                                e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_TX_buf_in;                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned char g_USART_TX_buf_out;                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Normally set to TRUE. Able to set FALSE to not send "OK" message after packet recepetion e:\iro_svn\opensprints\FW\user\user.c
                                           BOOL	g_ack_enable;                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // sensor stuff                                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           BOOL is_racing = FALSE;                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           BOOL raceTestMode = FALSE;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int raceTimeMins;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int raceTimeCentisecs;                                                  e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  e:\iro_svn\opensprints\FW\user\user.c
                                           void BlinkUSBStatus (void);		// Handles blinking the USB status LED              e:\iro_svn\opensprints\FW\user\user.c
                                           BOOL SwitchIsPressed (void);	// Check to see if the user (PRG) switch is pressed e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_packet (void);		// Take a full packet and dispatch it to the right function e:\iro_svn\opensprints\FW\user\user.c
                                           signed short long extract_number (tExtractType type); // Pull a number paramter out of the packet e:\iro_svn\opensprints\FW\user\user.c
                                           signed char extract_digit (signed short long * acc, unsigned char digits); // Pull a character out of the packet e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_R_packet (void);		// R for resetting UBW                              e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_C_packet (void);		// C for configuring I/O and analog pins            e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CX_packet (void); 	// CX For configuring serial port                  e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_O_packet (void);		// O for output digital to pins                     e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_I_packet (void);		// I for input digital from pins                    e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_V_packet (void);		// V for printing version                           e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_A_packet (void);		// A for requesting analog inputs                   e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_T_packet (void);		// T for setting up timed I/O (digital or analog)   e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_PI_packet (void);	// PI for reading a single pin                      e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_PO_packet (void);	// PO for setting a single pin state                e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_PD_packet (void);	// PD for setting a pin's direction                 e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_MR_packet (void);	// MR for Memory Read                               e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_MW_packet (void); 	// MW for Memory Write                             e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_TX_packet (void);	// TX for transmitting serial                       e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RX_packet (void);	// RX for receiving serial                          e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RC_packet (void);	// RC is for outputing RC servo pulses              e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_BO_packet (void);	// BO sends data to fast parallel output            e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_BC_packet (void);	// BC configures fast parallel outputs              e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_BS_packet (void);	// BS sends binary data to fast parallel output     e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CU_packet (void);	// CU configures UBW (system wide parameters)       e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_SS_packet (void);	// SS Send SPI                                      e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RS_packet (void);	// RS Receive SPI                                   e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CS_packet (void);	// CS Configure SPI                                 e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_SI_packet (void);	// SI Send I2C                                      e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RI_packet (void);	// RI Receive I2C                                   e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CI_packet (void);	// CI Configure I2C                                 e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_GO_packet (void);	// start sending sensor messages to PC              e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_ST_packet (void);	// stop sending sensor messages to PC               e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_HW_packet (void);	// test mode. periodic sensor messages to PC        e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           void check_and_send_TX_data (void); // See if there is any data to send to PC, and if so, do it e:\iro_svn\opensprints\FW\user\user.c
                                           void print_ack (void);			// Print "OK" after packet is parsed                    e:\iro_svn\opensprints\FW\user\user.c
                                           int _user_putc (char c);		// Our UBS based stream character printer              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /** D E C L A R A T I O N S **************************************************/  e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #pragma interruptlow low_ISR                                                     e:\iro_svn\opensprints\FW\user\user.c
000844   cfd8     MOVFF     0xfd8,0xfe4    void low_ISR(void)                                                               e:\iro_svn\opensprints\FW\user\user.c
000846   ffe4                                                                                                               
000848   cfe0     MOVFF     0xfe0,0xfe4                                                                                     
00084a   ffe4                                                                                                               
00084c   6ee4     MOVWF     0xe4,0x0                                                                                        
00084e   cfda     MOVFF     0xfda,0xfe4                                                                                     
000850   ffe4                                                                                                               
000852   cfe2     MOVFF     0xfe2,0xfda                                                                                     
000854   ffda                                                                                                               
000856   cfe9     MOVFF     0xfe9,0xfe4                                                                                     
000858   ffe4                                                                                                               
00085a   cfea     MOVFF     0xfea,0xfe4                                                                                     
00085c   ffe4                                                                                                               
00085e   cff3     MOVFF     0xff3,0xfe4                                                                                     
000860   ffe4                                                                                                               
000862   cff4     MOVFF     0xff4,0xfe4                                                                                     
000864   ffe4                                                                                                               
000866   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	// Do we have a Timer2 interrupt? (1ms rate)                                    e:\iro_svn\opensprints\FW\user\user.c
000868   a29e     BTFSS     0x9e,0x1,0x0   	if (PIR1bits.TMR2IF)                                                            e:\iro_svn\opensprints\FW\user\user.c
00086a   d112     BRA       0xa90                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Clear the interrupt                                                         e:\iro_svn\opensprints\FW\user\user.c
00086c   929e     BCF       0x9e,0x1,0x0   		PIR1bits.TMR2IF = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// The most time critical part of this interrupt service routine is the        e:\iro_svn\opensprints\FW\user\user.c
                                           		// handling of the RC command's servo output pulses.                           e:\iro_svn\opensprints\FW\user\user.c
                                           		// Each time we get this interrupt, we look to see if the next pin on the      e:\iro_svn\opensprints\FW\user\user.c
                                           		// list has a value greater than zero. If so, we arm set it high and set       e:\iro_svn\opensprints\FW\user\user.c
                                           		// it's state to PRIMED. Then we advance the pointers to the next pair.        e:\iro_svn\opensprints\FW\user\user.c
00086e   0e03     MOVLW     0x3            		if (kPRIMED == g_RC_state[g_RC_primed_ptr])                                    e:\iro_svn\opensprints\FW\user\user.c
000870   6e38     MOVWF     0x38,0x0                                                                                        
000872   500e     MOVF      0xe,0x0,0x0                                                                                     
000874   6aea     CLRF      0xea,0x0                                                                                        
000876   0f51     ADDLW     0x51                                                                                            
000878   6ee9     MOVWF     0xe9,0x0                                                                                        
00087a   0e01     MOVLW     0x1                                                                                             
00087c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00087e   50ef     MOVF      0xef,0x0,0x0                                                                                    
000880   5c38     SUBWF     0x38,0x0,0x0                                                                                    
000882   e130     BNZ       0x8e4                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// This is easy, throw the value into the timer                               e:\iro_svn\opensprints\FW\user\user.c
000884   500e     MOVF      0xe,0x0,0x0    			TMR0H = g_RC_value[g_RC_primed_ptr] >> 8;                                     e:\iro_svn\opensprints\FW\user\user.c
000886   6ee9     MOVWF     0xe9,0x0                                                                                        
000888   6aea     CLRF      0xea,0x0                                                                                        
00088a   90d8     BCF       0xd8,0x0,0x0                                                                                    
00088c   36e9     RLCF      0xe9,0x1,0x0                                                                                    
00088e   36ea     RLCF      0xea,0x1,0x0                                                                                    
000890   0e69     MOVLW     0x69                                                                                            
000892   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000894   0e01     MOVLW     0x1                                                                                             
000896   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000898   cfee     MOVFF     0xfee,0x38                                                                                      
00089a   f038                                                                                                               
00089c   cfef     MOVFF     0xfef,0x39                                                                                      
00089e   f039                                                                                                               
0008a0   c039     MOVFF     0x39,0x38                                                                                       
0008a2   f038                                                                                                               
0008a4   6a39     CLRF      0x39,0x0                                                                                        
0008a6   5038     MOVF      0x38,0x0,0x0                                                                                    
0008a8   6ed7     MOVWF     0xd7,0x0                                                                                        
0008aa   500e     MOVF      0xe,0x0,0x0    			TMR0L = g_RC_value[g_RC_primed_ptr] & 0xFF;                                   e:\iro_svn\opensprints\FW\user\user.c
0008ac   6ee9     MOVWF     0xe9,0x0                                                                                        
0008ae   6aea     CLRF      0xea,0x0                                                                                        
0008b0   90d8     BCF       0xd8,0x0,0x0                                                                                    
0008b2   36e9     RLCF      0xe9,0x1,0x0                                                                                    
0008b4   36ea     RLCF      0xea,0x1,0x0                                                                                    
0008b6   0e69     MOVLW     0x69                                                                                            
0008b8   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
0008ba   0e01     MOVLW     0x1                                                                                             
0008bc   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0008be   cfee     MOVFF     0xfee,0x38                                                                                      
0008c0   f038                                                                                                               
0008c2   cfef     MOVFF     0xfef,0x39                                                                                      
0008c4   f039                                                                                                               
0008c6   5038     MOVF      0x38,0x0,0x0                                                                                    
0008c8   6ed6     MOVWF     0xd6,0x0                                                                                        
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           			// Then make sure the timer's interrupt enable is set                         e:\iro_svn\opensprints\FW\user\user.c
0008ca   8af2     BSF       0xf2,0x5,0x0   			INTCONbits.TMR0IE = 1;                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           			// And be sure to clear the flag too                                          e:\iro_svn\opensprints\FW\user\user.c
0008cc   94f2     BCF       0xf2,0x2,0x0   			INTCONbits.TMR0IF = 0;                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           			// Turn on Timer0                                                             e:\iro_svn\opensprints\FW\user\user.c
0008ce   8ed5     BSF       0xd5,0x7,0x0   			T0CONbits.TMR0ON = 1;                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           			// And set this pin's state to timing                                         e:\iro_svn\opensprints\FW\user\user.c
0008d0   500e     MOVF      0xe,0x0,0x0    			g_RC_state[g_RC_primed_ptr] = kTIMING;                                        e:\iro_svn\opensprints\FW\user\user.c
0008d2   6aea     CLRF      0xea,0x0                                                                                        
0008d4   0f51     ADDLW     0x51                                                                                            
0008d6   6ee9     MOVWF     0xe9,0x0                                                                                        
0008d8   0e01     MOVLW     0x1                                                                                             
0008da   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0008dc   0e04     MOVLW     0x4                                                                                             
0008de   6eef     MOVWF     0xef,0x0                                                                                        
                                           			                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Remember which pin is now timing                                           e:\iro_svn\opensprints\FW\user\user.c
0008e0   500e     MOVF      0xe,0x0,0x0    			g_RC_timing_ptr = g_RC_primed_ptr;                                            e:\iro_svn\opensprints\FW\user\user.c
0008e2   6e10     MOVWF     0x10,0x0                                                                                        
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0008e4   0e02     MOVLW     0x2            		if (kWAITING == g_RC_state[g_RC_next_ptr])                                     e:\iro_svn\opensprints\FW\user\user.c
0008e6   6e38     MOVWF     0x38,0x0                                                                                        
0008e8   500f     MOVF      0xf,0x0,0x0                                                                                     
0008ea   6aea     CLRF      0xea,0x0                                                                                        
0008ec   0f51     ADDLW     0x51                                                                                            
0008ee   6ee9     MOVWF     0xe9,0x0                                                                                        
0008f0   0e01     MOVLW     0x1                                                                                             
0008f2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0008f4   50ef     MOVF      0xef,0x0,0x0                                                                                    
0008f6   5c38     SUBWF     0x38,0x0,0x0                                                                                    
0008f8   e149     BNZ       0x98c                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// If the value is zero, then shut this pin off                               e:\iro_svn\opensprints\FW\user\user.c
                                           			// otherwise, prime it for sending a pulse                                    e:\iro_svn\opensprints\FW\user\user.c
0008fa   500f     MOVF      0xf,0x0,0x0    			if (0 == g_RC_value[g_RC_next_ptr])                                           e:\iro_svn\opensprints\FW\user\user.c
0008fc   6ee9     MOVWF     0xe9,0x0                                                                                        
0008fe   6aea     CLRF      0xea,0x0                                                                                        
000900   90d8     BCF       0xd8,0x0,0x0                                                                                    
000902   36e9     RLCF      0xe9,0x1,0x0                                                                                    
000904   36ea     RLCF      0xea,0x1,0x0                                                                                    
000906   0e69     MOVLW     0x69                                                                                            
000908   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
00090a   0e01     MOVLW     0x1                                                                                             
00090c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00090e   50ee     MOVF      0xee,0x0,0x0                                                                                    
000910   10ed     IORWF     0xed,0x0,0x0                                                                                    
000912   e109     BNZ       0x926                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000914   500f     MOVF      0xf,0x0,0x0    				g_RC_state[g_RC_next_ptr] = kOFF;                                            e:\iro_svn\opensprints\FW\user\user.c
000916   6aea     CLRF      0xea,0x0                                                                                        
000918   0f51     ADDLW     0x51                                                                                            
00091a   6ee9     MOVWF     0xe9,0x0                                                                                        
00091c   0e01     MOVLW     0x1                                                                                             
00091e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000920   0e01     MOVLW     0x1                                                                                             
000922   6eef     MOVWF     0xef,0x0                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
000924   d033     BRA       0x98c          			else                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// Set the bit high                                                          e:\iro_svn\opensprints\FW\user\user.c
000926   0e08     MOVLW     0x8            				if (g_RC_next_ptr < 8)                                                       e:\iro_svn\opensprints\FW\user\user.c
000928   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
00092a   e20c     BC        0x944                                                                                           
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
00092c   0e07     MOVLW     0x7            					bitset (LATA, g_RC_next_ptr & 0x7);                                         e:\iro_svn\opensprints\FW\user\user.c
00092e   140f     ANDWF     0xf,0x0,0x0                                                                                     
000930   6e38     MOVWF     0x38,0x0                                                                                        
000932   0e01     MOVLW     0x1                                                                                             
000934   5238     MOVF      0x38,0x1,0x0                                                                                    
000936   e004     BZ        0x940                                                                                           
000938   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
00093a   0bfe     ANDLW     0xfe                                                                                            
00093c   0638     DECF      0x38,0x1,0x0                                                                                    
00093e   e1fc     BNZ       0x938                                                                                           
000940   1289     IORWF     0x89,0x1,0x0                                                                                    
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
000942   d01a     BRA       0x978          				else if (g_RC_next_ptr < 16)                                                 e:\iro_svn\opensprints\FW\user\user.c
000944   0e10     MOVLW     0x10                                                                                            
000946   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
000948   e20c     BC        0x962                                                                                           
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
00094a   0e07     MOVLW     0x7            					bitset (LATB, g_RC_next_ptr & 0x7);                                         e:\iro_svn\opensprints\FW\user\user.c
00094c   140f     ANDWF     0xf,0x0,0x0                                                                                     
00094e   6e38     MOVWF     0x38,0x0                                                                                        
000950   0e01     MOVLW     0x1                                                                                             
000952   5238     MOVF      0x38,0x1,0x0                                                                                    
000954   e004     BZ        0x95e                                                                                           
000956   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000958   0bfe     ANDLW     0xfe                                                                                            
00095a   0638     DECF      0x38,0x1,0x0                                                                                    
00095c   e1fc     BNZ       0x956                                                                                           
00095e   128a     IORWF     0x8a,0x1,0x0                                                                                    
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
000960   d00b     BRA       0x978          				else                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
000962   0e07     MOVLW     0x7            					bitset (LATC, g_RC_next_ptr & 0x7);                                         e:\iro_svn\opensprints\FW\user\user.c
000964   140f     ANDWF     0xf,0x0,0x0                                                                                     
000966   6e38     MOVWF     0x38,0x0                                                                                        
000968   0e01     MOVLW     0x1                                                                                             
00096a   5238     MOVF      0x38,0x1,0x0                                                                                    
00096c   e004     BZ        0x976                                                                                           
00096e   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000970   0bfe     ANDLW     0xfe                                                                                            
000972   0638     DECF      0x38,0x1,0x0                                                                                    
000974   e1fc     BNZ       0x96e                                                                                           
000976   128b     IORWF     0x8b,0x1,0x0                                                                                    
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           				// Set the state to primed so we know to do next                             e:\iro_svn\opensprints\FW\user\user.c
000978   500f     MOVF      0xf,0x0,0x0    				g_RC_state[g_RC_next_ptr] = kPRIMED;                                         e:\iro_svn\opensprints\FW\user\user.c
00097a   6aea     CLRF      0xea,0x0                                                                                        
00097c   0f51     ADDLW     0x51                                                                                            
00097e   6ee9     MOVWF     0xe9,0x0                                                                                        
000980   0e01     MOVLW     0x1                                                                                             
000982   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000984   0e03     MOVLW     0x3                                                                                             
000986   6eef     MOVWF     0xef,0x0                                                                                        
                                           				// And remember which pin is primed                                          e:\iro_svn\opensprints\FW\user\user.c
000988   500f     MOVF      0xf,0x0,0x0    				g_RC_primed_ptr = g_RC_next_ptr;                                             e:\iro_svn\opensprints\FW\user\user.c
00098a   6e0e     MOVWF     0xe,0x0                                                                                         
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// And always advance the main pointer                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		// NOTE: we need to skip RA6, RA7, and RC3, RC4, and RC5                       e:\iro_svn\opensprints\FW\user\user.c
                                           		// (Because UBW doesn't bring those pins out to headers)                       e:\iro_svn\opensprints\FW\user\user.c
00098c   2a0f     INCF      0xf,0x1,0x0    		g_RC_next_ptr++;                                                               e:\iro_svn\opensprints\FW\user\user.c
00098e   0e06     MOVLW     0x6            		if (6 == g_RC_next_ptr)                                                        e:\iro_svn\opensprints\FW\user\user.c
000990   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
000992   e103     BNZ       0x99a                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000994   0e08     MOVLW     0x8            			g_RC_next_ptr = 8;                                                            e:\iro_svn\opensprints\FW\user\user.c
000996   6e0f     MOVWF     0xf,0x0                                                                                         
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000998   d00a     BRA       0x9ae          		else if (19 == g_RC_next_ptr)                                                  e:\iro_svn\opensprints\FW\user\user.c
00099a   0e13     MOVLW     0x13                                                                                            
00099c   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
00099e   e103     BNZ       0x9a6                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0009a0   0e16     MOVLW     0x16           			g_RC_next_ptr = 22;                                                           e:\iro_svn\opensprints\FW\user\user.c
0009a2   6e0f     MOVWF     0xf,0x0                                                                                         
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
0009a4   d004     BRA       0x9ae          		else if (kRC_DATA_SIZE == g_RC_next_ptr)                                       e:\iro_svn\opensprints\FW\user\user.c
0009a6   0e18     MOVLW     0x18                                                                                            
0009a8   5c0f     SUBWF     0xf,0x0,0x0                                                                                     
0009aa   e101     BNZ       0x9ae                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0009ac   6a0f     CLRF      0xf,0x0        			g_RC_next_ptr = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           				                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		// See if it's time to fire off an I packet                                    e:\iro_svn\opensprints\FW\user\user.c
0009ae   0e00     MOVLW     0x0            		if (ISR_D_RepeatRate > 0)                                                      e:\iro_svn\opensprints\FW\user\user.c
0009b0   80d8     BSF       0xd8,0x0,0x0                                                                                    
0009b2   5402     SUBFWB    0x2,0x0,0x0                                                                                     
0009b4   0e00     MOVLW     0x0                                                                                             
0009b6   5403     SUBFWB    0x3,0x0,0x0                                                                                     
0009b8   e23f     BC        0xa38                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0009ba   2a11     INCF      0x11,0x1,0x0   			D_tick_counter++;                                                             e:\iro_svn\opensprints\FW\user\user.c
0009bc   0e00     MOVLW     0x0                                                                                             
0009be   2212     ADDWFC    0x12,0x1,0x0                                                                                    
0009c0   5002     MOVF      0x2,0x0,0x0    			if (D_tick_counter >= ISR_D_RepeatRate)                                       e:\iro_svn\opensprints\FW\user\user.c
0009c2   5c11     SUBWF     0x11,0x0,0x0                                                                                    
0009c4   5003     MOVF      0x3,0x0,0x0                                                                                     
0009c6   5812     SUBWFB    0x12,0x0,0x0                                                                                    
0009c8   e337     BNC       0xa38                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
0009ca   0101     MOVLB     0x1            				raceTimeCentisecs++;                                                         e:\iro_svn\opensprints\FW\user\user.c
0009cc   2ba9     INCF      0xa9,0x1,0x1                                                                                    
0009ce   0e00     MOVLW     0x0                                                                                             
0009d0   23aa     ADDWFC    0xaa,0x1,0x1                                                                                    
0009d2   0101     MOVLB     0x1            				if (raceTimeCentisecs >= 6000)                                               e:\iro_svn\opensprints\FW\user\user.c
0009d4   0e70     MOVLW     0x70                                                                                            
0009d6   5da9     SUBWF     0xa9,0x0,0x1                                                                                    
0009d8   0e17     MOVLW     0x17                                                                                            
0009da   59aa     SUBWFB    0xaa,0x0,0x1                                                                                    
0009dc   e307     BNC       0x9ec                                                                                           
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
0009de   0101     MOVLB     0x1            					raceTimeCentisecs=0;                                                        e:\iro_svn\opensprints\FW\user\user.c
0009e0   6ba9     CLRF      0xa9,0x1                                                                                        
0009e2   6baa     CLRF      0xaa,0x1                                                                                        
0009e4   0101     MOVLB     0x1            					raceTimeMins++;                                                             e:\iro_svn\opensprints\FW\user\user.c
0009e6   2ba7     INCF      0xa7,0x1,0x1                                                                                    
0009e8   0e00     MOVLW     0x0                                                                                             
0009ea   23a8     ADDWFC    0xa8,0x1,0x1                                                                                    
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
0009ec   6a11     CLRF      0x11,0x0       				D_tick_counter = 0;                                                          e:\iro_svn\opensprints\FW\user\user.c
0009ee   6a12     CLRF      0x12,0x0                                                                                        
                                           				// Tell the main code to send an I packet                                    e:\iro_svn\opensprints\FW\user\user.c
0009f0   0e03     MOVLW     0x3            				if (ISR_D_FIFO_length < kISR_FIFO_D_DEPTH)                                   e:\iro_svn\opensprints\FW\user\user.c
0009f2   5c06     SUBWF     0x6,0x0,0x0                                                                                     
0009f4   e21f     BC        0xa34                                                                                           
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           					// And copy over our port values                                            e:\iro_svn\opensprints\FW\user\user.c
0009f6   5004     MOVF      0x4,0x0,0x0    					ISR_D_FIFO[0][ISR_D_FIFO_in] = PORTA;                                       e:\iro_svn\opensprints\FW\user\user.c
0009f8   6aea     CLRF      0xea,0x0                                                                                        
0009fa   0f48     ADDLW     0x48                                                                                            
0009fc   6ee9     MOVWF     0xe9,0x0                                                                                        
0009fe   0e01     MOVLW     0x1                                                                                             
000a00   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000a02   cf80     MOVFF     0xf80,0xfef                                                                                     
000a04   ffef                                                                                                               
000a06   5004     MOVF      0x4,0x0,0x0    					ISR_D_FIFO[1][ISR_D_FIFO_in] = PORTB;                                       e:\iro_svn\opensprints\FW\user\user.c
000a08   6aea     CLRF      0xea,0x0                                                                                        
000a0a   0f4b     ADDLW     0x4b                                                                                            
000a0c   6ee9     MOVWF     0xe9,0x0                                                                                        
000a0e   0e01     MOVLW     0x1                                                                                             
000a10   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000a12   cf81     MOVFF     0xf81,0xfef                                                                                     
000a14   ffef                                                                                                               
000a16   5004     MOVF      0x4,0x0,0x0    					ISR_D_FIFO[2][ISR_D_FIFO_in] = PORTC;                                       e:\iro_svn\opensprints\FW\user\user.c
000a18   6aea     CLRF      0xea,0x0                                                                                        
000a1a   0f4e     ADDLW     0x4e                                                                                            
000a1c   6ee9     MOVWF     0xe9,0x0                                                                                        
000a1e   0e01     MOVLW     0x1                                                                                             
000a20   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000a22   cf82     MOVFF     0xf82,0xfef                                                                                     
000a24   ffef                                                                                                               
000a26   2a04     INCF      0x4,0x1,0x0    					ISR_D_FIFO_in++;                                                            e:\iro_svn\opensprints\FW\user\user.c
000a28   0e03     MOVLW     0x3            					if (ISR_D_FIFO_in >= kISR_FIFO_D_DEPTH)                                     e:\iro_svn\opensprints\FW\user\user.c
000a2a   5c04     SUBWF     0x4,0x0,0x0                                                                                     
000a2c   e301     BNC       0xa30                                                                                           
                                           					{                                                                           e:\iro_svn\opensprints\FW\user\user.c
000a2e   6a04     CLRF      0x4,0x0        						ISR_D_FIFO_in = 0;	                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           					}                                                                           e:\iro_svn\opensprints\FW\user\user.c
000a30   2a06     INCF      0x6,0x1,0x0    					ISR_D_FIFO_length++;                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
000a32   d002     BRA       0xa38          				else                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           					// Stop the madness! Something is wrong, we're                              e:\iro_svn\opensprints\FW\user\user.c
                                           					// not getting our packets out. So kill the                                 e:\iro_svn\opensprints\FW\user\user.c
                                           					// timer.                                                                   e:\iro_svn\opensprints\FW\user\user.c
000a34   6a02     CLRF      0x2,0x0        					ISR_D_RepeatRate = 0;                                                       e:\iro_svn\opensprints\FW\user\user.c
000a36   6a03     CLRF      0x3,0x0                                                                                         
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			}	                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// See if it's time to fire off an A packet                                    e:\iro_svn\opensprints\FW\user\user.c
000a38   0e00     MOVLW     0x0            		if ((ISR_A_RepeatRate > 0) && (AnalogEnable > 0))                              e:\iro_svn\opensprints\FW\user\user.c
000a3a   80d8     BSF       0xd8,0x0,0x0                                                                                    
000a3c   5407     SUBFWB    0x7,0x0,0x0                                                                                     
000a3e   0e00     MOVLW     0x0                                                                                             
000a40   5408     SUBFWB    0x8,0x0,0x0                                                                                     
000a42   e219     BC        0xa76                                                                                           
000a44   500c     MOVF      0xc,0x0,0x0                                                                                     
000a46   0800     SUBLW     0x0                                                                                             
000a48   e216     BC        0xa76                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000a4a   2a13     INCF      0x13,0x1,0x0   			A_tick_counter++;                                                             e:\iro_svn\opensprints\FW\user\user.c
000a4c   0e00     MOVLW     0x0                                                                                             
000a4e   2214     ADDWFC    0x14,0x1,0x0                                                                                    
000a50   5007     MOVF      0x7,0x0,0x0    			if (A_tick_counter >= ISR_A_RepeatRate)                                       e:\iro_svn\opensprints\FW\user\user.c
000a52   5c13     SUBWF     0x13,0x0,0x0                                                                                    
000a54   5008     MOVF      0x8,0x0,0x0                                                                                     
000a56   5814     SUBWFB    0x14,0x0,0x0                                                                                    
000a58   e30e     BNC       0xa76                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000a5a   6a13     CLRF      0x13,0x0       				A_tick_counter = 0;                                                          e:\iro_svn\opensprints\FW\user\user.c
000a5c   6a14     CLRF      0x14,0x0                                                                                        
                                           				// Tell the main code to send an A packet                                    e:\iro_svn\opensprints\FW\user\user.c
000a5e   0e03     MOVLW     0x3            				if (ISR_A_FIFO_length < kISR_FIFO_A_DEPTH)                                   e:\iro_svn\opensprints\FW\user\user.c
000a60   5c0b     SUBWF     0xb,0x0,0x0                                                                                     
000a62   e207     BC        0xa72                                                                                           
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
000a64   2a09     INCF      0x9,0x1,0x0    					ISR_A_FIFO_in++;                                                            e:\iro_svn\opensprints\FW\user\user.c
000a66   0e03     MOVLW     0x3            					if (ISR_A_FIFO_in >= kISR_FIFO_A_DEPTH)                                     e:\iro_svn\opensprints\FW\user\user.c
000a68   5c09     SUBWF     0x9,0x0,0x0                                                                                     
000a6a   e301     BNC       0xa6e                                                                                           
                                           					{                                                                           e:\iro_svn\opensprints\FW\user\user.c
000a6c   6a09     CLRF      0x9,0x0        						ISR_A_FIFO_in = 0;	                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           					}                                                                           e:\iro_svn\opensprints\FW\user\user.c
000a6e   2a0b     INCF      0xb,0x1,0x0    					ISR_A_FIFO_length++;                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
000a70   d002     BRA       0xa76          				else                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           					// Stop the madness! Something is wrong, we're                              e:\iro_svn\opensprints\FW\user\user.c
                                           					// not getting our packets out. So kill the A                               e:\iro_svn\opensprints\FW\user\user.c
                                           					// packets.                                                                 e:\iro_svn\opensprints\FW\user\user.c
000a72   6a07     CLRF      0x7,0x0        					ISR_A_RepeatRate = 0;                                                       e:\iro_svn\opensprints\FW\user\user.c
000a74   6a08     CLRF      0x8,0x0                                                                                         
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			}	                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// See if it's time to start analog conversions                                e:\iro_svn\opensprints\FW\user\user.c
000a76   500c     MOVF      0xc,0x0,0x0    		if (AnalogEnable > 0)                                                          e:\iro_svn\opensprints\FW\user\user.c
000a78   0800     SUBLW     0x0                                                                                             
000a7a   e20a     BC        0xa90                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the channel to zero to start off with                                  e:\iro_svn\opensprints\FW\user\user.c
000a7c   6a15     CLRF      0x15,0x0       			A_cur_channel = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
000a7e   5015     MOVF      0x15,0x0,0x0   			ADCON0 = (A_cur_channel << 2) + 1;                                            e:\iro_svn\opensprints\FW\user\user.c
000a80   0d04     MULLW     0x4                                                                                             
000a82   28f3     INCF      0xf3,0x0,0x0                                                                                    
000a84   6ec2     MOVWF     0xc2,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// Clear the interrupt                                                        e:\iro_svn\opensprints\FW\user\user.c
000a86   9c9e     BCF       0x9e,0x6,0x0   			PIR1bits.ADIF = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// And make sure to always use low priority.                                  e:\iro_svn\opensprints\FW\user\user.c
000a88   9c9f     BCF       0x9f,0x6,0x0   			IPR1bits.ADIP = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the interrupt enable                                                   e:\iro_svn\opensprints\FW\user\user.c
000a8a   8c9d     BSF       0x9d,0x6,0x0   			PIE1bits.ADIE = 1;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// Make sure it's on!                                                         e:\iro_svn\opensprints\FW\user\user.c
000a8c   80c2     BSF       0xc2,0x0,0x0   			ADCON0bits.ADON = 1;                                                          e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// And tell the A/D to GO!                                                    e:\iro_svn\opensprints\FW\user\user.c
000a8e   82c2     BSF       0xc2,0x1,0x0   			ADCON0bits.GO_DONE = 1;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Do we have an analog interrupt?                                              e:\iro_svn\opensprints\FW\user\user.c
000a90   ac9e     BTFSS     0x9e,0x6,0x0   	if (PIR1bits.ADIF)                                                              e:\iro_svn\opensprints\FW\user\user.c
000a92   d02d     BRA       0xaee                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Clear the interrupt                                                         e:\iro_svn\opensprints\FW\user\user.c
000a94   9c9e     BCF       0x9e,0x6,0x0   		PIR1bits.ADIF = 0;                                                             e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Read out the value that we just converted, and store it.                    e:\iro_svn\opensprints\FW\user\user.c
000aac   5015     MOVF      0x15,0x0,0x0   		ISR_A_FIFO[A_cur_channel][ISR_A_FIFO_in] =                                     e:\iro_svn\opensprints\FW\user\user.c
000aae   0d06     MULLW     0x6                                                                                             
000ab0   cff3     MOVFF     0xff3,0x38                                                                                      
000ab2   f038                                                                                                               
000ab4   cff4     MOVFF     0xff4,0x39                                                                                      
000ab6   f039                                                                                                               
000ab8   0e00     MOVLW     0x0                                                                                             
000aba   2638     ADDWF     0x38,0x1,0x0                                                                                    
000abc   0e01     MOVLW     0x1                                                                                             
000abe   2239     ADDWFC    0x39,0x1,0x0                                                                                    
000ac0   5009     MOVF      0x9,0x0,0x0                                                                                     
000ac2   0d02     MULLW     0x2                                                                                             
000ac4   5038     MOVF      0x38,0x0,0x0                                                                                    
000ac6   24f3     ADDWF     0xf3,0x0,0x0                                                                                    
000ac8   6ee9     MOVWF     0xe9,0x0                                                                                        
000aca   5039     MOVF      0x39,0x0,0x0                                                                                    
000acc   20f4     ADDWFC    0xf4,0x0,0x0                                                                                    
000ace   6eea     MOVWF     0xea,0x0                                                                                        
000aa0   50c3     MOVF      0xc3,0x0,0x0   			(unsigned int)ADRESL                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           			|                                                                             e:\iro_svn\opensprints\FW\user\user.c
000a96   50c4     MOVF      0xc4,0x0,0x0   			((unsigned int)ADRESH << 8);                                                  e:\iro_svn\opensprints\FW\user\user.c
000a98   6e3c     MOVWF     0x3c,0x0                                                                                        
000a9a   c03c     MOVFF     0x3c,0x3d                                                                                       
000a9c   f03d                                                                                                               
000a9e   6a3c     CLRF      0x3c,0x0                                                                                        
000aa2   0100     MOVLB     0x0                                                                                             
000aa4   103c     IORWF     0x3c,0x0,0x0                                                                                    
000aa6   6e3a     MOVWF     0x3a,0x0                                                                                        
000aa8   c03d     MOVFF     0x3d,0x3b                                                                                       
000aaa   f03b                                                                                                               
000ad0   c03a     MOVFF     0x3a,0xfee                                                                                      
000ad2   ffee                                                                                                               
000ad4   c03b     MOVFF     0x3b,0xfed                                                                                      
000ad6   ffed                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Incriment the channel and write the new one in                              e:\iro_svn\opensprints\FW\user\user.c
000ad8   2a15     INCF      0x15,0x1,0x0   		A_cur_channel++;                                                               e:\iro_svn\opensprints\FW\user\user.c
000ada   500c     MOVF      0xc,0x0,0x0    		if (A_cur_channel >= AnalogEnable)                                             e:\iro_svn\opensprints\FW\user\user.c
000adc   5c15     SUBWF     0x15,0x0,0x0                                                                                    
000ade   e302     BNC       0xae4                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// We're done, so just sit and wait                                           e:\iro_svn\opensprints\FW\user\user.c
                                           			// Turn off our interrupts though.                                            e:\iro_svn\opensprints\FW\user\user.c
000ae0   9c9d     BCF       0x9d,0x6,0x0   			PIE1bits.ADIE = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000ae2   d005     BRA       0xaee          		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Update the channel number                                                  e:\iro_svn\opensprints\FW\user\user.c
000ae4   5015     MOVF      0x15,0x0,0x0   			ADCON0 = (A_cur_channel << 2) + 1;                                            e:\iro_svn\opensprints\FW\user\user.c
000ae6   0d04     MULLW     0x4                                                                                             
000ae8   28f3     INCF      0xf3,0x0,0x0                                                                                    
000aea   6ec2     MOVWF     0xc2,0x0                                                                                        
                                           			// And start the next conversion                                              e:\iro_svn\opensprints\FW\user\user.c
000aec   82c2     BSF       0xc2,0x1,0x0   			ADCON0bits.GO_DONE = 1;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Do we have a TMR0 interrupt? (RC command)                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	// TMR0 is in 16 bit mode, and counts up to FFFF and overflows, generating      e:\iro_svn\opensprints\FW\user\user.c
                                           	// this interrupt.                                                              e:\iro_svn\opensprints\FW\user\user.c
000aee   a4f2     BTFSS     0xf2,0x2,0x0   	if (INTCONbits.TMR0IF)                                                          e:\iro_svn\opensprints\FW\user\user.c
000af0   d042     BRA       0xb76                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Turn off Timer0                                                             e:\iro_svn\opensprints\FW\user\user.c
000af2   9ed5     BCF       0xd5,0x7,0x0   		T0CONbits.TMR0ON = 0;                                                          e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Clear the interrupt                                                         e:\iro_svn\opensprints\FW\user\user.c
000af4   94f2     BCF       0xf2,0x2,0x0   		INTCONbits.TMR0IF = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// And disable it                                                              e:\iro_svn\opensprints\FW\user\user.c
000af6   9af2     BCF       0xf2,0x5,0x0   		INTCONbits.TMR0IE = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Only do our stuff if the pin is in the proper state                         e:\iro_svn\opensprints\FW\user\user.c
000af8   0e04     MOVLW     0x4            		if (kTIMING == g_RC_state[g_RC_timing_ptr])                                    e:\iro_svn\opensprints\FW\user\user.c
000afa   6e38     MOVWF     0x38,0x0                                                                                        
000afc   5010     MOVF      0x10,0x0,0x0                                                                                    
000afe   6aea     CLRF      0xea,0x0                                                                                        
000b00   0f51     ADDLW     0x51                                                                                            
000b02   6ee9     MOVWF     0xe9,0x0                                                                                        
000b04   0e01     MOVLW     0x1                                                                                             
000b06   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000b08   50ef     MOVF      0xef,0x0,0x0                                                                                    
000b0a   5c38     SUBWF     0x38,0x0,0x0                                                                                    
000b0c   e134     BNZ       0xb76                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// All we need to do is clear the pin and change its state to kWAITING        e:\iro_svn\opensprints\FW\user\user.c
000b0e   0e08     MOVLW     0x8            			if (g_RC_timing_ptr < 8)                                                      e:\iro_svn\opensprints\FW\user\user.c
000b10   5c10     SUBWF     0x10,0x0,0x0                                                                                    
000b12   e20d     BC        0xb2e                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000b14   0e07     MOVLW     0x7            				bitclr (LATA, g_RC_timing_ptr & 0x7);                                        e:\iro_svn\opensprints\FW\user\user.c
000b16   1410     ANDWF     0x10,0x0,0x0                                                                                    
000b18   6e38     MOVWF     0x38,0x0                                                                                        
000b1a   0e01     MOVLW     0x1                                                                                             
000b1c   5238     MOVF      0x38,0x1,0x0                                                                                    
000b1e   e004     BZ        0xb28                                                                                           
000b20   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000b22   0bfe     ANDLW     0xfe                                                                                            
000b24   0638     DECF      0x38,0x1,0x0                                                                                    
000b26   e1fc     BNZ       0xb20                                                                                           
000b28   1ce8     COMF      0xe8,0x0,0x0                                                                                    
000b2a   1689     ANDWF     0x89,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
000b2c   d01c     BRA       0xb66          			else if (g_RC_timing_ptr < 16)                                                e:\iro_svn\opensprints\FW\user\user.c
000b2e   0e10     MOVLW     0x10                                                                                            
000b30   5c10     SUBWF     0x10,0x0,0x0                                                                                    
000b32   e20d     BC        0xb4e                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000b34   0e07     MOVLW     0x7            				bitclr (LATB, g_RC_timing_ptr & 0x7);                                        e:\iro_svn\opensprints\FW\user\user.c
000b36   1410     ANDWF     0x10,0x0,0x0                                                                                    
000b38   6e38     MOVWF     0x38,0x0                                                                                        
000b3a   0e01     MOVLW     0x1                                                                                             
000b3c   5238     MOVF      0x38,0x1,0x0                                                                                    
000b3e   e004     BZ        0xb48                                                                                           
000b40   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000b42   0bfe     ANDLW     0xfe                                                                                            
000b44   0638     DECF      0x38,0x1,0x0                                                                                    
000b46   e1fc     BNZ       0xb40                                                                                           
000b48   1ce8     COMF      0xe8,0x0,0x0                                                                                    
000b4a   168a     ANDWF     0x8a,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
000b4c   d00c     BRA       0xb66          			else                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000b4e   0e07     MOVLW     0x7            				bitclr (LATC, g_RC_timing_ptr & 0x7);                                        e:\iro_svn\opensprints\FW\user\user.c
000b50   1410     ANDWF     0x10,0x0,0x0                                                                                    
000b52   6e38     MOVWF     0x38,0x0                                                                                        
000b54   0e01     MOVLW     0x1                                                                                             
000b56   5238     MOVF      0x38,0x1,0x0                                                                                    
000b58   e004     BZ        0xb62                                                                                           
000b5a   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
000b5c   0bfe     ANDLW     0xfe                                                                                            
000b5e   0638     DECF      0x38,0x1,0x0                                                                                    
000b60   e1fc     BNZ       0xb5a                                                                                           
000b62   1ce8     COMF      0xe8,0x0,0x0                                                                                    
000b64   168b     ANDWF     0x8b,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
000b66   5010     MOVF      0x10,0x0,0x0   			g_RC_state[g_RC_timing_ptr] = kWAITING;		                                     e:\iro_svn\opensprints\FW\user\user.c
000b68   6aea     CLRF      0xea,0x0                                                                                        
000b6a   0f51     ADDLW     0x51                                                                                            
000b6c   6ee9     MOVWF     0xe9,0x0                                                                                        
000b6e   0e01     MOVLW     0x1                                                                                             
000b70   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000b72   0e02     MOVLW     0x2                                                                                             
000b74   6eef     MOVWF     0xef,0x0                                                                                        
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
000b76   52e5     MOVF      0xe5,0x1,0x0   }                                                                                e:\iro_svn\opensprints\FW\user\user.c
000b78   cfe5     MOVFF     0xfe5,0xff4                                                                                     
000b7a   fff4                                                                                                               
000b7c   cfe5     MOVFF     0xfe5,0xff3                                                                                     
000b7e   fff3                                                                                                               
000b80   cfe5     MOVFF     0xfe5,0xfea                                                                                     
000b82   ffea                                                                                                               
000b84   cfe5     MOVFF     0xfe5,0xfe9                                                                                     
000b86   ffe9                                                                                                               
000b88   cfe5     MOVFF     0xfe5,0xfda                                                                                     
000b8a   ffda                                                                                                               
000b8c   50e5     MOVF      0xe5,0x0,0x0                                                                                    
000b8e   cfe5     MOVFF     0xfe5,0xfe0                                                                                     
000b90   ffe0                                                                                                               
000b92   cfe5     MOVFF     0xfe5,0xfd8                                                                                     
000b94   ffd8                                                                                                               
000b96   0010     RETFIE    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           #pragma interrupt high_ISR                                                       e:\iro_svn\opensprints\FW\user\user.c
000b98   cfda     MOVFF     0xfda,0xfe4    void high_ISR(void)                                                              e:\iro_svn\opensprints\FW\user\user.c
000b9a   ffe4                                                                                                               
000b9c   cfe2     MOVFF     0xfe2,0xfda                                                                                     
000b9e   ffda                                                                                                               
000ba0   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
000ba2   52e5     MOVF      0xe5,0x1,0x0   }                                                                                e:\iro_svn\opensprints\FW\user\user.c
000ba4   cfe5     MOVFF     0xfe5,0xfda                                                                                     
000ba6   ffda                                                                                                               
000ba8   0011     RETFIE    0x1                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
000baa   cfd9     MOVFF     0xfd9,0xfe6    void UserInit(void)                                                              e:\iro_svn\opensprints\FW\user\user.c
000bac   ffe6                                                                                                               
000bae   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000bb0   ffd9                                                                                                               
000bb2   0e02     MOVLW     0x2                                                                                             
000bb4   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	char i, j;                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Make all of 3 digital inputs                                                 e:\iro_svn\opensprints\FW\user\user.c
000bb6   6a89     CLRF      0x89,0x0       	LATA = 0x00;                                                                    e:\iro_svn\opensprints\FW\user\user.c
000bb8   6892     SETF      0x92,0x0       	TRISA = 0xFF;                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           	// Turn all analog inputs into digital inputs                                   e:\iro_svn\opensprints\FW\user\user.c
000bba   0e0f     MOVLW     0xf            	ADCON1 = 0x0F;                                                                  e:\iro_svn\opensprints\FW\user\user.c
000bbc   6ec1     MOVWF     0xc1,0x0                                                                                        
                                           	// Turn off the ADC                                                             e:\iro_svn\opensprints\FW\user\user.c
000bbe   90c2     BCF       0xc2,0x0,0x0   	ADCON0bits.ADON = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Turn off our own idea of how many analog channels to convert                 e:\iro_svn\opensprints\FW\user\user.c
000bc0   6a0c     CLRF      0xc,0x0        	AnalogEnable = 0;                                                               e:\iro_svn\opensprints\FW\user\user.c
000bc2   0e07     MOVLW     0x7            	CMCON = 0x07;	// Comparators as digital inputs                                  e:\iro_svn\opensprints\FW\user\user.c
000bc4   6eb4     MOVWF     0xb4,0x0                                                                                        
                                           	// Make all of PORTB inputs                                                     e:\iro_svn\opensprints\FW\user\user.c
000bc6   6a8a     CLRF      0x8a,0x0       	LATB = 0x00;                                                                    e:\iro_svn\opensprints\FW\user\user.c
000bc8   6893     SETF      0x93,0x0       	TRISB = 0xFF;                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           	// Make all of PORTC inputs                                                     e:\iro_svn\opensprints\FW\user\user.c
000bca   6a8b     CLRF      0x8b,0x0       	LATC = 0x00;                                                                    e:\iro_svn\opensprints\FW\user\user.c
000bcc   6894     SETF      0x94,0x0       	TRISC = 0xFF;                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	// Make all of PORTD and PORTE inputs too                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	LATD = 0x00;                                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	TRISD = 0xFF;                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           	LATE = 0x00;                                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	TRISE = 0xFF;                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Initalize LED I/Os to outputs                                                e:\iro_svn\opensprints\FW\user\user.c
000bce   0efc     MOVLW     0xfc               mInitAllLEDs();                                                              e:\iro_svn\opensprints\FW\user\user.c
000bd0   168b     ANDWF     0x8b,0x1,0x0                                                                                    
000bd2   0efc     MOVLW     0xfc                                                                                            
000bd4   1694     ANDWF     0x94,0x1,0x0                                                                                    
                                           	// Initalize switch as an input                                                 e:\iro_svn\opensprints\FW\user\user.c
000bd6   8494     BSF       0x94,0x2,0x0       mInitSwitch();                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Start off always using "OK" acknoledge.                                      e:\iro_svn\opensprints\FW\user\user.c
000bd8   0101     MOVLB     0x1            	g_ack_enable = TRUE;                                                            e:\iro_svn\opensprints\FW\user\user.c
000bda   0e01     MOVLW     0x1                                                                                             
000bdc   6fa6     MOVWF     0xa6,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Use our own special output function for STDOUT                               e:\iro_svn\opensprints\FW\user\user.c
000bde   0101     MOVLB     0x1            	stdout = _H_USER;                                                               e:\iro_svn\opensprints\FW\user\user.c
000be0   69fd     SETF      0xfd,0x1                                                                                        
000be2   69fe     SETF      0xfe,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Initalize all of the ISR FIFOs                                               e:\iro_svn\opensprints\FW\user\user.c
000be4   6a0a     CLRF      0xa,0x0            ISR_A_FIFO_out = 0;                                                          e:\iro_svn\opensprints\FW\user\user.c
000be6   6a09     CLRF      0x9,0x0            ISR_A_FIFO_in = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
000be8   6a0b     CLRF      0xb,0x0            ISR_A_FIFO_length = 0;                                                       e:\iro_svn\opensprints\FW\user\user.c
000bea   6a05     CLRF      0x5,0x0            ISR_D_FIFO_out = 0;                                                          e:\iro_svn\opensprints\FW\user\user.c
000bec   6a04     CLRF      0x4,0x0            ISR_D_FIFO_in = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
000bee   6a06     CLRF      0x6,0x0            ISR_D_FIFO_length = 0;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Make sure that our timer stuff starts out disabled                           e:\iro_svn\opensprints\FW\user\user.c
000bf0   6a02     CLRF      0x2,0x0        	ISR_D_RepeatRate = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
000bf2   6a03     CLRF      0x3,0x0                                                                                         
000bf4   6a07     CLRF      0x7,0x0        	ISR_A_RepeatRate = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
000bf6   6a08     CLRF      0x8,0x0                                                                                         
000bf8   6a11     CLRF      0x11,0x0       	D_tick_counter = 0;                                                             e:\iro_svn\opensprints\FW\user\user.c
000bfa   6a12     CLRF      0x12,0x0                                                                                        
000bfc   6a13     CLRF      0x13,0x0       	A_tick_counter = 0;                                                             e:\iro_svn\opensprints\FW\user\user.c
000bfe   6a14     CLRF      0x14,0x0                                                                                        
000c00   6a15     CLRF      0x15,0x0       	A_cur_channel = 0;                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                               // Now init our registers                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	// The prescaler will be at 16                                                  e:\iro_svn\opensprints\FW\user\user.c
000c02   82ca     BSF       0xca,0x1,0x0       T2CONbits.T2CKPS1 = 1;                                                       e:\iro_svn\opensprints\FW\user\user.c
000c04   80ca     BSF       0xca,0x0,0x0       T2CONbits.T2CKPS0 = 1;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                               // We want the TMR2 post scaler to be a 3                                    e:\iro_svn\opensprints\FW\user\user.c
000c06   9cca     BCF       0xca,0x6,0x0       T2CONbits.T2OUTPS3 = 0;                                                      e:\iro_svn\opensprints\FW\user\user.c
000c08   9aca     BCF       0xca,0x5,0x0       T2CONbits.T2OUTPS2 = 0;                                                      e:\iro_svn\opensprints\FW\user\user.c
000c0a   88ca     BSF       0xca,0x4,0x0       T2CONbits.T2OUTPS1 = 1;                                                      e:\iro_svn\opensprints\FW\user\user.c
000c0c   96ca     BCF       0xca,0x3,0x0       T2CONbits.T2OUTPS0 = 0;                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           	// Set our reload value                                                         e:\iro_svn\opensprints\FW\user\user.c
000c0e   0efa     MOVLW     0xfa           	PR2 = kPR2_RELOAD;                                                              e:\iro_svn\opensprints\FW\user\user.c
000c10   6ecb     MOVWF     0xcb,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Set up the Analog to Digital converter                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	// Clear out the FIFO data                                                      e:\iro_svn\opensprints\FW\user\user.c
000c12   6adf     CLRF      0xdf,0x0       	for (i = 0; i < 12; i++)                                                        e:\iro_svn\opensprints\FW\user\user.c
000c14   cfdf     MOVFF     0xfdf,0x2a                                                                                      
000c16   f02a                                                                                                               
000c18   0e0c     MOVLW     0xc                                                                                             
000c1a   6ee7     MOVWF     0xe7,0x0                                                                                        
000c1c   182a     XORWF     0x2a,0x0,0x0                                                                                    
000c1e   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000c20   d002     BRA       0xc26                                                                                           
000c22   34e7     RLCF      0xe7,0x0,0x0                                                                                    
000c24   d002     BRA       0xc2a                                                                                           
000c26   50e7     MOVF      0xe7,0x0,0x0                                                                                    
000c28   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
000c2a   e238     BC        0xc9c                                                                                           
000c98   2adf     INCF      0xdf,0x1,0x0                                                                                    
000c9a   d7bc     BRA       0xc14                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
000c2c   0e01     MOVLW     0x1            		for (j = 0; j < kISR_FIFO_A_DEPTH; j++)                                        e:\iro_svn\opensprints\FW\user\user.c
000c2e   6adb     CLRF      0xdb,0x0                                                                                        
000c30   0e01     MOVLW     0x1                                                                                             
000c32   cfdb     MOVFF     0xfdb,0x2a                                                                                      
000c34   f02a                                                                                                               
000c36   0e03     MOVLW     0x3                                                                                             
000c38   6ee7     MOVWF     0xe7,0x0                                                                                        
000c3a   182a     XORWF     0x2a,0x0,0x0                                                                                    
000c3c   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000c3e   d002     BRA       0xc44                                                                                           
000c40   34e7     RLCF      0xe7,0x0,0x0                                                                                    
000c42   d002     BRA       0xc48                                                                                           
000c44   50e7     MOVF      0xe7,0x0,0x0                                                                                    
000c46   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
000c48   e227     BC        0xc98                                                                                           
000c92   0e01     MOVLW     0x1                                                                                             
000c94   2adb     INCF      0xdb,0x1,0x0                                                                                    
000c96   d7cc     BRA       0xc30                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000c4a   cfdf     MOVFF     0xfdf,0x2a     			ISR_A_FIFO[i][j] = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
000c4c   f02a                                                                                                               
000c4e   6a2b     CLRF      0x2b,0x0                                                                                        
000c50   be2a     BTFSC     0x2a,0x7,0x0                                                                                    
000c52   682b     SETF      0x2b,0x0                                                                                        
000c54   0e06     MOVLW     0x6                                                                                             
000c56   022b     MULWF     0x2b,0x0                                                                                        
000c58   cff3     MOVFF     0xff3,0x2b                                                                                      
000c5a   f02b                                                                                                               
000c5c   0e06     MOVLW     0x6                                                                                             
000c5e   022a     MULWF     0x2a,0x0                                                                                        
000c60   cff3     MOVFF     0xff3,0x2a                                                                                      
000c62   f02a                                                                                                               
000c64   50f4     MOVF      0xf4,0x0,0x0                                                                                    
000c66   262b     ADDWF     0x2b,0x1,0x0                                                                                    
000c68   0e00     MOVLW     0x0                                                                                             
000c6a   262a     ADDWF     0x2a,0x1,0x0                                                                                    
000c6c   0e01     MOVLW     0x1                                                                                             
000c6e   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
000c70   0e01     MOVLW     0x1                                                                                             
000c72   cfdb     MOVFF     0xfdb,0x2c                                                                                      
000c74   f02c                                                                                                               
000c76   6a2d     CLRF      0x2d,0x0                                                                                        
000c78   be2c     BTFSC     0x2c,0x7,0x0                                                                                    
000c7a   682d     SETF      0x2d,0x0                                                                                        
000c7c   90d8     BCF       0xd8,0x0,0x0                                                                                    
000c7e   362c     RLCF      0x2c,0x1,0x0                                                                                    
000c80   362d     RLCF      0x2d,0x1,0x0                                                                                    
000c82   502a     MOVF      0x2a,0x0,0x0                                                                                    
000c84   242c     ADDWF     0x2c,0x0,0x0                                                                                    
000c86   6ee9     MOVWF     0xe9,0x0                                                                                        
000c88   502b     MOVF      0x2b,0x0,0x0                                                                                    
000c8a   202d     ADDWFC    0x2d,0x0,0x0                                                                                    
000c8c   6eea     MOVWF     0xea,0x0                                                                                        
000c8e   6aee     CLRF      0xee,0x0                                                                                        
000c90   6aed     CLRF      0xed,0x0                                                                                        
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}	                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                               // Inialize USB TX and RX buffer management                                  e:\iro_svn\opensprints\FW\user\user.c
000c9c   0101     MOVLB     0x1                g_RX_buf_in = 0;                                                             e:\iro_svn\opensprints\FW\user\user.c
000c9e   6ba0     CLRF      0xa0,0x1                                                                                        
000ca0   0101     MOVLB     0x1                g_RX_buf_out = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
000ca2   6ba1     CLRF      0xa1,0x1                                                                                        
000ca4   0101     MOVLB     0x1            	g_TX_buf_in = 0;                                                                e:\iro_svn\opensprints\FW\user\user.c
000ca6   6b9e     CLRF      0x9e,0x1                                                                                        
000ca8   0101     MOVLB     0x1            	g_TX_buf_out = 0;                                                               e:\iro_svn\opensprints\FW\user\user.c
000caa   6b9f     CLRF      0x9f,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// And the USART TX and RX buffer management                                    e:\iro_svn\opensprints\FW\user\user.c
000cac   0101     MOVLB     0x1            	g_USART_RX_buf_in = 0;                                                          e:\iro_svn\opensprints\FW\user\user.c
000cae   6ba2     CLRF      0xa2,0x1                                                                                        
000cb0   0101     MOVLB     0x1            	g_USART_RX_buf_out = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
000cb2   6ba3     CLRF      0xa3,0x1                                                                                        
000cb4   0101     MOVLB     0x1            	g_USART_TX_buf_in = 0;                                                          e:\iro_svn\opensprints\FW\user\user.c
000cb6   6ba4     CLRF      0xa4,0x1                                                                                        
000cb8   0101     MOVLB     0x1            	g_USART_TX_buf_out = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
000cba   6ba5     CLRF      0xa5,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Clear out the RC servo output pointer values                                 e:\iro_svn\opensprints\FW\user\user.c
000cbc   6a0e     CLRF      0xe,0x0        	g_RC_primed_ptr = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
000cbe   6a0f     CLRF      0xf,0x0        	g_RC_next_ptr = 0;                                                              e:\iro_svn\opensprints\FW\user\user.c
000cc0   6a10     CLRF      0x10,0x0       	g_RC_timing_ptr = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Clear the RC data structure                                                  e:\iro_svn\opensprints\FW\user\user.c
000cc2   6adf     CLRF      0xdf,0x0       	for (i = 0; i < kRC_DATA_SIZE; i++)                                             e:\iro_svn\opensprints\FW\user\user.c
000cc4   cfdf     MOVFF     0xfdf,0x2a                                                                                      
000cc6   f02a                                                                                                               
000cc8   0e18     MOVLW     0x18                                                                                            
000cca   6ee7     MOVWF     0xe7,0x0                                                                                        
000ccc   182a     XORWF     0x2a,0x0,0x0                                                                                    
000cce   aee8     BTFSS     0xe8,0x7,0x0                                                                                    
000cd0   d002     BRA       0xcd6                                                                                           
000cd2   34e7     RLCF      0xe7,0x0,0x0                                                                                    
000cd4   d002     BRA       0xcda                                                                                           
000cd6   50e7     MOVF      0xe7,0x0,0x0                                                                                    
000cd8   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
000cda   e21b     BC        0xd12                                                                                           
000d0e   2adf     INCF      0xdf,0x1,0x0                                                                                    
000d10   d7d9     BRA       0xcc4                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
000cdc   cfdf     MOVFF     0xfdf,0xfe9    		g_RC_value[i] = 0;                                                             e:\iro_svn\opensprints\FW\user\user.c
000cde   ffe9                                                                                                               
000ce0   6aea     CLRF      0xea,0x0                                                                                        
000ce2   bee9     BTFSC     0xe9,0x7,0x0                                                                                    
000ce4   68ea     SETF      0xea,0x0                                                                                        
000ce6   90d8     BCF       0xd8,0x0,0x0                                                                                    
000ce8   36e9     RLCF      0xe9,0x1,0x0                                                                                    
000cea   36ea     RLCF      0xea,0x1,0x0                                                                                    
000cec   0e69     MOVLW     0x69                                                                                            
000cee   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000cf0   0e01     MOVLW     0x1                                                                                             
000cf2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000cf4   6aee     CLRF      0xee,0x0                                                                                        
000cf6   6aed     CLRF      0xed,0x0                                                                                        
000cf8   cfdf     MOVFF     0xfdf,0xfe9    		g_RC_state[i] = kOFF;                                                          e:\iro_svn\opensprints\FW\user\user.c
000cfa   ffe9                                                                                                               
000cfc   6aea     CLRF      0xea,0x0                                                                                        
000cfe   bee9     BTFSC     0xe9,0x7,0x0                                                                                    
000d00   68ea     SETF      0xea,0x0                                                                                        
000d02   0e51     MOVLW     0x51                                                                                            
000d04   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
000d06   0e01     MOVLW     0x1                                                                                             
000d08   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000d0a   0e01     MOVLW     0x1                                                                                             
000d0c   6eef     MOVWF     0xef,0x0                                                                                        
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Enable TMR0 for our RC timing operation                                      e:\iro_svn\opensprints\FW\user\user.c
000d12   86d5     BSF       0xd5,0x3,0x0   	T0CONbits.PSA = 1;		// Do NOT use the prescaler                                 e:\iro_svn\opensprints\FW\user\user.c
000d14   9ad5     BCF       0xd5,0x5,0x0   	T0CONbits.T0CS = 0;		// Use internal clock                                      e:\iro_svn\opensprints\FW\user\user.c
000d16   9cd5     BCF       0xd5,0x6,0x0   	T0CONbits.T08BIT = 0;	// 16 bit timer                                           e:\iro_svn\opensprints\FW\user\user.c
000d18   94f2     BCF       0xf2,0x2,0x0   	INTCONbits.TMR0IF = 0;	// Clear the interrupt flag                              e:\iro_svn\opensprints\FW\user\user.c
000d1a   9af2     BCF       0xf2,0x5,0x0   	INTCONbits.TMR0IE = 0;	// And clear the interrupt enable                        e:\iro_svn\opensprints\FW\user\user.c
000d1c   94f1     BCF       0xf1,0x2,0x0   	INTCON2bits.TMR0IP = 0;	// Low priority                                         e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                               // Enable interrupt priorities                                               e:\iro_svn\opensprints\FW\user\user.c
000d1e   8ed0     BSF       0xd0,0x7,0x0       RCONbits.IPEN = 1;                                                           e:\iro_svn\opensprints\FW\user\user.c
000d20   94ca     BCF       0xca,0x2,0x0   	T2CONbits.TMR2ON = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
000d22   829d     BSF       0x9d,0x1,0x0       PIE1bits.TMR2IE = 1;                                                         e:\iro_svn\opensprints\FW\user\user.c
000d24   929f     BCF       0x9f,0x1,0x0       IPR1bits.TMR2IP = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
000d26   8ef2     BSF       0xf2,0x7,0x0       INTCONbits.GIEH = 1;	// Turn high priority interrupts on                     e:\iro_svn\opensprints\FW\user\user.c
000d28   8cf2     BSF       0xf2,0x6,0x0       INTCONbits.GIEL = 1;	// Turn low priority interrupts on                      e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Turn on the Timer2                                                           e:\iro_svn\opensprints\FW\user\user.c
000d2a   84ca     BSF       0xca,0x2,0x0   	T2CONbits.TMR2ON = 1;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
000d2c   0e02     MOVLW     0x2            }//end UserInit                                                                  e:\iro_svn\opensprints\FW\user\user.c
000d2e   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
000d30   e202     BC        0xd36                                                                                           
000d32   6ae1     CLRF      0xe1,0x0                                                                                        
000d34   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000d36   6ee1     MOVWF     0xe1,0x0                                                                                        
000d38   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000d3a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000d3c   ffd9                                                                                                               
000d3e   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\user\user.c
                                            * Function:        void ProcessIO(void)                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Overview:        In this function, we check for a new packet that just        e:\iro_svn\opensprints\FW\user\user.c
                                            * 					arrived via USB. We do a few checks on the packet to see                 e:\iro_svn\opensprints\FW\user\user.c
                                            *					if it is worthy of us trying to interpret it. If it is,                   e:\iro_svn\opensprints\FW\user\user.c
                                            *					we go and call the proper function based upon the first                   e:\iro_svn\opensprints\FW\user\user.c
                                            *					character of the packet.                                                  e:\iro_svn\opensprints\FW\user\user.c
                                            *					NOTE: We need to see everything in one packet (i.e. we                    e:\iro_svn\opensprints\FW\user\user.c
                                            *					won't treat the USB data as a stream and try to find our                  e:\iro_svn\opensprints\FW\user\user.c
                                            *					start and end of packets within the stream. We just look                  e:\iro_svn\opensprints\FW\user\user.c
                                            *					at the first character of each packet for a command and                   e:\iro_svn\opensprints\FW\user\user.c
                                            * 					check that there's a CR as the last character of the                     e:\iro_svn\opensprints\FW\user\user.c
                                            *					packet.                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\user\user.c
000d40   cfd9     MOVFF     0xfd9,0xfe6    void ProcessIO(void)                                                             e:\iro_svn\opensprints\FW\user\user.c
000d42   ffe6                                                                                                               
000d44   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000d46   ffd9                                                                                                               
000d48   0e02     MOVLW     0x2                                                                                             
000d4a   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	static BOOL in_cr = FALSE;                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           	static byte last_fifo_size;                                                     e:\iro_svn\opensprints\FW\user\user.c
                                               unsigned char tst_char;                                                      e:\iro_svn\opensprints\FW\user\user.c
000d4c   0e01     MOVLW     0x1            	BOOL	got_full_packet = FALSE;                                                   e:\iro_svn\opensprints\FW\user\user.c
000d4e   6adb     CLRF      0xdb,0x0                                                                                        
000d50   0101     MOVLB     0x1            	cdc_rx_len = 0;                                                                 e:\iro_svn\opensprints\FW\user\user.c
000d52   6bc2     CLRF      0xc2,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
000d54   ec4e     CALL      0x269c,0x0     	BlinkUSBStatus();                                                               e:\iro_svn\opensprints\FW\user\user.c
000d56   f013                                                                                                               
000d58   ecc1     CALL      0x2782,0x0     	HallEffSensors();	// Function by Luke Orland in user.c                          e:\iro_svn\opensprints\FW\user\user.c
000d5a   f013                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                               // User Application USB tasks                                                e:\iro_svn\opensprints\FW\user\user.c
000d5c   0e06     MOVLW     0x6                if((usb_device_state < CONFIGURED_STATE) || (UCONbits.SUSPND == 1))          e:\iro_svn\opensprints\FW\user\user.c
000d5e   0101     MOVLB     0x1                                                                                             
000d60   5df7     SUBWF     0xf7,0x0,0x1                                                                                    
000d62   e303     BNC       0xd6a                                                                                           
000d64   506d     MOVF      0x6d,0x0,0x0                                                                                    
000d66   0b02     ANDLW     0x2                                                                                             
000d68   e001     BZ        0xd6c                                                                                           
                                           	{	                                                                              e:\iro_svn\opensprints\FW\user\user.c
000d6a   d101     BRA       0xf6e          		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for any new I packets (from T command) ready to go out                 e:\iro_svn\opensprints\FW\user\user.c
000d6c   5006     MOVF      0x6,0x0,0x0    	while (ISR_D_FIFO_length > 0)                                                   e:\iro_svn\opensprints\FW\user\user.c
000d6e   0800     SUBLW     0x0                                                                                             
000d70   e207     BC        0xd80                                                                                           
000d7e   d7f6     BRA       0xd6c                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Spit out an I packet first                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           //		parse_I_packet ();					// Temp commmented out by Luke                        e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Then upate our I packet fifo stuff                                          e:\iro_svn\opensprints\FW\user\user.c
000d72   2a05     INCF      0x5,0x1,0x0    		ISR_D_FIFO_out++;                                                              e:\iro_svn\opensprints\FW\user\user.c
000d74   0e03     MOVLW     0x3            		if (ISR_D_FIFO_out == kISR_FIFO_D_DEPTH)                                       e:\iro_svn\opensprints\FW\user\user.c
000d76   5c05     SUBWF     0x5,0x0,0x0                                                                                     
000d78   e101     BNZ       0xd7c                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000d7a   6a05     CLRF      0x5,0x0        			ISR_D_FIFO_out = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000d7c   0606     DECF      0x6,0x1,0x0    		ISR_D_FIFO_length--;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	}			                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for a new A packet (from T command) ready to go out                    e:\iro_svn\opensprints\FW\user\user.c
000d80   500b     MOVF      0xb,0x0,0x0    	while (ISR_A_FIFO_length > 0)                                                   e:\iro_svn\opensprints\FW\user\user.c
000d82   0800     SUBLW     0x0                                                                                             
000d84   e207     BC        0xd94                                                                                           
000d92   d7f6     BRA       0xd80                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Spit out an A packet first                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           //		parse_A_packet ();					// Temp commmented out by Luke                        e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Then update our A packet fifo stuff                                         e:\iro_svn\opensprints\FW\user\user.c
000d86   2a0a     INCF      0xa,0x1,0x0    		ISR_A_FIFO_out++;                                                              e:\iro_svn\opensprints\FW\user\user.c
000d88   0e03     MOVLW     0x3            		if (ISR_A_FIFO_out == kISR_FIFO_A_DEPTH)                                       e:\iro_svn\opensprints\FW\user\user.c
000d8a   5c0a     SUBWF     0xa,0x0,0x0                                                                                     
000d8c   e101     BNZ       0xd90                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000d8e   6a0a     CLRF      0xa,0x0        			ISR_A_FIFO_out = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000d90   060b     DECF      0xb,0x1,0x0    		ISR_A_FIFO_length--;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	}			                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Pull in some new data if there is new data to pull in                        e:\iro_svn\opensprints\FW\user\user.c
000d94   0104     MOVLB     0x4            	if(!mCDCUsartRxIsBusy())                                                        e:\iro_svn\opensprints\FW\user\user.c
000d96   bf18     BTFSC     0x18,0x7,0x1                                                                                    
000d98   d065     BRA       0xe64                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Copy data from dual-ram buffer to user's buffer                             e:\iro_svn\opensprints\FW\user\user.c
000d9a   0101     MOVLB     0x1            		for(cdc_rx_len = 0; cdc_rx_len < CDC_BULK_BD_OUT.Cnt; cdc_rx_len++)            e:\iro_svn\opensprints\FW\user\user.c
000d9c   6bc2     CLRF      0xc2,0x1                                                                                        
000d9e   0104     MOVLB     0x4                                                                                             
000da0   5119     MOVF      0x19,0x0,0x1                                                                                    
000da2   0101     MOVLB     0x1                                                                                             
000da4   5dc2     SUBWF     0xc2,0x0,0x1                                                                                    
000da6   e253     BC        0xe4e                                                                                           
000e48   0101     MOVLB     0x1                                                                                             
000e4a   2bc2     INCF      0xc2,0x1,0x1                                                                                    
000e4c   d7a8     BRA       0xd9e                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Check to see if we are in a CR/LF situation                                e:\iro_svn\opensprints\FW\user\user.c
000da8   0101     MOVLB     0x1            			tst_char = cdc_data_rx[cdc_rx_len];                                           e:\iro_svn\opensprints\FW\user\user.c
000daa   51c2     MOVF      0xc2,0x0,0x1                                                                                    
000dac   6aea     CLRF      0xea,0x0                                                                                        
000dae   0f08     ADDLW     0x8                                                                                             
000db0   6ee9     MOVWF     0xe9,0x0                                                                                        
000db2   0e05     MOVLW     0x5                                                                                             
000db4   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000db6   cfef     MOVFF     0xfef,0xfdf                                                                                     
000db8   ffdf                                                                                                               
                                           			if (                                                                          e:\iro_svn\opensprints\FW\user\user.c
000dba   0101     MOVLB     0x1            				!in_cr                                                                       e:\iro_svn\opensprints\FW\user\user.c
000dbc   51dc     MOVF      0xdc,0x0,0x1                                                                                    
                                           				&&                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           				(                                                                            e:\iro_svn\opensprints\FW\user\user.c
000dc0   0e0d     MOVLW     0xd            					kCR == tst_char                                                             e:\iro_svn\opensprints\FW\user\user.c
000dc2   6e2a     MOVWF     0x2a,0x0                                                                                        
000dc4   50df     MOVF      0xdf,0x0,0x0                                                                                    
000dc6   5c2a     SUBWF     0x2a,0x0,0x0   					||                                                                          e:\iro_svn\opensprints\FW\user\user.c
000dca   0e0a     MOVLW     0xa            					kLF == tst_char                                                             e:\iro_svn\opensprints\FW\user\user.c
000dcc   6e2b     MOVWF     0x2b,0x0                                                                                        
000dce   50df     MOVF      0xdf,0x0,0x0                                                                                    
000dc8   e005     BZ        0xdd4          				)                                                                            e:\iro_svn\opensprints\FW\user\user.c
000dd0   5c2b     SUBWF     0x2b,0x0,0x0                                                                                    
000dd2   e112     BNZ       0xdf8                                                                                           
000dbe   e11c     BNZ       0xdf8          			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000dd4   0101     MOVLB     0x1            				in_cr = TRUE;                                                                e:\iro_svn\opensprints\FW\user\user.c
000dd6   0e01     MOVLW     0x1                                                                                             
000dd8   6fdc     MOVWF     0xdc,0x1                                                                                        
000dda   0101     MOVLB     0x1            				g_RX_buf[g_RX_buf_in] = kCR;                                                 e:\iro_svn\opensprints\FW\user\user.c
000ddc   51a0     MOVF      0xa0,0x0,0x1                                                                                    
000dde   6aea     CLRF      0xea,0x0                                                                                        
000de0   0f40     ADDLW     0x40                                                                                            
000de2   6ee9     MOVWF     0xe9,0x0                                                                                        
000de4   0e02     MOVLW     0x2                                                                                             
000de6   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000de8   0e0d     MOVLW     0xd                                                                                             
000dea   6eef     MOVWF     0xef,0x0                                                                                        
000dec   0101     MOVLB     0x1            				g_RX_buf_in++;                                                               e:\iro_svn\opensprints\FW\user\user.c
000dee   2ba0     INCF      0xa0,0x1,0x1                                                                                    
                                           			                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           				// At this point, we know we have a full packet                              e:\iro_svn\opensprints\FW\user\user.c
                                           				// of information from the PC to parse                                       e:\iro_svn\opensprints\FW\user\user.c
000df0   52de     MOVF      0xde,0x1,0x0   				got_full_packet = TRUE;                                                      e:\iro_svn\opensprints\FW\user\user.c
000df2   0e01     MOVLW     0x1                                                                                             
000df4   6edd     MOVWF     0xdd,0x0                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
000df6   d015     BRA       0xe22          			else if (                                                                     e:\iro_svn\opensprints\FW\user\user.c
000df8   0e0d     MOVLW     0xd            				tst_char != kCR                                                              e:\iro_svn\opensprints\FW\user\user.c
000dfa   5cdf     SUBWF     0xdf,0x0,0x0   				&&                                                                           e:\iro_svn\opensprints\FW\user\user.c
000dfe   0e0a     MOVLW     0xa            				tst_char != kLF                                                              e:\iro_svn\opensprints\FW\user\user.c
000dfc   e011     BZ        0xe20          			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
000e00   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
000e02   e00e     BZ        0xe20                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// Only add a byte if it is not a CR or LF                                   e:\iro_svn\opensprints\FW\user\user.c
000e04   0101     MOVLB     0x1            				g_RX_buf[g_RX_buf_in] = tst_char;                                            e:\iro_svn\opensprints\FW\user\user.c
000e06   51a0     MOVF      0xa0,0x0,0x1                                                                                    
000e08   6aea     CLRF      0xea,0x0                                                                                        
000e0a   0f40     ADDLW     0x40                                                                                            
000e0c   6ee9     MOVWF     0xe9,0x0                                                                                        
000e0e   0e02     MOVLW     0x2                                                                                             
000e10   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000e12   cfdf     MOVFF     0xfdf,0xfef                                                                                     
000e14   ffef                                                                                                               
000e16   0101     MOVLB     0x1            				in_cr = FALSE;                                                               e:\iro_svn\opensprints\FW\user\user.c
000e18   6bdc     CLRF      0xdc,0x1                                                                                        
000e1a   0101     MOVLB     0x1            				g_RX_buf_in++;                                                               e:\iro_svn\opensprints\FW\user\user.c
000e1c   2ba0     INCF      0xa0,0x1,0x1                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
000e1e   d001     BRA       0xe22          			else                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000e20   d013     BRA       0xe48          				continue;                                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           			// Check for buffer wraparound                                                e:\iro_svn\opensprints\FW\user\user.c
000e22   0e40     MOVLW     0x40           			if (kRX_BUF_SIZE == g_RX_buf_in)                                              e:\iro_svn\opensprints\FW\user\user.c
000e24   0101     MOVLB     0x1                                                                                             
000e26   5da0     SUBWF     0xa0,0x0,0x1                                                                                    
000e28   e102     BNZ       0xe2e                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000e2a   0101     MOVLB     0x1            				g_RX_buf_in = 0;                                                             e:\iro_svn\opensprints\FW\user\user.c
000e2c   6ba0     CLRF      0xa0,0x1                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           			// If we hit the out pointer, then this is bad.                               e:\iro_svn\opensprints\FW\user\user.c
000e2e   0101     MOVLB     0x1            			if (g_RX_buf_in == g_RX_buf_out)                                              e:\iro_svn\opensprints\FW\user\user.c
000e30   51a1     MOVF      0xa1,0x0,0x1                                                                                    
000e32   0101     MOVLB     0x1                                                                                             
000e34   5da0     SUBWF     0xa0,0x0,0x1                                                                                    
000e36   e102     BNZ       0xe3c                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000e38   860d     BSF       0xd,0x3,0x0    				bitset (error_byte, kERROR_BYTE_RX_BUFFER_OVERRUN);                          e:\iro_svn\opensprints\FW\user\user.c
000e3a   d009     BRA       0xe4e          				break;                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           			// Now, if we've gotten a full command (user send <CR>) then                  e:\iro_svn\opensprints\FW\user\user.c
                                           			// go call the code that deals with that command, and then                    e:\iro_svn\opensprints\FW\user\user.c
                                           			// keep parsing. (This allows multiple small commands per packet)             e:\iro_svn\opensprints\FW\user\user.c
000e3c   0e01     MOVLW     0x1            			if (got_full_packet)                                                          e:\iro_svn\opensprints\FW\user\user.c
000e3e   50db     MOVF      0xdb,0x0,0x0                                                                                    
000e40   e003     BZ        0xe48                                                                                           
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
000e42   d915     RCALL     0x106e         				parse_packet ();                                                             e:\iro_svn\opensprints\FW\user\user.c
000e44   0e01     MOVLW     0x1            				got_full_packet = FALSE;                                                     e:\iro_svn\opensprints\FW\user\user.c
000e46   6adb     CLRF      0xdb,0x0                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Prepare dual-ram buffer for next OUT transaction                            e:\iro_svn\opensprints\FW\user\user.c
000e4e   0104     MOVLB     0x4            		CDC_BULK_BD_OUT.Cnt = sizeof(cdc_data_rx);                                     e:\iro_svn\opensprints\FW\user\user.c
000e50   0e40     MOVLW     0x40                                                                                            
000e52   6f19     MOVWF     0x19,0x1                                                                                        
000e54   0e40     MOVLW     0x40           		mUSBBufferReady(CDC_BULK_BD_OUT);                                              e:\iro_svn\opensprints\FW\user\user.c
000e56   0104     MOVLB     0x4                                                                                             
000e58   1718     ANDWF     0x18,0x1,0x1                                                                                    
000e5a   0104     MOVLB     0x4                                                                                             
000e5c   7d18     BTG       0x18,0x6,0x1                                                                                    
000e5e   0e88     MOVLW     0x88                                                                                            
000e60   0104     MOVLB     0x4                                                                                             
000e62   1318     IORWF     0x18,0x1,0x1                                                                                    
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for any errors logged in error_byte that need to be sent out           e:\iro_svn\opensprints\FW\user\user.c
000e64   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
000e66   e101     BNZ       0xe6a                                                                                           
000e68   d081     BRA       0xf6c                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
000e6a   a00d     BTFSS     0xd,0x0,0x0    		if (bittst (error_byte, 0))                                                    e:\iro_svn\opensprints\FW\user\user.c
000e6c   d010     BRA       0xe8e                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Unused as of yet                                                           e:\iro_svn\opensprints\FW\user\user.c
000e6e   0e31     MOVLW     0x31           			printf ((rom char *)"!0 \r\n");                                               e:\iro_svn\opensprints\FW\user\user.c
000e70   6e2a     MOVWF     0x2a,0x0                                                                                        
000e72   0e43     MOVLW     0x43                                                                                            
000e74   6e2b     MOVWF     0x2b,0x0                                                                                        
000e76   6a2c     CLRF      0x2c,0x0                                                                                        
000e78   c02a     MOVFF     0x2a,0xfe6                                                                                      
000e7a   ffe6                                                                                                               
000e7c   c02b     MOVFF     0x2b,0xfe6                                                                                      
000e7e   ffe6                                                                                                               
000e80   c02c     MOVFF     0x2c,0xfe6                                                                                      
000e82   ffe6                                                                                                               
000e84   ecc8     CALL      0x4590,0x0                                                                                      
000e86   f022                                                                                                               
000e88   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e8a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000e8c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000e8e   a20d     BTFSS     0xd,0x1,0x0    		if (bittst (error_byte, 1))                                                    e:\iro_svn\opensprints\FW\user\user.c
000e90   d010     BRA       0xeb2                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Unused as of yet                                                           e:\iro_svn\opensprints\FW\user\user.c
000e92   0e2b     MOVLW     0x2b           			printf ((rom char *)"!1 \r\n");                                               e:\iro_svn\opensprints\FW\user\user.c
000e94   6e2a     MOVWF     0x2a,0x0                                                                                        
000e96   0e43     MOVLW     0x43                                                                                            
000e98   6e2b     MOVWF     0x2b,0x0                                                                                        
000e9a   6a2c     CLRF      0x2c,0x0                                                                                        
000e9c   c02a     MOVFF     0x2a,0xfe6                                                                                      
000e9e   ffe6                                                                                                               
000ea0   c02b     MOVFF     0x2b,0xfe6                                                                                      
000ea2   ffe6                                                                                                               
000ea4   c02c     MOVFF     0x2c,0xfe6                                                                                      
000ea6   ffe6                                                                                                               
000ea8   ecc8     CALL      0x4590,0x0                                                                                      
000eaa   f022                                                                                                               
000eac   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000eae   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000eb0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000eb2   a40d     BTFSS     0xd,0x2,0x0    		if (bittst (error_byte, kERROR_BYTE_TX_BUF_OVERRUN))                           e:\iro_svn\opensprints\FW\user\user.c
000eb4   d010     BRA       0xed6                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000eb6   0e0f     MOVLW     0xf            			printf ((rom char *)"!2 Err: TX Buffer overrun\r\n");                         e:\iro_svn\opensprints\FW\user\user.c
000eb8   6e2a     MOVWF     0x2a,0x0                                                                                        
000eba   0e43     MOVLW     0x43                                                                                            
000ebc   6e2b     MOVWF     0x2b,0x0                                                                                        
000ebe   6a2c     CLRF      0x2c,0x0                                                                                        
000ec0   c02a     MOVFF     0x2a,0xfe6                                                                                      
000ec2   ffe6                                                                                                               
000ec4   c02b     MOVFF     0x2b,0xfe6                                                                                      
000ec6   ffe6                                                                                                               
000ec8   c02c     MOVFF     0x2c,0xfe6                                                                                      
000eca   ffe6                                                                                                               
000ecc   ecc8     CALL      0x4590,0x0                                                                                      
000ece   f022                                                                                                               
000ed0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000ed2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000ed4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000ed6   a60d     BTFSS     0xd,0x3,0x0    		if (bittst (error_byte, kERROR_BYTE_RX_BUFFER_OVERRUN))                        e:\iro_svn\opensprints\FW\user\user.c
000ed8   d010     BRA       0xefa                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000eda   0ef3     MOVLW     0xf3           			printf ((rom char *)"!3 Err: RX Buffer overrun\r\n");                         e:\iro_svn\opensprints\FW\user\user.c
000edc   6e2a     MOVWF     0x2a,0x0                                                                                        
000ede   0e42     MOVLW     0x42                                                                                            
000ee0   6e2b     MOVWF     0x2b,0x0                                                                                        
000ee2   6a2c     CLRF      0x2c,0x0                                                                                        
000ee4   c02a     MOVFF     0x2a,0xfe6                                                                                      
000ee6   ffe6                                                                                                               
000ee8   c02b     MOVFF     0x2b,0xfe6                                                                                      
000eea   ffe6                                                                                                               
000eec   c02c     MOVFF     0x2c,0xfe6                                                                                      
000eee   ffe6                                                                                                               
000ef0   ecc8     CALL      0x4590,0x0                                                                                      
000ef2   f022                                                                                                               
000ef4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000ef6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000ef8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000efa   a80d     BTFSS     0xd,0x4,0x0    		if (bittst (error_byte, kERROR_BYTE_MISSING_PARAMETER))                        e:\iro_svn\opensprints\FW\user\user.c
000efc   d010     BRA       0xf1e                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000efe   0ed4     MOVLW     0xd4           			printf ((rom char *)"!4 Err: Missing parameter(s)\r\n");                      e:\iro_svn\opensprints\FW\user\user.c
000f00   6e2a     MOVWF     0x2a,0x0                                                                                        
000f02   0e42     MOVLW     0x42                                                                                            
000f04   6e2b     MOVWF     0x2b,0x0                                                                                        
000f06   6a2c     CLRF      0x2c,0x0                                                                                        
000f08   c02a     MOVFF     0x2a,0xfe6                                                                                      
000f0a   ffe6                                                                                                               
000f0c   c02b     MOVFF     0x2b,0xfe6                                                                                      
000f0e   ffe6                                                                                                               
000f10   c02c     MOVFF     0x2c,0xfe6                                                                                      
000f12   ffe6                                                                                                               
000f14   ecc8     CALL      0x4590,0x0                                                                                      
000f16   f022                                                                                                               
000f18   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f1a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f1c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000f1e   aa0d     BTFSS     0xd,0x5,0x0    		if (bittst (error_byte, kERROR_BYTE_PRINTED_ERROR))                            e:\iro_svn\opensprints\FW\user\user.c
000f20   d000     BRA       0xf22                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// We don't need to do anything since something has already been printed out  e:\iro_svn\opensprints\FW\user\user.c
                                           			//printf ((rom char *)"!5\r\n");                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000f22   ac0d     BTFSS     0xd,0x6,0x0    		if (bittst (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT))                  e:\iro_svn\opensprints\FW\user\user.c
000f24   d010     BRA       0xf46                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000f26   0eb3     MOVLW     0xb3           			printf ((rom char *)"!6 Err: Invalid paramter value\r\n");                    e:\iro_svn\opensprints\FW\user\user.c
000f28   6e2a     MOVWF     0x2a,0x0                                                                                        
000f2a   0e42     MOVLW     0x42                                                                                            
000f2c   6e2b     MOVWF     0x2b,0x0                                                                                        
000f2e   6a2c     CLRF      0x2c,0x0                                                                                        
000f30   c02a     MOVFF     0x2a,0xfe6                                                                                      
000f32   ffe6                                                                                                               
000f34   c02b     MOVFF     0x2b,0xfe6                                                                                      
000f36   ffe6                                                                                                               
000f38   c02c     MOVFF     0x2c,0xfe6                                                                                      
000f3a   ffe6                                                                                                               
000f3c   ecc8     CALL      0x4590,0x0                                                                                      
000f3e   f022                                                                                                               
000f40   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f42   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f44   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000f46   ae0d     BTFSS     0xd,0x7,0x0    		if (bittst (error_byte, kERROR_BYTE_EXTRA_CHARACTERS))                         e:\iro_svn\opensprints\FW\user\user.c
000f48   d010     BRA       0xf6a                                                                                           
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
000f4a   0e9a     MOVLW     0x9a           			printf ((rom char *)"!7 Err: Extra parmater\r\n");                            e:\iro_svn\opensprints\FW\user\user.c
000f4c   6e2a     MOVWF     0x2a,0x0                                                                                        
000f4e   0e42     MOVLW     0x42                                                                                            
000f50   6e2b     MOVWF     0x2b,0x0                                                                                        
000f52   6a2c     CLRF      0x2c,0x0                                                                                        
000f54   c02a     MOVFF     0x2a,0xfe6                                                                                      
000f56   ffe6                                                                                                               
000f58   c02b     MOVFF     0x2b,0xfe6                                                                                      
000f5a   ffe6                                                                                                               
000f5c   c02c     MOVFF     0x2c,0xfe6                                                                                      
000f5e   ffe6                                                                                                               
000f60   ecc8     CALL      0x4590,0x0                                                                                      
000f62   f022                                                                                                               
000f64   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f66   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f68   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
000f6a   6a0d     CLRF      0xd,0x0        		error_byte = 0;                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Go send any data that needs sending to PC                                    e:\iro_svn\opensprints\FW\user\user.c
000f6c   d835     RCALL     0xfd8          	check_and_send_TX_data ();                                                      e:\iro_svn\opensprints\FW\user\user.c
000f6e   0e02     MOVLW     0x2            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
000f70   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
000f72   e202     BC        0xf78                                                                                           
000f74   6ae1     CLRF      0xe1,0x0                                                                                        
000f76   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f78   6ee1     MOVWF     0xe1,0x0                                                                                        
000f7a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
000f7c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000f7e   ffd9                                                                                                               
000f80   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // This is our replacement for the standard putc routine                         e:\iro_svn\opensprints\FW\user\user.c
                                           // This enables printf() and all related functions to print to                   e:\iro_svn\opensprints\FW\user\user.c
                                           // the UBS output (i.e. to the PC) buffer                                        e:\iro_svn\opensprints\FW\user\user.c
000f82   cfd9     MOVFF     0xfd9,0xfe6    int _user_putc (char c)                                                          e:\iro_svn\opensprints\FW\user\user.c
000f84   ffe6                                                                                                               
000f86   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000f88   ffd9                                                                                                               
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Copy the character into the output buffer                                    e:\iro_svn\opensprints\FW\user\user.c
000f8a   0101     MOVLB     0x1            	g_TX_buf[g_TX_buf_in] = c;                                                      e:\iro_svn\opensprints\FW\user\user.c
000f8c   519e     MOVF      0x9e,0x0,0x1                                                                                    
000f8e   6aea     CLRF      0xea,0x0                                                                                        
000f90   0f00     ADDLW     0x0                                                                                             
000f92   6ee9     MOVWF     0xe9,0x0                                                                                        
000f94   0e02     MOVLW     0x2                                                                                             
000f96   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
000f98   0efe     MOVLW     0xfe                                                                                            
000f9a   cfdb     MOVFF     0xfdb,0xfef                                                                                     
000f9c   ffef                                                                                                               
000f9e   0101     MOVLB     0x1            	g_TX_buf_in++;                                                                  e:\iro_svn\opensprints\FW\user\user.c
000fa0   2b9e     INCF      0x9e,0x1,0x1                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for wrap around                                                        e:\iro_svn\opensprints\FW\user\user.c
000fa2   0e40     MOVLW     0x40           	if (kTX_BUF_SIZE == g_TX_buf_in)                                                e:\iro_svn\opensprints\FW\user\user.c
000fa4   0101     MOVLB     0x1                                                                                             
000fa6   5d9e     SUBWF     0x9e,0x0,0x1                                                                                    
000fa8   e102     BNZ       0xfae                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
000faa   0101     MOVLB     0x1            		g_TX_buf_in = 0;                                                               e:\iro_svn\opensprints\FW\user\user.c
000fac   6b9e     CLRF      0x9e,0x1                                                                                        
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Also check to see if we bumpted up against our output pointer                e:\iro_svn\opensprints\FW\user\user.c
000fae   0101     MOVLB     0x1            	if (g_TX_buf_in == g_TX_buf_out)                                                e:\iro_svn\opensprints\FW\user\user.c
000fb0   519f     MOVF      0x9f,0x0,0x1                                                                                    
000fb2   0101     MOVLB     0x1                                                                                             
000fb4   5d9e     SUBWF     0x9e,0x0,0x1                                                                                    
000fb6   e101     BNZ       0xfba                                                                                           
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
000fb8   840d     BSF       0xd,0x2,0x0    		bitset (error_byte, kERROR_BYTE_TX_BUF_OVERRUN);                               e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
000fba   0efe     MOVLW     0xfe           	return (c);                                                                     e:\iro_svn\opensprints\FW\user\user.c
000fbc   cfdb     MOVFF     0xfdb,0x2a                                                                                      
000fbe   f02a                                                                                                               
000fc0   6a2b     CLRF      0x2b,0x0                                                                                        
000fc2   be2a     BTFSC     0x2a,0x7,0x0                                                                                    
000fc4   682b     SETF      0x2b,0x0                                                                                        
000fc6   c02a     MOVFF     0x2a,0xff3                                                                                      
000fc8   fff3                                                                                                               
000fca   c02b     MOVFF     0x2b,0xff4                                                                                      
000fcc   fff4                                                                                                               
000fce   d000     BRA       0xfd0                                                                                           
000fd0   52e5     MOVF      0xe5,0x1,0x0   }                                                                                e:\iro_svn\opensprints\FW\user\user.c
000fd2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
000fd4   ffd9                                                                                                               
000fd6   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // In this function, we check to see it is OK to transmit. If so                 e:\iro_svn\opensprints\FW\user\user.c
                                           // we see if there is any data to transmit to PC. If so, we schedule             e:\iro_svn\opensprints\FW\user\user.c
                                           // it for sending.                                                               e:\iro_svn\opensprints\FW\user\user.c
000fd8   cfd9     MOVFF     0xfd9,0xfe6    void check_and_send_TX_data (void)                                               e:\iro_svn\opensprints\FW\user\user.c
000fda   ffe6                                                                                                               
000fdc   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
000fde   ffd9                                                                                                               
000fe0   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	char temp;                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Only send if we're not already sending something                             e:\iro_svn\opensprints\FW\user\user.c
000fe2   0101     MOVLB     0x1            	if (mUSBUSARTIsTxTrfReady ())                                                   e:\iro_svn\opensprints\FW\user\user.c
000fe4   51c3     MOVF      0xc3,0x0,0x1                                                                                    
000fe6   e13e     BNZ       0x1064                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// And only send if there's something there to send                            e:\iro_svn\opensprints\FW\user\user.c
000fe8   0101     MOVLB     0x1            		if (g_TX_buf_out != g_TX_buf_in)                                               e:\iro_svn\opensprints\FW\user\user.c
000fea   519e     MOVF      0x9e,0x0,0x1                                                                                    
000fec   0101     MOVLB     0x1                                                                                             
000fee   5d9f     SUBWF     0x9f,0x0,0x1                                                                                    
000ff0   e039     BZ        0x1064                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Now decide if we need to break it up into two parts or not                 e:\iro_svn\opensprints\FW\user\user.c
000ff2   0101     MOVLB     0x1            			if (g_TX_buf_in > g_TX_buf_out)                                               e:\iro_svn\opensprints\FW\user\user.c
000ff4   519f     MOVF      0x9f,0x0,0x1                                                                                    
000ff6   0101     MOVLB     0x1                                                                                             
000ff8   80d8     BSF       0xd8,0x0,0x0                                                                                    
000ffa   559e     SUBFWB    0x9e,0x0,0x1                                                                                    
000ffc   e21a     BC        0x1032                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// Since IN is beyond OUT, only need one chunk                               e:\iro_svn\opensprints\FW\user\user.c
000ffe   0101     MOVLB     0x1            				temp = g_TX_buf_in - g_TX_buf_out;                                           e:\iro_svn\opensprints\FW\user\user.c
001000   519f     MOVF      0x9f,0x0,0x1                                                                                    
001002   0101     MOVLB     0x1                                                                                             
001004   5d9e     SUBWF     0x9e,0x0,0x1                                                                                    
001006   6edf     MOVWF     0xdf,0x0                                                                                        
001008   0101     MOVLB     0x1            				mUSBUSARTTxRam (&g_TX_buf[g_TX_buf_out], temp);                              e:\iro_svn\opensprints\FW\user\user.c
00100a   519f     MOVF      0x9f,0x0,0x1                                                                                    
00100c   0101     MOVLB     0x1                                                                                             
00100e   6fc4     MOVWF     0xc4,0x1                                                                                        
001010   6bc5     CLRF      0xc5,0x1                                                                                        
001012   0e00     MOVLW     0x0                                                                                             
001014   0101     MOVLB     0x1                                                                                             
001016   27c4     ADDWF     0xc4,0x1,0x1                                                                                    
001018   0e02     MOVLW     0x2                                                                                             
00101a   0101     MOVLB     0x1                                                                                             
00101c   23c5     ADDWFC    0xc5,0x1,0x1                                                                                    
00101e   cfdf     MOVFF     0xfdf,0x1c8                                                                                     
001020   f1c8                                                                                                               
001022   0101     MOVLB     0x1                                                                                             
001024   6bc9     CLRF      0xc9,0x1                                                                                        
001026   0101     MOVLB     0x1                                                                                             
001028   0e01     MOVLW     0x1                                                                                             
00102a   6fc3     MOVWF     0xc3,0x1                                                                                        
                                           				// Now that we've scheduled the data for sending,                            e:\iro_svn\opensprints\FW\user\user.c
                                           				// update the pointer                                                        e:\iro_svn\opensprints\FW\user\user.c
00102c   c19e     MOVFF     0x19e,0x19f    				g_TX_buf_out = g_TX_buf_in;                                                  e:\iro_svn\opensprints\FW\user\user.c
00102e   f19f                                                                                                               
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
001030   d019     BRA       0x1064         			else                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// Since IN is before OUT, we need to send from OUT to the end               e:\iro_svn\opensprints\FW\user\user.c
                                           				// of the buffer, then the next time around we'll catch                      e:\iro_svn\opensprints\FW\user\user.c
                                           				// from the beginning to IN.                                                 e:\iro_svn\opensprints\FW\user\user.c
001032   0e40     MOVLW     0x40           				temp = kTX_BUF_SIZE - g_TX_buf_out;                                          e:\iro_svn\opensprints\FW\user\user.c
001034   0101     MOVLB     0x1                                                                                             
001036   80d8     BSF       0xd8,0x0,0x0                                                                                    
001038   559f     SUBFWB    0x9f,0x0,0x1                                                                                    
00103a   6edf     MOVWF     0xdf,0x0                                                                                        
00103c   0101     MOVLB     0x1            				mUSBUSARTTxRam (&g_TX_buf[g_TX_buf_out], temp);                              e:\iro_svn\opensprints\FW\user\user.c
00103e   519f     MOVF      0x9f,0x0,0x1                                                                                    
001040   0101     MOVLB     0x1                                                                                             
001042   6fc4     MOVWF     0xc4,0x1                                                                                        
001044   6bc5     CLRF      0xc5,0x1                                                                                        
001046   0e00     MOVLW     0x0                                                                                             
001048   0101     MOVLB     0x1                                                                                             
00104a   27c4     ADDWF     0xc4,0x1,0x1                                                                                    
00104c   0e02     MOVLW     0x2                                                                                             
00104e   0101     MOVLB     0x1                                                                                             
001050   23c5     ADDWFC    0xc5,0x1,0x1                                                                                    
001052   cfdf     MOVFF     0xfdf,0x1c8                                                                                     
001054   f1c8                                                                                                               
001056   0101     MOVLB     0x1                                                                                             
001058   6bc9     CLRF      0xc9,0x1                                                                                        
00105a   0101     MOVLB     0x1                                                                                             
00105c   0e01     MOVLW     0x1                                                                                             
00105e   6fc3     MOVWF     0xc3,0x1                                                                                        
                                           				// Now that we've scheduled the data for sending,                            e:\iro_svn\opensprints\FW\user\user.c
                                           				// update the pointer                                                        e:\iro_svn\opensprints\FW\user\user.c
001060   0101     MOVLB     0x1            				g_TX_buf_out = 0;                                                            e:\iro_svn\opensprints\FW\user\user.c
001062   6b9f     CLRF      0x9f,0x1                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001064   52e5     MOVF      0xe5,0x1,0x0   }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001066   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001068   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00106a   ffd9                                                                                                               
00106c   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Look at the new packet, see what command it is, and                           e:\iro_svn\opensprints\FW\user\user.c
                                           // route it appropriately. We come in knowing that                               e:\iro_svn\opensprints\FW\user\user.c
                                           // our packet is in g_RX_buf[], and that the beginning                           e:\iro_svn\opensprints\FW\user\user.c
                                           // of the packet is at g_RX_buf_out, and the end (CR) is at                      e:\iro_svn\opensprints\FW\user\user.c
                                           // g_RX_buf_in. Note that because of buffer wrapping,                            e:\iro_svn\opensprints\FW\user\user.c
                                           // g_RX_buf_in may be less than g_RX_buf_out.                                    e:\iro_svn\opensprints\FW\user\user.c
00106e   cfd9     MOVFF     0xfd9,0xfe6    void parse_packet(void)                                                          e:\iro_svn\opensprints\FW\user\user.c
001070   ffe6                                                                                                               
001072   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001074   ffd9                                                                                                               
001076   0e04     MOVLW     0x4                                                                                             
001078   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
00107a   6ade     CLRF      0xde,0x0       	unsigned int	command = 0;                                                       e:\iro_svn\opensprints\FW\user\user.c
00107c   6add     CLRF      0xdd,0x0                                                                                        
00107e   0e02     MOVLW     0x2            	unsigned char	cmd1 = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
001080   6adb     CLRF      0xdb,0x0                                                                                        
001082   0e03     MOVLW     0x3            	unsigned char	cmd2 = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
001084   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Always grab the first character (which is the first byte of the command)     e:\iro_svn\opensprints\FW\user\user.c
001086   0101     MOVLB     0x1            	cmd1 = toupper (g_RX_buf[g_RX_buf_out]);                                        e:\iro_svn\opensprints\FW\user\user.c
001088   51a1     MOVF      0xa1,0x0,0x1                                                                                    
00108a   6aea     CLRF      0xea,0x0                                                                                        
00108c   0f40     ADDLW     0x40                                                                                            
00108e   6ee9     MOVWF     0xe9,0x0                                                                                        
001090   0e02     MOVLW     0x2                                                                                             
001092   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001094   50ef     MOVF      0xef,0x0,0x0                                                                                    
001096   6ee6     MOVWF     0xe6,0x0                                                                                        
001098   6ae6     CLRF      0xe6,0x0                                                                                        
00109a   ecc1     CALL      0x4782,0x0                                                                                      
00109c   f023                                                                                                               
00109e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0010a0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0010a2   0e02     MOVLW     0x2                                                                                             
0010a4   cff3     MOVFF     0xff3,0xfdb                                                                                     
0010a6   ffdb                                                                                                               
0010a8   0101     MOVLB     0x1            	advance_RX_buf_out();                                                           e:\iro_svn\opensprints\FW\user\user.c
0010aa   2ba1     INCF      0xa1,0x1,0x1                                                                                    
0010ac   0e40     MOVLW     0x40                                                                                            
0010ae   0101     MOVLB     0x1                                                                                             
0010b0   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
0010b2   e102     BNZ       0x10b8                                                                                          
0010b4   0101     MOVLB     0x1                                                                                             
0010b6   6ba1     CLRF      0xa1,0x1                                                                                        
0010b8   0e02     MOVLW     0x2            	command = cmd1;                                                                 e:\iro_svn\opensprints\FW\user\user.c
0010ba   50db     MOVF      0xdb,0x0,0x0                                                                                    
0010bc   6ede     MOVWF     0xde,0x0                                                                                        
0010be   6add     CLRF      0xdd,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Only grab second one if it is not a comma                                    e:\iro_svn\opensprints\FW\user\user.c
0010c0   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',' && g_RX_buf[g_RX_buf_out] != kCR)             e:\iro_svn\opensprints\FW\user\user.c
0010c2   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0010c4   6aea     CLRF      0xea,0x0                                                                                        
0010c6   0f40     ADDLW     0x40                                                                                            
0010c8   6ee9     MOVWF     0xe9,0x0                                                                                        
0010ca   0e02     MOVLW     0x2                                                                                             
0010cc   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0010ce   50ef     MOVF      0xef,0x0,0x0                                                                                    
0010d0   082c     SUBLW     0x2c                                                                                            
0010d2   e035     BZ        0x113e                                                                                          
0010d4   0101     MOVLB     0x1                                                                                             
0010d6   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0010d8   6aea     CLRF      0xea,0x0                                                                                        
0010da   0f40     ADDLW     0x40                                                                                            
0010dc   6ee9     MOVWF     0xe9,0x0                                                                                        
0010de   0e02     MOVLW     0x2                                                                                             
0010e0   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0010e2   50ef     MOVF      0xef,0x0,0x0                                                                                    
0010e4   080d     SUBLW     0xd                                                                                             
0010e6   e02b     BZ        0x113e                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0010e8   0101     MOVLB     0x1            		cmd2 = toupper (g_RX_buf[g_RX_buf_out]);                                       e:\iro_svn\opensprints\FW\user\user.c
0010ea   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0010ec   6aea     CLRF      0xea,0x0                                                                                        
0010ee   0f40     ADDLW     0x40                                                                                            
0010f0   6ee9     MOVWF     0xe9,0x0                                                                                        
0010f2   0e02     MOVLW     0x2                                                                                             
0010f4   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0010f6   50ef     MOVF      0xef,0x0,0x0                                                                                    
0010f8   6ee6     MOVWF     0xe6,0x0                                                                                        
0010fa   6ae6     CLRF      0xe6,0x0                                                                                        
0010fc   ecc1     CALL      0x4782,0x0                                                                                      
0010fe   f023                                                                                                               
001100   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001102   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001104   0e03     MOVLW     0x3                                                                                             
001106   cff3     MOVFF     0xff3,0xfdb                                                                                     
001108   ffdb                                                                                                               
00110a   0101     MOVLB     0x1            		advance_RX_buf_out();                                                          e:\iro_svn\opensprints\FW\user\user.c
00110c   2ba1     INCF      0xa1,0x1,0x1                                                                                    
00110e   0e40     MOVLW     0x40                                                                                            
001110   0101     MOVLB     0x1                                                                                             
001112   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001114   e102     BNZ       0x111a                                                                                          
001116   0101     MOVLB     0x1                                                                                             
001118   6ba1     CLRF      0xa1,0x1                                                                                        
00111a   0e02     MOVLW     0x2            		command = ((unsigned int)(cmd1) << 8) + cmd2;                                  e:\iro_svn\opensprints\FW\user\user.c
00111c   cfdb     MOVFF     0xfdb,0x2c                                                                                      
00111e   f02c                                                                                                               
001120   c02c     MOVFF     0x2c,0x2d                                                                                       
001122   f02d                                                                                                               
001124   6a2c     CLRF      0x2c,0x0                                                                                        
001126   0e03     MOVLW     0x3                                                                                             
001128   50db     MOVF      0xdb,0x0,0x0                                                                                    
00112a   0100     MOVLB     0x0                                                                                             
00112c   242c     ADDWF     0x2c,0x0,0x0                                                                                    
00112e   6e2a     MOVWF     0x2a,0x0                                                                                        
001130   0e00     MOVLW     0x0                                                                                             
001132   202d     ADDWFC    0x2d,0x0,0x0                                                                                    
001134   6e2b     MOVWF     0x2b,0x0                                                                                        
001136   c02a     MOVFF     0x2a,0xfde                                                                                      
001138   ffde                                                                                                               
00113a   c02b     MOVFF     0x2b,0xfdd                                                                                      
00113c   ffdd                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now 'command' is equal to one or two bytes of our command                    e:\iro_svn\opensprints\FW\user\user.c
00113e   0e00     MOVLW     0x0            	switch (command)                                                                e:\iro_svn\opensprints\FW\user\user.c
001140   cfdb     MOVFF     0xfdb,0x1e                                                                                      
001142   f01e                                                                                                               
001144   0e01     MOVLW     0x1                                                                                             
001146   cfdb     MOVFF     0xfdb,0x1f                                                                                      
001148   f01f                                                                                                               
00114a   0e57     MOVLW     0x57                                                                                            
00114c   181e     XORWF     0x1e,0x0,0x0                                                                                    
00114e   e102     BNZ       0x1154                                                                                          
001150   0e48     MOVLW     0x48                                                                                            
001152   181f     XORWF     0x1f,0x0,0x0                                                                                    
001154   e101     BNZ       0x1158                                                                                          
001156   d0f5     BRA       0x1342                                                                                          
001158   0e54     MOVLW     0x54                                                                                            
00115a   181e     XORWF     0x1e,0x0,0x0                                                                                    
00115c   e102     BNZ       0x1162                                                                                          
00115e   0e53     MOVLW     0x53                                                                                            
001160   181f     XORWF     0x1f,0x0,0x0                                                                                    
001162   e101     BNZ       0x1166                                                                                          
001164   d0eb     BRA       0x133c                                                                                          
001166   0e4f     MOVLW     0x4f                                                                                            
001168   181e     XORWF     0x1e,0x0,0x0                                                                                    
00116a   e102     BNZ       0x1170                                                                                          
00116c   0e47     MOVLW     0x47                                                                                            
00116e   181f     XORWF     0x1f,0x0,0x0                                                                                    
001170   e101     BNZ       0x1174                                                                                          
001172   d0e1     BRA       0x1336                                                                                          
001174   0e49     MOVLW     0x49                                                                                            
001176   181e     XORWF     0x1e,0x0,0x0                                                                                    
001178   e102     BNZ       0x117e                                                                                          
00117a   0e43     MOVLW     0x43                                                                                            
00117c   181f     XORWF     0x1f,0x0,0x0                                                                                    
00117e   e101     BNZ       0x1182                                                                                          
001180   d0d7     BRA       0x1330                                                                                          
001182   0e49     MOVLW     0x49                                                                                            
001184   181e     XORWF     0x1e,0x0,0x0                                                                                    
001186   e102     BNZ       0x118c                                                                                          
001188   0e52     MOVLW     0x52                                                                                            
00118a   181f     XORWF     0x1f,0x0,0x0                                                                                    
00118c   e101     BNZ       0x1190                                                                                          
00118e   d0cd     BRA       0x132a                                                                                          
001190   0e49     MOVLW     0x49                                                                                            
001192   181e     XORWF     0x1e,0x0,0x0                                                                                    
001194   e102     BNZ       0x119a                                                                                          
001196   0e53     MOVLW     0x53                                                                                            
001198   181f     XORWF     0x1f,0x0,0x0                                                                                    
00119a   e101     BNZ       0x119e                                                                                          
00119c   d0c3     BRA       0x1324                                                                                          
00119e   0e53     MOVLW     0x53                                                                                            
0011a0   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011a2   e102     BNZ       0x11a8                                                                                          
0011a4   0e43     MOVLW     0x43                                                                                            
0011a6   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011a8   e101     BNZ       0x11ac                                                                                          
0011aa   d0b9     BRA       0x131e                                                                                          
0011ac   0e53     MOVLW     0x53                                                                                            
0011ae   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011b0   e102     BNZ       0x11b6                                                                                          
0011b2   0e52     MOVLW     0x52                                                                                            
0011b4   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011b6   e101     BNZ       0x11ba                                                                                          
0011b8   d0af     BRA       0x1318                                                                                          
0011ba   0e53     MOVLW     0x53                                                                                            
0011bc   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011be   e102     BNZ       0x11c4                                                                                          
0011c0   0e53     MOVLW     0x53                                                                                            
0011c2   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011c4   e101     BNZ       0x11c8                                                                                          
0011c6   d0a5     BRA       0x1312                                                                                          
0011c8   0e53     MOVLW     0x53                                                                                            
0011ca   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011cc   e102     BNZ       0x11d2                                                                                          
0011ce   0e42     MOVLW     0x42                                                                                            
0011d0   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011d2   e101     BNZ       0x11d6                                                                                          
0011d4   d09b     BRA       0x130c                                                                                          
0011d6   0e43     MOVLW     0x43                                                                                            
0011d8   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011da   e102     BNZ       0x11e0                                                                                          
0011dc   0e42     MOVLW     0x42                                                                                            
0011de   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011e0   e101     BNZ       0x11e4                                                                                          
0011e2   d091     BRA       0x1306                                                                                          
0011e4   0e43     MOVLW     0x43                                                                                            
0011e6   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011e8   e102     BNZ       0x11ee                                                                                          
0011ea   0e52     MOVLW     0x52                                                                                            
0011ec   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011ee   e101     BNZ       0x11f2                                                                                          
0011f0   d087     BRA       0x1300                                                                                          
0011f2   0e4f     MOVLW     0x4f                                                                                            
0011f4   181e     XORWF     0x1e,0x0,0x0                                                                                    
0011f6   e102     BNZ       0x11fc                                                                                          
0011f8   0e42     MOVLW     0x42                                                                                            
0011fa   181f     XORWF     0x1f,0x0,0x0                                                                                    
0011fc   e101     BNZ       0x1200                                                                                          
0011fe   d07d     BRA       0x12fa                                                                                          
001200   0e57     MOVLW     0x57                                                                                            
001202   181e     XORWF     0x1e,0x0,0x0                                                                                    
001204   e102     BNZ       0x120a                                                                                          
001206   0e4d     MOVLW     0x4d                                                                                            
001208   181f     XORWF     0x1f,0x0,0x0                                                                                    
00120a   e075     BZ        0x12f6                                                                                          
00120c   0e52     MOVLW     0x52                                                                                            
00120e   181e     XORWF     0x1e,0x0,0x0                                                                                    
001210   e102     BNZ       0x1216                                                                                          
001212   0e4d     MOVLW     0x4d                                                                                            
001214   181f     XORWF     0x1f,0x0,0x0                                                                                    
001216   e06d     BZ        0x12f2                                                                                          
001218   0e44     MOVLW     0x44                                                                                            
00121a   181e     XORWF     0x1e,0x0,0x0                                                                                    
00121c   e102     BNZ       0x1222                                                                                          
00121e   0e50     MOVLW     0x50                                                                                            
001220   181f     XORWF     0x1f,0x0,0x0                                                                                    
001222   e065     BZ        0x12ee                                                                                          
001224   0e4f     MOVLW     0x4f                                                                                            
001226   181e     XORWF     0x1e,0x0,0x0                                                                                    
001228   e102     BNZ       0x122e                                                                                          
00122a   0e50     MOVLW     0x50                                                                                            
00122c   181f     XORWF     0x1f,0x0,0x0                                                                                    
00122e   e05d     BZ        0x12ea                                                                                          
001230   0e49     MOVLW     0x49                                                                                            
001232   181e     XORWF     0x1e,0x0,0x0                                                                                    
001234   e102     BNZ       0x123a                                                                                          
001236   0e50     MOVLW     0x50                                                                                            
001238   181f     XORWF     0x1f,0x0,0x0                                                                                    
00123a   e055     BZ        0x12e6                                                                                          
00123c   0e58     MOVLW     0x58                                                                                            
00123e   181e     XORWF     0x1e,0x0,0x0                                                                                    
001240   e102     BNZ       0x1246                                                                                          
001242   0e54     MOVLW     0x54                                                                                            
001244   181f     XORWF     0x1f,0x0,0x0                                                                                    
001246   e04c     BZ        0x12e0                                                                                          
001248   0e54     MOVLW     0x54                                                                                            
00124a   181e     XORWF     0x1e,0x0,0x0                                                                                    
00124c   e101     BNZ       0x1250                                                                                          
00124e   501f     MOVF      0x1f,0x0,0x0                                                                                    
001250   e045     BZ        0x12dc                                                                                          
001252   0e41     MOVLW     0x41                                                                                            
001254   181e     XORWF     0x1e,0x0,0x0                                                                                    
001256   e101     BNZ       0x125a                                                                                          
001258   501f     MOVF      0x1f,0x0,0x0                                                                                    
00125a   e03e     BZ        0x12d8                                                                                          
00125c   0e56     MOVLW     0x56                                                                                            
00125e   181e     XORWF     0x1e,0x0,0x0                                                                                    
001260   e101     BNZ       0x1264                                                                                          
001262   501f     MOVF      0x1f,0x0,0x0                                                                                    
001264   e037     BZ        0x12d4                                                                                          
001266   0e49     MOVLW     0x49                                                                                            
001268   181e     XORWF     0x1e,0x0,0x0                                                                                    
00126a   e101     BNZ       0x126e                                                                                          
00126c   501f     MOVF      0x1f,0x0,0x0                                                                                    
00126e   e030     BZ        0x12d0                                                                                          
001270   0e4f     MOVLW     0x4f                                                                                            
001272   181e     XORWF     0x1e,0x0,0x0                                                                                    
001274   e101     BNZ       0x1278                                                                                          
001276   501f     MOVF      0x1f,0x0,0x0                                                                                    
001278   e029     BZ        0x12cc                                                                                          
00127a   0e55     MOVLW     0x55                                                                                            
00127c   181e     XORWF     0x1e,0x0,0x0                                                                                    
00127e   e102     BNZ       0x1284                                                                                          
001280   0e43     MOVLW     0x43                                                                                            
001282   181f     XORWF     0x1f,0x0,0x0                                                                                    
001284   e021     BZ        0x12c8                                                                                          
001286   0e58     MOVLW     0x58                                                                                            
001288   181e     XORWF     0x1e,0x0,0x0                                                                                    
00128a   e102     BNZ       0x1290                                                                                          
00128c   0e43     MOVLW     0x43                                                                                            
00128e   181f     XORWF     0x1f,0x0,0x0                                                                                    
001290   e018     BZ        0x12c2                                                                                          
001292   0e43     MOVLW     0x43                                                                                            
001294   181e     XORWF     0x1e,0x0,0x0                                                                                    
001296   e101     BNZ       0x129a                                                                                          
001298   501f     MOVF      0x1f,0x0,0x0                                                                                    
00129a   e011     BZ        0x12be                                                                                          
00129c   0e52     MOVLW     0x52                                                                                            
00129e   181e     XORWF     0x1e,0x0,0x0                                                                                    
0012a0   e101     BNZ       0x12a4                                                                                          
0012a2   501f     MOVF      0x1f,0x0,0x0                                                                                    
0012a4   e00a     BZ        0x12ba                                                                                          
0012a6   0e58     MOVLW     0x58                                                                                            
0012a8   181e     XORWF     0x1e,0x0,0x0                                                                                    
0012aa   e102     BNZ       0x12b0                                                                                          
0012ac   0e52     MOVLW     0x52                                                                                            
0012ae   181f     XORWF     0x1f,0x0,0x0                                                                                    
0012b0   e001     BZ        0x12b4                                                                                          
0012b2   d04a     BRA       0x1348                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('R' * 256) + 'X':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// For receiving serial                                                       e:\iro_svn\opensprints\FW\user\user.c
0012b4   ece9     CALL      0x1bd2,0x0     			parse_RX_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012b6   f00d                                                                                                               
0012b8   d086     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case 'R':                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Reset command (resets everything to power-on state)                        e:\iro_svn\opensprints\FW\user\user.c
0012ba   d8bc     RCALL     0x1434         			parse_R_packet ();                                                            e:\iro_svn\opensprints\FW\user\user.c
0012bc   d084     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case 'C':                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Configure command (configure ports for Input or Ouptut)                    e:\iro_svn\opensprints\FW\user\user.c
0012be   d93f     RCALL     0x153e         			parse_C_packet ();                                                            e:\iro_svn\opensprints\FW\user\user.c
0012c0   d082     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('C' * 256) + 'X':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// For configuring serial port                                                e:\iro_svn\opensprints\FW\user\user.c
0012c2   eceb     CALL      0x1bd6,0x0     			parse_CX_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012c4   f00d                                                                                                               
0012c6   d07f     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('C' * 256) + 'U':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// For configuring UBW                                                        e:\iro_svn\opensprints\FW\user\user.c
0012c8   d8b9     RCALL     0x143c         			parse_CU_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012ca   d07d     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case 'O':                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Output command (tell the ports to output something)                        e:\iro_svn\opensprints\FW\user\user.c
0012cc   d995     RCALL     0x15f8         			parse_O_packet ();                                                            e:\iro_svn\opensprints\FW\user\user.c
0012ce   d07b     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case 'I':                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Input command (return the current status of the ports)                     e:\iro_svn\opensprints\FW\user\user.c
0012d0   d9c6     RCALL     0x165e         			parse_I_packet ();                                                            e:\iro_svn\opensprints\FW\user\user.c
0012d2   d079     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case 'V':                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Version command                                                            e:\iro_svn\opensprints\FW\user\user.c
0012d4   d9df     RCALL     0x1694         			parse_V_packet ();                                                            e:\iro_svn\opensprints\FW\user\user.c
0012d6   d077     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case 'A':                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Analog command                                                             e:\iro_svn\opensprints\FW\user\user.c
0012d8   d9ee     RCALL     0x16b6         			parse_A_packet ();                                                            e:\iro_svn\opensprints\FW\user\user.c
0012da   d075     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case 'T':                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// For timed I/O                                                              e:\iro_svn\opensprints\FW\user\user.c
0012dc   d8ef     RCALL     0x14bc         			parse_T_packet ();                                                            e:\iro_svn\opensprints\FW\user\user.c
0012de   d073     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}	                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('T' * 256) + 'X':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// For transmitting serial                                                    e:\iro_svn\opensprints\FW\user\user.c
0012e0   ece7     CALL      0x1bce,0x0     			parse_TX_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012e2   f00d                                                                                                               
0012e4   d070     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('P' * 256) + 'I':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// PI for reading a single pin                                                e:\iro_svn\opensprints\FW\user\user.c
0012e6   db5a     RCALL     0x199c         			parse_PI_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012e8   d06e     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('P' * 256) + 'O':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// PO for setting a single pin                                                e:\iro_svn\opensprints\FW\user\user.c
0012ea   dbd8     RCALL     0x1a9c         			parse_PO_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012ec   d06c     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('P' * 256) + 'D':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// PD for setting a pin's direction                                           e:\iro_svn\opensprints\FW\user\user.c
0012ee   daba     RCALL     0x1864         			parse_PD_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012f0   d06a     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('M' * 256) + 'R':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// MR for Memory Read                                                         e:\iro_svn\opensprints\FW\user\user.c
0012f2   da77     RCALL     0x17e2         			parse_MR_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012f4   d068     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('M' * 256) + 'W':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// MW for Memory Write                                                        e:\iro_svn\opensprints\FW\user\user.c
0012f6   da40     RCALL     0x1778         			parse_MW_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
0012f8   d066     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('B' * 256) + 'O':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// MR for Fast Parallel Output                                                e:\iro_svn\opensprints\FW\user\user.c
0012fa   ecd9     CALL      0x1db2,0x0     			parse_BO_packet ();		                                                         e:\iro_svn\opensprints\FW\user\user.c
0012fc   f00e                                                                                                               
0012fe   d063     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('R' * 256) + 'C':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// RC for RC servo output                                                     e:\iro_svn\opensprints\FW\user\user.c
001300   eced     CALL      0x1bda,0x0     			parse_RC_packet ();		                                                         e:\iro_svn\opensprints\FW\user\user.c
001302   f00d                                                                                                               
001304   d060     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('B' * 256) + 'C':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// BC for Fast Parallel Configure                                             e:\iro_svn\opensprints\FW\user\user.c
001306   ec92     CALL      0x1d24,0x0     			parse_BC_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
001308   f00e                                                                                                               
00130a   d05d     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('B' * 256) + 'S':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// BS for Fast Binary Stream output                                           e:\iro_svn\opensprints\FW\user\user.c
00130c   ec20     CALL      0x2040,0x0     			parse_BS_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
00130e   f010                                                                                                               
001310   d05a     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('S' * 256) + 'S':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// SS for Send SPI                                                            e:\iro_svn\opensprints\FW\user\user.c
001312   ecdc     CALL      0x21b8,0x0     			parse_SS_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
001314   f010                                                                                                               
001316   d057     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('R' * 256) + 'S':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// RS for Receive SPI                                                         e:\iro_svn\opensprints\FW\user\user.c
001318   ecdf     CALL      0x21be,0x0     			parse_RS_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
00131a   f010                                                                                                               
00131c   d054     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('C' * 256) + 'S':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// CS for Configure SPI                                                       e:\iro_svn\opensprints\FW\user\user.c
00131e   ece2     CALL      0x21c4,0x0     			parse_CS_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
001320   f010                                                                                                               
001322   d051     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('S' * 256) + 'I':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// SI for Send I2C                                                            e:\iro_svn\opensprints\FW\user\user.c
001324   ece5     CALL      0x21ca,0x0     			parse_SI_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
001326   f010                                                                                                               
001328   d04e     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('R' * 256) + 'I':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// RI for Receive I2C                                                         e:\iro_svn\opensprints\FW\user\user.c
00132a   ece8     CALL      0x21d0,0x0     			parse_RI_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
00132c   f010                                                                                                               
00132e   d04b     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('C' * 256) + 'I':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// CI for Configure I2C                                                       e:\iro_svn\opensprints\FW\user\user.c
001330   eceb     CALL      0x21d6,0x0     			parse_CI_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
001332   f010                                                                                                               
001334   d048     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('G' * 256) + 'O':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001336   ecee     CALL      0x21dc,0x0     			parse_GO_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
001338   f010                                                                                                               
00133a   d045     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('S' * 256) + 'T':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
00133c   ecfc     CALL      0x21f8,0x0     			parse_ST_packet ();                                                           e:\iro_svn\opensprints\FW\user\user.c
00133e   f010                                                                                                               
001340   d042     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		case ('H' * 256) + 'W':                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001342   ec01     CALL      0x2202,0x0     			parse_HW_packet();                                                            e:\iro_svn\opensprints\FW\user\user.c
001344   f011                                                                                                               
001346   d03f     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		default:                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001348   0e03     MOVLW     0x3            			if (0 == cmd2)                                                                e:\iro_svn\opensprints\FW\user\user.c
00134a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00134c   e11a     BNZ       0x1382                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// Send back 'unknown command' error                                         e:\iro_svn\opensprints\FW\user\user.c
                                           				printf (                                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           					 (rom char *)"!8 Err: Unknown command '%c:%2X'\r\n"                         e:\iro_svn\opensprints\FW\user\user.c
00135e   0e77     MOVLW     0x77           					,cmd1                                                                       e:\iro_svn\opensprints\FW\user\user.c
001360   6e2a     MOVWF     0x2a,0x0                                                                                        
001362   0e42     MOVLW     0x42                                                                                            
001364   6e2b     MOVWF     0x2b,0x0                                                                                        
001366   6a2c     CLRF      0x2c,0x0                                                                                        
001368   c02a     MOVFF     0x2a,0xfe6                                                                                      
00136a   ffe6                                                                                                               
00136c   c02b     MOVFF     0x2b,0xfe6                                                                                      
00136e   ffe6                                                                                                               
001370   c02c     MOVFF     0x2c,0xfe6                                                                                      
001372   ffe6                                                                                                               
001356   0e02     MOVLW     0x2            					,cmd1                                                                       e:\iro_svn\opensprints\FW\user\user.c
001358   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00135a   ffe6                                                                                                               
00135c   6ae6     CLRF      0xe6,0x0                                                                                        
00134e   0e02     MOVLW     0x2            				);                                                                           e:\iro_svn\opensprints\FW\user\user.c
001350   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001352   ffe6                                                                                                               
001354   6ae6     CLRF      0xe6,0x0                                                                                        
001374   ecc8     CALL      0x4590,0x0                                                                                      
001376   f022                                                                                                               
001378   6e2d     MOVWF     0x2d,0x0                                                                                        
00137a   0e07     MOVLW     0x7                                                                                             
00137c   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
00137e   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
001380   d021     BRA       0x13c4         			else                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// Send back 'unknown command' error                                         e:\iro_svn\opensprints\FW\user\user.c
                                           				printf (                                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           					 (rom char *)"!8 Err: Unknown command '%c%c:%2X%2X'\r\n"                    e:\iro_svn\opensprints\FW\user\user.c
0013a2   0e4f     MOVLW     0x4f           					,cmd1                                                                       e:\iro_svn\opensprints\FW\user\user.c
0013a4   6e2a     MOVWF     0x2a,0x0                                                                                        
0013a6   0e42     MOVLW     0x42                                                                                            
0013a8   6e2b     MOVWF     0x2b,0x0                                                                                        
0013aa   6a2c     CLRF      0x2c,0x0                                                                                        
0013ac   c02a     MOVFF     0x2a,0xfe6                                                                                      
0013ae   ffe6                                                                                                               
0013b0   c02b     MOVFF     0x2b,0xfe6                                                                                      
0013b2   ffe6                                                                                                               
0013b4   c02c     MOVFF     0x2c,0xfe6                                                                                      
0013b6   ffe6                                                                                                               
00139a   0e02     MOVLW     0x2            					,cmd2                                                                       e:\iro_svn\opensprints\FW\user\user.c
00139c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00139e   ffe6                                                                                                               
0013a0   6ae6     CLRF      0xe6,0x0                                                                                        
001392   0e03     MOVLW     0x3            					,cmd1                                                                       e:\iro_svn\opensprints\FW\user\user.c
001394   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001396   ffe6                                                                                                               
001398   6ae6     CLRF      0xe6,0x0                                                                                        
00138a   0e02     MOVLW     0x2            					,cmd2                                                                       e:\iro_svn\opensprints\FW\user\user.c
00138c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00138e   ffe6                                                                                                               
001390   6ae6     CLRF      0xe6,0x0                                                                                        
001382   0e03     MOVLW     0x3            				);                                                                           e:\iro_svn\opensprints\FW\user\user.c
001384   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001386   ffe6                                                                                                               
001388   6ae6     CLRF      0xe6,0x0                                                                                        
0013b8   ecc8     CALL      0x4590,0x0                                                                                      
0013ba   f022                                                                                                               
0013bc   6e2d     MOVWF     0x2d,0x0                                                                                        
0013be   0e0b     MOVLW     0xb                                                                                             
0013c0   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0013c2   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
0013c4   d000     BRA       0x13c6         			break;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Double check that our output pointer is now at the ending <CR>               e:\iro_svn\opensprints\FW\user\user.c
                                           	// If it is not, this indicates that there were extra characters that           e:\iro_svn\opensprints\FW\user\user.c
                                           	// the command parsing routine didn't eat. This would be an error and needs     e:\iro_svn\opensprints\FW\user\user.c
                                           	// to be reported. (Ignore for Reset command because FIFO pointers get cleared.) e:\iro_svn\opensprints\FW\user\user.c
                                           	if (                                                                            e:\iro_svn\opensprints\FW\user\user.c
0013c6   0101     MOVLB     0x1            		(g_RX_buf[g_RX_buf_out] != kCR && 0 == error_byte)                             e:\iro_svn\opensprints\FW\user\user.c
0013c8   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0013ca   6aea     CLRF      0xea,0x0                                                                                        
0013cc   0f40     ADDLW     0x40                                                                                            
0013ce   6ee9     MOVWF     0xe9,0x0                                                                                        
0013d0   0e02     MOVLW     0x2                                                                                             
0013d2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0013d4   50ef     MOVF      0xef,0x0,0x0                                                                                    
0013d6   080d     SUBLW     0xd                                                                                             
0013d8   e00d     BZ        0x13f4                                                                                          
0013da   500d     MOVF      0xd,0x0,0x0                                                                                     
0013dc   e10b     BNZ       0x13f4                                                                                          
                                           		&&                                                                             e:\iro_svn\opensprints\FW\user\user.c
0013de   0e52     MOVLW     0x52           		('R' != command)                                                               e:\iro_svn\opensprints\FW\user\user.c
0013e0   6e2a     MOVWF     0x2a,0x0                                                                                        
0013e2   6a2b     CLRF      0x2b,0x0                                                                                        
0013e4   50df     MOVF      0xdf,0x0,0x0                                                                                    
0013e6   182a     XORWF     0x2a,0x0,0x0                                                                                    
0013e8   e103     BNZ       0x13f0                                                                                          
0013ea   52de     MOVF      0xde,0x1,0x0                                                                                    
0013ec   50dd     MOVF      0xdd,0x0,0x0                                                                                    
0013ee   182b     XORWF     0x2b,0x0,0x0                                                                                    
0013f0   e001     BZ        0x13f4         	)                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0013f2   8e0d     BSF       0xd,0x7,0x0    		bitset (error_byte, kERROR_BYTE_EXTRA_CHARACTERS);                             e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Clean up by skipping over any bytes we haven't eaten                         e:\iro_svn\opensprints\FW\user\user.c
                                           	// This is safe since we parse each packet as we get a <CR>                     e:\iro_svn\opensprints\FW\user\user.c
                                           	// (i.e. g_RX_buf_in doesn't move while we are in this routine)                 e:\iro_svn\opensprints\FW\user\user.c
0013f4   c1a0     MOVFF     0x1a0,0x1a1    	g_RX_buf_out = g_RX_buf_in;                                                     e:\iro_svn\opensprints\FW\user\user.c
0013f6   f1a1                                                                                                               
0013f8   0e04     MOVLW     0x4            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
0013fa   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0013fc   e202     BC        0x1402                                                                                          
0013fe   6ae1     CLRF      0xe1,0x0                                                                                        
001400   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001402   6ee1     MOVWF     0xe1,0x0                                                                                        
001404   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001406   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001408   ffd9                                                                                                               
00140a   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Print out the positive acknoledgement that the packet was received            e:\iro_svn\opensprints\FW\user\user.c
                                           // if we have acks turned on.                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           void print_ack(void)                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
00140c   0101     MOVLB     0x1            	if (g_ack_enable)                                                               e:\iro_svn\opensprints\FW\user\user.c
00140e   51a6     MOVF      0xa6,0x0,0x1                                                                                    
001410   e010     BZ        0x1432                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001412   0e16     MOVLW     0x16           		printf ((rom char *)st_OK);                                                    e:\iro_svn\opensprints\FW\user\user.c
001414   6e2a     MOVWF     0x2a,0x0                                                                                        
001416   0e48     MOVLW     0x48                                                                                            
001418   6e2b     MOVWF     0x2b,0x0                                                                                        
00141a   6a2c     CLRF      0x2c,0x0                                                                                        
00141c   c02a     MOVFF     0x2a,0xfe6                                                                                      
00141e   ffe6                                                                                                               
001420   c02b     MOVFF     0x2b,0xfe6                                                                                      
001422   ffe6                                                                                                               
001424   c02c     MOVFF     0x2c,0xfe6                                                                                      
001426   ffe6                                                                                                               
001428   ecc8     CALL      0x4590,0x0                                                                                      
00142a   f022                                                                                                               
00142c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00142e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001430   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001432   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Return all I/Os to their default power-on values                              e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_R_packet(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
001434   ecd5     CALL      0xbaa,0x0      	UserInit ();                                                                    e:\iro_svn\opensprints\FW\user\user.c
001436   f005                                                                                                               
001438   dfe9     RCALL     0x140c         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
00143a   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // CU is "Configure UBW" and controls system-wide configruation values           e:\iro_svn\opensprints\FW\user\user.c
                                           // "CU,<parameter_number>,<paramter_value><CR>"                                  e:\iro_svn\opensprints\FW\user\user.c
                                           // <paramter_number>	<parameter_value>                                           e:\iro_svn\opensprints\FW\user\user.c
                                           // 1					{1|0} turns on or off the 'ack' ("OK" at end of packets)                e:\iro_svn\opensprints\FW\user\user.c
00143c   cfd9     MOVFF     0xfd9,0xfe6    void parse_CU_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
00143e   ffe6                                                                                                               
001440   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001442   ffd9                                                                                                               
001444   0e03     MOVLW     0x3                                                                                             
001446   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char parameter_number;                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	signed int paramater_value;                                                     e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001448   0e01     MOVLW     0x1            	parameter_number = extract_number (kUCHAR);                                     e:\iro_svn\opensprints\FW\user\user.c
00144a   6ee6     MOVWF     0xe6,0x0                                                                                        
00144c   ec06     CALL      0x220c,0x0                                                                                      
00144e   f011                                                                                                               
001450   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001452   501d     MOVF      0x1d,0x0,0x0                                                                                    
001454   6edf     MOVWF     0xdf,0x0                                                                                        
001456   0e02     MOVLW     0x2            	paramater_value = extract_number (kINT);                                        e:\iro_svn\opensprints\FW\user\user.c
001458   6ee6     MOVWF     0xe6,0x0                                                                                        
00145a   ec06     CALL      0x220c,0x0                                                                                      
00145c   f011                                                                                                               
00145e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001460   52de     MOVF      0xde,0x1,0x0                                                                                    
001462   c01d     MOVFF     0x1d,0xfde                                                                                      
001464   ffde                                                                                                               
001466   c01e     MOVFF     0x1e,0xfdd                                                                                      
001468   ffdd                                                                                                               
00146a   52dd     MOVF      0xdd,0x1,0x0                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
00146c   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
00146e   e001     BZ        0x1472                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001470   d01b     BRA       0x14a8         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001472   04df     DECF      0xdf,0x0,0x0   	if (1 == parameter_number)                                                      e:\iro_svn\opensprints\FW\user\user.c
001474   e118     BNZ       0x14a6                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001476   50d9     MOVF      0xd9,0x0,0x0   		if (0 == paramater_value || 1 == paramater_value)                              e:\iro_svn\opensprints\FW\user\user.c
001478   0f01     ADDLW     0x1                                                                                             
00147a   6ee9     MOVWF     0xe9,0x0                                                                                        
00147c   cfda     MOVFF     0xfda,0xfea                                                                                     
00147e   ffea                                                                                                               
001480   50ee     MOVF      0xee,0x0,0x0                                                                                    
001482   10ed     IORWF     0xed,0x0,0x0                                                                                    
001484   e00b     BZ        0x149c                                                                                          
001486   0e01     MOVLW     0x1                                                                                             
001488   6e2a     MOVWF     0x2a,0x0                                                                                        
00148a   6a2b     CLRF      0x2b,0x0                                                                                        
00148c   0e01     MOVLW     0x1                                                                                             
00148e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001490   182a     XORWF     0x2a,0x0,0x0                                                                                    
001492   e103     BNZ       0x149a                                                                                          
001494   0e02     MOVLW     0x2                                                                                             
001496   50db     MOVF      0xdb,0x0,0x0                                                                                    
001498   182b     XORWF     0x2b,0x0,0x0                                                                                    
00149a   e104     BNZ       0x14a4                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
00149c   0e01     MOVLW     0x1            			g_ack_enable = paramater_value;			                                            e:\iro_svn\opensprints\FW\user\user.c
00149e   cfdb     MOVFF     0xfdb,0x1a6                                                                                     
0014a0   f1a6                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
0014a2   d001     BRA       0x14a6         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0014a4   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
0014a6   dfb2     RCALL     0x140c         	print_ack();                                                                    e:\iro_svn\opensprints\FW\user\user.c
0014a8   0e03     MOVLW     0x3            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
0014aa   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0014ac   e202     BC        0x14b2                                                                                          
0014ae   6ae1     CLRF      0xe1,0x0                                                                                        
0014b0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0014b2   6ee1     MOVWF     0xe1,0x0                                                                                        
0014b4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0014b6   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0014b8   ffd9                                                                                                               
0014ba   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // "T" Packet                                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           // Causes PIC to sample digital or analog inputs at a regular interval and send  e:\iro_svn\opensprints\FW\user\user.c
                                           // I (or A) packets back at that interval.                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // Send T,0,0<CR> to stop I (or A) packets                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // FORMAT: T,<TIME_BETWEEN_UPDATES_IN_MS>,<MODE><CR>                             e:\iro_svn\opensprints\FW\user\user.c
                                           // <MODE> is 0 for digital (I packets) and 1 for analog (A packets)              e:\iro_svn\opensprints\FW\user\user.c
                                           // EXAMPLE: "T,4000,0<CR>" to send an I packet back every 4 seconds.             e:\iro_svn\opensprints\FW\user\user.c
                                           // EXAMPLE: "T,2000,1<CR>" to send an A packet back every 2 seconds.             e:\iro_svn\opensprints\FW\user\user.c
0014bc   cfd9     MOVFF     0xfd9,0xfe6    void parse_T_packet(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
0014be   ffe6                                                                                                               
0014c0   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0014c2   ffd9                                                                                                               
0014c4   0e03     MOVLW     0x3                                                                                             
0014c6   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned int value;                                                             e:\iro_svn\opensprints\FW\user\user.c
0014c8   0e02     MOVLW     0x2            	unsigned char mode = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
0014ca   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Extract the <TIME_BETWEEN_UPDATES_IN_MS> value                               e:\iro_svn\opensprints\FW\user\user.c
0014cc   0e03     MOVLW     0x3            	time_between_updates = extract_number (kUINT);                                  e:\iro_svn\opensprints\FW\user\user.c
0014ce   6ee6     MOVWF     0xe6,0x0                                                                                        
0014d0   ec06     CALL      0x220c,0x0                                                                                      
0014d2   f011                                                                                                               
0014d4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0014d6   c01d     MOVFF     0x1d,0x0                                                                                        
0014d8   f000                                                                                                               
0014da   c01e     MOVFF     0x1e,0x1                                                                                        
0014dc   f001                                                                                                               
                                           	// Extract the <MODE> value                                                     e:\iro_svn\opensprints\FW\user\user.c
0014de   0e01     MOVLW     0x1            	mode = extract_number (kUCHAR);                                                 e:\iro_svn\opensprints\FW\user\user.c
0014e0   6ee6     MOVWF     0xe6,0x0                                                                                        
0014e2   ec06     CALL      0x220c,0x0                                                                                      
0014e4   f011                                                                                                               
0014e6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0014e8   0e02     MOVLW     0x2                                                                                             
0014ea   c01d     MOVFF     0x1d,0xfdb                                                                                      
0014ec   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
0014ee   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
0014f0   e001     BZ        0x14f4                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0014f2   d01b     BRA       0x152a         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now start up the timer at the right rate or shut                             e:\iro_svn\opensprints\FW\user\user.c
                                           	// it down.                                                                     e:\iro_svn\opensprints\FW\user\user.c
0014f4   0e02     MOVLW     0x2            	if (0 == mode)                                                                  e:\iro_svn\opensprints\FW\user\user.c
0014f6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0014f8   e10c     BNZ       0x1512                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0014fa   5000     MOVF      0x0,0x0,0x0    		if (0 == time_between_updates)                                                 e:\iro_svn\opensprints\FW\user\user.c
0014fc   1001     IORWF     0x1,0x0,0x0                                                                                     
0014fe   e103     BNZ       0x1506                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Turn off sending of I packets.                                             e:\iro_svn\opensprints\FW\user\user.c
001500   6a02     CLRF      0x2,0x0        			ISR_D_RepeatRate = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
001502   6a03     CLRF      0x3,0x0                                                                                         
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001504   d005     BRA       0x1510         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001506   84ca     BSF       0xca,0x2,0x0   			T2CONbits.TMR2ON = 1;                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           			// Eventually gaurd this section from interrupts                              e:\iro_svn\opensprints\FW\user\user.c
001508   c000     MOVFF     0x0,0x2        			ISR_D_RepeatRate = time_between_updates;                                      e:\iro_svn\opensprints\FW\user\user.c
00150a   f002                                                                                                               
00150c   c001     MOVFF     0x1,0x3                                                                                         
00150e   f003                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}	                                                                              e:\iro_svn\opensprints\FW\user\user.c
001510   d00b     BRA       0x1528         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001512   5000     MOVF      0x0,0x0,0x0    		if (0 == time_between_updates)                                                 e:\iro_svn\opensprints\FW\user\user.c
001514   1001     IORWF     0x1,0x0,0x0                                                                                     
001516   e103     BNZ       0x151e                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Turn off sending of A packets.                                             e:\iro_svn\opensprints\FW\user\user.c
001518   6a07     CLRF      0x7,0x0        			ISR_A_RepeatRate = 0;                                                         e:\iro_svn\opensprints\FW\user\user.c
00151a   6a08     CLRF      0x8,0x0                                                                                         
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
00151c   d005     BRA       0x1528         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
00151e   84ca     BSF       0xca,0x2,0x0   			T2CONbits.TMR2ON = 1;                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           			// Eventually gaurd this section from interrupts                              e:\iro_svn\opensprints\FW\user\user.c
001520   c000     MOVFF     0x0,0x7        			ISR_A_RepeatRate = time_between_updates;                                      e:\iro_svn\opensprints\FW\user\user.c
001522   f007                                                                                                               
001524   c001     MOVFF     0x1,0x8                                                                                         
001526   f008                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
001528   df71     RCALL     0x140c         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
00152a   0e03     MOVLW     0x3            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
00152c   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00152e   e202     BC        0x1534                                                                                          
001530   6ae1     CLRF      0xe1,0x0                                                                                        
001532   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001534   6ee1     MOVWF     0xe1,0x0                                                                                        
001536   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001538   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00153a   ffd9                                                                                                               
00153c   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // FORMAT: C,<portA_IO>,<portB_IO>,<portC_IO>,<analog_config><CR>                e:\iro_svn\opensprints\FW\user\user.c
                                           // EXAMPLE: "C,255,0,4,0<CR>"                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           // <portX_IO> is the byte sent to the Data Direction (DDR) regsiter for          e:\iro_svn\opensprints\FW\user\user.c
                                           // each port. A 1 in a bit location means input, a 0 means output.               e:\iro_svn\opensprints\FW\user\user.c
                                           // <analog_config> is a value between 0 and 12. It tells the UBW                 e:\iro_svn\opensprints\FW\user\user.c
                                           // how many analog inputs to enable. If a zero is sent for this                  e:\iro_svn\opensprints\FW\user\user.c
                                           // parameter, all analog inputs are disabled.                                    e:\iro_svn\opensprints\FW\user\user.c
                                           // For the other values, see the following chart to know what pins are           e:\iro_svn\opensprints\FW\user\user.c
                                           // used for what:                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           //                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           // Note that in the following chart, PortE is references. This port              e:\iro_svn\opensprints\FW\user\user.c
                                           // only exists on the 40 and 44 pin versions of the UBW. For the                 e:\iro_svn\opensprints\FW\user\user.c
                                           // 28 pin versions of the UBW, all PortE based analog pins will return           e:\iro_svn\opensprints\FW\user\user.c
                                           // zero.                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           //                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           // <analog_config>	Analog Inputs Enabled	Pins Used For Analog Inputs             e:\iro_svn\opensprints\FW\user\user.c
                                           // ---------------	---------------------	-------------------------------         e:\iro_svn\opensprints\FW\user\user.c
                                           //	0				<none>					<none>                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           //	1				AN0						A0                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           //	2				AN0,AN1					A0,A1	                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           //	3				AN0,AN1,AN2				A0,A1,A2	                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           //	4				AN0,AN1,AN2,AN3			A0,A1,A2,A3	                                           e:\iro_svn\opensprints\FW\user\user.c
                                           //	5				AN0,AN1,AN2,AN3,AN4		A0,A1,A2,A3,A5		                                    e:\iro_svn\opensprints\FW\user\user.c
                                           //	6				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0                                   e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5						                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           //	7				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1                                e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6						                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           //	8				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2                             e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6,AN7						                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           //	9				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2                          e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6,AN7,AN8						                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           //	10				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2,B3                      e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6,AN7,AN8,                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN9						                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           //	11				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2,B3,B1                   e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6,AN7,AN8,                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           //						AB9,AN10						                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           //	12				AN0,AN1,AN2,AN3,AN4,	A0,A1,A2,A3,A5,E0,E1,E2,B2,B3,B1,B4                e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN5,AN6,AN7,AN8,                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           //						AN9,AN10,AN11                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // NOTE: it is up to the user to tell the proper port direction bits to be       e:\iro_svn\opensprints\FW\user\user.c
                                           // inputs for the analog channels they wish to use.                              e:\iro_svn\opensprints\FW\user\user.c
00153e   cfd9     MOVFF     0xfd9,0xfe6    void parse_C_packet(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
001540   ffe6                                                                                                               
001542   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001544   ffd9                                                                                                               
001546   0e04     MOVLW     0x4                                                                                             
001548   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char PA, PB, PC, AA;                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char PD, PE;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Extract each of the four values.                                             e:\iro_svn\opensprints\FW\user\user.c
00154a   0e01     MOVLW     0x1            	PA = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
00154c   6ee6     MOVWF     0xe6,0x0                                                                                        
00154e   ec06     CALL      0x220c,0x0                                                                                      
001550   f011                                                                                                               
001552   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001554   501d     MOVF      0x1d,0x0,0x0                                                                                    
001556   6edf     MOVWF     0xdf,0x0                                                                                        
001558   0e01     MOVLW     0x1            	PB = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
00155a   6ee6     MOVWF     0xe6,0x0                                                                                        
00155c   ec06     CALL      0x220c,0x0                                                                                      
00155e   f011                                                                                                               
001560   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001562   0e01     MOVLW     0x1                                                                                             
001564   c01d     MOVFF     0x1d,0xfdb                                                                                      
001566   ffdb                                                                                                               
001568   0e01     MOVLW     0x1            	PC = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
00156a   6ee6     MOVWF     0xe6,0x0                                                                                        
00156c   ec06     CALL      0x220c,0x0                                                                                      
00156e   f011                                                                                                               
001570   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001572   0e02     MOVLW     0x2                                                                                             
001574   c01d     MOVFF     0x1d,0xfdb                                                                                      
001576   ffdb                                                                                                               
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	PD = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           	PE = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
001578   0e01     MOVLW     0x1            	AA = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
00157a   6ee6     MOVWF     0xe6,0x0                                                                                        
00157c   ec06     CALL      0x220c,0x0                                                                                      
00157e   f011                                                                                                               
001580   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001582   0e03     MOVLW     0x3                                                                                             
001584   c01d     MOVFF     0x1d,0xfdb                                                                                      
001586   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
001588   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
00158a   e001     BZ        0x158e                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
00158c   d02b     BRA       0x15e4         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now write those values to the data direction registers.                      e:\iro_svn\opensprints\FW\user\user.c
00158e   50df     MOVF      0xdf,0x0,0x0   	TRISA = PA;                                                                     e:\iro_svn\opensprints\FW\user\user.c
001590   6e92     MOVWF     0x92,0x0                                                                                        
001592   0e01     MOVLW     0x1            	TRISB = PB;                                                                     e:\iro_svn\opensprints\FW\user\user.c
001594   50db     MOVF      0xdb,0x0,0x0                                                                                    
001596   6e93     MOVWF     0x93,0x0                                                                                        
001598   0e02     MOVLW     0x2            	TRISC = PC;                                                                     e:\iro_svn\opensprints\FW\user\user.c
00159a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00159c   6e94     MOVWF     0x94,0x0                                                                                        
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	TRISD = PD;                                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           	TRISE = PE;                                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Handle the analog value.                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           	// Maximum value of 12.                                                         e:\iro_svn\opensprints\FW\user\user.c
00159e   0e03     MOVLW     0x3            	if (AA > 12)                                                                    e:\iro_svn\opensprints\FW\user\user.c
0015a0   50db     MOVF      0xdb,0x0,0x0                                                                                    
0015a2   080c     SUBLW     0xc                                                                                             
0015a4   e205     BC        0x15b0                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0015a6   0e0c     MOVLW     0xc            		AA = 12;                                                                       e:\iro_svn\opensprints\FW\user\user.c
0015a8   6ef3     MOVWF     0xf3,0x0                                                                                        
0015aa   0e03     MOVLW     0x3                                                                                             
0015ac   cff3     MOVFF     0xff3,0xfdb                                                                                     
0015ae   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// If we are turning off Analog inputs                                          e:\iro_svn\opensprints\FW\user\user.c
0015b0   0e03     MOVLW     0x3            	if (0 == AA)                                                                    e:\iro_svn\opensprints\FW\user\user.c
0015b2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0015b4   e105     BNZ       0x15c0                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Turn all analog inputs into digital inputs                                  e:\iro_svn\opensprints\FW\user\user.c
0015b6   0e0f     MOVLW     0xf            		ADCON1 = 0x0F;                                                                 e:\iro_svn\opensprints\FW\user\user.c
0015b8   6ec1     MOVWF     0xc1,0x0                                                                                        
                                           		// Turn off the ADC                                                            e:\iro_svn\opensprints\FW\user\user.c
0015ba   90c2     BCF       0xc2,0x0,0x0   		ADCON0bits.ADON = 0;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		// Turn off our own idea of how many analog channels to convert                e:\iro_svn\opensprints\FW\user\user.c
0015bc   6a0c     CLRF      0xc,0x0        		AnalogEnable = 0;                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
0015be   d011     BRA       0x15e2         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Some protection from ISR                                                    e:\iro_svn\opensprints\FW\user\user.c
0015c0   6a0c     CLRF      0xc,0x0        		AnalogEnable = 0;                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// We're turning some on.                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           		// Start by selecting channel zero		                                           e:\iro_svn\opensprints\FW\user\user.c
0015c2   6ac2     CLRF      0xc2,0x0       		ADCON0 = 0;                                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Then enabling the proper number of channels                                 e:\iro_svn\opensprints\FW\user\user.c
0015c4   0e03     MOVLW     0x3            		ADCON1 = 15 - AA;                                                              e:\iro_svn\opensprints\FW\user\user.c
0015c6   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0015c8   ffe6                                                                                                               
0015ca   0e0f     MOVLW     0xf                                                                                             
0015cc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015ce   80d8     BSF       0xd8,0x0,0x0                                                                                    
0015d0   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
0015d2   6ec1     MOVWF     0xc1,0x0                                                                                        
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Set up ADCON2 options                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		// A/D Result right justified                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           		// Acq time = 20 Tad (?)                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		// Tad = Fosc/64                                                               e:\iro_svn\opensprints\FW\user\user.c
0015d4   0ebe     MOVLW     0xbe           		ADCON2 = 0b10111110;                                                           e:\iro_svn\opensprints\FW\user\user.c
0015d6   6ec0     MOVWF     0xc0,0x0                                                                                        
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Turn on the ADC                                                             e:\iro_svn\opensprints\FW\user\user.c
0015d8   80c2     BSF       0xc2,0x0,0x0   		ADCON0bits.ADON = 1;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Tell ourselves how many channels to convert, and turn on ISR conversions    e:\iro_svn\opensprints\FW\user\user.c
0015da   0e03     MOVLW     0x3            		AnalogEnable = AA;                                                             e:\iro_svn\opensprints\FW\user\user.c
0015dc   50db     MOVF      0xdb,0x0,0x0                                                                                    
0015de   6e0c     MOVWF     0xc,0x0                                                                                         
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
0015e0   84ca     BSF       0xca,0x2,0x0   		T2CONbits.TMR2ON = 1;                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
0015e2   df14     RCALL     0x140c         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
0015e4   0e04     MOVLW     0x4            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
0015e6   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0015e8   e202     BC        0x15ee                                                                                          
0015ea   6ae1     CLRF      0xe1,0x0                                                                                        
0015ec   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015ee   6ee1     MOVWF     0xe1,0x0                                                                                        
0015f0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0015f2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0015f4   ffd9                                                                                                               
0015f6   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Outputs values to the ports pins that are set up as outputs.                  e:\iro_svn\opensprints\FW\user\user.c
                                           // Example "O,121,224,002<CR>"                                                   e:\iro_svn\opensprints\FW\user\user.c
0015f8   cfd9     MOVFF     0xfd9,0xfe6    void parse_O_packet(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
0015fa   ffe6                                                                                                               
0015fc   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0015fe   ffd9                                                                                                               
001600   0e03     MOVLW     0x3                                                                                             
001602   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char PA, PB, PC;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char PD, PE;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Extract each of the values.                                                  e:\iro_svn\opensprints\FW\user\user.c
001604   0e01     MOVLW     0x1            	PA = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
001606   6ee6     MOVWF     0xe6,0x0                                                                                        
001608   ec06     CALL      0x220c,0x0                                                                                      
00160a   f011                                                                                                               
00160c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00160e   501d     MOVF      0x1d,0x0,0x0                                                                                    
001610   6edf     MOVWF     0xdf,0x0                                                                                        
001612   0e01     MOVLW     0x1            	PB = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
001614   6ee6     MOVWF     0xe6,0x0                                                                                        
001616   ec06     CALL      0x220c,0x0                                                                                      
001618   f011                                                                                                               
00161a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00161c   0e01     MOVLW     0x1                                                                                             
00161e   c01d     MOVFF     0x1d,0xfdb                                                                                      
001620   ffdb                                                                                                               
001622   0e01     MOVLW     0x1            	PC = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
001624   6ee6     MOVWF     0xe6,0x0                                                                                        
001626   ec06     CALL      0x220c,0x0                                                                                      
001628   f011                                                                                                               
00162a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00162c   0e02     MOVLW     0x2                                                                                             
00162e   c01d     MOVFF     0x1d,0xfdb                                                                                      
001630   ffdb                                                                                                               
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	PD = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           	PE = extract_number (kUCHAR);                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
001632   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
001634   e001     BZ        0x1638                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001636   d009     BRA       0x164a         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now write those values to the data port registers.                           e:\iro_svn\opensprints\FW\user\user.c
001638   50df     MOVF      0xdf,0x0,0x0   	LATA = PA;                                                                      e:\iro_svn\opensprints\FW\user\user.c
00163a   6e89     MOVWF     0x89,0x0                                                                                        
00163c   0e01     MOVLW     0x1            	LATB = PB;                                                                      e:\iro_svn\opensprints\FW\user\user.c
00163e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001640   6e8a     MOVWF     0x8a,0x0                                                                                        
001642   0e02     MOVLW     0x2            	LATC = PC;                                                                      e:\iro_svn\opensprints\FW\user\user.c
001644   50db     MOVF      0xdb,0x0,0x0                                                                                    
001646   6e8b     MOVWF     0x8b,0x0                                                                                        
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	LATD = PD;                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           	LATE = PE;                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
001648   dee1     RCALL     0x140c         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
00164a   0e03     MOVLW     0x3            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
00164c   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00164e   e202     BC        0x1654                                                                                          
001650   6ae1     CLRF      0xe1,0x0                                                                                        
001652   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001654   6ee1     MOVWF     0xe1,0x0                                                                                        
001656   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001658   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00165a   ffd9                                                                                                               
00165c   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Read in the three I/O ports (A,B,C) and create                                e:\iro_svn\opensprints\FW\user\user.c
                                           // a packet to send back with all of values.                                     e:\iro_svn\opensprints\FW\user\user.c
                                           // Example: "I,143,221,010<CR>"                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           // Remember that on UBW 28 pin boards, we only have                              e:\iro_svn\opensprints\FW\user\user.c
                                           // Port A bits 0 through 5                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // Port B bits 0 through 7                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // Port C bits 0,1,2 and 7,8                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           // And that Port C bits 0,1,2 are used for                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // 		User1 LED, User2 LED and Program switch respectively.                       e:\iro_svn\opensprints\FW\user\user.c
                                           // The rest will be read in as zeros.                                            e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_I_packet(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	printf (                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		(rom char*)"I,%03i,%03i,%03i,%03i,%03i\r\n",                                   e:\iro_svn\opensprints\FW\user\user.c
                                           		PORTA,                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		PORTB,                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		PORTC,                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		PORTD,                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		PORTE                                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	);                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           #else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	printf (                                                                        e:\iro_svn\opensprints\FW\user\user.c
001670   0e3c     MOVLW     0x3c           		(rom char*)"I,%03i,%03i,%03i\r\n",                                             e:\iro_svn\opensprints\FW\user\user.c
001672   6e2a     MOVWF     0x2a,0x0                                                                                        
001674   0e42     MOVLW     0x42                                                                                            
001676   6e2b     MOVWF     0x2b,0x0                                                                                        
001678   6a2c     CLRF      0x2c,0x0                                                                                        
00167a   c02a     MOVFF     0x2a,0xfe6                                                                                      
00167c   ffe6                                                                                                               
00167e   c02b     MOVFF     0x2b,0xfe6                                                                                      
001680   ffe6                                                                                                               
001682   c02c     MOVFF     0x2c,0xfe6                                                                                      
001684   ffe6                                                                                                               
00166a   5080     MOVF      0x80,0x0,0x0   		PORTA,                                                                         e:\iro_svn\opensprints\FW\user\user.c
00166c   6ee6     MOVWF     0xe6,0x0                                                                                        
00166e   6ae6     CLRF      0xe6,0x0                                                                                        
001664   5081     MOVF      0x81,0x0,0x0   		PORTB,                                                                         e:\iro_svn\opensprints\FW\user\user.c
001666   6ee6     MOVWF     0xe6,0x0                                                                                        
001668   6ae6     CLRF      0xe6,0x0                                                                                        
00165e   5082     MOVF      0x82,0x0,0x0   		PORTC                                                                          e:\iro_svn\opensprints\FW\user\user.c
001660   6ee6     MOVWF     0xe6,0x0       	);                                                                              e:\iro_svn\opensprints\FW\user\user.c
001662   6ae6     CLRF      0xe6,0x0                                                                                        
001686   ecc8     CALL      0x4590,0x0                                                                                      
001688   f022                                                                                                               
00168a   6e2d     MOVWF     0x2d,0x0                                                                                        
00168c   0e09     MOVLW     0x9                                                                                             
00168e   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001690   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
001692   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // All we do here is just print out our version number                           e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_V_packet(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
001694   0e1e     MOVLW     0x1e           	printf ((rom char *)st_version);                                                e:\iro_svn\opensprints\FW\user\user.c
001696   6e2a     MOVWF     0x2a,0x0                                                                                        
001698   0e48     MOVLW     0x48                                                                                            
00169a   6e2b     MOVWF     0x2b,0x0                                                                                        
00169c   6a2c     CLRF      0x2c,0x0                                                                                        
00169e   c02a     MOVFF     0x2a,0xfe6                                                                                      
0016a0   ffe6                                                                                                               
0016a2   c02b     MOVFF     0x2b,0xfe6                                                                                      
0016a4   ffe6                                                                                                               
0016a6   c02c     MOVFF     0x2c,0xfe6                                                                                      
0016a8   ffe6                                                                                                               
0016aa   ecc8     CALL      0x4590,0x0                                                                                      
0016ac   f022                                                                                                               
0016ae   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0016b0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0016b2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0016b4   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // A is for read Analog inputs                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           // Just print out the last analog values for each of the                         e:\iro_svn\opensprints\FW\user\user.c
                                           // enabled channels. The number of value returned in the                         e:\iro_svn\opensprints\FW\user\user.c
                                           // A packet depend upon the number of analog inputs enabled.                     e:\iro_svn\opensprints\FW\user\user.c
                                           // The user can enabled any number of analog inputs between                      e:\iro_svn\opensprints\FW\user\user.c
                                           // 0 and 12. (none enabled, through all 12 analog inputs enabled).               e:\iro_svn\opensprints\FW\user\user.c
                                           // Returned packet will look like "A,0,0,0,0,0,0<CR>" if                         e:\iro_svn\opensprints\FW\user\user.c
                                           // six analog inputs are enabled but they are all                                e:\iro_svn\opensprints\FW\user\user.c
                                           // grounded. Note that each one is a 10 bit                                      e:\iro_svn\opensprints\FW\user\user.c
                                           // value, where 0 means the intput was at ground, and                            e:\iro_svn\opensprints\FW\user\user.c
                                           // 1024 means it was at +5 V. (Or whatever the USB +5                            e:\iro_svn\opensprints\FW\user\user.c
                                           // pin is at.)                                                                   e:\iro_svn\opensprints\FW\user\user.c
0016b6   cfd9     MOVFF     0xfd9,0xfe6    void parse_A_packet(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
0016b8   ffe6                                                                                                               
0016ba   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0016bc   ffd9                                                                                                               
0016be   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
0016c0   6adf     CLRF      0xdf,0x0       	char channel = 0;                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Put the beginning of the packet in place                                     e:\iro_svn\opensprints\FW\user\user.c
0016c2   0e3a     MOVLW     0x3a           	printf ((rom char *)"A");                                                       e:\iro_svn\opensprints\FW\user\user.c
0016c4   6e2a     MOVWF     0x2a,0x0                                                                                        
0016c6   0e42     MOVLW     0x42                                                                                            
0016c8   6e2b     MOVWF     0x2b,0x0                                                                                        
0016ca   6a2c     CLRF      0x2c,0x0                                                                                        
0016cc   c02a     MOVFF     0x2a,0xfe6                                                                                      
0016ce   ffe6                                                                                                               
0016d0   c02b     MOVFF     0x2b,0xfe6                                                                                      
0016d2   ffe6                                                                                                               
0016d4   c02c     MOVFF     0x2c,0xfe6                                                                                      
0016d6   ffe6                                                                                                               
0016d8   ecc8     CALL      0x4590,0x0                                                                                      
0016da   f022                                                                                                               
0016dc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0016de   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0016e0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now add each analog value                                                    e:\iro_svn\opensprints\FW\user\user.c
0016e2   6adf     CLRF      0xdf,0x0       	for (channel = 0; channel < AnalogEnable; channel++)                            e:\iro_svn\opensprints\FW\user\user.c
0016e4   500c     MOVF      0xc,0x0,0x0                                                                                     
0016e6   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0016e8   e232     BC        0x174e                                                                                          
00174a   2adf     INCF      0xdf,0x1,0x0                                                                                    
00174c   d7cb     BRA       0x16e4                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		printf(                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           			(rom char *)",%04u"                                                           e:\iro_svn\opensprints\FW\user\user.c
0016ea   cfdf     MOVFF     0xfdf,0x2a     			,ISR_A_FIFO[channel][ISR_A_FIFO_out]                                          e:\iro_svn\opensprints\FW\user\user.c
0016ec   f02a                                                                                                               
0016ee   6a2b     CLRF      0x2b,0x0                                                                                        
0016f0   be2a     BTFSC     0x2a,0x7,0x0                                                                                    
0016f2   682b     SETF      0x2b,0x0                                                                                        
0016f4   0e06     MOVLW     0x6                                                                                             
0016f6   022b     MULWF     0x2b,0x0                                                                                        
0016f8   cff3     MOVFF     0xff3,0x2b                                                                                      
0016fa   f02b                                                                                                               
0016fc   0e06     MOVLW     0x6                                                                                             
0016fe   022a     MULWF     0x2a,0x0                                                                                        
001700   cff3     MOVFF     0xff3,0x2a                                                                                      
001702   f02a                                                                                                               
001704   50f4     MOVF      0xf4,0x0,0x0                                                                                    
001706   262b     ADDWF     0x2b,0x1,0x0                                                                                    
001708   0e00     MOVLW     0x0                                                                                             
00170a   262a     ADDWF     0x2a,0x1,0x0                                                                                    
00170c   0e01     MOVLW     0x1                                                                                             
00170e   222b     ADDWFC    0x2b,0x1,0x0                                                                                    
001710   500a     MOVF      0xa,0x0,0x0                                                                                     
001712   0d02     MULLW     0x2                                                                                             
001714   502a     MOVF      0x2a,0x0,0x0                                                                                    
001716   24f3     ADDWF     0xf3,0x0,0x0                                                                                    
001718   6ee9     MOVWF     0xe9,0x0                                                                                        
00171a   502b     MOVF      0x2b,0x0,0x0                                                                                    
00171c   20f4     ADDWFC    0xf4,0x0,0x0                                                                                    
00171e   6eea     MOVWF     0xea,0x0                                                                                        
001728   0e34     MOVLW     0x34                                                                                            
00172a   6e2c     MOVWF     0x2c,0x0                                                                                        
00172c   0e42     MOVLW     0x42                                                                                            
00172e   6e2d     MOVWF     0x2d,0x0                                                                                        
001730   6a2e     CLRF      0x2e,0x0                                                                                        
001732   c02c     MOVFF     0x2c,0xfe6                                                                                      
001734   ffe6                                                                                                               
001736   c02d     MOVFF     0x2d,0xfe6                                                                                      
001738   ffe6                                                                                                               
00173a   c02e     MOVFF     0x2e,0xfe6                                                                                      
00173c   ffe6                                                                                                               
001720   cfee     MOVFF     0xfee,0xfe6    		);                                                                             e:\iro_svn\opensprints\FW\user\user.c
001722   ffe6                                                                                                               
001724   cfef     MOVFF     0xfef,0xfe6                                                                                     
001726   ffe6                                                                                                               
00173e   ecc8     CALL      0x4590,0x0                                                                                      
001740   f022                                                                                                               
001742   6e2f     MOVWF     0x2f,0x0                                                                                        
001744   0e05     MOVLW     0x5                                                                                             
001746   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001748   502f     MOVF      0x2f,0x0,0x0                                                                                    
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Add \r\n and terminating zero.                                               e:\iro_svn\opensprints\FW\user\user.c
00174e   0e1b     MOVLW     0x1b           	printf ((rom char *)st_LFCR);                                                   e:\iro_svn\opensprints\FW\user\user.c
001750   6e2a     MOVWF     0x2a,0x0                                                                                        
001752   0e48     MOVLW     0x48                                                                                            
001754   6e2b     MOVWF     0x2b,0x0                                                                                        
001756   6a2c     CLRF      0x2c,0x0                                                                                        
001758   c02a     MOVFF     0x2a,0xfe6                                                                                      
00175a   ffe6                                                                                                               
00175c   c02b     MOVFF     0x2b,0xfe6                                                                                      
00175e   ffe6                                                                                                               
001760   c02c     MOVFF     0x2c,0xfe6                                                                                      
001762   ffe6                                                                                                               
001764   ecc8     CALL      0x4590,0x0                                                                                      
001766   f022                                                                                                               
001768   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00176a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00176c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00176e   52e5     MOVF      0xe5,0x1,0x0   }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001770   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001772   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001774   ffd9                                                                                                               
001776   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // MW is for Memory Write                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           // "MW,<location>,<value><CR>"                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           // <location> is a decimal value between 0 and 4096 indicating the RAM address to write to  e:\iro_svn\opensprints\FW\user\user.c
                                           // <value> is a decimal value between 0 and 255 that is the value to write       e:\iro_svn\opensprints\FW\user\user.c
001778   cfd9     MOVFF     0xfd9,0xfe6    void parse_MW_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
00177a   ffe6                                                                                                               
00177c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00177e   ffd9                                                                                                               
001780   0e03     MOVLW     0x3                                                                                             
001782   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned int location;                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char value;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001784   0e03     MOVLW     0x3            	location = extract_number (kUINT);                                              e:\iro_svn\opensprints\FW\user\user.c
001786   6ee6     MOVWF     0xe6,0x0                                                                                        
001788   ec06     CALL      0x220c,0x0                                                                                      
00178a   f011                                                                                                               
00178c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00178e   c01d     MOVFF     0x1d,0xfde                                                                                      
001790   ffde                                                                                                               
001792   c01e     MOVFF     0x1e,0xfdd                                                                                      
001794   ffdd                                                                                                               
001796   0e01     MOVLW     0x1            	value = extract_number (kUCHAR);                                                e:\iro_svn\opensprints\FW\user\user.c
001798   6ee6     MOVWF     0xe6,0x0                                                                                        
00179a   ec06     CALL      0x220c,0x0                                                                                      
00179c   f011                                                                                                               
00179e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017a0   0e02     MOVLW     0x2                                                                                             
0017a2   c01d     MOVFF     0x1d,0xfdb                                                                                      
0017a4   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
0017a6   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
0017a8   e001     BZ        0x17ac                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0017aa   d011     BRA       0x17ce         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check the address and write the byte in                                e:\iro_svn\opensprints\FW\user\user.c
0017ac   cfde     MOVFF     0xfde,0x2a     	if (location < 4096)                                                            e:\iro_svn\opensprints\FW\user\user.c
0017ae   f02a                                                                                                               
0017b0   cfdd     MOVFF     0xfdd,0x2b                                                                                      
0017b2   f02b                                                                                                               
0017b4   0e00     MOVLW     0x0                                                                                             
0017b6   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0017b8   0e10     MOVLW     0x10                                                                                            
0017ba   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
0017bc   e207     BC        0x17cc                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0017be   cfde     MOVFF     0xfde,0xfe9    		*((unsigned char *)location) = value;                                          e:\iro_svn\opensprints\FW\user\user.c
0017c0   ffe9                                                                                                               
0017c2   cfdd     MOVFF     0xfdd,0xfea                                                                                     
0017c4   ffea                                                                                                               
0017c6   0e02     MOVLW     0x2                                                                                             
0017c8   cfdb     MOVFF     0xfdb,0xfef                                                                                     
0017ca   ffef                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
0017cc   de1f     RCALL     0x140c         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
0017ce   0e03     MOVLW     0x3            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
0017d0   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0017d2   e202     BC        0x17d8                                                                                          
0017d4   6ae1     CLRF      0xe1,0x0                                                                                        
0017d6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017d8   6ee1     MOVWF     0xe1,0x0                                                                                        
0017da   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017dc   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0017de   ffd9                                                                                                               
0017e0   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // MR is for Memory Read                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           // "MW,<location><CR>"                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           // <location> is a decimal value between 0 and 4096 indicating the RAM address to read from  e:\iro_svn\opensprints\FW\user\user.c
                                           // The UBW will then send a "MR,<value><CR>" packet back to the PC               e:\iro_svn\opensprints\FW\user\user.c
                                           // where <value> is the byte value read from the address                         e:\iro_svn\opensprints\FW\user\user.c
0017e2   cfd9     MOVFF     0xfd9,0xfe6    void parse_MR_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
0017e4   ffe6                                                                                                               
0017e6   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0017e8   ffd9                                                                                                               
0017ea   0e03     MOVLW     0x3                                                                                             
0017ec   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned int location;                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char value;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0017ee   0e03     MOVLW     0x3            	location = extract_number (kUINT);                                              e:\iro_svn\opensprints\FW\user\user.c
0017f0   6ee6     MOVWF     0xe6,0x0                                                                                        
0017f2   ec06     CALL      0x220c,0x0                                                                                      
0017f4   f011                                                                                                               
0017f6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0017f8   c01d     MOVFF     0x1d,0xfde                                                                                      
0017fa   ffde                                                                                                               
0017fc   c01e     MOVFF     0x1e,0xfdd                                                                                      
0017fe   ffdd                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
001800   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
001802   e001     BZ        0x1806                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001804   d025     BRA       0x1850         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check the address and write the byte in                                e:\iro_svn\opensprints\FW\user\user.c
001806   cfde     MOVFF     0xfde,0x2a     	if (location < 4096)                                                            e:\iro_svn\opensprints\FW\user\user.c
001808   f02a                                                                                                               
00180a   cfdd     MOVFF     0xfdd,0x2b                                                                                      
00180c   f02b                                                                                                               
00180e   0e00     MOVLW     0x0                                                                                             
001810   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001812   0e10     MOVLW     0x10                                                                                            
001814   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
001816   e207     BC        0x1826                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001818   cfde     MOVFF     0xfde,0xfe9    		value = *((unsigned char *)location);                                          e:\iro_svn\opensprints\FW\user\user.c
00181a   ffe9                                                                                                               
00181c   cfdd     MOVFF     0xfdd,0xfea                                                                                     
00181e   ffea                                                                                                               
001820   0e02     MOVLW     0x2                                                                                             
001822   cfef     MOVFF     0xfef,0xfdb                                                                                     
001824   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now send back the MR packet                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           	printf (                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		(rom char *)"MR,%03u\r\n"                                                      e:\iro_svn\opensprints\FW\user\user.c
00182e   0e2a     MOVLW     0x2a           		,value                                                                         e:\iro_svn\opensprints\FW\user\user.c
001830   6e2a     MOVWF     0x2a,0x0                                                                                        
001832   0e42     MOVLW     0x42                                                                                            
001834   6e2b     MOVWF     0x2b,0x0                                                                                        
001836   6a2c     CLRF      0x2c,0x0                                                                                        
001838   c02a     MOVFF     0x2a,0xfe6                                                                                      
00183a   ffe6                                                                                                               
00183c   c02b     MOVFF     0x2b,0xfe6                                                                                      
00183e   ffe6                                                                                                               
001840   c02c     MOVFF     0x2c,0xfe6                                                                                      
001842   ffe6                                                                                                               
001826   0e02     MOVLW     0x2            	);                                                                              e:\iro_svn\opensprints\FW\user\user.c
001828   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00182a   ffe6                                                                                                               
00182c   6ae6     CLRF      0xe6,0x0                                                                                        
001844   ecc8     CALL      0x4590,0x0                                                                                      
001846   f022                                                                                                               
001848   6e2d     MOVWF     0x2d,0x0                                                                                        
00184a   0e05     MOVLW     0x5                                                                                             
00184c   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
00184e   502d     MOVF      0x2d,0x0,0x0                                                                                    
001850   0e03     MOVLW     0x3            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001852   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001854   e202     BC        0x185a                                                                                          
001856   6ae1     CLRF      0xe1,0x0                                                                                        
001858   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00185a   6ee1     MOVWF     0xe1,0x0                                                                                        
00185c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00185e   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001860   ffd9                                                                                                               
001862   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // PD is for Pin Direction                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // "PD,<port>,<pin>,<direction><CR>"                                             e:\iro_svn\opensprints\FW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                e:\iro_svn\opensprints\FW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to change direction on e:\iro_svn\opensprints\FW\user\user.c
                                           // <direction> is "1" for input, "0" for output                                  e:\iro_svn\opensprints\FW\user\user.c
001864   cfd9     MOVFF     0xfd9,0xfe6    void parse_PD_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
001866   ffe6                                                                                                               
001868   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00186a   ffd9                                                                                                               
00186c   0e03     MOVLW     0x3                                                                                             
00186e   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char port;                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char pin;                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char direction;                                                        e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001870   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      e:\iro_svn\opensprints\FW\user\user.c
001872   6ee6     MOVWF     0xe6,0x0                                                                                        
001874   ec06     CALL      0x220c,0x0                                                                                      
001876   f011                                                                                                               
001878   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00187a   501d     MOVF      0x1d,0x0,0x0                                                                                    
00187c   6edf     MOVWF     0xdf,0x0                                                                                        
00187e   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  e:\iro_svn\opensprints\FW\user\user.c
001880   6ee6     MOVWF     0xe6,0x0                                                                                        
001882   ec06     CALL      0x220c,0x0                                                                                      
001884   f011                                                                                                               
001886   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001888   0e01     MOVLW     0x1                                                                                             
00188a   c01d     MOVFF     0x1d,0xfdb                                                                                      
00188c   ffdb                                                                                                               
00188e   0e01     MOVLW     0x1            	direction = extract_number (kUCHAR);                                            e:\iro_svn\opensprints\FW\user\user.c
001890   6ee6     MOVWF     0xe6,0x0                                                                                        
001892   ec06     CALL      0x220c,0x0                                                                                      
001894   f011                                                                                                               
001896   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001898   0e02     MOVLW     0x2                                                                                             
00189a   c01d     MOVFF     0x1d,0xfdb                                                                                      
00189c   ffdb                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
00189e   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
0018a0   e001     BZ        0x18a4                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0018a2   d072     BRA       0x1988         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check the parameters                                                   e:\iro_svn\opensprints\FW\user\user.c
0018a4   0e02     MOVLW     0x2            	if (direction > 1)                                                              e:\iro_svn\opensprints\FW\user\user.c
0018a6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0018a8   0801     SUBLW     0x1                                                                                             
0018aa   e202     BC        0x18b0                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0018ac   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
0018ae   d06c     BRA       0x1988         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
0018b0   0e01     MOVLW     0x1            	if (pin > 7)                                                                    e:\iro_svn\opensprints\FW\user\user.c
0018b2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0018b4   0807     SUBLW     0x7                                                                                             
0018b6   e202     BC        0x18bc                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0018b8   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
0018ba   d066     BRA       0x1988         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
0018bc   0e41     MOVLW     0x41           	if ('A' == port)                                                                e:\iro_svn\opensprints\FW\user\user.c
0018be   6e2a     MOVWF     0x2a,0x0                                                                                        
0018c0   50df     MOVF      0xdf,0x0,0x0                                                                                    
0018c2   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0018c4   e11c     BNZ       0x18fe                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0018c6   0e02     MOVLW     0x2            		if (0 == direction)                                                            e:\iro_svn\opensprints\FW\user\user.c
0018c8   50db     MOVF      0xdb,0x0,0x0                                                                                    
0018ca   e10d     BNZ       0x18e6                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0018cc   0e01     MOVLW     0x1            			bitclr (DDRA, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
0018ce   6ef3     MOVWF     0xf3,0x0                                                                                        
0018d0   0e01     MOVLW     0x1                                                                                             
0018d2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0018d4   e004     BZ        0x18de                                                                                          
0018d6   90d8     BCF       0xd8,0x0,0x0                                                                                    
0018d8   36f3     RLCF      0xf3,0x1,0x0                                                                                    
0018da   06e8     DECF      0xe8,0x1,0x0                                                                                    
0018dc   e1fc     BNZ       0x18d6                                                                                          
0018de   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0018e0   1ce8     COMF      0xe8,0x0,0x0                                                                                    
0018e2   1692     ANDWF     0x92,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
0018e4   d00b     BRA       0x18fc         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0018e6   0e01     MOVLW     0x1            			bitset (DDRA, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
0018e8   6ef3     MOVWF     0xf3,0x0                                                                                        
0018ea   0e01     MOVLW     0x1                                                                                             
0018ec   50db     MOVF      0xdb,0x0,0x0                                                                                    
0018ee   e004     BZ        0x18f8                                                                                          
0018f0   90d8     BCF       0xd8,0x0,0x0                                                                                    
0018f2   36f3     RLCF      0xf3,0x1,0x0                                                                                    
0018f4   06e8     DECF      0xe8,0x1,0x0                                                                                    
0018f6   e1fc     BNZ       0x18f0                                                                                          
0018f8   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0018fa   1292     IORWF     0x92,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
0018fc   d044     BRA       0x1986         	else if ('B' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
0018fe   0e42     MOVLW     0x42                                                                                            
001900   6e2a     MOVWF     0x2a,0x0                                                                                        
001902   50df     MOVF      0xdf,0x0,0x0                                                                                    
001904   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001906   e11c     BNZ       0x1940                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001908   0e02     MOVLW     0x2            		if (0 == direction)                                                            e:\iro_svn\opensprints\FW\user\user.c
00190a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00190c   e10d     BNZ       0x1928                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
00190e   0e01     MOVLW     0x1            			bitclr (DDRB, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001910   6ef3     MOVWF     0xf3,0x0                                                                                        
001912   0e01     MOVLW     0x1                                                                                             
001914   50db     MOVF      0xdb,0x0,0x0                                                                                    
001916   e004     BZ        0x1920                                                                                          
001918   90d8     BCF       0xd8,0x0,0x0                                                                                    
00191a   36f3     RLCF      0xf3,0x1,0x0                                                                                    
00191c   06e8     DECF      0xe8,0x1,0x0                                                                                    
00191e   e1fc     BNZ       0x1918                                                                                          
001920   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001922   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001924   1693     ANDWF     0x93,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001926   d00b     BRA       0x193e         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001928   0e01     MOVLW     0x1            			bitset (DDRB, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
00192a   6ef3     MOVWF     0xf3,0x0                                                                                        
00192c   0e01     MOVLW     0x1                                                                                             
00192e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001930   e004     BZ        0x193a                                                                                          
001932   90d8     BCF       0xd8,0x0,0x0                                                                                    
001934   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001936   06e8     DECF      0xe8,0x1,0x0                                                                                    
001938   e1fc     BNZ       0x1932                                                                                          
00193a   50f3     MOVF      0xf3,0x0,0x0                                                                                    
00193c   1293     IORWF     0x93,0x1,0x0                                                                                    
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
00193e   d023     BRA       0x1986         	else if ('C' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001940   0e43     MOVLW     0x43                                                                                            
001942   6e2a     MOVWF     0x2a,0x0                                                                                        
001944   50df     MOVF      0xdf,0x0,0x0                                                                                    
001946   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001948   e11c     BNZ       0x1982                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
00194a   0e02     MOVLW     0x2            		if (0 == direction)                                                            e:\iro_svn\opensprints\FW\user\user.c
00194c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00194e   e10d     BNZ       0x196a                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001950   0e01     MOVLW     0x1            			bitclr (DDRC, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001952   6ef3     MOVWF     0xf3,0x0                                                                                        
001954   0e01     MOVLW     0x1                                                                                             
001956   50db     MOVF      0xdb,0x0,0x0                                                                                    
001958   e004     BZ        0x1962                                                                                          
00195a   90d8     BCF       0xd8,0x0,0x0                                                                                    
00195c   36f3     RLCF      0xf3,0x1,0x0                                                                                    
00195e   06e8     DECF      0xe8,0x1,0x0                                                                                    
001960   e1fc     BNZ       0x195a                                                                                          
001962   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001964   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001966   1694     ANDWF     0x94,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001968   d00b     BRA       0x1980         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
00196a   0e01     MOVLW     0x1            			bitset (DDRC, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
00196c   6ef3     MOVWF     0xf3,0x0                                                                                        
00196e   0e01     MOVLW     0x1                                                                                             
001970   50db     MOVF      0xdb,0x0,0x0                                                                                    
001972   e004     BZ        0x197c                                                                                          
001974   90d8     BCF       0xd8,0x0,0x0                                                                                    
001976   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001978   06e8     DECF      0xe8,0x1,0x0                                                                                    
00197a   e1fc     BNZ       0x1974                                                                                          
00197c   50f3     MOVF      0xf3,0x0,0x0                                                                                    
00197e   1294     IORWF     0x94,0x1,0x0                                                                                    
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	else if ('D' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		if (0 == direction)                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			bitclr (DDRD, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			bitset (DDRD, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	else if ('E' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		if (0 == direction)                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			bitclr (DDRE, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			bitset (DDRE, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
001980   d002     BRA       0x1986         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001982   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001984   d001     BRA       0x1988         		return;	                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
001986   dd42     RCALL     0x140c         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001988   0e03     MOVLW     0x3            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
00198a   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00198c   e202     BC        0x1992                                                                                          
00198e   6ae1     CLRF      0xe1,0x0                                                                                        
001990   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001992   6ee1     MOVWF     0xe1,0x0                                                                                        
001994   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001996   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001998   ffd9                                                                                                               
00199a   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // PI is for Pin Input                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           // "PI,<port>,<pin><CR>"                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                e:\iro_svn\opensprints\FW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to read             e:\iro_svn\opensprints\FW\user\user.c
                                           // The command returns a "PI,<value><CR>" packet,                                e:\iro_svn\opensprints\FW\user\user.c
                                           // where <value> is the value (0 or 1 for digital, 0 to 1024 for Analog)         e:\iro_svn\opensprints\FW\user\user.c
                                           // value for that pin.                                                           e:\iro_svn\opensprints\FW\user\user.c
00199c   cfd9     MOVFF     0xfd9,0xfe6    void parse_PI_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
00199e   ffe6                                                                                                               
0019a0   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0019a2   ffd9                                                                                                               
0019a4   0e03     MOVLW     0x3                                                                                             
0019a6   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char port;                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char pin;                                                              e:\iro_svn\opensprints\FW\user\user.c
0019a8   0e02     MOVLW     0x2            	unsigned char value = 0;                                                        e:\iro_svn\opensprints\FW\user\user.c
0019aa   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0019ac   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      e:\iro_svn\opensprints\FW\user\user.c
0019ae   6ee6     MOVWF     0xe6,0x0                                                                                        
0019b0   ec06     CALL      0x220c,0x0                                                                                      
0019b2   f011                                                                                                               
0019b4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0019b6   501d     MOVF      0x1d,0x0,0x0                                                                                    
0019b8   6edf     MOVWF     0xdf,0x0                                                                                        
0019ba   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  e:\iro_svn\opensprints\FW\user\user.c
0019bc   6ee6     MOVWF     0xe6,0x0                                                                                        
0019be   ec06     CALL      0x220c,0x0                                                                                      
0019c0   f011                                                                                                               
0019c2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0019c4   0e01     MOVLW     0x1                                                                                             
0019c6   c01d     MOVFF     0x1d,0xfdb                                                                                      
0019c8   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
0019ca   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
0019cc   e001     BZ        0x19d0                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0019ce   d05c     BRA       0x1a88         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check the parameters                                                   e:\iro_svn\opensprints\FW\user\user.c
0019d0   0e01     MOVLW     0x1            	if (pin > 7)                                                                    e:\iro_svn\opensprints\FW\user\user.c
0019d2   50db     MOVF      0xdb,0x0,0x0                                                                                    
0019d4   0807     SUBLW     0x7                                                                                             
0019d6   e202     BC        0x19dc                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0019d8   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
0019da   d056     BRA       0x1a88         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Then test the bit in question based upon port                                e:\iro_svn\opensprints\FW\user\user.c
0019dc   0e41     MOVLW     0x41           	if ('A' == port)                                                                e:\iro_svn\opensprints\FW\user\user.c
0019de   6e2a     MOVWF     0x2a,0x0                                                                                        
0019e0   50df     MOVF      0xdf,0x0,0x0                                                                                    
0019e2   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0019e4   e110     BNZ       0x1a06                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0019e6   0e01     MOVLW     0x1            		value = bittst (PORTA, pin);  	                                                e:\iro_svn\opensprints\FW\user\user.c
0019e8   6ef3     MOVWF     0xf3,0x0                                                                                        
0019ea   0e01     MOVLW     0x1                                                                                             
0019ec   50db     MOVF      0xdb,0x0,0x0                                                                                    
0019ee   e004     BZ        0x19f8                                                                                          
0019f0   90d8     BCF       0xd8,0x0,0x0                                                                                    
0019f2   36f3     RLCF      0xf3,0x1,0x0                                                                                    
0019f4   06e8     DECF      0xe8,0x1,0x0                                                                                    
0019f6   e1fc     BNZ       0x19f0                                                                                          
0019f8   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0019fa   1480     ANDWF     0x80,0x0,0x0                                                                                    
0019fc   6ee7     MOVWF     0xe7,0x0                                                                                        
0019fe   0e02     MOVLW     0x2                                                                                             
001a00   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001a02   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001a04   d02c     BRA       0x1a5e         	else if ('B' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001a06   0e42     MOVLW     0x42                                                                                            
001a08   6e2a     MOVWF     0x2a,0x0                                                                                        
001a0a   50df     MOVF      0xdf,0x0,0x0                                                                                    
001a0c   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001a0e   e110     BNZ       0x1a30                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001a10   0e01     MOVLW     0x1            		value = bittst (PORTB, pin);  	                                                e:\iro_svn\opensprints\FW\user\user.c
001a12   6ef3     MOVWF     0xf3,0x0                                                                                        
001a14   0e01     MOVLW     0x1                                                                                             
001a16   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a18   e004     BZ        0x1a22                                                                                          
001a1a   90d8     BCF       0xd8,0x0,0x0                                                                                    
001a1c   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001a1e   06e8     DECF      0xe8,0x1,0x0                                                                                    
001a20   e1fc     BNZ       0x1a1a                                                                                          
001a22   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001a24   1481     ANDWF     0x81,0x0,0x0                                                                                    
001a26   6ee7     MOVWF     0xe7,0x0                                                                                        
001a28   0e02     MOVLW     0x2                                                                                             
001a2a   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001a2c   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001a2e   d017     BRA       0x1a5e         	else if ('C' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001a30   0e43     MOVLW     0x43                                                                                            
001a32   6e2a     MOVWF     0x2a,0x0                                                                                        
001a34   50df     MOVF      0xdf,0x0,0x0                                                                                    
001a36   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001a38   e110     BNZ       0x1a5a                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001a3a   0e01     MOVLW     0x1            		value = bittst (PORTC, pin);  	                                                e:\iro_svn\opensprints\FW\user\user.c
001a3c   6ef3     MOVWF     0xf3,0x0                                                                                        
001a3e   0e01     MOVLW     0x1                                                                                             
001a40   50db     MOVF      0xdb,0x0,0x0                                                                                    
001a42   e004     BZ        0x1a4c                                                                                          
001a44   90d8     BCF       0xd8,0x0,0x0                                                                                    
001a46   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001a48   06e8     DECF      0xe8,0x1,0x0                                                                                    
001a4a   e1fc     BNZ       0x1a44                                                                                          
001a4c   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001a4e   1482     ANDWF     0x82,0x0,0x0                                                                                    
001a50   6ee7     MOVWF     0xe7,0x0                                                                                        
001a52   0e02     MOVLW     0x2                                                                                             
001a54   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001a56   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	else if ('D' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		value = bittst (PORTD, pin);  	                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	else if ('E' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		value = bittst (PORTE, pin);  	                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
001a58   d002     BRA       0x1a5e         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001a5a   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001a5c   d015     BRA       0x1a88         		return;	                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now send back our response                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           	printf(                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		 (rom char *)"PI,%1u\r\n"                                                      e:\iro_svn\opensprints\FW\user\user.c
001a66   0e21     MOVLW     0x21           		,value                                                                         e:\iro_svn\opensprints\FW\user\user.c
001a68   6e2a     MOVWF     0x2a,0x0                                                                                        
001a6a   0e42     MOVLW     0x42                                                                                            
001a6c   6e2b     MOVWF     0x2b,0x0                                                                                        
001a6e   6a2c     CLRF      0x2c,0x0                                                                                        
001a70   c02a     MOVFF     0x2a,0xfe6                                                                                      
001a72   ffe6                                                                                                               
001a74   c02b     MOVFF     0x2b,0xfe6                                                                                      
001a76   ffe6                                                                                                               
001a78   c02c     MOVFF     0x2c,0xfe6                                                                                      
001a7a   ffe6                                                                                                               
001a5e   0e02     MOVLW     0x2            	);                                                                              e:\iro_svn\opensprints\FW\user\user.c
001a60   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
001a62   ffe6                                                                                                               
001a64   6ae6     CLRF      0xe6,0x0                                                                                        
001a7c   ecc8     CALL      0x4590,0x0                                                                                      
001a7e   f022                                                                                                               
001a80   6e2d     MOVWF     0x2d,0x0                                                                                        
001a82   0e05     MOVLW     0x5                                                                                             
001a84   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001a86   502d     MOVF      0x2d,0x0,0x0                                                                                    
001a88   0e03     MOVLW     0x3            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001a8a   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001a8c   e202     BC        0x1a92                                                                                          
001a8e   6ae1     CLRF      0xe1,0x0                                                                                        
001a90   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001a92   6ee1     MOVWF     0xe1,0x0                                                                                        
001a94   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001a96   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001a98   ffd9                                                                                                               
001a9a   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // PO is for Pin Output                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           // "PO,<port>,<pin>,<value><CR>"                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                e:\iro_svn\opensprints\FW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to write out the value to e:\iro_svn\opensprints\FW\user\user.c
                                           // <value> is "1" or "0" and indicates the state to change the pin to            e:\iro_svn\opensprints\FW\user\user.c
001a9c   cfd9     MOVFF     0xfd9,0xfe6    void parse_PO_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
001a9e   ffe6                                                                                                               
001aa0   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001aa2   ffd9                                                                                                               
001aa4   0e03     MOVLW     0x3                                                                                             
001aa6   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char port;                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char pin;                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char value;                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001aa8   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      e:\iro_svn\opensprints\FW\user\user.c
001aaa   6ee6     MOVWF     0xe6,0x0                                                                                        
001aac   dbaf     RCALL     0x220c                                                                                          
001aae   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001ab0   501d     MOVF      0x1d,0x0,0x0                                                                                    
001ab2   6edf     MOVWF     0xdf,0x0                                                                                        
001ab4   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  e:\iro_svn\opensprints\FW\user\user.c
001ab6   6ee6     MOVWF     0xe6,0x0                                                                                        
001ab8   dba9     RCALL     0x220c                                                                                          
001aba   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001abc   0e01     MOVLW     0x1                                                                                             
001abe   c01d     MOVFF     0x1d,0xfdb                                                                                      
001ac0   ffdb                                                                                                               
001ac2   0e01     MOVLW     0x1            	value = extract_number (kUCHAR);                                                e:\iro_svn\opensprints\FW\user\user.c
001ac4   6ee6     MOVWF     0xe6,0x0                                                                                        
001ac6   dba2     RCALL     0x220c                                                                                          
001ac8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001aca   0e02     MOVLW     0x2                                                                                             
001acc   c01d     MOVFF     0x1d,0xfdb                                                                                      
001ace   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
001ad0   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
001ad2   e001     BZ        0x1ad6                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001ad4   d072     BRA       0x1bba         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check the parameters                                                   e:\iro_svn\opensprints\FW\user\user.c
001ad6   0e02     MOVLW     0x2            	if (value > 1)                                                                  e:\iro_svn\opensprints\FW\user\user.c
001ad8   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ada   0801     SUBLW     0x1                                                                                             
001adc   e202     BC        0x1ae2                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001ade   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001ae0   d06c     BRA       0x1bba         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001ae2   0e01     MOVLW     0x1            	if (pin > 7)                                                                    e:\iro_svn\opensprints\FW\user\user.c
001ae4   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ae6   0807     SUBLW     0x7                                                                                             
001ae8   e202     BC        0x1aee                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001aea   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001aec   d066     BRA       0x1bba         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001aee   0e41     MOVLW     0x41           	if ('A' == port)                                                                e:\iro_svn\opensprints\FW\user\user.c
001af0   6e2a     MOVWF     0x2a,0x0                                                                                        
001af2   50df     MOVF      0xdf,0x0,0x0                                                                                    
001af4   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001af6   e11c     BNZ       0x1b30                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001af8   0e02     MOVLW     0x2            		if (0 == value)                                                                e:\iro_svn\opensprints\FW\user\user.c
001afa   50db     MOVF      0xdb,0x0,0x0                                                                                    
001afc   e10d     BNZ       0x1b18                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001afe   0e01     MOVLW     0x1            			bitclr (LATA, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001b00   6ef3     MOVWF     0xf3,0x0                                                                                        
001b02   0e01     MOVLW     0x1                                                                                             
001b04   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b06   e004     BZ        0x1b10                                                                                          
001b08   90d8     BCF       0xd8,0x0,0x0                                                                                    
001b0a   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001b0c   06e8     DECF      0xe8,0x1,0x0                                                                                    
001b0e   e1fc     BNZ       0x1b08                                                                                          
001b10   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001b12   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001b14   1689     ANDWF     0x89,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001b16   d00b     BRA       0x1b2e         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001b18   0e01     MOVLW     0x1            			bitset (LATA, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001b1a   6ef3     MOVWF     0xf3,0x0                                                                                        
001b1c   0e01     MOVLW     0x1                                                                                             
001b1e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b20   e004     BZ        0x1b2a                                                                                          
001b22   90d8     BCF       0xd8,0x0,0x0                                                                                    
001b24   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001b26   06e8     DECF      0xe8,0x1,0x0                                                                                    
001b28   e1fc     BNZ       0x1b22                                                                                          
001b2a   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001b2c   1289     IORWF     0x89,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001b2e   d044     BRA       0x1bb8         	else if ('B' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001b30   0e42     MOVLW     0x42                                                                                            
001b32   6e2a     MOVWF     0x2a,0x0                                                                                        
001b34   50df     MOVF      0xdf,0x0,0x0                                                                                    
001b36   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001b38   e11c     BNZ       0x1b72                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001b3a   0e02     MOVLW     0x2            		if (0 == value)                                                                e:\iro_svn\opensprints\FW\user\user.c
001b3c   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b3e   e10d     BNZ       0x1b5a                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001b40   0e01     MOVLW     0x1            			bitclr (LATB, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001b42   6ef3     MOVWF     0xf3,0x0                                                                                        
001b44   0e01     MOVLW     0x1                                                                                             
001b46   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b48   e004     BZ        0x1b52                                                                                          
001b4a   90d8     BCF       0xd8,0x0,0x0                                                                                    
001b4c   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001b4e   06e8     DECF      0xe8,0x1,0x0                                                                                    
001b50   e1fc     BNZ       0x1b4a                                                                                          
001b52   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001b54   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001b56   168a     ANDWF     0x8a,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001b58   d00b     BRA       0x1b70         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001b5a   0e01     MOVLW     0x1            			bitset (LATB, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001b5c   6ef3     MOVWF     0xf3,0x0                                                                                        
001b5e   0e01     MOVLW     0x1                                                                                             
001b60   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b62   e004     BZ        0x1b6c                                                                                          
001b64   90d8     BCF       0xd8,0x0,0x0                                                                                    
001b66   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001b68   06e8     DECF      0xe8,0x1,0x0                                                                                    
001b6a   e1fc     BNZ       0x1b64                                                                                          
001b6c   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001b6e   128a     IORWF     0x8a,0x1,0x0                                                                                    
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001b70   d023     BRA       0x1bb8         	else if ('C' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001b72   0e43     MOVLW     0x43                                                                                            
001b74   6e2a     MOVWF     0x2a,0x0                                                                                        
001b76   50df     MOVF      0xdf,0x0,0x0                                                                                    
001b78   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001b7a   e11c     BNZ       0x1bb4                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001b7c   0e02     MOVLW     0x2            		if (0 == value)                                                                e:\iro_svn\opensprints\FW\user\user.c
001b7e   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b80   e10d     BNZ       0x1b9c                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001b82   0e01     MOVLW     0x1            			bitclr (LATC, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001b84   6ef3     MOVWF     0xf3,0x0                                                                                        
001b86   0e01     MOVLW     0x1                                                                                             
001b88   50db     MOVF      0xdb,0x0,0x0                                                                                    
001b8a   e004     BZ        0x1b94                                                                                          
001b8c   90d8     BCF       0xd8,0x0,0x0                                                                                    
001b8e   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001b90   06e8     DECF      0xe8,0x1,0x0                                                                                    
001b92   e1fc     BNZ       0x1b8c                                                                                          
001b94   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001b96   1ce8     COMF      0xe8,0x0,0x0                                                                                    
001b98   168b     ANDWF     0x8b,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001b9a   d00b     BRA       0x1bb2         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001b9c   0e01     MOVLW     0x1            			bitset (LATC, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
001b9e   6ef3     MOVWF     0xf3,0x0                                                                                        
001ba0   0e01     MOVLW     0x1                                                                                             
001ba2   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ba4   e004     BZ        0x1bae                                                                                          
001ba6   90d8     BCF       0xd8,0x0,0x0                                                                                    
001ba8   36f3     RLCF      0xf3,0x1,0x0                                                                                    
001baa   06e8     DECF      0xe8,0x1,0x0                                                                                    
001bac   e1fc     BNZ       0x1ba6                                                                                          
001bae   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001bb0   128b     IORWF     0x8b,0x1,0x0                                                                                    
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #ifdef __18F4550                                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	else if ('D' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		if (0 == value)                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			bitclr (LATD, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			bitset (LATD, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	else if ('E' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		if (0 == value)                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			bitclr (LATE, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			bitset (LATE, pin);  	                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           		}		                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           #endif                                                                           e:\iro_svn\opensprints\FW\user\user.c
001bb2   d002     BRA       0x1bb8         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001bb4   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001bb6   d001     BRA       0x1bba         		return;	                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
001bb8   dc29     RCALL     0x140c         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001bba   0e03     MOVLW     0x3            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001bbc   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001bbe   e202     BC        0x1bc4                                                                                          
001bc0   6ae1     CLRF      0xe1,0x0                                                                                        
001bc2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001bc4   6ee1     MOVWF     0xe1,0x0                                                                                        
001bc6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001bc8   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001bca   ffd9                                                                                                               
001bcc   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // TX is for Serial Transmit                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           // "TX,<data_length>,<variable_length_data><CR>"                                 e:\iro_svn\opensprints\FW\user\user.c
                                           // <data_length> is a count of the number of bytes in the <variable_length_data> field. e:\iro_svn\opensprints\FW\user\user.c
                                           // It must never be larger than the number of bytes that are currently free in the e:\iro_svn\opensprints\FW\user\user.c
                                           // software TX buffer or some data will get lost.                                e:\iro_svn\opensprints\FW\user\user.c
                                           // <variable_length_data> are the bytes that you want the UBW to send. It will store them e:\iro_svn\opensprints\FW\user\user.c
                                           // in its software TX buffer until there is time to send them out the TX pin.    e:\iro_svn\opensprints\FW\user\user.c
                                           // If you send in "0" for a <data_length" (and thus nothing for <variable_length_data> e:\iro_svn\opensprints\FW\user\user.c
                                           // then the UBW will send back a "TX,<free_buffer_space><CR>" packet,            e:\iro_svn\opensprints\FW\user\user.c
                                           // where <free_buffer_space> is the number of bytes currently available in the   e:\iro_svn\opensprints\FW\user\user.c
                                           // software TX buffer.                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_TX_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
001bce   dc1e     RCALL     0x140c         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001bd0   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // RX is for Serial Receive                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           // "RX,<length_request><CR>"                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           // <length_request> is the maximum number of characters that you want the UBW to send e:\iro_svn\opensprints\FW\user\user.c
                                           // back to you in the RX packet. If you use "0" for <length_request> then the UBW e:\iro_svn\opensprints\FW\user\user.c
                                           // will just send you the current number of bytes in it's RX buffer, and if      e:\iro_svn\opensprints\FW\user\user.c
                                           // there have been any buffer overruns since the last time a <length_request> of  e:\iro_svn\opensprints\FW\user\user.c
                                           // "0" was received by the UBW.                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           // This command will send back a "RX,<length>,<variable_length_data><CR>"        e:\iro_svn\opensprints\FW\user\user.c
                                           // or "RX,<buffer_fullness>,<status><CR>" packet depending upon if you send      e:\iro_svn\opensprints\FW\user\user.c
                                           // "0" or something else for <length_request>                                    e:\iro_svn\opensprints\FW\user\user.c
                                           // <length> in the returning RX packet is a count of the number of bytes         e:\iro_svn\opensprints\FW\user\user.c
                                           // in the <variable_length_data> field. It will never be more than the           e:\iro_svn\opensprints\FW\user\user.c
                                           // <length_request> you sent in.                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           // <variable_length_data> is the data (in raw form - byte for byte what was received -  e:\iro_svn\opensprints\FW\user\user.c
                                           // i.e. not translated in any way, into ASCII values or anything else) that the UBW e:\iro_svn\opensprints\FW\user\user.c
                                           // received. This may include <CR>s and NULLs among any other bytes, so make sure e:\iro_svn\opensprints\FW\user\user.c
                                           // your PC application treates the RX packet coming back from the UBW in a speical way e:\iro_svn\opensprints\FW\user\user.c
                                           // so as not to screw up normal packet processing if any special caracters are received. e:\iro_svn\opensprints\FW\user\user.c
                                           // <buffer_fullness> is a valule between 0 and MAX_SERIAL_RX_BUFFER_SIZE that records e:\iro_svn\opensprints\FW\user\user.c
                                           // the total number of bytes, at that point in time, that the UBW is holding, waiting e:\iro_svn\opensprints\FW\user\user.c
                                           // to pass on to the PC.                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           // <status> has several bits.                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           //	Bit 0 = Software RX Buffer Overrun (1 means software RX buffer (on RX pin)    e:\iro_svn\opensprints\FW\user\user.c
                                           //		has been overrun and data has been lost) This will happen if you don't       e:\iro_svn\opensprints\FW\user\user.c
                                           //		read the data out of the UWB often enough and the data is coming in too fast. e:\iro_svn\opensprints\FW\user\user.c
                                           //	Bit 1 = Software TX Buffer Overrun (1 means software TX buffer (on TX pin)    e:\iro_svn\opensprints\FW\user\user.c
                                           //		as been overrun and data hs been lost. This will happen if you send too much e:\iro_svn\opensprints\FW\user\user.c
                                           //		data to the UBW and you have the serial port set to a low baud rate.         e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RX_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
001bd2   dc1c     RCALL     0x140c         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001bd4   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // CX is for setting up serial port parameters                                   e:\iro_svn\opensprints\FW\user\user.c
                                           // TBD                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CX_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
001bd6   dc1a     RCALL     0x140c         	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001bd8   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // RC is for outputting RC servo pulses on a pin                                 e:\iro_svn\opensprints\FW\user\user.c
                                           // "RC,<port>,<pin>,<value><CR>"                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           // <port> is "A", "B", "C" and indicates the port                                e:\iro_svn\opensprints\FW\user\user.c
                                           // <pin> is a number between 0 and 7 and indicates which pin to output the new value on e:\iro_svn\opensprints\FW\user\user.c
                                           // <value> is an unsigned 16 bit number between 0 and 11890.                     e:\iro_svn\opensprints\FW\user\user.c
                                           // If <value> is "0" then the RC output on that pin is disabled.                 e:\iro_svn\opensprints\FW\user\user.c
                                           // Otherwise <value> = 1 means 1ms pulse, <value> = 11890 means 2ms pulse,       e:\iro_svn\opensprints\FW\user\user.c
                                           // any value inbetween means proportional pulse values between those two         e:\iro_svn\opensprints\FW\user\user.c
                                           // Note: The pin used for RC output must be set as an output, or not much will happen. e:\iro_svn\opensprints\FW\user\user.c
                                           // The RC command will continue to send out pulses at the last set value on      e:\iro_svn\opensprints\FW\user\user.c
                                           // each pin that has RC output with a repition rate of 1 pulse about every 19ms. e:\iro_svn\opensprints\FW\user\user.c
                                           // If you have RC output enabled on a pin, outputting a digital value to that pin e:\iro_svn\opensprints\FW\user\user.c
                                           // will be overwritten the next time the RC pulses. Make sure to turn off the RC e:\iro_svn\opensprints\FW\user\user.c
                                           // output if you want to use the pin for something else.                         e:\iro_svn\opensprints\FW\user\user.c
001bda   cfd9     MOVFF     0xfd9,0xfe6    void parse_RC_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
001bdc   ffe6                                                                                                               
001bde   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001be0   ffd9                                                                                                               
001be2   0e04     MOVLW     0x4                                                                                             
001be4   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char port;                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char pin;                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned int value;                                                             e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001be6   0e05     MOVLW     0x5            	port = extract_number (kUCASE_ASCII_CHAR);                                      e:\iro_svn\opensprints\FW\user\user.c
001be8   6ee6     MOVWF     0xe6,0x0                                                                                        
001bea   db10     RCALL     0x220c                                                                                          
001bec   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001bee   501d     MOVF      0x1d,0x0,0x0                                                                                    
001bf0   6edf     MOVWF     0xdf,0x0                                                                                        
001bf2   0e01     MOVLW     0x1            	pin = extract_number (kUCHAR);                                                  e:\iro_svn\opensprints\FW\user\user.c
001bf4   6ee6     MOVWF     0xe6,0x0                                                                                        
001bf6   db0a     RCALL     0x220c                                                                                          
001bf8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001bfa   0e01     MOVLW     0x1                                                                                             
001bfc   c01d     MOVFF     0x1d,0xfdb                                                                                      
001bfe   ffdb                                                                                                               
001c00   0e03     MOVLW     0x3            	value = extract_number (kUINT);                                                 e:\iro_svn\opensprints\FW\user\user.c
001c02   6ee6     MOVWF     0xe6,0x0                                                                                        
001c04   db03     RCALL     0x220c                                                                                          
001c06   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001c08   0e02     MOVLW     0x2                                                                                             
001c0a   c01d     MOVFF     0x1d,0xfdb                                                                                      
001c0c   ffdb                                                                                                               
001c0e   0e03     MOVLW     0x3                                                                                             
001c10   c01e     MOVFF     0x1e,0xfdb                                                                                      
001c12   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
001c14   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
001c16   e001     BZ        0x1c1a                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001c18   d07b     BRA       0x1d10         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Max value user can input. (min is zero)                                      e:\iro_svn\opensprints\FW\user\user.c
001c1a   50d9     MOVF      0xd9,0x0,0x0   	if (value > 11890)                                                              e:\iro_svn\opensprints\FW\user\user.c
001c1c   0f02     ADDLW     0x2                                                                                             
001c1e   6ee9     MOVWF     0xe9,0x0                                                                                        
001c20   cfda     MOVFF     0xfda,0xfea                                                                                     
001c22   ffea                                                                                                               
001c24   0e72     MOVLW     0x72                                                                                            
001c26   80d8     BSF       0xd8,0x0,0x0                                                                                    
001c28   54ee     SUBFWB    0xee,0x0,0x0                                                                                    
001c2a   0e2e     MOVLW     0x2e                                                                                            
001c2c   54ed     SUBFWB    0xed,0x0,0x0                                                                                    
001c2e   e202     BC        0x1c34                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001c30   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001c32   d06e     BRA       0x1d10         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now get Value in the form that TMR0 needs it                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	// TMR0 needs to get filled with values from 65490 (1ms) to 53600 (2ms)         e:\iro_svn\opensprints\FW\user\user.c
001c34   50d9     MOVF      0xd9,0x0,0x0   	if (value != 0)                                                                 e:\iro_svn\opensprints\FW\user\user.c
001c36   0f02     ADDLW     0x2                                                                                             
001c38   6ee9     MOVWF     0xe9,0x0                                                                                        
001c3a   cfda     MOVFF     0xfda,0xfea                                                                                     
001c3c   ffea                                                                                                               
001c3e   50ee     MOVF      0xee,0x0,0x0                                                                                    
001c40   10ed     IORWF     0xed,0x0,0x0                                                                                    
001c42   e01f     BZ        0x1c82                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001c44   682d     SETF      0x2d,0x0       		value = (65535 - (value + 45));                                                e:\iro_svn\opensprints\FW\user\user.c
001c46   682e     SETF      0x2e,0x0                                                                                        
001c48   6a2f     CLRF      0x2f,0x0                                                                                        
001c4a   0e2d     MOVLW     0x2d                                                                                            
001c4c   6ee7     MOVWF     0xe7,0x0                                                                                        
001c4e   0e02     MOVLW     0x2                                                                                             
001c50   cfdb     MOVFF     0xfdb,0x30                                                                                      
001c52   f030                                                                                                               
001c54   0e03     MOVLW     0x3                                                                                             
001c56   cfdb     MOVFF     0xfdb,0x31                                                                                      
001c58   f031                                                                                                               
001c5a   50e7     MOVF      0xe7,0x0,0x0                                                                                    
001c5c   2630     ADDWF     0x30,0x1,0x0                                                                                    
001c5e   0e00     MOVLW     0x0                                                                                             
001c60   2231     ADDWFC    0x31,0x1,0x0                                                                                    
001c62   6a32     CLRF      0x32,0x0                                                                                        
001c64   5030     MOVF      0x30,0x0,0x0                                                                                    
001c66   5c2d     SUBWF     0x2d,0x0,0x0                                                                                    
001c68   6e2a     MOVWF     0x2a,0x0                                                                                        
001c6a   5031     MOVF      0x31,0x0,0x0                                                                                    
001c6c   582e     SUBWFB    0x2e,0x0,0x0                                                                                    
001c6e   6e2b     MOVWF     0x2b,0x0                                                                                        
001c70   5032     MOVF      0x32,0x0,0x0                                                                                    
001c72   582f     SUBWFB    0x2f,0x0,0x0                                                                                    
001c74   6e2c     MOVWF     0x2c,0x0                                                                                        
001c76   0e02     MOVLW     0x2                                                                                             
001c78   c02a     MOVFF     0x2a,0xfdb                                                                                      
001c7a   ffdb                                                                                                               
001c7c   0e03     MOVLW     0x3                                                                                             
001c7e   c02b     MOVFF     0x2b,0xfdb                                                                                      
001c80   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001c82   0e01     MOVLW     0x1            	if (pin > 7)                                                                    e:\iro_svn\opensprints\FW\user\user.c
001c84   50db     MOVF      0xdb,0x0,0x0                                                                                    
001c86   0807     SUBLW     0x7                                                                                             
001c88   e202     BC        0x1c8e                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001c8a   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001c8c   d041     BRA       0x1d10         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001c8e   0e41     MOVLW     0x41           	if ('A' == port)                                                                e:\iro_svn\opensprints\FW\user\user.c
001c90   6e2a     MOVWF     0x2a,0x0                                                                                        
001c92   50df     MOVF      0xdf,0x0,0x0                                                                                    
001c94   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001c96   e102     BNZ       0x1c9c                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001c98   6adf     CLRF      0xdf,0x0       		port = 0;                                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001c9a   d012     BRA       0x1cc0         	else if ('B' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001c9c   0e42     MOVLW     0x42                                                                                            
001c9e   6e2a     MOVWF     0x2a,0x0                                                                                        
001ca0   50df     MOVF      0xdf,0x0,0x0                                                                                    
001ca2   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001ca4   e103     BNZ       0x1cac                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001ca6   0e08     MOVLW     0x8            		port = 8;                                                                      e:\iro_svn\opensprints\FW\user\user.c
001ca8   6edf     MOVWF     0xdf,0x0                                                                                        
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001caa   d00a     BRA       0x1cc0         	else if ('C' == port)                                                           e:\iro_svn\opensprints\FW\user\user.c
001cac   0e43     MOVLW     0x43                                                                                            
001cae   6e2a     MOVWF     0x2a,0x0                                                                                        
001cb0   50df     MOVF      0xdf,0x0,0x0                                                                                    
001cb2   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001cb4   e103     BNZ       0x1cbc                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001cb6   0e10     MOVLW     0x10           		port = 16;                                                                     e:\iro_svn\opensprints\FW\user\user.c
001cb8   6edf     MOVWF     0xdf,0x0                                                                                        
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
001cba   d002     BRA       0x1cc0         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001cbc   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
001cbe   d028     BRA       0x1d10         		return;	                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Store the new RC time value                                                  e:\iro_svn\opensprints\FW\user\user.c
001cc0   0e01     MOVLW     0x1            	g_RC_value[pin + port] = value;                                                 e:\iro_svn\opensprints\FW\user\user.c
001cc2   50db     MOVF      0xdb,0x0,0x0                                                                                    
001cc4   24df     ADDWF     0xdf,0x0,0x0                                                                                    
001cc6   6ee9     MOVWF     0xe9,0x0                                                                                        
001cc8   6aea     CLRF      0xea,0x0                                                                                        
001cca   90d8     BCF       0xd8,0x0,0x0                                                                                    
001ccc   36e9     RLCF      0xe9,0x1,0x0                                                                                    
001cce   36ea     RLCF      0xea,0x1,0x0                                                                                    
001cd0   0e69     MOVLW     0x69                                                                                            
001cd2   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
001cd4   0e01     MOVLW     0x1                                                                                             
001cd6   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001cd8   0e02     MOVLW     0x2                                                                                             
001cda   cfdb     MOVFF     0xfdb,0xfee                                                                                     
001cdc   ffee                                                                                                               
001cde   0e03     MOVLW     0x3                                                                                             
001ce0   cfdb     MOVFF     0xfdb,0xfed                                                                                     
001ce2   ffed                                                                                                               
                                           	// Only set this state if we are off - if we are already running on             e:\iro_svn\opensprints\FW\user\user.c
                                           	// this pin, then the new value will be picked up next time around (19ms)       e:\iro_svn\opensprints\FW\user\user.c
001ce4   0e01     MOVLW     0x1            	if (kOFF == g_RC_state[pin + port])                                             e:\iro_svn\opensprints\FW\user\user.c
001ce6   50db     MOVF      0xdb,0x0,0x0                                                                                    
001ce8   24df     ADDWF     0xdf,0x0,0x0                                                                                    
001cea   6aea     CLRF      0xea,0x0                                                                                        
001cec   0f51     ADDLW     0x51                                                                                            
001cee   6ee9     MOVWF     0xe9,0x0                                                                                        
001cf0   0e01     MOVLW     0x1                                                                                             
001cf2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001cf4   04ef     DECF      0xef,0x0,0x0                                                                                    
001cf6   e10a     BNZ       0x1d0c                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001cf8   0e01     MOVLW     0x1            		g_RC_state[pin + port] = kWAITING;                                             e:\iro_svn\opensprints\FW\user\user.c
001cfa   50db     MOVF      0xdb,0x0,0x0                                                                                    
001cfc   24df     ADDWF     0xdf,0x0,0x0                                                                                    
001cfe   6aea     CLRF      0xea,0x0                                                                                        
001d00   0f51     ADDLW     0x51                                                                                            
001d02   6ee9     MOVWF     0xe9,0x0                                                                                        
001d04   0e01     MOVLW     0x1                                                                                             
001d06   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001d08   0e02     MOVLW     0x2                                                                                             
001d0a   6eef     MOVWF     0xef,0x0                                                                                        
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001d0c   ec06     CALL      0x140c,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001d0e   f00a                                                                                                               
001d10   0e04     MOVLW     0x4            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001d12   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001d14   e202     BC        0x1d1a                                                                                          
001d16   6ae1     CLRF      0xe1,0x0                                                                                        
001d18   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d1a   6ee1     MOVWF     0xe1,0x0                                                                                        
001d1c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d1e   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001d20   ffd9                                                                                                               
001d22   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // BC is for Bulk Configure                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           // BC,<port A init>,<waitmask>,<wait delay>,<strobemask>,<strobe delay><CR>      e:\iro_svn\opensprints\FW\user\user.c
                                           // This command sets up the mask and strobe bits on port A for the               e:\iro_svn\opensprints\FW\user\user.c
                                           // BO (Bulk Output) command below. Also suck in wait delay, strobe delay, etc.   e:\iro_svn\opensprints\FW\user\user.c
001d24   cfd9     MOVFF     0xfd9,0xfe6    void parse_BC_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
001d26   ffe6                                                                                                               
001d28   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001d2a   ffd9                                                                                                               
001d2c   0e05     MOVLW     0x5                                                                                             
001d2e   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_init;                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_strobe_mask;                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_wait_mask;                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_wait_delay;                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_strobe_delay;                                                  e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001d30   0e01     MOVLW     0x1            	BO_init = extract_number (kUCHAR);                                              e:\iro_svn\opensprints\FW\user\user.c
001d32   6ee6     MOVWF     0xe6,0x0                                                                                        
001d34   da6b     RCALL     0x220c                                                                                          
001d36   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d38   501d     MOVF      0x1d,0x0,0x0                                                                                    
001d3a   6edf     MOVWF     0xdf,0x0                                                                                        
001d3c   0e01     MOVLW     0x1            	BO_wait_mask = extract_number (kUCHAR);                                         e:\iro_svn\opensprints\FW\user\user.c
001d3e   6ee6     MOVWF     0xe6,0x0                                                                                        
001d40   da65     RCALL     0x220c                                                                                          
001d42   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d44   0e02     MOVLW     0x2                                                                                             
001d46   c01d     MOVFF     0x1d,0xfdb                                                                                      
001d48   ffdb                                                                                                               
001d4a   0e01     MOVLW     0x1            	BO_wait_delay = extract_number (kUCHAR);                                        e:\iro_svn\opensprints\FW\user\user.c
001d4c   6ee6     MOVWF     0xe6,0x0                                                                                        
001d4e   da5e     RCALL     0x220c                                                                                          
001d50   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d52   0e03     MOVLW     0x3                                                                                             
001d54   c01d     MOVFF     0x1d,0xfdb                                                                                      
001d56   ffdb                                                                                                               
001d58   0e01     MOVLW     0x1            	BO_strobe_mask = extract_number (kUCHAR);                                       e:\iro_svn\opensprints\FW\user\user.c
001d5a   6ee6     MOVWF     0xe6,0x0                                                                                        
001d5c   da57     RCALL     0x220c                                                                                          
001d5e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d60   0e01     MOVLW     0x1                                                                                             
001d62   c01d     MOVFF     0x1d,0xfdb                                                                                      
001d64   ffdb                                                                                                               
001d66   0e01     MOVLW     0x1            	BO_strobe_delay = extract_number (kUCHAR);                                      e:\iro_svn\opensprints\FW\user\user.c
001d68   6ee6     MOVWF     0xe6,0x0                                                                                        
001d6a   da50     RCALL     0x220c                                                                                          
001d6c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001d6e   0e04     MOVLW     0x4                                                                                             
001d70   c01d     MOVFF     0x1d,0xfdb                                                                                      
001d72   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Bail if we got a conversion error                                            e:\iro_svn\opensprints\FW\user\user.c
001d74   500d     MOVF      0xd,0x0,0x0    	if (error_byte)                                                                 e:\iro_svn\opensprints\FW\user\user.c
001d76   e001     BZ        0x1d7a                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001d78   d012     BRA       0x1d9e         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Copy over values to their gloabls                                            e:\iro_svn\opensprints\FW\user\user.c
001d7a   cfdf     MOVFF     0xfdf,0x199    	g_BO_init = BO_init;                                                            e:\iro_svn\opensprints\FW\user\user.c
001d7c   f199                                                                                                               
001d7e   0e02     MOVLW     0x2            	g_BO_wait_mask = BO_wait_mask;                                                  e:\iro_svn\opensprints\FW\user\user.c
001d80   cfdb     MOVFF     0xfdb,0x19b                                                                                     
001d82   f19b                                                                                                               
001d84   0e01     MOVLW     0x1            	g_BO_strobe_mask = BO_strobe_mask;                                              e:\iro_svn\opensprints\FW\user\user.c
001d86   cfdb     MOVFF     0xfdb,0x19a                                                                                     
001d88   f19a                                                                                                               
001d8a   0e03     MOVLW     0x3            	g_BO_wait_delay = BO_wait_delay;                                                e:\iro_svn\opensprints\FW\user\user.c
001d8c   cfdb     MOVFF     0xfdb,0x19c                                                                                     
001d8e   f19c                                                                                                               
001d90   0e04     MOVLW     0x4            	g_BO_strobe_delay = BO_strobe_delay;                                            e:\iro_svn\opensprints\FW\user\user.c
001d92   cfdb     MOVFF     0xfdb,0x19d                                                                                     
001d94   f19d                                                                                                               
                                           	// And initalize Port A                                                         e:\iro_svn\opensprints\FW\user\user.c
001d96   c199     MOVFF     0x199,0xf89    	LATA = g_BO_init;                                                               e:\iro_svn\opensprints\FW\user\user.c
001d98   ff89                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
001d9a   ec06     CALL      0x140c,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
001d9c   f00a                                                                                                               
001d9e   0e05     MOVLW     0x5            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
001da0   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
001da2   e202     BC        0x1da8                                                                                          
001da4   6ae1     CLRF      0xe1,0x0                                                                                        
001da6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001da8   6ee1     MOVWF     0xe1,0x0                                                                                        
001daa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001dac   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
001dae   ffd9                                                                                                               
001db0   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Bulk Output (BO)                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           // BO,4AF2C124<CR>                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           // After the inital comma, pull in hex values and spit them out to port A        e:\iro_svn\opensprints\FW\user\user.c
                                           // Note that the procedure here is as follows:                                   e:\iro_svn\opensprints\FW\user\user.c
                                           //	1) Write new value to PortB                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           //	2) Assert <strobemask>                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           //	3) Wait for <strobdelay> (if not zero)                                        e:\iro_svn\opensprints\FW\user\user.c
                                           //	4) Deassert <strobemask>                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           //	5) Wait for <waitmask> to be asserted                                         e:\iro_svn\opensprints\FW\user\user.c
                                           //	6) Wait for <waitmask> to be deasserted                                       e:\iro_svn\opensprints\FW\user\user.c
                                           //	7) If 5) or 6) takes longer than <waitdelay> then just move on to next byte   e:\iro_svn\opensprints\FW\user\user.c
                                           //	Repeat for each byte                                                          e:\iro_svn\opensprints\FW\user\user.c
001db2   cfd9     MOVFF     0xfd9,0xfe6    void parse_BO_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
001db4   ffe6                                                                                                               
001db6   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
001db8   ffd9                                                                                                               
001dba   0e04     MOVLW     0x4                                                                                             
001dbc   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_data_byte;                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char new_port_A_value;                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char tmp;                                                              e:\iro_svn\opensprints\FW\user\user.c
001dbe   0e03     MOVLW     0x3            	unsigned char wait_count = 0;                                                   e:\iro_svn\opensprints\FW\user\user.c
001dc0   6adb     CLRF      0xdb,0x0                                                                                        
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for comma where ptr points                                             e:\iro_svn\opensprints\FW\user\user.c
001dc2   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',')                                              e:\iro_svn\opensprints\FW\user\user.c
001dc4   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001dc6   6aea     CLRF      0xea,0x0                                                                                        
001dc8   0f40     ADDLW     0x40                                                                                            
001dca   6ee9     MOVWF     0xe9,0x0                                                                                        
001dcc   0e02     MOVLW     0x2                                                                                             
001dce   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001dd0   50ef     MOVF      0xef,0x0,0x0                                                                                    
001dd2   082c     SUBLW     0x2c                                                                                            
001dd4   e01d     BZ        0x1e10                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
001dd6   0101     MOVLB     0x1            		printf ((rom char *)"!5 Err: Need comma next, found: '%c'\r\n", g_RX_buf[g_RX_buf_out]); e:\iro_svn\opensprints\FW\user\user.c
001dd8   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001dda   6aea     CLRF      0xea,0x0                                                                                        
001ddc   0f40     ADDLW     0x40                                                                                            
001dde   6ee9     MOVWF     0xe9,0x0                                                                                        
001de0   0e02     MOVLW     0x2                                                                                             
001de2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001de4   50ef     MOVF      0xef,0x0,0x0                                                                                    
001de6   6ee6     MOVWF     0xe6,0x0                                                                                        
001de8   6ae6     CLRF      0xe6,0x0                                                                                        
001dea   0efa     MOVLW     0xfa                                                                                            
001dec   6e2a     MOVWF     0x2a,0x0                                                                                        
001dee   0e41     MOVLW     0x41                                                                                            
001df0   6e2b     MOVWF     0x2b,0x0                                                                                        
001df2   6a2c     CLRF      0x2c,0x0                                                                                        
001df4   c02a     MOVFF     0x2a,0xfe6                                                                                      
001df6   ffe6                                                                                                               
001df8   c02b     MOVFF     0x2b,0xfe6                                                                                      
001dfa   ffe6                                                                                                               
001dfc   c02c     MOVFF     0x2c,0xfe6                                                                                      
001dfe   ffe6                                                                                                               
001e00   ecc8     CALL      0x4590,0x0                                                                                      
001e02   f022                                                                                                               
001e04   6e2d     MOVWF     0x2d,0x0                                                                                        
001e06   0e05     MOVLW     0x5                                                                                             
001e08   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
001e0a   502d     MOVF      0x2d,0x0,0x0                                                                                    
001e0c   8a0d     BSF       0xd,0x5,0x0    		bitset (error_byte, kERROR_BYTE_PRINTED_ERROR);                                e:\iro_svn\opensprints\FW\user\user.c
001e0e   d10e     BRA       0x202c         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Move to the next character                                                   e:\iro_svn\opensprints\FW\user\user.c
001e10   0101     MOVLB     0x1            	advance_RX_buf_out ();                                                          e:\iro_svn\opensprints\FW\user\user.c
001e12   2ba1     INCF      0xa1,0x1,0x1                                                                                    
001e14   0e40     MOVLW     0x40                                                                                            
001e16   0101     MOVLB     0x1                                                                                             
001e18   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001e1a   e102     BNZ       0x1e20                                                                                          
001e1c   0101     MOVLB     0x1                                                                                             
001e1e   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Make sure Port A is correct                                                  e:\iro_svn\opensprints\FW\user\user.c
001e20   c199     MOVFF     0x199,0xf89    	LATA = g_BO_init;                                                               e:\iro_svn\opensprints\FW\user\user.c
001e22   ff89                                                                                                               
001e24   0101     MOVLB     0x1            	new_port_A_value = ((~LATA & g_BO_strobe_mask)) | (LATA & ~g_BO_strobe_mask);   e:\iro_svn\opensprints\FW\user\user.c
001e26   1d9a     COMF      0x9a,0x0,0x1                                                                                    
001e28   1489     ANDWF     0x89,0x0,0x0                                                                                    
001e2a   6e2a     MOVWF     0x2a,0x0                                                                                        
001e2c   1c89     COMF      0x89,0x0,0x0                                                                                    
001e2e   0101     MOVLB     0x1                                                                                             
001e30   159a     ANDWF     0x9a,0x0,0x1                                                                                    
001e32   102a     IORWF     0x2a,0x0,0x0                                                                                    
001e34   6ee7     MOVWF     0xe7,0x0                                                                                        
001e36   0e01     MOVLW     0x1                                                                                             
001e38   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001e3a   ffdb                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
001e3c   0101     MOVLB     0x1            	while (g_RX_buf[g_RX_buf_out] != 13)                                            e:\iro_svn\opensprints\FW\user\user.c
001e3e   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001e40   6aea     CLRF      0xea,0x0                                                                                        
001e42   0f40     ADDLW     0x40                                                                                            
001e44   6ee9     MOVWF     0xe9,0x0                                                                                        
001e46   0e02     MOVLW     0x2                                                                                             
001e48   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001e4a   50ef     MOVF      0xef,0x0,0x0                                                                                    
001e4c   080d     SUBLW     0xd                                                                                             
001e4e   e101     BNZ       0x1e52                                                                                          
001e50   d0eb     BRA       0x2028                                                                                          
002026   d70a     BRA       0x1e3c                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Pull in a nibble from the input buffer                                      e:\iro_svn\opensprints\FW\user\user.c
001e52   0101     MOVLB     0x1            		tmp = toupper (g_RX_buf[g_RX_buf_out]);                                        e:\iro_svn\opensprints\FW\user\user.c
001e54   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001e56   6aea     CLRF      0xea,0x0                                                                                        
001e58   0f40     ADDLW     0x40                                                                                            
001e5a   6ee9     MOVWF     0xe9,0x0                                                                                        
001e5c   0e02     MOVLW     0x2                                                                                             
001e5e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001e60   50ef     MOVF      0xef,0x0,0x0                                                                                    
001e62   6ee6     MOVWF     0xe6,0x0                                                                                        
001e64   6ae6     CLRF      0xe6,0x0                                                                                        
001e66   ecc1     CALL      0x4782,0x0                                                                                      
001e68   f023                                                                                                               
001e6a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001e6c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001e6e   0e02     MOVLW     0x2                                                                                             
001e70   cff3     MOVFF     0xff3,0xfdb                                                                                     
001e72   ffdb                                                                                                               
001e74   0e30     MOVLW     0x30           		if (tmp >= '0' && tmp <= '9')                                                  e:\iro_svn\opensprints\FW\user\user.c
001e76   6ef3     MOVWF     0xf3,0x0                                                                                        
001e78   0e02     MOVLW     0x2                                                                                             
001e7a   cfdb     MOVFF     0xfdb,0xff4                                                                                     
001e7c   fff4                                                                                                               
001e7e   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001e80   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
001e82   e30f     BNC       0x1ea2                                                                                          
001e84   0e02     MOVLW     0x2                                                                                             
001e86   50db     MOVF      0xdb,0x0,0x0                                                                                    
001e88   0839     SUBLW     0x39                                                                                            
001e8a   e30b     BNC       0x1ea2                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001e8c   0e30     MOVLW     0x30           			tmp -= '0';	                                                                  e:\iro_svn\opensprints\FW\user\user.c
001e8e   6e2a     MOVWF     0x2a,0x0                                                                                        
001e90   0e02     MOVLW     0x2                                                                                             
001e92   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001e94   ffe7                                                                                                               
001e96   502a     MOVF      0x2a,0x0,0x0                                                                                    
001e98   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001e9a   0e02     MOVLW     0x2                                                                                             
001e9c   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001e9e   ffdb                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001ea0   d019     BRA       0x1ed4         		else if (tmp >= 'A' && tmp <= 'F')                                             e:\iro_svn\opensprints\FW\user\user.c
001ea2   0e41     MOVLW     0x41                                                                                            
001ea4   6ef3     MOVWF     0xf3,0x0                                                                                        
001ea6   0e02     MOVLW     0x2                                                                                             
001ea8   cfdb     MOVFF     0xfdb,0xff4                                                                                     
001eaa   fff4                                                                                                               
001eac   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001eae   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
001eb0   e30f     BNC       0x1ed0                                                                                          
001eb2   0e02     MOVLW     0x2                                                                                             
001eb4   50db     MOVF      0xdb,0x0,0x0                                                                                    
001eb6   0846     SUBLW     0x46                                                                                            
001eb8   e30b     BNC       0x1ed0                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001eba   0e37     MOVLW     0x37           			tmp -= 55;                                                                    e:\iro_svn\opensprints\FW\user\user.c
001ebc   6e2a     MOVWF     0x2a,0x0                                                                                        
001ebe   0e02     MOVLW     0x2                                                                                             
001ec0   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001ec2   ffe7                                                                                                               
001ec4   502a     MOVF      0x2a,0x0,0x0                                                                                    
001ec6   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001ec8   0e02     MOVLW     0x2                                                                                             
001eca   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001ecc   ffdb                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001ece   d002     BRA       0x1ed4         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001ed0   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     e:\iro_svn\opensprints\FW\user\user.c
001ed2   d0ac     BRA       0x202c         			return;                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001ed4   0e02     MOVLW     0x2            		BO_data_byte = tmp << 4;                                                       e:\iro_svn\opensprints\FW\user\user.c
001ed6   38db     SWAPF     0xdb,0x0,0x0                                                                                    
001ed8   0bf0     ANDLW     0xf0                                                                                            
001eda   6edf     MOVWF     0xdf,0x0                                                                                        
001edc   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         e:\iro_svn\opensprints\FW\user\user.c
001ede   2ba1     INCF      0xa1,0x1,0x1                                                                                    
001ee0   0e40     MOVLW     0x40                                                                                            
001ee2   0101     MOVLB     0x1                                                                                             
001ee4   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001ee6   e102     BNZ       0x1eec                                                                                          
001ee8   0101     MOVLB     0x1                                                                                             
001eea   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Check for CR next                                                           e:\iro_svn\opensprints\FW\user\user.c
001eec   0e0d     MOVLW     0xd            		if (kCR == g_RX_buf[g_RX_buf_out])                                             e:\iro_svn\opensprints\FW\user\user.c
001eee   6e2a     MOVWF     0x2a,0x0                                                                                        
001ef0   0101     MOVLB     0x1                                                                                             
001ef2   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001ef4   6aea     CLRF      0xea,0x0                                                                                        
001ef6   0f40     ADDLW     0x40                                                                                            
001ef8   6ee9     MOVWF     0xe9,0x0                                                                                        
001efa   0e02     MOVLW     0x2                                                                                             
001efc   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001efe   50ef     MOVF      0xef,0x0,0x0                                                                                    
001f00   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
001f02   e102     BNZ       0x1f08                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001f04   880d     BSF       0xd,0x4,0x0    			bitset (error_byte, kERROR_BYTE_MISSING_PARAMETER);                           e:\iro_svn\opensprints\FW\user\user.c
001f06   d092     BRA       0x202c         			return;                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001f08   0101     MOVLB     0x1            		tmp =  toupper (g_RX_buf[g_RX_buf_out]);                                       e:\iro_svn\opensprints\FW\user\user.c
001f0a   51a1     MOVF      0xa1,0x0,0x1                                                                                    
001f0c   6aea     CLRF      0xea,0x0                                                                                        
001f0e   0f40     ADDLW     0x40                                                                                            
001f10   6ee9     MOVWF     0xe9,0x0                                                                                        
001f12   0e02     MOVLW     0x2                                                                                             
001f14   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
001f16   50ef     MOVF      0xef,0x0,0x0                                                                                    
001f18   6ee6     MOVWF     0xe6,0x0                                                                                        
001f1a   6ae6     CLRF      0xe6,0x0                                                                                        
001f1c   ecc1     CALL      0x4782,0x0                                                                                      
001f1e   f023                                                                                                               
001f20   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001f22   52e5     MOVF      0xe5,0x1,0x0                                                                                    
001f24   0e02     MOVLW     0x2                                                                                             
001f26   cff3     MOVFF     0xff3,0xfdb                                                                                     
001f28   ffdb                                                                                                               
001f2a   0e30     MOVLW     0x30           		if (tmp >= '0' && tmp <= '9')                                                  e:\iro_svn\opensprints\FW\user\user.c
001f2c   6ef3     MOVWF     0xf3,0x0                                                                                        
001f2e   0e02     MOVLW     0x2                                                                                             
001f30   cfdb     MOVFF     0xfdb,0xff4                                                                                     
001f32   fff4                                                                                                               
001f34   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001f36   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
001f38   e30f     BNC       0x1f58                                                                                          
001f3a   0e02     MOVLW     0x2                                                                                             
001f3c   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f3e   0839     SUBLW     0x39                                                                                            
001f40   e30b     BNC       0x1f58                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001f42   0e30     MOVLW     0x30           			tmp -= '0';	                                                                  e:\iro_svn\opensprints\FW\user\user.c
001f44   6e2a     MOVWF     0x2a,0x0                                                                                        
001f46   0e02     MOVLW     0x2                                                                                             
001f48   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001f4a   ffe7                                                                                                               
001f4c   502a     MOVF      0x2a,0x0,0x0                                                                                    
001f4e   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001f50   0e02     MOVLW     0x2                                                                                             
001f52   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001f54   ffdb                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001f56   d019     BRA       0x1f8a         		else if (tmp >= 'A' && tmp <= 'F')                                             e:\iro_svn\opensprints\FW\user\user.c
001f58   0e41     MOVLW     0x41                                                                                            
001f5a   6ef3     MOVWF     0xf3,0x0                                                                                        
001f5c   0e02     MOVLW     0x2                                                                                             
001f5e   cfdb     MOVFF     0xfdb,0xff4                                                                                     
001f60   fff4                                                                                                               
001f62   50f3     MOVF      0xf3,0x0,0x0                                                                                    
001f64   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
001f66   e30f     BNC       0x1f86                                                                                          
001f68   0e02     MOVLW     0x2                                                                                             
001f6a   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f6c   0846     SUBLW     0x46                                                                                            
001f6e   e30b     BNC       0x1f86                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001f70   0e37     MOVLW     0x37           			tmp -= 55;                                                                    e:\iro_svn\opensprints\FW\user\user.c
001f72   6e2a     MOVWF     0x2a,0x0                                                                                        
001f74   0e02     MOVLW     0x2                                                                                             
001f76   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
001f78   ffe7                                                                                                               
001f7a   502a     MOVF      0x2a,0x0,0x0                                                                                    
001f7c   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
001f7e   0e02     MOVLW     0x2                                                                                             
001f80   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
001f82   ffdb                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001f84   d002     BRA       0x1f8a         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001f86   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     e:\iro_svn\opensprints\FW\user\user.c
001f88   d051     BRA       0x202c         			return;                                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001f8a   0e02     MOVLW     0x2            		BO_data_byte = BO_data_byte + tmp;                                             e:\iro_svn\opensprints\FW\user\user.c
001f8c   50db     MOVF      0xdb,0x0,0x0                                                                                    
001f8e   24df     ADDWF     0xdf,0x0,0x0                                                                                    
001f90   6edf     MOVWF     0xdf,0x0                                                                                        
001f92   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         e:\iro_svn\opensprints\FW\user\user.c
001f94   2ba1     INCF      0xa1,0x1,0x1                                                                                    
001f96   0e40     MOVLW     0x40                                                                                            
001f98   0101     MOVLB     0x1                                                                                             
001f9a   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
001f9c   e102     BNZ       0x1fa2                                                                                          
001f9e   0101     MOVLB     0x1                                                                                             
001fa0   6ba1     CLRF      0xa1,0x1                                                                                        
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Output the byte on Port B                                                   e:\iro_svn\opensprints\FW\user\user.c
001fa2   50df     MOVF      0xdf,0x0,0x0   		LATB = BO_data_byte;                                                           e:\iro_svn\opensprints\FW\user\user.c
001fa4   6e8a     MOVWF     0x8a,0x0                                                                                        
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// And strobe the Port A bits that we're supposed to                           e:\iro_svn\opensprints\FW\user\user.c
001fa6   0e01     MOVLW     0x1            		LATA = new_port_A_value;                                                       e:\iro_svn\opensprints\FW\user\user.c
001fa8   50db     MOVF      0xdb,0x0,0x0                                                                                    
001faa   6e89     MOVWF     0x89,0x0                                                                                        
001fac   0101     MOVLB     0x1            		if (g_BO_strobe_delay)                                                         e:\iro_svn\opensprints\FW\user\user.c
001fae   519d     MOVF      0x9d,0x0,0x1                                                                                    
001fb0   e005     BZ        0x1fbc                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
001fb2   c19d     MOVFF     0x19d,0xfe6    			Delay10TCYx (g_BO_strobe_delay);                                              e:\iro_svn\opensprints\FW\user\user.c
001fb4   ffe6                                                                                                               
001fb6   ec76     CALL      0x48ec,0x0                                                                                      
001fb8   f024                                                                                                               
001fba   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
001fbc   c199     MOVFF     0x199,0xf89    		LATA = g_BO_init;                                                              e:\iro_svn\opensprints\FW\user\user.c
001fbe   ff89                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
001fc0   0101     MOVLB     0x1            		if (g_BO_wait_delay)                                                           e:\iro_svn\opensprints\FW\user\user.c
001fc2   519c     MOVF      0x9c,0x0,0x1                                                                                    
001fc4   e030     BZ        0x2026                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Now we spin on the wait bit specified in WaitMask                          e:\iro_svn\opensprints\FW\user\user.c
                                           			// (Used for Busy Bits) We also have to wait here                             e:\iro_svn\opensprints\FW\user\user.c
                                           			// for a maximum of g_BO_wait_delay, which is in 10 clock units               e:\iro_svn\opensprints\FW\user\user.c
                                           			// First we wait for the wait mask to become asserted                         e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       e:\iro_svn\opensprints\FW\user\user.c
001fc6   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 e:\iro_svn\opensprints\FW\user\user.c
001fc8   c19c     MOVFF     0x19c,0xfdb                                                                                     
001fca   ffdb                                                                                                               
001ff4   d7eb     BRA       0x1fcc         			while (                                                                       e:\iro_svn\opensprints\FW\user\user.c
001fcc   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) == (PORTA & g_BO_wait_mask))                   e:\iro_svn\opensprints\FW\user\user.c
001fce   5199     MOVF      0x99,0x0,0x1                                                                                    
001fd0   0101     MOVLB     0x1                                                                                             
001fd2   159b     ANDWF     0x9b,0x0,0x1                                                                                    
001fd4   6e2a     MOVWF     0x2a,0x0                                                                                        
001fd6   0101     MOVLB     0x1                                                                                             
001fd8   519b     MOVF      0x9b,0x0,0x1                                                                                    
001fda   1480     ANDWF     0x80,0x0,0x0                                                                                    
001fdc   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           e:\iro_svn\opensprints\FW\user\user.c
001fe0   0e03     MOVLW     0x3            				(wait_count != 0)                                                            e:\iro_svn\opensprints\FW\user\user.c
001fe2   50db     MOVF      0xdb,0x0,0x0                                                                                    
001fde   e10b     BNZ       0x1ff6         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
001fe4   e008     BZ        0x1ff6                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
001fe6   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
001fe8   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
001fea   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
001fec   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
001fee   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
001ff0   0e03     MOVLW     0x3            				wait_count--;                                                                e:\iro_svn\opensprints\FW\user\user.c
001ff2   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       e:\iro_svn\opensprints\FW\user\user.c
001ff6   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 e:\iro_svn\opensprints\FW\user\user.c
001ff8   c19c     MOVFF     0x19c,0xfdb                                                                                     
001ffa   ffdb                                                                                                               
                                           			// Then we wait for the wait mask to become de-asserted                       e:\iro_svn\opensprints\FW\user\user.c
002024   d7eb     BRA       0x1ffc         			while (                                                                       e:\iro_svn\opensprints\FW\user\user.c
001ffc   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) != (PORTA & g_BO_wait_mask))                   e:\iro_svn\opensprints\FW\user\user.c
001ffe   5199     MOVF      0x99,0x0,0x1                                                                                    
002000   0101     MOVLB     0x1                                                                                             
002002   159b     ANDWF     0x9b,0x0,0x1                                                                                    
002004   6e2a     MOVWF     0x2a,0x0                                                                                        
002006   0101     MOVLB     0x1                                                                                             
002008   519b     MOVF      0x9b,0x0,0x1                                                                                    
00200a   1480     ANDWF     0x80,0x0,0x0                                                                                    
00200c   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           e:\iro_svn\opensprints\FW\user\user.c
002010   0e03     MOVLW     0x3            				(wait_count != 0)                                                            e:\iro_svn\opensprints\FW\user\user.c
002012   50db     MOVF      0xdb,0x0,0x0                                                                                    
00200e   e00b     BZ        0x2026         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
002014   e008     BZ        0x2026                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
002016   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002018   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
00201a   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
00201c   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
00201e   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002020   0e03     MOVLW     0x3            				wait_count--;                                                                e:\iro_svn\opensprints\FW\user\user.c
002022   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
002028   ec06     CALL      0x140c,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
00202a   f00a                                                                                                               
00202c   0e04     MOVLW     0x4            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
00202e   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
002030   e202     BC        0x2036                                                                                          
002032   6ae1     CLRF      0xe1,0x0                                                                                        
002034   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002036   6ee1     MOVWF     0xe1,0x0                                                                                        
002038   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00203a   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00203c   ffd9                                                                                                               
00203e   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Bulk Stream (BS) (he he, couldn't think of a better name)                     e:\iro_svn\opensprints\FW\user\user.c
                                           // BS,<count>,<binary_data><CR>                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           // This command is extremely similar to the BO command                           e:\iro_svn\opensprints\FW\user\user.c
                                           // except that instead of ASCII HEX values, it actually                          e:\iro_svn\opensprints\FW\user\user.c
                                           // takes raw binary data.                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           // So in order for the UBW to know when the end of the stream                    e:\iro_svn\opensprints\FW\user\user.c
                                           // is, we need to have a <count> of bytes.                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // <count> represents the number of bytes after the second comma                 e:\iro_svn\opensprints\FW\user\user.c
                                           // that will be the actual binary data to be streamed out port B.                e:\iro_svn\opensprints\FW\user\user.c
                                           // Then, <binary_data> must be exactly that length.                              e:\iro_svn\opensprints\FW\user\user.c
                                           // <count> must be between 1 and 56 (currently - in the future                   e:\iro_svn\opensprints\FW\user\user.c
                                           // it would be nice to extend the upper limit)                                   e:\iro_svn\opensprints\FW\user\user.c
                                           // The UBW will pull in one byte at a time within the <binary_data>              e:\iro_svn\opensprints\FW\user\user.c
                                           // section and output it to PORTB exactly as the BO command does.                e:\iro_svn\opensprints\FW\user\user.c
                                           // It will do this for <count> bytes. It will then pull in another               e:\iro_svn\opensprints\FW\user\user.c
                                           // byte (which must be a carrige return) and be done.                            e:\iro_svn\opensprints\FW\user\user.c
                                           // The whole point of this command is to improve data throughput                 e:\iro_svn\opensprints\FW\user\user.c
                                           // from the PC to the UBW. This form of data is also more efficient              e:\iro_svn\opensprints\FW\user\user.c
                                           // for the UBW to process.                                                       e:\iro_svn\opensprints\FW\user\user.c
002040   cfd9     MOVFF     0xfd9,0xfe6    void parse_BS_packet(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
002042   ffe6                                                                                                               
002044   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
002046   ffd9                                                                                                               
002048   0e05     MOVLW     0x5                                                                                             
00204a   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char BO_data_byte;                                                     e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char new_port_A_value;                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char tmp;                                                              e:\iro_svn\opensprints\FW\user\user.c
00204c   0e03     MOVLW     0x3            	unsigned char wait_count = 0;                                                   e:\iro_svn\opensprints\FW\user\user.c
00204e   6adb     CLRF      0xdb,0x0                                                                                        
002050   0e04     MOVLW     0x4            	unsigned char byte_count = 0;	                                                  e:\iro_svn\opensprints\FW\user\user.c
002052   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Get byte_count                                                               e:\iro_svn\opensprints\FW\user\user.c
002054   0e01     MOVLW     0x1            	byte_count = extract_number (kUCHAR);                                           e:\iro_svn\opensprints\FW\user\user.c
002056   6ee6     MOVWF     0xe6,0x0                                                                                        
002058   d8d9     RCALL     0x220c                                                                                          
00205a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00205c   0e04     MOVLW     0x4                                                                                             
00205e   c01d     MOVFF     0x1d,0xfdb                                                                                      
002060   ffdb                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	// Limit check it                                                               e:\iro_svn\opensprints\FW\user\user.c
002062   0e04     MOVLW     0x4            	if (0 == byte_count || byte_count > 56)                                         e:\iro_svn\opensprints\FW\user\user.c
002064   50db     MOVF      0xdb,0x0,0x0                                                                                    
002066   e004     BZ        0x2070                                                                                          
002068   0e04     MOVLW     0x4                                                                                             
00206a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00206c   0838     SUBLW     0x38                                                                                            
00206e   e202     BC        0x2074                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
002070   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
002072   d098     BRA       0x21a4         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for comma where ptr points                                             e:\iro_svn\opensprints\FW\user\user.c
002074   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',')                                              e:\iro_svn\opensprints\FW\user\user.c
002076   51a1     MOVF      0xa1,0x0,0x1                                                                                    
002078   6aea     CLRF      0xea,0x0                                                                                        
00207a   0f40     ADDLW     0x40                                                                                            
00207c   6ee9     MOVWF     0xe9,0x0                                                                                        
00207e   0e02     MOVLW     0x2                                                                                             
002080   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002082   50ef     MOVF      0xef,0x0,0x0                                                                                    
002084   082c     SUBLW     0x2c                                                                                            
002086   e01d     BZ        0x20c2                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
002088   0101     MOVLB     0x1            		printf ((rom char *)"!5 Err: Need comma next, found: '%c'\r\n", g_RX_buf[g_RX_buf_out]); e:\iro_svn\opensprints\FW\user\user.c
00208a   51a1     MOVF      0xa1,0x0,0x1                                                                                    
00208c   6aea     CLRF      0xea,0x0                                                                                        
00208e   0f40     ADDLW     0x40                                                                                            
002090   6ee9     MOVWF     0xe9,0x0                                                                                        
002092   0e02     MOVLW     0x2                                                                                             
002094   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002096   50ef     MOVF      0xef,0x0,0x0                                                                                    
002098   6ee6     MOVWF     0xe6,0x0                                                                                        
00209a   6ae6     CLRF      0xe6,0x0                                                                                        
00209c   0efa     MOVLW     0xfa                                                                                            
00209e   6e2a     MOVWF     0x2a,0x0                                                                                        
0020a0   0e41     MOVLW     0x41                                                                                            
0020a2   6e2b     MOVWF     0x2b,0x0                                                                                        
0020a4   6a2c     CLRF      0x2c,0x0                                                                                        
0020a6   c02a     MOVFF     0x2a,0xfe6                                                                                      
0020a8   ffe6                                                                                                               
0020aa   c02b     MOVFF     0x2b,0xfe6                                                                                      
0020ac   ffe6                                                                                                               
0020ae   c02c     MOVFF     0x2c,0xfe6                                                                                      
0020b0   ffe6                                                                                                               
0020b2   ecc8     CALL      0x4590,0x0                                                                                      
0020b4   f022                                                                                                               
0020b6   6e2d     MOVWF     0x2d,0x0                                                                                        
0020b8   0e05     MOVLW     0x5                                                                                             
0020ba   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0020bc   502d     MOVF      0x2d,0x0,0x0                                                                                    
0020be   8a0d     BSF       0xd,0x5,0x0    		bitset (error_byte, kERROR_BYTE_PRINTED_ERROR);                                e:\iro_svn\opensprints\FW\user\user.c
0020c0   d071     BRA       0x21a4         		return;                                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Move to the next character                                                   e:\iro_svn\opensprints\FW\user\user.c
0020c2   0101     MOVLB     0x1            	advance_RX_buf_out ();                                                          e:\iro_svn\opensprints\FW\user\user.c
0020c4   2ba1     INCF      0xa1,0x1,0x1                                                                                    
0020c6   0e40     MOVLW     0x40                                                                                            
0020c8   0101     MOVLB     0x1                                                                                             
0020ca   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
0020cc   e102     BNZ       0x20d2                                                                                          
0020ce   0101     MOVLB     0x1                                                                                             
0020d0   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Make sure Port A is correct                                                  e:\iro_svn\opensprints\FW\user\user.c
0020d2   c199     MOVFF     0x199,0xf89    	LATA = g_BO_init;                                                               e:\iro_svn\opensprints\FW\user\user.c
0020d4   ff89                                                                                                               
0020d6   0101     MOVLB     0x1            	new_port_A_value = ((~LATA & g_BO_strobe_mask)) | (LATA & ~g_BO_strobe_mask);   e:\iro_svn\opensprints\FW\user\user.c
0020d8   1d9a     COMF      0x9a,0x0,0x1                                                                                    
0020da   1489     ANDWF     0x89,0x0,0x0                                                                                    
0020dc   6e2a     MOVWF     0x2a,0x0                                                                                        
0020de   1c89     COMF      0x89,0x0,0x0                                                                                    
0020e0   0101     MOVLB     0x1                                                                                             
0020e2   159a     ANDWF     0x9a,0x0,0x1                                                                                    
0020e4   102a     IORWF     0x2a,0x0,0x0                                                                                    
0020e6   6ee7     MOVWF     0xe7,0x0                                                                                        
0020e8   0e01     MOVLW     0x1                                                                                             
0020ea   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0020ec   ffdb                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
0020ee   0e04     MOVLW     0x4            	while (byte_count != 0)                                                         e:\iro_svn\opensprints\FW\user\user.c
0020f0   50db     MOVF      0xdb,0x0,0x0                                                                                    
0020f2   e056     BZ        0x21a0                                                                                          
00219e   d7a7     BRA       0x20ee                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Pull in a single byte from input buffer                                     e:\iro_svn\opensprints\FW\user\user.c
0020f4   0101     MOVLB     0x1            		BO_data_byte = g_RX_buf[g_RX_buf_out];                                         e:\iro_svn\opensprints\FW\user\user.c
0020f6   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0020f8   6aea     CLRF      0xea,0x0                                                                                        
0020fa   0f40     ADDLW     0x40                                                                                            
0020fc   6ee9     MOVWF     0xe9,0x0                                                                                        
0020fe   0e02     MOVLW     0x2                                                                                             
002100   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002102   cfef     MOVFF     0xfef,0xfdf                                                                                     
002104   ffdf                                                                                                               
002106   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         e:\iro_svn\opensprints\FW\user\user.c
002108   2ba1     INCF      0xa1,0x1,0x1                                                                                    
00210a   0e40     MOVLW     0x40                                                                                            
00210c   0101     MOVLB     0x1                                                                                             
00210e   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
002110   e102     BNZ       0x2116                                                                                          
002112   0101     MOVLB     0x1                                                                                             
002114   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		// Count this byte                                                             e:\iro_svn\opensprints\FW\user\user.c
002116   0e04     MOVLW     0x4            		byte_count--;                                                                  e:\iro_svn\opensprints\FW\user\user.c
002118   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Output the byte on Port B                                                   e:\iro_svn\opensprints\FW\user\user.c
00211a   50df     MOVF      0xdf,0x0,0x0   		LATB = BO_data_byte;                                                           e:\iro_svn\opensprints\FW\user\user.c
00211c   6e8a     MOVWF     0x8a,0x0                                                                                        
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// And strobe the Port A bits that we're supposed to                           e:\iro_svn\opensprints\FW\user\user.c
00211e   0e01     MOVLW     0x1            		LATA = new_port_A_value;                                                       e:\iro_svn\opensprints\FW\user\user.c
002120   50db     MOVF      0xdb,0x0,0x0                                                                                    
002122   6e89     MOVWF     0x89,0x0                                                                                        
002124   0101     MOVLB     0x1            		if (g_BO_strobe_delay)                                                         e:\iro_svn\opensprints\FW\user\user.c
002126   519d     MOVF      0x9d,0x0,0x1                                                                                    
002128   e005     BZ        0x2134                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
00212a   c19d     MOVFF     0x19d,0xfe6    			Delay10TCYx (g_BO_strobe_delay);                                              e:\iro_svn\opensprints\FW\user\user.c
00212c   ffe6                                                                                                               
00212e   ec76     CALL      0x48ec,0x0                                                                                      
002130   f024                                                                                                               
002132   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
002134   c199     MOVFF     0x199,0xf89    		LATA = g_BO_init;                                                              e:\iro_svn\opensprints\FW\user\user.c
002136   ff89                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
002138   0101     MOVLB     0x1            		if (g_BO_wait_delay)                                                           e:\iro_svn\opensprints\FW\user\user.c
00213a   519c     MOVF      0x9c,0x0,0x1                                                                                    
00213c   e030     BZ        0x219e                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// Now we spin on the wait bit specified in WaitMask                          e:\iro_svn\opensprints\FW\user\user.c
                                           			// (Used for Busy Bits) We also have to wait here                             e:\iro_svn\opensprints\FW\user\user.c
                                           			// for a maximum of g_BO_wait_delay, which is in 10 clock units               e:\iro_svn\opensprints\FW\user\user.c
                                           			// First we wait for the wait mask to become asserted                         e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       e:\iro_svn\opensprints\FW\user\user.c
00213e   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 e:\iro_svn\opensprints\FW\user\user.c
002140   c19c     MOVFF     0x19c,0xfdb                                                                                     
002142   ffdb                                                                                                               
00216c   d7eb     BRA       0x2144         			while (                                                                       e:\iro_svn\opensprints\FW\user\user.c
002144   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) == (PORTA & g_BO_wait_mask))                   e:\iro_svn\opensprints\FW\user\user.c
002146   5199     MOVF      0x99,0x0,0x1                                                                                    
002148   0101     MOVLB     0x1                                                                                             
00214a   159b     ANDWF     0x9b,0x0,0x1                                                                                    
00214c   6e2a     MOVWF     0x2a,0x0                                                                                        
00214e   0101     MOVLB     0x1                                                                                             
002150   519b     MOVF      0x9b,0x0,0x1                                                                                    
002152   1480     ANDWF     0x80,0x0,0x0                                                                                    
002154   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           e:\iro_svn\opensprints\FW\user\user.c
002158   0e03     MOVLW     0x3            				(wait_count != 0)                                                            e:\iro_svn\opensprints\FW\user\user.c
00215a   50db     MOVF      0xdb,0x0,0x0                                                                                    
002156   e10b     BNZ       0x216e         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
00215c   e008     BZ        0x216e                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
00215e   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002160   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002162   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002164   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002166   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002168   0e03     MOVLW     0x3            				wait_count--;                                                                e:\iro_svn\opensprints\FW\user\user.c
00216a   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			// Set the wait counter to the number of delays we want                       e:\iro_svn\opensprints\FW\user\user.c
00216e   0e03     MOVLW     0x3            			wait_count = g_BO_wait_delay;                                                 e:\iro_svn\opensprints\FW\user\user.c
002170   c19c     MOVFF     0x19c,0xfdb                                                                                     
002172   ffdb                                                                                                               
                                           			// Then we wait for the wait mask to become de-asserted                       e:\iro_svn\opensprints\FW\user\user.c
00219c   d7eb     BRA       0x2174         			while (                                                                       e:\iro_svn\opensprints\FW\user\user.c
002174   0101     MOVLB     0x1            				((g_BO_init & g_BO_wait_mask) != (PORTA & g_BO_wait_mask))                   e:\iro_svn\opensprints\FW\user\user.c
002176   5199     MOVF      0x99,0x0,0x1                                                                                    
002178   0101     MOVLB     0x1                                                                                             
00217a   159b     ANDWF     0x9b,0x0,0x1                                                                                    
00217c   6e2a     MOVWF     0x2a,0x0                                                                                        
00217e   0101     MOVLB     0x1                                                                                             
002180   519b     MOVF      0x9b,0x0,0x1                                                                                    
002182   1480     ANDWF     0x80,0x0,0x0                                                                                    
002184   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           				&&                                                                           e:\iro_svn\opensprints\FW\user\user.c
002188   0e03     MOVLW     0x3            				(wait_count != 0)                                                            e:\iro_svn\opensprints\FW\user\user.c
00218a   50db     MOVF      0xdb,0x0,0x0                                                                                    
002186   e00b     BZ        0x219e         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
00218c   e008     BZ        0x219e                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
00218e   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002190   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002192   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002194   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002196   0000     NOP                      				Delay1TCY ();                                                                e:\iro_svn\opensprints\FW\user\user.c
002198   0e03     MOVLW     0x3            				wait_count--;                                                                e:\iro_svn\opensprints\FW\user\user.c
00219a   06db     DECF      0xdb,0x1,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
0021a0   ec06     CALL      0x140c,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
0021a2   f00a                                                                                                               
0021a4   0e05     MOVLW     0x5            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
0021a6   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0021a8   e202     BC        0x21ae                                                                                          
0021aa   6ae1     CLRF      0xe1,0x0                                                                                        
0021ac   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0021ae   6ee1     MOVWF     0xe1,0x0                                                                                        
0021b0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0021b2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0021b4   ffd9                                                                                                               
0021b6   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // SS Send SPI                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_SS_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
0021b8   ec06     CALL      0x140c,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
0021ba   f00a                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0021bc   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // RS Receive SPI                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RS_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
0021be   ec06     CALL      0x140c,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
0021c0   f00a                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0021c2   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // CS Configure SPI                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CS_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
0021c4   ec06     CALL      0x140c,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
0021c6   f00a                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0021c8   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // SI Send I2C                                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_SI_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
0021ca   ec06     CALL      0x140c,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
0021cc   f00a                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0021ce   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // RI Receive I2C                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_RI_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
0021d0   ec06     CALL      0x140c,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
0021d2   f00a                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0021d4   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // CI Configure I2C                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_CI_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
0021d6   ec06     CALL      0x140c,0x0     	print_ack ();                                                                   e:\iro_svn\opensprints\FW\user\user.c
0021d8   f00a                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0021da   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_GO_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
0021dc   0101     MOVLB     0x1            	is_racing = TRUE;				// make it possible to start monitoring sensors            e:\iro_svn\opensprints\FW\user\user.c
0021de   0e01     MOVLW     0x1                                                                                             
0021e0   6fda     MOVWF     0xda,0x1                                                                                        
0021e2   0101     MOVLB     0x1            	raceTimeCentisecs=0;			// restart the stopwatch                                 e:\iro_svn\opensprints\FW\user\user.c
0021e4   6ba9     CLRF      0xa9,0x1                                                                                        
0021e6   6baa     CLRF      0xaa,0x1                                                                                        
0021e8   0101     MOVLB     0x1            	raceTimeMins=0;                                                                 e:\iro_svn\opensprints\FW\user\user.c
0021ea   6ba7     CLRF      0xa7,0x1                                                                                        
0021ec   6ba8     CLRF      0xa8,0x1                                                                                        
0021ee   84ca     BSF       0xca,0x2,0x0   	T2CONbits.TMR2ON=1;				// turn on the timer                                     e:\iro_svn\opensprints\FW\user\user.c
0021f0   0e0a     MOVLW     0xa            	ISR_D_RepeatRate = 10;			// every 10ms advance the timer                        e:\iro_svn\opensprints\FW\user\user.c
0021f2   6e02     MOVWF     0x2,0x0                                                                                         
0021f4   6a03     CLRF      0x3,0x0                                                                                         
0021f6   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_ST_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
0021f8   0101     MOVLB     0x1            	is_racing = FALSE;				// stop monitoring sensors                                e:\iro_svn\opensprints\FW\user\user.c
0021fa   6bda     CLRF      0xda,0x1                                                                                        
0021fc   0101     MOVLB     0x1            	raceTestMode = FALSE;                                                           e:\iro_svn\opensprints\FW\user\user.c
0021fe   6bdb     CLRF      0xdb,0x1                                                                                        
002200   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           void parse_HW_packet (void)                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
002202   0101     MOVLB     0x1            	raceTestMode = TRUE;                                                            e:\iro_svn\opensprints\FW\user\user.c
002204   0e01     MOVLW     0x1                                                                                             
002206   6fdb     MOVWF     0xdb,0x1                                                                                        
002208   dfe9     RCALL     0x21dc         	parse_GO_packet();                                                              e:\iro_svn\opensprints\FW\user\user.c
00220a   0012     RETURN    0x0            }	                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Look at the string pointed to by ptr                                          e:\iro_svn\opensprints\FW\user\user.c
                                           // There should be a comma where ptr points to upon entry.                       e:\iro_svn\opensprints\FW\user\user.c
                                           // If not, throw a comma error.                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           // If so, then look for up to three bytes after the                              e:\iro_svn\opensprints\FW\user\user.c
                                           // comma for numbers, and put them all into one                                  e:\iro_svn\opensprints\FW\user\user.c
                                           // byte (0-255). If the number is greater than 255, then                         e:\iro_svn\opensprints\FW\user\user.c
                                           // thow a range error.                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           // Advance the pointer to the byte after the last number                         e:\iro_svn\opensprints\FW\user\user.c
                                           // and return.                                                                   e:\iro_svn\opensprints\FW\user\user.c
00220c   cfd9     MOVFF     0xfd9,0xfe6    signed short long extract_number(tExtractType type)                              e:\iro_svn\opensprints\FW\user\user.c
00220e   ffe6                                                                                                               
002210   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
002212   ffd9                                                                                                               
002214   0e04     MOVLW     0x4                                                                                             
002216   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	signed short long acc;                                                          e:\iro_svn\opensprints\FW\user\user.c
002218   0e03     MOVLW     0x3            	unsigned char neg = FALSE;                                                      e:\iro_svn\opensprints\FW\user\user.c
00221a   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check to see if we're already at the end                                     e:\iro_svn\opensprints\FW\user\user.c
00221c   0e0d     MOVLW     0xd            	if (kCR == g_RX_buf[g_RX_buf_out])                                              e:\iro_svn\opensprints\FW\user\user.c
00221e   6e2a     MOVWF     0x2a,0x0                                                                                        
002220   0101     MOVLB     0x1                                                                                             
002222   51a1     MOVF      0xa1,0x0,0x1                                                                                    
002224   6aea     CLRF      0xea,0x0                                                                                        
002226   0f40     ADDLW     0x40                                                                                            
002228   6ee9     MOVWF     0xe9,0x0                                                                                        
00222a   0e02     MOVLW     0x2                                                                                             
00222c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00222e   50ef     MOVF      0xef,0x0,0x0                                                                                    
002230   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
002232   e105     BNZ       0x223e                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
002234   880d     BSF       0xd,0x4,0x0    		bitset (error_byte, kERROR_BYTE_MISSING_PARAMETER);                            e:\iro_svn\opensprints\FW\user\user.c
002236   6a1d     CLRF      0x1d,0x0       		return (0);                                                                    e:\iro_svn\opensprints\FW\user\user.c
002238   6a1e     CLRF      0x1e,0x0                                                                                        
00223a   6a1f     CLRF      0x1f,0x0                                                                                        
00223c   d193     BRA       0x2564                                                                                          
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Check for comma where ptr points                                             e:\iro_svn\opensprints\FW\user\user.c
00223e   0101     MOVLB     0x1            	if (g_RX_buf[g_RX_buf_out] != ',')                                              e:\iro_svn\opensprints\FW\user\user.c
002240   51a1     MOVF      0xa1,0x0,0x1                                                                                    
002242   6aea     CLRF      0xea,0x0                                                                                        
002244   0f40     ADDLW     0x40                                                                                            
002246   6ee9     MOVWF     0xe9,0x0                                                                                        
002248   0e02     MOVLW     0x2                                                                                             
00224a   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00224c   50ef     MOVF      0xef,0x0,0x0                                                                                    
00224e   082c     SUBLW     0x2c                                                                                            
002250   e020     BZ        0x2292                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
002252   0101     MOVLB     0x1            		printf ((rom char *)"!5 Err: Need comma next, found: '%c'\r\n", g_RX_buf[g_RX_buf_out]); e:\iro_svn\opensprints\FW\user\user.c
002254   51a1     MOVF      0xa1,0x0,0x1                                                                                    
002256   6aea     CLRF      0xea,0x0                                                                                        
002258   0f40     ADDLW     0x40                                                                                            
00225a   6ee9     MOVWF     0xe9,0x0                                                                                        
00225c   0e02     MOVLW     0x2                                                                                             
00225e   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002260   50ef     MOVF      0xef,0x0,0x0                                                                                    
002262   6ee6     MOVWF     0xe6,0x0                                                                                        
002264   6ae6     CLRF      0xe6,0x0                                                                                        
002266   0efa     MOVLW     0xfa                                                                                            
002268   6e2a     MOVWF     0x2a,0x0                                                                                        
00226a   0e41     MOVLW     0x41                                                                                            
00226c   6e2b     MOVWF     0x2b,0x0                                                                                        
00226e   6a2c     CLRF      0x2c,0x0                                                                                        
002270   c02a     MOVFF     0x2a,0xfe6                                                                                      
002272   ffe6                                                                                                               
002274   c02b     MOVFF     0x2b,0xfe6                                                                                      
002276   ffe6                                                                                                               
002278   c02c     MOVFF     0x2c,0xfe6                                                                                      
00227a   ffe6                                                                                                               
00227c   ecc8     CALL      0x4590,0x0                                                                                      
00227e   f022                                                                                                               
002280   6e2d     MOVWF     0x2d,0x0                                                                                        
002282   0e05     MOVLW     0x5                                                                                             
002284   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
002286   502d     MOVF      0x2d,0x0,0x0                                                                                    
002288   8a0d     BSF       0xd,0x5,0x0    		bitset (error_byte, kERROR_BYTE_PRINTED_ERROR);                                e:\iro_svn\opensprints\FW\user\user.c
00228a   6a1d     CLRF      0x1d,0x0       		return (0);                                                                    e:\iro_svn\opensprints\FW\user\user.c
00228c   6a1e     CLRF      0x1e,0x0                                                                                        
00228e   6a1f     CLRF      0x1f,0x0                                                                                        
002290   d169     BRA       0x2564                                                                                          
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Move to the next character                                                   e:\iro_svn\opensprints\FW\user\user.c
002292   0101     MOVLB     0x1            	advance_RX_buf_out ();                                                          e:\iro_svn\opensprints\FW\user\user.c
002294   2ba1     INCF      0xa1,0x1,0x1                                                                                    
002296   0e40     MOVLW     0x40                                                                                            
002298   0101     MOVLB     0x1                                                                                             
00229a   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
00229c   e102     BNZ       0x22a2                                                                                          
00229e   0101     MOVLB     0x1                                                                                             
0022a0   6ba1     CLRF      0xa1,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Now check for a sign character if we're not looking for ASCII chars          e:\iro_svn\opensprints\FW\user\user.c
                                           	if (                                                                            e:\iro_svn\opensprints\FW\user\user.c
0022a2   0e2d     MOVLW     0x2d           		('-' == g_RX_buf[g_RX_buf_out])                                                e:\iro_svn\opensprints\FW\user\user.c
0022a4   6e2a     MOVWF     0x2a,0x0                                                                                        
0022a6   0101     MOVLB     0x1                                                                                             
0022a8   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0022aa   6aea     CLRF      0xea,0x0                                                                                        
0022ac   0f40     ADDLW     0x40                                                                                            
0022ae   6ee9     MOVWF     0xe9,0x0                                                                                        
0022b0   0e02     MOVLW     0x2                                                                                             
0022b2   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0022b4   50ef     MOVF      0xef,0x0,0x0                                                                                    
0022b6   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           		&&                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		(                                                                              e:\iro_svn\opensprints\FW\user\user.c
0022ba   0e04     MOVLW     0x4            			(kASCII_CHAR != type)                                                         e:\iro_svn\opensprints\FW\user\user.c
0022bc   6e2b     MOVWF     0x2b,0x0                                                                                        
0022be   0efe     MOVLW     0xfe                                                                                            
0022c0   50db     MOVF      0xdb,0x0,0x0                                                                                    
0022c2   5c2b     SUBWF     0x2b,0x0,0x0                                                                                    
                                           			&&                                                                            e:\iro_svn\opensprints\FW\user\user.c
0022c6   0e05     MOVLW     0x5            			(kUCASE_ASCII_CHAR != type)                                                   e:\iro_svn\opensprints\FW\user\user.c
0022c8   6e2c     MOVWF     0x2c,0x0                                                                                        
0022ca   0efe     MOVLW     0xfe                                                                                            
0022cc   50db     MOVF      0xdb,0x0,0x0                                                                                    
0022ce   5c2c     SUBWF     0x2c,0x0,0x0                                                                                    
0022c4   e022     BZ        0x230a         		)                                                                              e:\iro_svn\opensprints\FW\user\user.c
0022d0   e01c     BZ        0x230a                                                                                          
0022b8   e128     BNZ       0x230a         	)                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// It's an error if we see a negative sign on an unsigned value                e:\iro_svn\opensprints\FW\user\user.c
                                           		if (                                                                           e:\iro_svn\opensprints\FW\user\user.c
0022d2   0efe     MOVLW     0xfe           			(kUCHAR == type)                                                              e:\iro_svn\opensprints\FW\user\user.c
0022d4   04db     DECF      0xdb,0x0,0x0                                                                                    
                                           			||                                                                            e:\iro_svn\opensprints\FW\user\user.c
0022d8   0e03     MOVLW     0x3            			(kUINT == type)                                                               e:\iro_svn\opensprints\FW\user\user.c
0022da   6e2a     MOVWF     0x2a,0x0                                                                                        
0022dc   0efe     MOVLW     0xfe                                                                                            
0022de   50db     MOVF      0xdb,0x0,0x0                                                                                    
0022e0   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0022d6   e006     BZ        0x22e4         		)                                                                              e:\iro_svn\opensprints\FW\user\user.c
0022e2   e106     BNZ       0x22f0                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0022e4   8c0d     BSF       0xd,0x6,0x0    			bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                     e:\iro_svn\opensprints\FW\user\user.c
0022e6   6a1d     CLRF      0x1d,0x0       			return (0);                                                                   e:\iro_svn\opensprints\FW\user\user.c
0022e8   6a1e     CLRF      0x1e,0x0                                                                                        
0022ea   6a1f     CLRF      0x1f,0x0                                                                                        
0022ec   d13b     BRA       0x2564                                                                                          
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
0022ee   d00d     BRA       0x230a         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0022f0   0e01     MOVLW     0x1            			neg = TRUE;                                                                   e:\iro_svn\opensprints\FW\user\user.c
0022f2   6ef3     MOVWF     0xf3,0x0                                                                                        
0022f4   0e03     MOVLW     0x3                                                                                             
0022f6   cff3     MOVFF     0xff3,0xfdb                                                                                     
0022f8   ffdb                                                                                                               
                                           			// Move to the next character                                                 e:\iro_svn\opensprints\FW\user\user.c
0022fa   0101     MOVLB     0x1            			advance_RX_buf_out ();                                                        e:\iro_svn\opensprints\FW\user\user.c
0022fc   2ba1     INCF      0xa1,0x1,0x1                                                                                    
0022fe   0e40     MOVLW     0x40                                                                                            
002300   0101     MOVLB     0x1                                                                                             
002302   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
002304   e102     BNZ       0x230a                                                                                          
002306   0101     MOVLB     0x1                                                                                             
002308   6ba1     CLRF      0xa1,0x1                                                                                        
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// If we need to get a digit, go do that                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	if (                                                                            e:\iro_svn\opensprints\FW\user\user.c
00230a   0e04     MOVLW     0x4            		(kASCII_CHAR != type)                                                          e:\iro_svn\opensprints\FW\user\user.c
00230c   6e2a     MOVWF     0x2a,0x0                                                                                        
00230e   0efe     MOVLW     0xfe                                                                                            
002310   50db     MOVF      0xdb,0x0,0x0                                                                                    
002312   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
                                           		&&                                                                             e:\iro_svn\opensprints\FW\user\user.c
002316   0e05     MOVLW     0x5            		(kUCASE_ASCII_CHAR != type)                                                    e:\iro_svn\opensprints\FW\user\user.c
002318   6e2b     MOVWF     0x2b,0x0                                                                                        
00231a   0efe     MOVLW     0xfe                                                                                            
00231c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00231e   5c2b     SUBWF     0x2b,0x0,0x0                                                                                    
002314   e011     BZ        0x2338         	)                                                                               e:\iro_svn\opensprints\FW\user\user.c
002320   e00b     BZ        0x2338                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
002322   0e05     MOVLW     0x5            		extract_digit(&acc, 5);                                                        e:\iro_svn\opensprints\FW\user\user.c
002324   6ee6     MOVWF     0xe6,0x0                                                                                        
002326   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
002328   ffe6                                                                                                               
00232a   cfda     MOVFF     0xfda,0xfe6                                                                                     
00232c   ffe6                                                                                                               
00232e   d924     RCALL     0x2578                                                                                          
002330   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002332   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002334   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
002336   d03a     BRA       0x23ac         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Otherwise just copy the byte                                                e:\iro_svn\opensprints\FW\user\user.c
002338   0101     MOVLB     0x1            		acc = g_RX_buf[g_RX_buf_out];                                                  e:\iro_svn\opensprints\FW\user\user.c
00233a   51a1     MOVF      0xa1,0x0,0x1                                                                                    
00233c   6aea     CLRF      0xea,0x0                                                                                        
00233e   0f40     ADDLW     0x40                                                                                            
002340   6ee9     MOVWF     0xe9,0x0                                                                                        
002342   0e02     MOVLW     0x2                                                                                             
002344   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
002346   cfef     MOVFF     0xfef,0x2a                                                                                      
002348   f02a                                                                                                               
00234a   6a2b     CLRF      0x2b,0x0                                                                                        
00234c   6a2c     CLRF      0x2c,0x0                                                                                        
00234e   c02a     MOVFF     0x2a,0xfdf                                                                                      
002350   ffdf                                                                                                               
002352   0e01     MOVLW     0x1                                                                                             
002354   c02b     MOVFF     0x2b,0xfdb                                                                                      
002356   ffdb                                                                                                               
002358   0e02     MOVLW     0x2                                                                                             
00235a   c02c     MOVFF     0x2c,0xfdb                                                                                      
00235c   ffdb                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           		// Force uppercase if that's what type we have                                 e:\iro_svn\opensprints\FW\user\user.c
00235e   0e05     MOVLW     0x5            		if (kUCASE_ASCII_CHAR == type)                                                 e:\iro_svn\opensprints\FW\user\user.c
002360   6e2a     MOVWF     0x2a,0x0                                                                                        
002362   0efe     MOVLW     0xfe                                                                                            
002364   50db     MOVF      0xdb,0x0,0x0                                                                                    
002366   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
002368   e119     BNZ       0x239c                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
00236a   0e00     MOVLW     0x0            			acc = toupper (acc);                                                          e:\iro_svn\opensprints\FW\user\user.c
00236c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00236e   ffe6                                                                                                               
002370   0e01     MOVLW     0x1                                                                                             
002372   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002374   ffe6                                                                                                               
002376   ecc1     CALL      0x4782,0x0                                                                                      
002378   f023                                                                                                               
00237a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00237c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00237e   cff3     MOVFF     0xff3,0x2a                                                                                      
002380   f02a                                                                                                               
002382   cff4     MOVFF     0xff4,0x2b                                                                                      
002384   f02b                                                                                                               
002386   6a2c     CLRF      0x2c,0x0                                                                                        
002388   be2b     BTFSC     0x2b,0x7,0x0                                                                                    
00238a   682c     SETF      0x2c,0x0                                                                                        
00238c   c02a     MOVFF     0x2a,0xfdf                                                                                      
00238e   ffdf                                                                                                               
002390   0e01     MOVLW     0x1                                                                                             
002392   c02b     MOVFF     0x2b,0xfdb                                                                                      
002394   ffdb                                                                                                               
002396   0e02     MOVLW     0x2                                                                                             
002398   c02c     MOVFF     0x2c,0xfdb                                                                                      
00239a   ffdb                                                                                                               
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// Move to the next character                                                  e:\iro_svn\opensprints\FW\user\user.c
00239c   0101     MOVLB     0x1            		advance_RX_buf_out ();                                                         e:\iro_svn\opensprints\FW\user\user.c
00239e   2ba1     INCF      0xa1,0x1,0x1                                                                                    
0023a0   0e40     MOVLW     0x40                                                                                            
0023a2   0101     MOVLB     0x1                                                                                             
0023a4   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
0023a6   e102     BNZ       0x23ac                                                                                          
0023a8   0101     MOVLB     0x1                                                                                             
0023aa   6ba1     CLRF      0xa1,0x1                                                                                        
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Handle the negative sign                                                     e:\iro_svn\opensprints\FW\user\user.c
0023ac   0e03     MOVLW     0x3            	if (neg)                                                                        e:\iro_svn\opensprints\FW\user\user.c
0023ae   50db     MOVF      0xdb,0x0,0x0                                                                                    
0023b0   e021     BZ        0x23f4                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0023b2   cfdf     MOVFF     0xfdf,0x2a     		acc = -acc;                                                                    e:\iro_svn\opensprints\FW\user\user.c
0023b4   f02a                                                                                                               
0023b6   0e01     MOVLW     0x1                                                                                             
0023b8   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0023ba   f02b                                                                                                               
0023bc   0e02     MOVLW     0x2                                                                                             
0023be   cfdb     MOVFF     0xfdb,0x2c                                                                                      
0023c0   f02c                                                                                                               
0023c2   6822     SETF      0x22,0x0                                                                                        
0023c4   6823     SETF      0x23,0x0                                                                                        
0023c6   6824     SETF      0x24,0x0                                                                                        
0023c8   c02a     MOVFF     0x2a,0x1d                                                                                       
0023ca   f01d                                                                                                               
0023cc   c02b     MOVFF     0x2b,0x1e                                                                                       
0023ce   f01e                                                                                                               
0023d0   c02c     MOVFF     0x2c,0x1f                                                                                       
0023d2   f01f                                                                                                               
0023d4   ec9c     CALL      0x4338,0x0                                                                                      
0023d6   f021                                                                                                               
0023d8   c01a     MOVFF     0x1a,0x2a                                                                                       
0023da   f02a                                                                                                               
0023dc   c01b     MOVFF     0x1b,0x2b                                                                                       
0023de   f02b                                                                                                               
0023e0   c01c     MOVFF     0x1c,0x2c                                                                                       
0023e2   f02c                                                                                                               
0023e4   c02a     MOVFF     0x2a,0xfdf                                                                                      
0023e6   ffdf                                                                                                               
0023e8   0e01     MOVLW     0x1                                                                                             
0023ea   c02b     MOVFF     0x2b,0xfdb                                                                                      
0023ec   ffdb                                                                                                               
0023ee   0e02     MOVLW     0x2                                                                                             
0023f0   c02c     MOVFF     0x2c,0xfdb                                                                                      
0023f2   ffdb                                                                                                               
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	// Range check the new value                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	if (                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           		(                                                                              e:\iro_svn\opensprints\FW\user\user.c
0023f4   0efe     MOVLW     0xfe           			kCHAR == type                                                                 e:\iro_svn\opensprints\FW\user\user.c
0023f6   50db     MOVF      0xdb,0x0,0x0                                                                                    
                                           			&&                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			(                                                                             e:\iro_svn\opensprints\FW\user\user.c
0023fa   cfdf     MOVFF     0xfdf,0x2a     				(acc > 127)                                                                  e:\iro_svn\opensprints\FW\user\user.c
0023fc   f02a                                                                                                               
0023fe   0e01     MOVLW     0x1                                                                                             
002400   cfdb     MOVFF     0xfdb,0x2b                                                                                      
002402   f02b                                                                                                               
002404   0e02     MOVLW     0x2                                                                                             
002406   cfdb     MOVFF     0xfdb,0x2c                                                                                      
002408   f02c                                                                                                               
00240a   342c     RLCF      0x2c,0x0,0x0                                                                                    
00240c   0e00     MOVLW     0x0                                                                                             
00240e   182c     XORWF     0x2c,0x0,0x0                                                                                    
002410   e607     BN        0x2420                                                                                          
002412   80d8     BSF       0xd8,0x0,0x0                                                                                    
002414   0e7f     MOVLW     0x7f                                                                                            
002416   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
002418   0e00     MOVLW     0x0                                                                                             
00241a   542b     SUBFWB    0x2b,0x0,0x0                                                                                    
00241c   0e00     MOVLW     0x0                                                                                             
00241e   542c     SUBFWB    0x2c,0x0,0x0                                                                                    
                                           				||                                                                           e:\iro_svn\opensprints\FW\user\user.c
002424   cfd9     MOVFF     0xfd9,0xfe9    				(acc < -128)                                                                 e:\iro_svn\opensprints\FW\user\user.c
002426   ffe9                                                                                                               
002428   cfda     MOVFF     0xfda,0xfea                                                                                     
00242a   ffea                                                                                                               
00242c   0e02     MOVLW     0x2                                                                                             
00242e   80d8     BSF       0xd8,0x0,0x0                                                                                    
002430   50eb     MOVF      0xeb,0x0,0x0                                                                                    
002432   0aff     XORLW     0xff                                                                                            
002434   e606     BN        0x2442                                                                                          
002436   0e80     MOVLW     0x80                                                                                            
002438   5cee     SUBWF     0xee,0x0,0x0                                                                                    
00243a   0eff     MOVLW     0xff                                                                                            
00243c   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
00243e   0eff     MOVLW     0xff                                                                                            
002440   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
002420   e201     BC        0x2424         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
002422   d08c     BRA       0x253c                                                                                          
002442   e201     BC        0x2446                                                                                          
002444   d07b     BRA       0x253c                                                                                          
0023f8   e126     BNZ       0x2446         		)                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		||                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		(                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			kUCHAR == type                                                                e:\iro_svn\opensprints\FW\user\user.c
002446   0efe     MOVLW     0xfe           			&&                                                                            e:\iro_svn\opensprints\FW\user\user.c
002448   04db     DECF      0xdb,0x0,0x0                                                                                    
                                           			(                                                                             e:\iro_svn\opensprints\FW\user\user.c
00244c   cfdf     MOVFF     0xfdf,0x2d     				(acc > 255)                                                                  e:\iro_svn\opensprints\FW\user\user.c
00244e   f02d                                                                                                               
002450   0e01     MOVLW     0x1                                                                                             
002452   cfdb     MOVFF     0xfdb,0x2e                                                                                      
002454   f02e                                                                                                               
002456   0e02     MOVLW     0x2                                                                                             
002458   cfdb     MOVFF     0xfdb,0x2f                                                                                      
00245a   f02f                                                                                                               
00245c   342f     RLCF      0x2f,0x0,0x0                                                                                    
00245e   0e00     MOVLW     0x0                                                                                             
002460   182f     XORWF     0x2f,0x0,0x0                                                                                    
002462   e607     BN        0x2472                                                                                          
002464   80d8     BSF       0xd8,0x0,0x0                                                                                    
002466   0eff     MOVLW     0xff                                                                                            
002468   542d     SUBFWB    0x2d,0x0,0x0                                                                                    
00246a   0e00     MOVLW     0x0                                                                                             
00246c   542e     SUBFWB    0x2e,0x0,0x0                                                                                    
00246e   0e00     MOVLW     0x0                                                                                             
002470   542f     SUBFWB    0x2f,0x0,0x0                                                                                    
                                           				||                                                                           e:\iro_svn\opensprints\FW\user\user.c
002474   cfd9     MOVFF     0xfd9,0xfe9    				(acc < 0)                                                                    e:\iro_svn\opensprints\FW\user\user.c
002476   ffe9                                                                                                               
002478   cfda     MOVFF     0xfda,0xfea                                                                                     
00247a   ffea                                                                                                               
00247c   0e02     MOVLW     0x2                                                                                             
00247e   90d8     BCF       0xd8,0x0,0x0                                                                                    
002480   50eb     MOVF      0xeb,0x0,0x0                                                                                    
002482   0a00     XORLW     0x0                                                                                             
002484   e606     BN        0x2492                                                                                          
002486   0e00     MOVLW     0x0                                                                                             
002488   5cee     SUBWF     0xee,0x0,0x0                                                                                    
00248a   0e00     MOVLW     0x0                                                                                             
00248c   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
00248e   0e00     MOVLW     0x0                                                                                             
002490   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
002472   e364     BNC       0x253c         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
002492   e354     BNC       0x253c                                                                                          
00244a   e124     BNZ       0x2494         		)                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		||                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		(                                                                              e:\iro_svn\opensprints\FW\user\user.c
002494   0e02     MOVLW     0x2            			kINT == type                                                                  e:\iro_svn\opensprints\FW\user\user.c
002496   6e30     MOVWF     0x30,0x0                                                                                        
002498   0efe     MOVLW     0xfe                                                                                            
00249a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00249c   5c30     SUBWF     0x30,0x0,0x0   			&&                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			(                                                                             e:\iro_svn\opensprints\FW\user\user.c
0024a0   cfdf     MOVFF     0xfdf,0x31     				(acc > 32767)                                                                e:\iro_svn\opensprints\FW\user\user.c
0024a2   f031                                                                                                               
0024a4   0e01     MOVLW     0x1                                                                                             
0024a6   cfdb     MOVFF     0xfdb,0x32                                                                                      
0024a8   f032                                                                                                               
0024aa   0e02     MOVLW     0x2                                                                                             
0024ac   cfdb     MOVFF     0xfdb,0x33                                                                                      
0024ae   f033                                                                                                               
0024b0   3433     RLCF      0x33,0x0,0x0                                                                                    
0024b2   0e00     MOVLW     0x0                                                                                             
0024b4   1833     XORWF     0x33,0x0,0x0                                                                                    
0024b6   e607     BN        0x24c6                                                                                          
0024b8   80d8     BSF       0xd8,0x0,0x0                                                                                    
0024ba   0eff     MOVLW     0xff                                                                                            
0024bc   5431     SUBFWB    0x31,0x0,0x0                                                                                    
0024be   0e7f     MOVLW     0x7f                                                                                            
0024c0   5432     SUBFWB    0x32,0x0,0x0                                                                                    
0024c2   0e00     MOVLW     0x0                                                                                             
0024c4   5433     SUBFWB    0x33,0x0,0x0                                                                                    
                                           				||                                                                           e:\iro_svn\opensprints\FW\user\user.c
0024c8   cfd9     MOVFF     0xfd9,0xfe9    				(acc < -32768)                                                               e:\iro_svn\opensprints\FW\user\user.c
0024ca   ffe9                                                                                                               
0024cc   cfda     MOVFF     0xfda,0xfea                                                                                     
0024ce   ffea                                                                                                               
0024d0   0e02     MOVLW     0x2                                                                                             
0024d2   80d8     BSF       0xd8,0x0,0x0                                                                                    
0024d4   50eb     MOVF      0xeb,0x0,0x0                                                                                    
0024d6   0aff     XORLW     0xff                                                                                            
0024d8   e606     BN        0x24e6                                                                                          
0024da   0e00     MOVLW     0x0                                                                                             
0024dc   5cee     SUBWF     0xee,0x0,0x0                                                                                    
0024de   0e80     MOVLW     0x80                                                                                            
0024e0   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
0024e2   0eff     MOVLW     0xff                                                                                            
0024e4   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
0024c6   e33a     BNC       0x253c         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
0024e6   e32a     BNC       0x253c                                                                                          
00249e   e124     BNZ       0x24e8         		)                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           		||                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		(                                                                              e:\iro_svn\opensprints\FW\user\user.c
0024e8   0e03     MOVLW     0x3            			kUINT == type                                                                 e:\iro_svn\opensprints\FW\user\user.c
0024ea   6e34     MOVWF     0x34,0x0                                                                                        
0024ec   0efe     MOVLW     0xfe                                                                                            
0024ee   50db     MOVF      0xdb,0x0,0x0                                                                                    
0024f0   5c34     SUBWF     0x34,0x0,0x0   			&&                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           			(                                                                             e:\iro_svn\opensprints\FW\user\user.c
0024f4   cfdf     MOVFF     0xfdf,0x35     				(acc > 65535)                                                                e:\iro_svn\opensprints\FW\user\user.c
0024f6   f035                                                                                                               
0024f8   0e01     MOVLW     0x1                                                                                             
0024fa   cfdb     MOVFF     0xfdb,0x36                                                                                      
0024fc   f036                                                                                                               
0024fe   0e02     MOVLW     0x2                                                                                             
002500   cfdb     MOVFF     0xfdb,0x37                                                                                      
002502   f037                                                                                                               
002504   3437     RLCF      0x37,0x0,0x0                                                                                    
002506   0e00     MOVLW     0x0                                                                                             
002508   1837     XORWF     0x37,0x0,0x0                                                                                    
00250a   e607     BN        0x251a                                                                                          
00250c   80d8     BSF       0xd8,0x0,0x0                                                                                    
00250e   0eff     MOVLW     0xff                                                                                            
002510   5435     SUBFWB    0x35,0x0,0x0                                                                                    
002512   0eff     MOVLW     0xff                                                                                            
002514   5436     SUBFWB    0x36,0x0,0x0                                                                                    
002516   0e00     MOVLW     0x0                                                                                             
002518   5437     SUBFWB    0x37,0x0,0x0                                                                                    
                                           				||                                                                           e:\iro_svn\opensprints\FW\user\user.c
00251c   cfd9     MOVFF     0xfd9,0xfe9    				(acc < 0)                                                                    e:\iro_svn\opensprints\FW\user\user.c
00251e   ffe9                                                                                                               
002520   cfda     MOVFF     0xfda,0xfea                                                                                     
002522   ffea                                                                                                               
002524   0e02     MOVLW     0x2                                                                                             
002526   90d8     BCF       0xd8,0x0,0x0                                                                                    
002528   50eb     MOVF      0xeb,0x0,0x0                                                                                    
00252a   0a00     XORLW     0x0                                                                                             
00252c   e606     BN        0x253a                                                                                          
00252e   0e00     MOVLW     0x0                                                                                             
002530   5cee     SUBWF     0xee,0x0,0x0                                                                                    
002532   0e00     MOVLW     0x0                                                                                             
002534   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
002536   0e00     MOVLW     0x0                                                                                             
002538   58ef     SUBWFB    0xef,0x0,0x0                                                                                    
00251a   e310     BNC       0x253c         			)                                                                             e:\iro_svn\opensprints\FW\user\user.c
00253a   e205     BC        0x2546                                                                                          
0024f2   e129     BNZ       0x2546         		)                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	)                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
00253c   8c0d     BSF       0xd,0x6,0x0    		bitset (error_byte, kERROR_BYTE_PARAMATER_OUTSIDE_LIMIT);                      e:\iro_svn\opensprints\FW\user\user.c
00253e   6a1d     CLRF      0x1d,0x0       		return (0);                                                                    e:\iro_svn\opensprints\FW\user\user.c
002540   6a1e     CLRF      0x1e,0x0                                                                                        
002542   6a1f     CLRF      0x1f,0x0                                                                                        
002544   d00f     BRA       0x2564                                                                                          
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
002546   cfdf     MOVFF     0xfdf,0x2a     	return(acc);	                                                                   e:\iro_svn\opensprints\FW\user\user.c
002548   f02a                                                                                                               
00254a   0e01     MOVLW     0x1                                                                                             
00254c   cfdb     MOVFF     0xfdb,0x2b                                                                                      
00254e   f02b                                                                                                               
002550   0e02     MOVLW     0x2                                                                                             
002552   cfdb     MOVFF     0xfdb,0x2c                                                                                      
002554   f02c                                                                                                               
002556   c02a     MOVFF     0x2a,0x1d                                                                                       
002558   f01d                                                                                                               
00255a   c02b     MOVFF     0x2b,0x1e                                                                                       
00255c   f01e                                                                                                               
00255e   c02c     MOVFF     0x2c,0x1f                                                                                       
002560   f01f                                                                                                               
002562   d000     BRA       0x2564                                                                                          
002564   0e04     MOVLW     0x4            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
002566   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
002568   e202     BC        0x256e                                                                                          
00256a   6ae1     CLRF      0xe1,0x0                                                                                        
00256c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00256e   6ee1     MOVWF     0xe1,0x0                                                                                        
002570   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002572   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
002574   ffd9                                                                                                               
002576   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // Loop 'digits' number of times, looking at the                                 e:\iro_svn\opensprints\FW\user\user.c
                                           // byte in input_buffer index *ptr, and if it is                                 e:\iro_svn\opensprints\FW\user\user.c
                                           // a digit, adding it to acc. Take care of                                       e:\iro_svn\opensprints\FW\user\user.c
                                           // powers of ten as well. If you hit a non-numerical                             e:\iro_svn\opensprints\FW\user\user.c
                                           // char, then return FALSE, otherwise return TRUE.                               e:\iro_svn\opensprints\FW\user\user.c
                                           // Store result as you go in *acc.                                               e:\iro_svn\opensprints\FW\user\user.c
002578   cfd9     MOVFF     0xfd9,0xfe6    signed char extract_digit(signed short long * acc,	unsigned char digits)         e:\iro_svn\opensprints\FW\user\user.c
00257a   ffe6                                                                                                               
00257c   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00257e   ffd9                                                                                                               
002580   0e02     MOVLW     0x2                                                                                             
002582   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char val;                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	unsigned char digit_cnt;                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
002584   0efd     MOVLW     0xfd           	*acc = 0;                                                                       e:\iro_svn\opensprints\FW\user\user.c
002586   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002588   ffe9                                                                                                               
00258a   0efe     MOVLW     0xfe                                                                                            
00258c   cfdb     MOVFF     0xfdb,0xfea                                                                                     
00258e   ffea                                                                                                               
002590   6aee     CLRF      0xee,0x0                                                                                        
002592   6aee     CLRF      0xee,0x0                                                                                        
002594   6aee     CLRF      0xee,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
002596   0e01     MOVLW     0x1            	for (digit_cnt = 0; digit_cnt < digits; digit_cnt++)                            e:\iro_svn\opensprints\FW\user\user.c
002598   6adb     CLRF      0xdb,0x0                                                                                        
00259a   0efc     MOVLW     0xfc                                                                                            
00259c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00259e   6ef3     MOVWF     0xf3,0x0                                                                                        
0025a0   0e01     MOVLW     0x1                                                                                             
0025a2   cfdb     MOVFF     0xfdb,0xff4                                                                                     
0025a4   fff4                                                                                                               
0025a6   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0025a8   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
0025aa   e255     BC        0x2656                                                                                          
002650   0e01     MOVLW     0x1                                                                                             
002652   2adb     INCF      0xdb,0x1,0x0                                                                                    
002654   d7a2     BRA       0x259a                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
0025ac   0101     MOVLB     0x1            		val = g_RX_buf[g_RX_buf_out];                                                  e:\iro_svn\opensprints\FW\user\user.c
0025ae   51a1     MOVF      0xa1,0x0,0x1                                                                                    
0025b0   6aea     CLRF      0xea,0x0                                                                                        
0025b2   0f40     ADDLW     0x40                                                                                            
0025b4   6ee9     MOVWF     0xe9,0x0                                                                                        
0025b6   0e02     MOVLW     0x2                                                                                             
0025b8   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0025ba   cfef     MOVFF     0xfef,0xfdf                                                                                     
0025bc   ffdf                                                                                                               
0025be   0e30     MOVLW     0x30           		if ((val >= 48) && (val <= 57))                                                e:\iro_svn\opensprints\FW\user\user.c
0025c0   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0025c2   e344     BNC       0x264c                                                                                          
0025c4   50df     MOVF      0xdf,0x0,0x0                                                                                    
0025c6   0839     SUBLW     0x39                                                                                            
0025c8   e341     BNC       0x264c                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0025ca   0efd     MOVLW     0xfd           			*acc = (*acc * 10) + (val - 48);                                              e:\iro_svn\opensprints\FW\user\user.c
0025cc   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0025ce   ffe9                                                                                                               
0025d0   0efe     MOVLW     0xfe                                                                                            
0025d2   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0025d4   ffea                                                                                                               
0025d6   cfee     MOVFF     0xfee,0x2d                                                                                      
0025d8   f02d                                                                                                               
0025da   cfee     MOVFF     0xfee,0x2e                                                                                      
0025dc   f02e                                                                                                               
0025de   cfef     MOVFF     0xfef,0x2f                                                                                      
0025e0   f02f                                                                                                               
0025e2   0e0a     MOVLW     0xa                                                                                             
0025e4   6e22     MOVWF     0x22,0x0                                                                                        
0025e6   6a23     CLRF      0x23,0x0                                                                                        
0025e8   6a24     CLRF      0x24,0x0                                                                                        
0025ea   c02d     MOVFF     0x2d,0x1d                                                                                       
0025ec   f01d                                                                                                               
0025ee   c02e     MOVFF     0x2e,0x1e                                                                                       
0025f0   f01e                                                                                                               
0025f2   c02f     MOVFF     0x2f,0x1f                                                                                       
0025f4   f01f                                                                                                               
0025f6   ec9c     CALL      0x4338,0x0                                                                                      
0025f8   f021                                                                                                               
0025fa   c01a     MOVFF     0x1a,0x2d                                                                                       
0025fc   f02d                                                                                                               
0025fe   c01b     MOVFF     0x1b,0x2e                                                                                       
002600   f02e                                                                                                               
002602   c01c     MOVFF     0x1c,0x2f                                                                                       
002604   f02f                                                                                                               
002606   0e30     MOVLW     0x30                                                                                            
002608   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00260a   6e30     MOVWF     0x30,0x0                                                                                        
00260c   6a31     CLRF      0x31,0x0                                                                                        
00260e   6a32     CLRF      0x32,0x0                                                                                        
002610   502d     MOVF      0x2d,0x0,0x0                                                                                    
002612   2430     ADDWF     0x30,0x0,0x0                                                                                    
002614   6e2a     MOVWF     0x2a,0x0                                                                                        
002616   502e     MOVF      0x2e,0x0,0x0                                                                                    
002618   2031     ADDWFC    0x31,0x0,0x0                                                                                    
00261a   6e2b     MOVWF     0x2b,0x0                                                                                        
00261c   502f     MOVF      0x2f,0x0,0x0                                                                                    
00261e   2032     ADDWFC    0x32,0x0,0x0                                                                                    
002620   6e2c     MOVWF     0x2c,0x0                                                                                        
002622   0efd     MOVLW     0xfd                                                                                            
002624   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002626   ffe9                                                                                                               
002628   0efe     MOVLW     0xfe                                                                                            
00262a   cfdb     MOVFF     0xfdb,0xfea                                                                                     
00262c   ffea                                                                                                               
00262e   c02a     MOVFF     0x2a,0xfee                                                                                      
002630   ffee                                                                                                               
002632   c02b     MOVFF     0x2b,0xfee                                                                                      
002634   ffee                                                                                                               
002636   c02c     MOVFF     0x2c,0xfee                                                                                      
002638   ffee                                                                                                               
                                           			// Move to the next character                                                 e:\iro_svn\opensprints\FW\user\user.c
00263a   0101     MOVLB     0x1            			advance_RX_buf_out ();                                                        e:\iro_svn\opensprints\FW\user\user.c
00263c   2ba1     INCF      0xa1,0x1,0x1                                                                                    
00263e   0e40     MOVLW     0x40                                                                                            
002640   0101     MOVLB     0x1                                                                                             
002642   5da1     SUBWF     0xa1,0x0,0x1                                                                                    
002644   e102     BNZ       0x264a                                                                                          
002646   0101     MOVLB     0x1                                                                                             
002648   6ba1     CLRF      0xa1,0x1                                                                                        
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
00264a   d002     BRA       0x2650         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
00264c   0e00     MOVLW     0x0            			return (FALSE);                                                               e:\iro_svn\opensprints\FW\user\user.c
00264e   d005     BRA       0x265a                                                                                          
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
002656   0e01     MOVLW     0x1            	return (TRUE);                                                                  e:\iro_svn\opensprints\FW\user\user.c
002658   d000     BRA       0x265a                                                                                          
00265a   6e2a     MOVWF     0x2a,0x0       }                                                                                e:\iro_svn\opensprints\FW\user\user.c
00265c   0e02     MOVLW     0x2                                                                                             
00265e   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
002660   e202     BC        0x2666                                                                                          
002662   6ae1     CLRF      0xe1,0x0                                                                                        
002664   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002666   6ee1     MOVWF     0xe1,0x0                                                                                        
002668   502a     MOVF      0x2a,0x0,0x0                                                                                    
00266a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00266c   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
00266e   ffd9                                                                                                               
002670   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           // For debugging, this command will spit out a bunch of values.                  e:\iro_svn\opensprints\FW\user\user.c
                                           void print_status(void)                                                          e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           	printf(                                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           		(rom char*)"Status=%i\r\n"                                                     e:\iro_svn\opensprints\FW\user\user.c
002672   5006     MOVF      0x6,0x0,0x0    		,ISR_D_FIFO_length                                                             e:\iro_svn\opensprints\FW\user\user.c
002678   0eee     MOVLW     0xee                                                                                            
00267a   6e2a     MOVWF     0x2a,0x0                                                                                        
00267c   0e41     MOVLW     0x41                                                                                            
00267e   6e2b     MOVWF     0x2b,0x0                                                                                        
002680   6a2c     CLRF      0x2c,0x0                                                                                        
002682   c02a     MOVFF     0x2a,0xfe6                                                                                      
002684   ffe6                                                                                                               
002686   c02b     MOVFF     0x2b,0xfe6                                                                                      
002688   ffe6                                                                                                               
00268a   c02c     MOVFF     0x2c,0xfe6                                                                                      
00268c   ffe6                                                                                                               
002674   6ee6     MOVWF     0xe6,0x0       	);                                                                              e:\iro_svn\opensprints\FW\user\user.c
002676   6ae6     CLRF      0xe6,0x0                                                                                        
00268e   ecc8     CALL      0x4590,0x0                                                                                      
002690   f022                                                                                                               
002692   6e2d     MOVWF     0x2d,0x0                                                                                        
002694   0e05     MOVLW     0x5                                                                                             
002696   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
002698   502d     MOVF      0x2d,0x0,0x0                                                                                    
00269a   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\user\user.c
                                            * Function:        void BlinkUSBStatus(void)                                    e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Overview:        BlinkUSBStatus turns on and off LEDs corresponding to        e:\iro_svn\opensprints\FW\user\user.c
                                            *                  the USB device state.                                        e:\iro_svn\opensprints\FW\user\user.c
                                            *                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                            * Note:            mLED macros can be found in io_cfg.h                         e:\iro_svn\opensprints\FW\user\user.c
                                            *                  usb_device_state is declared in usbmmap.c and is modified    e:\iro_svn\opensprints\FW\user\user.c
                                            *                  in usbdrv.c, usbctrltrf.c, and usb9.c                        e:\iro_svn\opensprints\FW\user\user.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\user\user.c
                                           void BlinkUSBStatus(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                               static word LEDCount = 0;                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           	static unsigned char LEDState = 0;                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                               if (                                                                         e:\iro_svn\opensprints\FW\user\user.c
00269c   0101     MOVLB     0x1            		usb_device_state == DETACHED_STATE                                             e:\iro_svn\opensprints\FW\user\user.c
00269e   51f7     MOVF      0xf7,0x0,0x1                                                                                    
                                                  	||                                                                       e:\iro_svn\opensprints\FW\user\user.c
0026a2   0e01     MOVLW     0x1                   	1 == UCONbits.SUSPND                                                     e:\iro_svn\opensprints\FW\user\user.c
0026a4   6e2a     MOVWF     0x2a,0x0                                                                                        
0026a6   506d     MOVF      0x6d,0x0,0x0                                                                                    
0026a8   0b02     ANDLW     0x2                                                                                             
0026aa   e001     BZ        0x26ae                                                                                          
0026ac   0e01     MOVLW     0x1                                                                                             
0026a0   e008     BZ        0x26b2             )                                                                            e:\iro_svn\opensprints\FW\user\user.c
0026ae   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
0026b0   e102     BNZ       0x26b6                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\user\user.c
0026b2   908b     BCF       0x8b,0x0,0x0   		mLED_1_Off();                                                                  e:\iro_svn\opensprints\FW\user\user.c
                                               }                                                                            e:\iro_svn\opensprints\FW\user\user.c
0026b4   d05d     BRA       0x2770             else if (                                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           		usb_device_state == ATTACHED_STATE                                             e:\iro_svn\opensprints\FW\user\user.c
0026b6   0101     MOVLB     0x1            		||                                                                             e:\iro_svn\opensprints\FW\user\user.c
0026b8   05f7     DECF      0xf7,0x0,0x1                                                                                    
0026bc   0e02     MOVLW     0x2            		usb_device_state == POWERED_STATE		                                            e:\iro_svn\opensprints\FW\user\user.c
0026ba   e00c     BZ        0x26d4         		||                                                                             e:\iro_svn\opensprints\FW\user\user.c
0026be   0101     MOVLB     0x1                                                                                             
0026c0   5df7     SUBWF     0xf7,0x0,0x1                                                                                    
0026c2   e008     BZ        0x26d4                                                                                          
0026c4   0e03     MOVLW     0x3            		usb_device_state == DEFAULT_STATE                                              e:\iro_svn\opensprints\FW\user\user.c
0026c6   0101     MOVLB     0x1            		||                                                                             e:\iro_svn\opensprints\FW\user\user.c
0026c8   5df7     SUBWF     0xf7,0x0,0x1                                                                                    
0026ca   e004     BZ        0x26d4                                                                                          
0026cc   0e05     MOVLW     0x5            		usb_device_state == ADDRESS_STATE                                              e:\iro_svn\opensprints\FW\user\user.c
0026ce   0101     MOVLB     0x1            	)                                                                               e:\iro_svn\opensprints\FW\user\user.c
0026d0   5df7     SUBWF     0xf7,0x0,0x1                                                                                    
0026d2   e102     BNZ       0x26d8                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\user\user.c
0026d4   808b     BSF       0x8b,0x0,0x0           mLED_1_On();                                                             e:\iro_svn\opensprints\FW\user\user.c
                                               }                                                                            e:\iro_svn\opensprints\FW\user\user.c
0026d6   d04c     BRA       0x2770             else if (usb_device_state == CONFIGURED_STATE)                               e:\iro_svn\opensprints\FW\user\user.c
0026d8   0e06     MOVLW     0x6                                                                                             
0026da   0101     MOVLB     0x1                                                                                             
0026dc   5df7     SUBWF     0xf7,0x0,0x1                                                                                    
0026de   e148     BNZ       0x2770                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\user\user.c
0026e0   0101     MOVLB     0x1            		LEDCount--;                                                                    e:\iro_svn\opensprints\FW\user\user.c
0026e2   07dd     DECF      0xdd,0x1,0x1                                                                                    
0026e4   0e00     MOVLW     0x0                                                                                             
0026e6   5bde     SUBWFB    0xde,0x1,0x1                                                                                    
0026e8   0101     MOVLB     0x1            		if (0 == LEDState)                                                             e:\iro_svn\opensprints\FW\user\user.c
0026ea   51df     MOVF      0xdf,0x0,0x1                                                                                    
0026ec   e10e     BNZ       0x270a                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
0026ee   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            e:\iro_svn\opensprints\FW\user\user.c
0026f0   51dd     MOVF      0xdd,0x0,0x1                                                                                    
0026f2   11de     IORWF     0xde,0x0,0x1                                                                                    
0026f4   e109     BNZ       0x2708                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
0026f6   808b     BSF       0x8b,0x0,0x0   				mLED_1_On();                                                                 e:\iro_svn\opensprints\FW\user\user.c
0026f8   0101     MOVLB     0x1            				LEDCount = 10000U;				                                                       e:\iro_svn\opensprints\FW\user\user.c
0026fa   0e10     MOVLW     0x10                                                                                            
0026fc   6fdd     MOVWF     0xdd,0x1                                                                                        
0026fe   0e27     MOVLW     0x27                                                                                            
002700   6fde     MOVWF     0xde,0x1                                                                                        
002702   0101     MOVLB     0x1            				LEDState = 1;                                                                e:\iro_svn\opensprints\FW\user\user.c
002704   0e01     MOVLW     0x1                                                                                             
002706   6fdf     MOVWF     0xdf,0x1                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
002708   d033     BRA       0x2770         		else if (1 == LEDState)                                                        e:\iro_svn\opensprints\FW\user\user.c
00270a   0101     MOVLB     0x1                                                                                             
00270c   05df     DECF      0xdf,0x0,0x1                                                                                    
00270e   e10e     BNZ       0x272c                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
002710   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            e:\iro_svn\opensprints\FW\user\user.c
002712   51dd     MOVF      0xdd,0x0,0x1                                                                                    
002714   11de     IORWF     0xde,0x0,0x1                                                                                    
002716   e109     BNZ       0x272a                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
002718   908b     BCF       0x8b,0x0,0x0   				mLED_1_Off();                                                                e:\iro_svn\opensprints\FW\user\user.c
00271a   0101     MOVLB     0x1            				LEDCount = 10000U;				                                                       e:\iro_svn\opensprints\FW\user\user.c
00271c   0e10     MOVLW     0x10                                                                                            
00271e   6fdd     MOVWF     0xdd,0x1                                                                                        
002720   0e27     MOVLW     0x27                                                                                            
002722   6fde     MOVWF     0xde,0x1                                                                                        
002724   0101     MOVLB     0x1            				LEDState = 2;                                                                e:\iro_svn\opensprints\FW\user\user.c
002726   0e02     MOVLW     0x2                                                                                             
002728   6fdf     MOVWF     0xdf,0x1                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
00272a   d022     BRA       0x2770         		else if (2 == LEDState)                                                        e:\iro_svn\opensprints\FW\user\user.c
00272c   0e02     MOVLW     0x2                                                                                             
00272e   0101     MOVLB     0x1                                                                                             
002730   5ddf     SUBWF     0xdf,0x0,0x1                                                                                    
002732   e10e     BNZ       0x2750                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
002734   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            e:\iro_svn\opensprints\FW\user\user.c
002736   51dd     MOVF      0xdd,0x0,0x1                                                                                    
002738   11de     IORWF     0xde,0x0,0x1                                                                                    
00273a   e109     BNZ       0x274e                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
00273c   808b     BSF       0x8b,0x0,0x0   				mLED_1_On();                                                                 e:\iro_svn\opensprints\FW\user\user.c
00273e   0101     MOVLB     0x1            				LEDCount = 100000U;				                                                      e:\iro_svn\opensprints\FW\user\user.c
002740   0ea0     MOVLW     0xa0                                                                                            
002742   6fdd     MOVWF     0xdd,0x1                                                                                        
002744   0e86     MOVLW     0x86                                                                                            
002746   6fde     MOVWF     0xde,0x1                                                                                        
002748   0101     MOVLB     0x1            				LEDState = 3;                                                                e:\iro_svn\opensprints\FW\user\user.c
00274a   0e03     MOVLW     0x3                                                                                             
00274c   6fdf     MOVWF     0xdf,0x1                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
00274e   d010     BRA       0x2770         		else if (LEDState >= 3)                                                        e:\iro_svn\opensprints\FW\user\user.c
002750   0e03     MOVLW     0x3                                                                                             
002752   0101     MOVLB     0x1                                                                                             
002754   5ddf     SUBWF     0xdf,0x0,0x1                                                                                    
002756   e30c     BNC       0x2770                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
002758   0101     MOVLB     0x1            			if (0 == LEDCount)                                                            e:\iro_svn\opensprints\FW\user\user.c
00275a   51dd     MOVF      0xdd,0x0,0x1                                                                                    
00275c   11de     IORWF     0xde,0x0,0x1                                                                                    
00275e   e108     BNZ       0x2770                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
002760   908b     BCF       0x8b,0x0,0x0   				mLED_1_Off();                                                                e:\iro_svn\opensprints\FW\user\user.c
002762   0101     MOVLB     0x1            				LEDCount = 10000U;				                                                       e:\iro_svn\opensprints\FW\user\user.c
002764   0e10     MOVLW     0x10                                                                                            
002766   6fdd     MOVWF     0xdd,0x1                                                                                        
002768   0e27     MOVLW     0x27                                                                                            
00276a   6fde     MOVWF     0xde,0x1                                                                                        
00276c   0101     MOVLB     0x1            				LEDState = 0;                                                                e:\iro_svn\opensprints\FW\user\user.c
00276e   6bdf     CLRF      0xdf,0x1                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                               }                                                                            e:\iro_svn\opensprints\FW\user\user.c
002770   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           BOOL SwitchIsPressed(void)                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
002772   b482     BTFSC     0x82,0x2,0x0   	if( 0 == UserSW)                   	// If pressed                               e:\iro_svn\opensprints\FW\user\user.c
002774   d003     BRA       0x277c                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
002776   0e01     MOVLW     0x1            	    return (TRUE);                	// Was pressed                               e:\iro_svn\opensprints\FW\user\user.c
002778   d003     BRA       0x2780                                                                                          
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
00277a   d002     BRA       0x2780         	else                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
00277c   0e00     MOVLW     0x0            		return (FALSE);					// Was not pressed                                         e:\iro_svn\opensprints\FW\user\user.c
00277e   d000     BRA       0x2780                                                                                          
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
002780   0012     RETURN    0x0            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /** Start Luke Orland code **************************************************/   e:\iro_svn\opensprints\FW\user\user.c
                                           BOOL justBegun = TRUE;                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int prevValueSensor0;                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int prevValueSensor1;                                                   e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int currentValueSensor0;                                                e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int currentValueSensor1;                                                e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int Sensor0PortApin=0;                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int Sensor1PortApin=1;                                                  e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int sensor0Status;                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int sensor1Status;                                                      e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int lastRaceTime;                                                       e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int lastSensor0Time;                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int lastSensor1Time;                                                    e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int momentRaceTimeCentisecs;                                            e:\iro_svn\opensprints\FW\user\user.c
                                           unsigned int momentRaceTimeMins;                                                 e:\iro_svn\opensprints\FW\user\user.c
                                           #define TEST_PERIOD 20 		// in centiseconds                                      e:\iro_svn\opensprints\FW\user\user.c
                                           #define TEST_PERIOD_HALF (TEST_PERIOD/2)                                         e:\iro_svn\opensprints\FW\user\user.c
002782   cfd9     MOVFF     0xfd9,0xfe6    void HallEffSensors(void)                                                        e:\iro_svn\opensprints\FW\user\user.c
002784   ffe6                                                                                                               
002786   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
002788   ffd9                                                                                                               
00278a   0e04     MOVLW     0x4                                                                                             
00278c   26e1     ADDWF     0xe1,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\user\user.c
00278e   0101     MOVLB     0x1            	if(is_racing)                                                                   e:\iro_svn\opensprints\FW\user\user.c
002790   51da     MOVF      0xda,0x0,0x1                                                                                    
002792   e101     BNZ       0x2796                                                                                          
002794   d12e     BRA       0x29f2                                                                                          
                                           	{                                                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		unsigned int momentRaceTimeCentisecs;                                          e:\iro_svn\opensprints\FW\user\user.c
                                           		unsigned int momentRaceTimeMins;                                               e:\iro_svn\opensprints\FW\user\user.c
                                           		// check the race stopwatch                                                    e:\iro_svn\opensprints\FW\user\user.c
002796   c1a9     MOVFF     0x1a9,0xfde    		momentRaceTimeCentisecs = raceTimeCentisecs;                                   e:\iro_svn\opensprints\FW\user\user.c
002798   ffde                                                                                                               
00279a   c1aa     MOVFF     0x1aa,0xfdd                                                                                     
00279c   ffdd                                                                                                               
00279e   0e02     MOVLW     0x2            		momentRaceTimeMins = raceTimeMins;                                             e:\iro_svn\opensprints\FW\user\user.c
0027a0   c1a7     MOVFF     0x1a7,0xfdb                                                                                     
0027a2   ffdb                                                                                                               
0027a4   0e03     MOVLW     0x3                                                                                             
0027a6   c1a8     MOVFF     0x1a8,0xfdb                                                                                     
0027a8   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0027aa   0101     MOVLB     0x1            		if(justBegun)                                                                  e:\iro_svn\opensprints\FW\user\user.c
0027ac   51e0     MOVF      0xe0,0x0,0x1                                                                                    
0027ae   e031     BZ        0x2812                                                                                          
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           			// initialize the pins                                                        e:\iro_svn\opensprints\FW\user\user.c
0027b0   0e01     MOVLW     0x1            			bitset (DDRA, Sensor0PortApin);     // set Port A Pin x as input              e:\iro_svn\opensprints\FW\user\user.c
0027b2   c1e1     MOVFF     0x1e1,0xfe7                                                                                     
0027b4   ffe7                                                                                                               
0027b6   52e7     MOVF      0xe7,0x1,0x0                                                                                    
0027b8   e004     BZ        0x27c2                                                                                          
0027ba   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
0027bc   0bfe     ANDLW     0xfe                                                                                            
0027be   06e7     DECF      0xe7,0x1,0x0                                                                                    
0027c0   e1fc     BNZ       0x27ba                                                                                          
0027c2   1292     IORWF     0x92,0x1,0x0                                                                                    
0027c4   0e01     MOVLW     0x1            			bitset (DDRA, Sensor1PortApin);     // set Port A Pin x as input              e:\iro_svn\opensprints\FW\user\user.c
0027c6   c1e3     MOVFF     0x1e3,0xfe7                                                                                     
0027c8   ffe7                                                                                                               
0027ca   52e7     MOVF      0xe7,0x1,0x0                                                                                    
0027cc   e004     BZ        0x27d6                                                                                          
0027ce   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
0027d0   0bfe     ANDLW     0xfe                                                                                            
0027d2   06e7     DECF      0xe7,0x1,0x0                                                                                    
0027d4   e1fc     BNZ       0x27ce                                                                                          
0027d6   1292     IORWF     0x92,0x1,0x0                                                                                    
                                           			// read the pins                                                              e:\iro_svn\opensprints\FW\user\user.c
0027d8   0e01     MOVLW     0x1            			currentValueSensor0 = bittst (PORTA, Sensor0PortApin);  	// read Port A Pin x state e:\iro_svn\opensprints\FW\user\user.c
0027da   c1e1     MOVFF     0x1e1,0xfe7                                                                                     
0027dc   ffe7                                                                                                               
0027de   52e7     MOVF      0xe7,0x1,0x0                                                                                    
0027e0   e004     BZ        0x27ea                                                                                          
0027e2   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
0027e4   0bfe     ANDLW     0xfe                                                                                            
0027e6   06e7     DECF      0xe7,0x1,0x0                                                                                    
0027e8   e1fc     BNZ       0x27e2                                                                                          
0027ea   1480     ANDWF     0x80,0x0,0x0                                                                                    
0027ec   0101     MOVLB     0x1                                                                                             
0027ee   6fb0     MOVWF     0xb0,0x1                                                                                        
0027f0   6bb1     CLRF      0xb1,0x1                                                                                        
0027f2   0e01     MOVLW     0x1            			currentValueSensor1 = bittst (PORTA, Sensor1PortApin);  	// read Port A Pin x state e:\iro_svn\opensprints\FW\user\user.c
0027f4   c1e3     MOVFF     0x1e3,0xfe7                                                                                     
0027f6   ffe7                                                                                                               
0027f8   52e7     MOVF      0xe7,0x1,0x0                                                                                    
0027fa   e004     BZ        0x2804                                                                                          
0027fc   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
0027fe   0bfe     ANDLW     0xfe                                                                                            
002800   06e7     DECF      0xe7,0x1,0x0                                                                                    
002802   e1fc     BNZ       0x27fc                                                                                          
002804   1480     ANDWF     0x80,0x0,0x0                                                                                    
002806   0101     MOVLB     0x1                                                                                             
002808   6fb2     MOVWF     0xb2,0x1                                                                                        
00280a   6bb3     CLRF      0xb3,0x1                                                                                        
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
00280c   0101     MOVLB     0x1            			justBegun=0;                                                                  e:\iro_svn\opensprints\FW\user\user.c
00280e   6be0     CLRF      0xe0,0x1                                                                                        
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
002810   d0f0     BRA       0x29f2         		else                                                                           e:\iro_svn\opensprints\FW\user\user.c
                                           		{                                                                              e:\iro_svn\opensprints\FW\user\user.c
002812   0101     MOVLB     0x1            			if (raceTestMode)                                                             e:\iro_svn\opensprints\FW\user\user.c
002814   51db     MOVF      0xdb,0x0,0x1                                                                                    
002816   e059     BZ        0x28ca                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
002818   cfde     MOVFF     0xfde,0x2a     				if (momentRaceTimeCentisecs%TEST_PERIOD==0 && momentRaceTimeCentisecs!=lastSensor0Time) e:\iro_svn\opensprints\FW\user\user.c
00281a   f02a                                                                                                               
00281c   cfdd     MOVFF     0xfdd,0x2b                                                                                      
00281e   f02b                                                                                                               
002820   0e14     MOVLW     0x14                                                                                            
002822   6e23     MOVWF     0x23,0x0                                                                                        
002824   6a24     CLRF      0x24,0x0                                                                                        
002826   c02a     MOVFF     0x2a,0x1e                                                                                       
002828   f01e                                                                                                               
00282a   c02b     MOVFF     0x2b,0x1f                                                                                       
00282c   f01f                                                                                                               
00282e   ec46     CALL      0x488c,0x0                                                                                      
002830   f024                                                                                                               
002832   c01a     MOVFF     0x1a,0x2a                                                                                       
002834   f02a                                                                                                               
002836   c01b     MOVFF     0x1b,0x2b                                                                                       
002838   f02b                                                                                                               
00283a   502a     MOVF      0x2a,0x0,0x0                                                                                    
00283c   102b     IORWF     0x2b,0x0,0x0                                                                                    
00283e   e114     BNZ       0x2868                                                                                          
002840   cfde     MOVFF     0xfde,0x2c                                                                                      
002842   f02c                                                                                                               
002844   cfdd     MOVFF     0xfdd,0x2d                                                                                      
002846   f02d                                                                                                               
002848   0101     MOVLB     0x1                                                                                             
00284a   51ba     MOVF      0xba,0x0,0x1                                                                                    
00284c   182c     XORWF     0x2c,0x0,0x0                                                                                    
00284e   e102     BNZ       0x2854                                                                                          
002850   51bb     MOVF      0xbb,0x0,0x1                                                                                    
002852   182d     XORWF     0x2d,0x0,0x0                                                                                    
002854   e009     BZ        0x2868                                                                                          
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
002856   0e01     MOVLW     0x1            					sensor0Status=1;                                                            e:\iro_svn\opensprints\FW\user\user.c
002858   0101     MOVLB     0x1                                                                                             
00285a   6fb4     MOVWF     0xb4,0x1                                                                                        
00285c   6bb5     CLRF      0xb5,0x1                                                                                        
00285e   cfde     MOVFF     0xfde,0x1ba    					lastSensor0Time=momentRaceTimeCentisecs;                                    e:\iro_svn\opensprints\FW\user\user.c
002860   f1ba                                                                                                               
002862   cfdd     MOVFF     0xfdd,0x1bb                                                                                     
002864   f1bb                                                                                                               
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
002866   d003     BRA       0x286e         				else                                                                         e:\iro_svn\opensprints\FW\user\user.c
002868   0101     MOVLB     0x1            					sensor0Status=0;                                                            e:\iro_svn\opensprints\FW\user\user.c
00286a   6bb4     CLRF      0xb4,0x1                                                                                        
00286c   6bb5     CLRF      0xb5,0x1                                                                                        
00286e   cfde     MOVFF     0xfde,0x2a     				if (momentRaceTimeCentisecs%TEST_PERIOD==TEST_PERIOD_HALF && momentRaceTimeCentisecs!=lastSensor1Time) e:\iro_svn\opensprints\FW\user\user.c
002870   f02a                                                                                                               
002872   cfdd     MOVFF     0xfdd,0x2b                                                                                      
002874   f02b                                                                                                               
002876   0e14     MOVLW     0x14                                                                                            
002878   6e23     MOVWF     0x23,0x0                                                                                        
00287a   6a24     CLRF      0x24,0x0                                                                                        
00287c   c02a     MOVFF     0x2a,0x1e                                                                                       
00287e   f01e                                                                                                               
002880   c02b     MOVFF     0x2b,0x1f                                                                                       
002882   f01f                                                                                                               
002884   ec46     CALL      0x488c,0x0                                                                                      
002886   f024                                                                                                               
002888   c01a     MOVFF     0x1a,0x2a                                                                                       
00288a   f02a                                                                                                               
00288c   c01b     MOVFF     0x1b,0x2b                                                                                       
00288e   f02b                                                                                                               
002890   0e0a     MOVLW     0xa                                                                                             
002892   182a     XORWF     0x2a,0x0,0x0                                                                                    
002894   e101     BNZ       0x2898                                                                                          
002896   502b     MOVF      0x2b,0x0,0x0                                                                                    
002898   e114     BNZ       0x28c2                                                                                          
00289a   cfde     MOVFF     0xfde,0x2c                                                                                      
00289c   f02c                                                                                                               
00289e   cfdd     MOVFF     0xfdd,0x2d                                                                                      
0028a0   f02d                                                                                                               
0028a2   0101     MOVLB     0x1                                                                                             
0028a4   51bc     MOVF      0xbc,0x0,0x1                                                                                    
0028a6   182c     XORWF     0x2c,0x0,0x0                                                                                    
0028a8   e102     BNZ       0x28ae                                                                                          
0028aa   51bd     MOVF      0xbd,0x0,0x1                                                                                    
0028ac   182d     XORWF     0x2d,0x0,0x0                                                                                    
0028ae   e009     BZ        0x28c2                                                                                          
                                           				{                                                                            e:\iro_svn\opensprints\FW\user\user.c
0028b0   0e01     MOVLW     0x1            					sensor1Status=1;                                                            e:\iro_svn\opensprints\FW\user\user.c
0028b2   0101     MOVLB     0x1                                                                                             
0028b4   6fb6     MOVWF     0xb6,0x1                                                                                        
0028b6   6bb7     CLRF      0xb7,0x1                                                                                        
0028b8   cfde     MOVFF     0xfde,0x1bc    					lastSensor1Time=momentRaceTimeCentisecs;                                    e:\iro_svn\opensprints\FW\user\user.c
0028ba   f1bc                                                                                                               
0028bc   cfdd     MOVFF     0xfdd,0x1bd                                                                                     
0028be   f1bd                                                                                                               
                                           				}                                                                            e:\iro_svn\opensprints\FW\user\user.c
0028c0   d003     BRA       0x28c8         				else                                                                         e:\iro_svn\opensprints\FW\user\user.c
0028c2   0101     MOVLB     0x1            					sensor1Status=0;                                                            e:\iro_svn\opensprints\FW\user\user.c
0028c4   6bb6     CLRF      0xb6,0x1                                                                                        
0028c6   6bb7     CLRF      0xb7,0x1                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0028c8   d056     BRA       0x2976         			else	// not test mode                                                         e:\iro_svn\opensprints\FW\user\user.c
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// remember previous state of pins                                           e:\iro_svn\opensprints\FW\user\user.c
0028ca   c1b0     MOVFF     0x1b0,0x1ac    				prevValueSensor0=currentValueSensor0;                                        e:\iro_svn\opensprints\FW\user\user.c
0028cc   f1ac                                                                                                               
0028ce   c1b1     MOVFF     0x1b1,0x1ad                                                                                     
0028d0   f1ad                                                                                                               
0028d2   c1b2     MOVFF     0x1b2,0x1ae    				prevValueSensor1=currentValueSensor1;                                        e:\iro_svn\opensprints\FW\user\user.c
0028d4   f1ae                                                                                                               
0028d6   c1b3     MOVFF     0x1b3,0x1af                                                                                     
0028d8   f1af                                                                                                               
                                           	                                                                                e:\iro_svn\opensprints\FW\user\user.c
                                           				// read the pins                                                             e:\iro_svn\opensprints\FW\user\user.c
0028da   0e01     MOVLW     0x1            				currentValueSensor0 = bittst(PORTA,Sensor0PortApin);  	// read state of Port A Pin x e:\iro_svn\opensprints\FW\user\user.c
0028dc   c1e1     MOVFF     0x1e1,0xfe7                                                                                     
0028de   ffe7                                                                                                               
0028e0   52e7     MOVF      0xe7,0x1,0x0                                                                                    
0028e2   e004     BZ        0x28ec                                                                                          
0028e4   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
0028e6   0bfe     ANDLW     0xfe                                                                                            
0028e8   06e7     DECF      0xe7,0x1,0x0                                                                                    
0028ea   e1fc     BNZ       0x28e4                                                                                          
0028ec   1480     ANDWF     0x80,0x0,0x0                                                                                    
0028ee   0101     MOVLB     0x1                                                                                             
0028f0   6fb0     MOVWF     0xb0,0x1                                                                                        
0028f2   6bb1     CLRF      0xb1,0x1                                                                                        
0028f4   0e01     MOVLW     0x1            				currentValueSensor1 = bittst(PORTA,Sensor1PortApin);  	// read state of Port A Pin x e:\iro_svn\opensprints\FW\user\user.c
0028f6   c1e3     MOVFF     0x1e3,0xfe7                                                                                     
0028f8   ffe7                                                                                                               
0028fa   52e7     MOVF      0xe7,0x1,0x0                                                                                    
0028fc   e004     BZ        0x2906                                                                                          
0028fe   46e8     RLNCF     0xe8,0x1,0x0                                                                                    
002900   0bfe     ANDLW     0xfe                                                                                            
002902   06e7     DECF      0xe7,0x1,0x0                                                                                    
002904   e1fc     BNZ       0x28fe                                                                                          
002906   1480     ANDWF     0x80,0x0,0x0                                                                                    
002908   0101     MOVLB     0x1                                                                                             
00290a   6fb2     MOVWF     0xb2,0x1                                                                                        
00290c   6bb3     CLRF      0xb3,0x1                                                                                        
                                           				                                                                             e:\iro_svn\opensprints\FW\user\user.c
00290e   0101     MOVLB     0x1            				sensor0Status=(currentValueSensor0^prevValueSensor0)&~currentValueSensor0;   e:\iro_svn\opensprints\FW\user\user.c
002910   0101     MOVLB     0x1                                                                                             
002912   51b0     MOVF      0xb0,0x0,0x1                                                                                    
002914   0101     MOVLB     0x1                                                                                             
002916   19ac     XORWF     0xac,0x0,0x1                                                                                    
002918   6e2a     MOVWF     0x2a,0x0                                                                                        
00291a   0101     MOVLB     0x1                                                                                             
00291c   0101     MOVLB     0x1                                                                                             
00291e   51b1     MOVF      0xb1,0x0,0x1                                                                                    
002920   0101     MOVLB     0x1                                                                                             
002922   19ad     XORWF     0xad,0x0,0x1                                                                                    
002924   6e2b     MOVWF     0x2b,0x0                                                                                        
002926   c1b0     MOVFF     0x1b0,0x2c                                                                                      
002928   f02c                                                                                                               
00292a   c1b1     MOVFF     0x1b1,0x2d                                                                                      
00292c   f02d                                                                                                               
00292e   1e2c     COMF      0x2c,0x1,0x0                                                                                    
002930   1e2d     COMF      0x2d,0x1,0x0                                                                                    
002932   502a     MOVF      0x2a,0x0,0x0                                                                                    
002934   142c     ANDWF     0x2c,0x0,0x0                                                                                    
002936   0101     MOVLB     0x1                                                                                             
002938   6fb4     MOVWF     0xb4,0x1                                                                                        
00293a   502b     MOVF      0x2b,0x0,0x0                                                                                    
00293c   142d     ANDWF     0x2d,0x0,0x0                                                                                    
00293e   0101     MOVLB     0x1                                                                                             
002940   6fb5     MOVWF     0xb5,0x1                                                                                        
002942   0101     MOVLB     0x1            				sensor1Status=(currentValueSensor1^prevValueSensor1)&~currentValueSensor1;   e:\iro_svn\opensprints\FW\user\user.c
002944   0101     MOVLB     0x1                                                                                             
002946   51b2     MOVF      0xb2,0x0,0x1                                                                                    
002948   0101     MOVLB     0x1                                                                                             
00294a   19ae     XORWF     0xae,0x0,0x1                                                                                    
00294c   6e2a     MOVWF     0x2a,0x0                                                                                        
00294e   0101     MOVLB     0x1                                                                                             
002950   0101     MOVLB     0x1                                                                                             
002952   51b3     MOVF      0xb3,0x0,0x1                                                                                    
002954   0101     MOVLB     0x1                                                                                             
002956   19af     XORWF     0xaf,0x0,0x1                                                                                    
002958   6e2b     MOVWF     0x2b,0x0                                                                                        
00295a   c1b2     MOVFF     0x1b2,0x2c                                                                                      
00295c   f02c                                                                                                               
00295e   c1b3     MOVFF     0x1b3,0x2d                                                                                      
002960   f02d                                                                                                               
002962   1e2c     COMF      0x2c,0x1,0x0                                                                                    
002964   1e2d     COMF      0x2d,0x1,0x0                                                                                    
002966   502a     MOVF      0x2a,0x0,0x0                                                                                    
002968   142c     ANDWF     0x2c,0x0,0x0                                                                                    
00296a   0101     MOVLB     0x1                                                                                             
00296c   6fb6     MOVWF     0xb6,0x1                                                                                        
00296e   502b     MOVF      0x2b,0x0,0x0                                                                                    
002970   142d     ANDWF     0x2d,0x0,0x0                                                                                    
002972   0101     MOVLB     0x1                                                                                             
002974   6fb7     MOVWF     0xb7,0x1                                                                                        
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
002976   0101     MOVLB     0x1            			if(sensor0Status)                                                             e:\iro_svn\opensprints\FW\user\user.c
002978   51b4     MOVF      0xb4,0x0,0x1                                                                                    
00297a   11b5     IORWF     0xb5,0x0,0x1                                                                                    
00297c   e01b     BZ        0x29b4                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// send a string through USB packet stating that sensor 0 switched to high   e:\iro_svn\opensprints\FW\user\user.c
00297e   cfde     MOVFF     0xfde,0xfe6    				printf("1;%i:%i\r\n",momentRaceTimeMins,momentRaceTimeCentisecs);            e:\iro_svn\opensprints\FW\user\user.c
002980   ffe6                                                                                                               
002982   cfdd     MOVFF     0xfdd,0xfe6                                                                                     
002984   ffe6                                                                                                               
002986   0e02     MOVLW     0x2                                                                                             
002988   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00298a   ffe6                                                                                                               
00298c   0e03     MOVLW     0x3                                                                                             
00298e   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002990   ffe6                                                                                                               
002992   0ee4     MOVLW     0xe4                                                                                            
002994   6e2a     MOVWF     0x2a,0x0                                                                                        
002996   0e41     MOVLW     0x41                                                                                            
002998   6e2b     MOVWF     0x2b,0x0                                                                                        
00299a   6a2c     CLRF      0x2c,0x0                                                                                        
00299c   c02a     MOVFF     0x2a,0xfe6                                                                                      
00299e   ffe6                                                                                                               
0029a0   c02b     MOVFF     0x2b,0xfe6                                                                                      
0029a2   ffe6                                                                                                               
0029a4   c02c     MOVFF     0x2c,0xfe6                                                                                      
0029a6   ffe6                                                                                                               
0029a8   ecc8     CALL      0x4590,0x0                                                                                      
0029aa   f022                                                                                                               
0029ac   6e2d     MOVWF     0x2d,0x0                                                                                        
0029ae   0e07     MOVLW     0x7                                                                                             
0029b0   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0029b2   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
0029b4   0101     MOVLB     0x1            			if(sensor1Status)                                                             e:\iro_svn\opensprints\FW\user\user.c
0029b6   51b6     MOVF      0xb6,0x0,0x1                                                                                    
0029b8   11b7     IORWF     0xb7,0x0,0x1                                                                                    
0029ba   e01b     BZ        0x29f2                                                                                          
                                           			{                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           				// send a string through USB packet stating that sensor 1 switched to high   e:\iro_svn\opensprints\FW\user\user.c
0029bc   cfde     MOVFF     0xfde,0xfe6    				printf("2;%i:%i\r\n",momentRaceTimeMins,momentRaceTimeCentisecs);            e:\iro_svn\opensprints\FW\user\user.c
0029be   ffe6                                                                                                               
0029c0   cfdd     MOVFF     0xfdd,0xfe6                                                                                     
0029c2   ffe6                                                                                                               
0029c4   0e02     MOVLW     0x2                                                                                             
0029c6   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0029c8   ffe6                                                                                                               
0029ca   0e03     MOVLW     0x3                                                                                             
0029cc   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0029ce   ffe6                                                                                                               
0029d0   0eda     MOVLW     0xda                                                                                            
0029d2   6e2a     MOVWF     0x2a,0x0                                                                                        
0029d4   0e41     MOVLW     0x41                                                                                            
0029d6   6e2b     MOVWF     0x2b,0x0                                                                                        
0029d8   6a2c     CLRF      0x2c,0x0                                                                                        
0029da   c02a     MOVFF     0x2a,0xfe6                                                                                      
0029dc   ffe6                                                                                                               
0029de   c02b     MOVFF     0x2b,0xfe6                                                                                      
0029e0   ffe6                                                                                                               
0029e2   c02c     MOVFF     0x2c,0xfe6                                                                                      
0029e4   ffe6                                                                                                               
0029e6   ecc8     CALL      0x4590,0x0                                                                                      
0029e8   f022                                                                                                               
0029ea   6e2d     MOVWF     0x2d,0x0                                                                                        
0029ec   0e07     MOVLW     0x7                                                                                             
0029ee   5ee1     SUBWF     0xe1,0x1,0x0                                                                                    
0029f0   502d     MOVF      0x2d,0x0,0x0                                                                                    
                                           			}                                                                             e:\iro_svn\opensprints\FW\user\user.c
                                           		}                                                                              e:\iro_svn\opensprints\FW\user\user.c
                                           	}                                                                               e:\iro_svn\opensprints\FW\user\user.c
0029f2   0e04     MOVLW     0x4            }                                                                                e:\iro_svn\opensprints\FW\user\user.c
0029f4   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0029f6   e202     BC        0x29fc                                                                                          
0029f8   6ae1     CLRF      0xe1,0x0                                                                                        
0029fa   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0029fc   6ee1     MOVWF     0xe1,0x0                                                                                        
0029fe   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002a00   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
002a02   ffd9                                                                                                               
002a04   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                                                                                                            e:\iro_svn\opensprints\FW\user\user.c
                                           /** EOF user.c ***************************************************************/  e:\iro_svn\opensprints\FW\user\user.c
                                           /*********************************************************************           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *             Microchip USB C18 Firmware -  CDC Version 1.0                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *********************************************************************           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * FileName:        cdc.c                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Dependencies:    See INCLUDES section below                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Processor:       PIC18                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Compiler:        C18 2.30.01+                                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Company:         Microchip Technology, Inc.                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Software License Agreement                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * The software supplied herewith by Microchip Technology Incorporated           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * (the “Company”) for its PICmicro® Microcontroller is intended and             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * supplied to you, the Company’s customer, for use solely and                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * exclusively on Microchip PICmicro Microcontroller products. The               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * software is owned by the Company and/or its supplier, and is                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * protected under applicable copyright laws. All rights are reserved.           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Any use in violation of the foregoing restrictions may subject the            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * user to criminal sanctions under applicable laws, as well as to               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * civil liability for the breach of the terms and conditions of this            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * license.                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Author               Date        Comment                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Rawin Rojvanit       11/19/04    Original. RS-232 Emulation Subset            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            ********************************************************************/           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** I N C L U D E S **********************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #include <p18cxxx.h>                                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #include "system\typedefs.h"                                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #include "system\usb\usb.h"                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #ifdef USB_USE_CDC                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** V A R I A B L E S ********************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #pragma udata                                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           byte cdc_rx_len;            // total rx length                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           byte cdc_trf_state;         // States are defined cdc.h                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           POINTER pCDCSrc;            // Dedicated source pointer                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           POINTER pCDCDst;            // Dedicated destination pointer                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           byte cdc_tx_len;            // total tx length                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           byte cdc_mem_type;          // _ROM, _RAM                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           LINE_CODING line_coding;    // Buffer to store line coding information           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           CONTROL_SIGNAL_BITMAP control_signal_bitmap;                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /*                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * SEND_ENCAPSULATED_COMMAND and GET_ENCAPSULATED_RESPONSE are required          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * requests according to the CDC specification.                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * However, it is not really being used here, therefore a dummy buffer is        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * used for conformance.                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            */                                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #define dummy_length    0x08                                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           byte dummy_encapsulated_cmd_response[dummy_length];                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** P R I V A T E  P R O T O T Y P E S ***************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** D E C L A R A T I O N S **************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #pragma code                                                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** C L A S S  S P E C I F I C  R E Q ****************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        void USBCheckCDCRequest(void)                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        This routine checks the setup data packet to see if it       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  knows how to handle it                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           void USBCheckCDCRequest(void)                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * If request recipient is not an interface then return                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003628   0104     MOVLB     0x4                if(SetupPkt.Recipient != RCPT_INTF) return;                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00362a   5120     MOVF      0x20,0x0,0x1                                                                                    
00362c   0b1f     ANDLW     0x1f                                                                                            
00362e   0801     SUBLW     0x1                                                                                             
003630   e001     BZ        0x3634                                                                                          
003632   d060     BRA       0x36f4                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * If request type is not class-specific then return                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003634   0104     MOVLB     0x4                if(SetupPkt.RequestType != CLASS) return;                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003636   5120     MOVF      0x20,0x0,0x1                                                                                    
003638   0b60     ANDLW     0x60                                                                                            
00363a   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
00363c   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
00363e   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003640   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003642   42e8     RRNCF     0xe8,0x1,0x0                                                                                    
003644   0801     SUBLW     0x1                                                                                             
003646   e001     BZ        0x364a                                                                                          
003648   d055     BRA       0x36f4                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Interface ID must match interface numbers associated with                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * CDC class, else return                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00364a   0104     MOVLB     0x4                if((SetupPkt.bIntfID != CDC_COMM_INTF_ID)&&                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00364c   5124     MOVF      0x24,0x0,0x1                                                                                    
00364e   e004     BZ        0x3658                (SetupPkt.bIntfID != CDC_DATA_INTF_ID)) return;                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003650   0104     MOVLB     0x4                                                                                             
003652   0524     DECF      0x24,0x0,0x1                                                                                    
003654   e001     BZ        0x3658                                                                                          
003656   d04e     BRA       0x36f4                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003658   0104     MOVLB     0x4                switch(SetupPkt.bRequest)                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00365a   5121     MOVF      0x21,0x0,0x1                                                                                    
00365c   0a23     XORLW     0x23                                                                                            
00365e   e048     BZ        0x36f0                                                                                          
003660   0a01     XORLW     0x1                                                                                             
003662   e040     BZ        0x36e4                                                                                          
003664   0a03     XORLW     0x3                                                                                             
003666   e030     BZ        0x36c8                                                                                          
003668   0a01     XORLW     0x1                                                                                             
00366a   e025     BZ        0x36b6                                                                                          
00366c   0a24     XORLW     0x24                                                                                            
00366e   e022     BZ        0x36b4                                                                                          
003670   0a07     XORLW     0x7                                                                                             
003672   e01f     BZ        0x36b2                                                                                          
003674   0a01     XORLW     0x1                                                                                             
003676   e01c     BZ        0x36b0                                                                                          
003678   0a03     XORLW     0x3                                                                                             
00367a   e011     BZ        0x369e                                                                                          
00367c   0a01     XORLW     0x1                                                                                             
00367e   e001     BZ        0x3682                                                                                          
003680   d038     BRA       0x36f2                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case SEND_ENCAPSULATED_COMMAND:                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003682   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003684   0e03     MOVLW     0x3                                                                                             
003686   6ff0     MOVWF     0xf0,0x1                                                                                        
003688   0101     MOVLB     0x1                        pSrc.bRam = (byte*)&dummy_encapsulated_cmd_response;                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00368a   0ed2     MOVLW     0xd2                                                                                            
00368c   6ff1     MOVWF     0xf1,0x1                                                                                        
00368e   0e01     MOVLW     0x1                                                                                             
003690   6ff2     MOVWF     0xf2,0x1                                                                                        
003692   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003694   93f8     BCF       0xf8,0x1,0x1                                                                                    
003696   0101     MOVLB     0x1                        LSB(wCount) = dummy_length;                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003698   0e08     MOVLW     0x8                                                                                             
00369a   6ff5     MOVWF     0xf5,0x1                                                                                        
00369c   d02b     BRA       0x36f4                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case GET_ENCAPSULATED_RESPONSE:                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00369e   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036a0   0e03     MOVLW     0x3                                                                                             
0036a2   6ff0     MOVWF     0xf0,0x1                                                                                        
                                                       // Populate dummy_encapsulated_cmd_response first.                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036a4   0101     MOVLB     0x1                        pDst.bRam = (byte*)&dummy_encapsulated_cmd_response;                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036a6   0ed2     MOVLW     0xd2                                                                                            
0036a8   6ff3     MOVWF     0xf3,0x1                                                                                        
0036aa   0e01     MOVLW     0x1                                                                                             
0036ac   6ff4     MOVWF     0xf4,0x1                                                                                        
0036ae   d022     BRA       0x36f4                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case SET_COMM_FEATURE:                  // Optional                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036b0   d021     BRA       0x36f4                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case GET_COMM_FEATURE:                  // Optional                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036b2   d020     BRA       0x36f4                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case CLEAR_COMM_FEATURE:                // Optional                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036b4   d01f     BRA       0x36f4                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case SET_LINE_CODING:                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036b6   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036b8   0e03     MOVLW     0x3                                                                                             
0036ba   6ff0     MOVWF     0xf0,0x1                                                                                        
0036bc   0101     MOVLB     0x1                        pDst.bRam = (byte*)&line_coding;    // Set destination               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036be   0eca     MOVLW     0xca                                                                                            
0036c0   6ff3     MOVWF     0xf3,0x1                                                                                        
0036c2   0e01     MOVLW     0x1                                                                                             
0036c4   6ff4     MOVWF     0xf4,0x1                                                                                        
0036c6   d016     BRA       0x36f4                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case GET_LINE_CODING:                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036c8   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036ca   0e03     MOVLW     0x3                                                                                             
0036cc   6ff0     MOVWF     0xf0,0x1                                                                                        
0036ce   0101     MOVLB     0x1                        pSrc.bRam = (byte*)&line_coding;    // Set source                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036d0   0eca     MOVLW     0xca                                                                                            
0036d2   6ff1     MOVWF     0xf1,0x1                                                                                        
0036d4   0e01     MOVLW     0x1                                                                                             
0036d6   6ff2     MOVWF     0xf2,0x1                                                                                        
0036d8   0101     MOVLB     0x1                        usb_stat.ctrl_trf_mem = _RAM;       // Set memory type               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036da   93f8     BCF       0xf8,0x1,0x1                                                                                    
0036dc   0101     MOVLB     0x1                        LSB(wCount) = LINE_CODING_LENGTH;   // Set data count                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036de   0e07     MOVLW     0x7                                                                                             
0036e0   6ff5     MOVWF     0xf5,0x1                                                                                        
0036e2   d008     BRA       0x36f4                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case SET_CONTROL_LINE_STATE:                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036e4   0101     MOVLB     0x1                        ctrl_trf_session_owner = MUID_CDC;                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036e6   0e03     MOVLW     0x3                                                                                             
0036e8   6ff0     MOVWF     0xf0,0x1                                                                                        
0036ea   c422     MOVFF     0x422,0x1d1                control_signal_bitmap._byte = LSB(SetupPkt.W_Value);                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036ec   f1d1                                                                                                               
0036ee   d002     BRA       0x36f4                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   case SEND_BREAK:                        // Optional                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036f0   d001     BRA       0x36f4                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   default:                                                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036f2   d000     BRA       0x36f4                     break;                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               }//end switch(SetupPkt.bRequest)                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036f4   0012     RETURN    0x0            }//end USBCheckCDCRequest                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** U S E R  A P I ***********************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        void CDCInitEP(void)                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        CDCInitEP initializes CDC endpoints, buffer descriptors,     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  internal state-machine, and variables.                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  It should be called after the USB host has sent out a        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  SET_CONFIGURATION request.                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  See USBStdSetCfgHandler() in usb9.c for examples.            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           void CDCInitEP(void)                                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               //Abstract line coding information                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036f6   0101     MOVLB     0x1                line_coding.dwDTERate._dword = 115200;      // baud rate                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0036f8   6bca     CLRF      0xca,0x1                                                                                        
0036fa   0ec2     MOVLW     0xc2                                                                                            
0036fc   6fcb     MOVWF     0xcb,0x1                                                                                        
0036fe   0e01     MOVLW     0x1                                                                                             
003700   6fcc     MOVWF     0xcc,0x1                                                                                        
003702   6bcd     CLRF      0xcd,0x1                                                                                        
003704   0101     MOVLB     0x1                line_coding.bCharFormat = 0x00;             // 1 stop bit                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003706   6bce     CLRF      0xce,0x1                                                                                        
003708   0101     MOVLB     0x1                line_coding.bParityType = 0x00;             // None                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00370a   6bcf     CLRF      0xcf,0x1                                                                                        
00370c   0101     MOVLB     0x1                line_coding.bDataBits = 0x08;               // 5,6,7,8, or 16                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00370e   0e08     MOVLW     0x8                                                                                             
003710   6fd0     MOVWF     0xd0,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003712   0101     MOVLB     0x1                cdc_trf_state = CDC_TX_READY;                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003714   6bc3     CLRF      0xc3,0x1                                                                                        
003716   0101     MOVLB     0x1                cdc_rx_len = 0;                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003718   6bc2     CLRF      0xc2,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00371a   0e1a     MOVLW     0x1a               CDC_COMM_UEP = EP_IN|HSHK_EN;               // Enable 1 Comm pipe            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00371c   6e72     MOVWF     0x72,0x0                                                                                        
00371e   0e1e     MOVLW     0x1e               CDC_DATA_UEP = EP_OUT_IN|HSHK_EN;           // Enable 2 data pipes           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003720   6e73     MOVWF     0x73,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Do not have to init Cnt of IN pipes here.                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Reason:  Number of bytes to send to the host                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          varies from one transaction to                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          another. Cnt should equal the exact                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          number of bytes to transmit for                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          a given IN transaction.                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          This number of bytes will only                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          be known right before the data is                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *          sent.                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003722   0104     MOVLB     0x4                CDC_INT_BD_IN.ADR = (byte*)&cdc_notice;     // Set buffer address            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003724   0e00     MOVLW     0x0                                                                                             
003726   6f16     MOVWF     0x16,0x1                                                                                        
003728   0e05     MOVLW     0x5                                                                                             
00372a   6f17     MOVWF     0x17,0x1                                                                                        
00372c   0104     MOVLB     0x4                CDC_INT_BD_IN.Stat._byte = _UCPU|_DAT1;     // Set status                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00372e   0e40     MOVLW     0x40                                                                                            
003730   6f14     MOVWF     0x14,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003732   0104     MOVLB     0x4                CDC_BULK_BD_OUT.Cnt = sizeof(cdc_data_rx);  // Set buffer size               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003734   0e40     MOVLW     0x40                                                                                            
003736   6f19     MOVWF     0x19,0x1                                                                                        
003738   0104     MOVLB     0x4                CDC_BULK_BD_OUT.ADR = (byte*)&cdc_data_rx;  // Set buffer address            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00373a   0e08     MOVLW     0x8                                                                                             
00373c   6f1a     MOVWF     0x1a,0x1                                                                                        
00373e   0e05     MOVLW     0x5                                                                                             
003740   6f1b     MOVWF     0x1b,0x1                                                                                        
003742   0104     MOVLB     0x4                CDC_BULK_BD_OUT.Stat._byte = _USIE|_DAT0|_DTSEN;// Set status                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003744   0e88     MOVLW     0x88                                                                                            
003746   6f18     MOVWF     0x18,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003748   0104     MOVLB     0x4                CDC_BULK_BD_IN.ADR = (byte*)&cdc_data_tx;   // Set buffer size               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00374a   0e48     MOVLW     0x48                                                                                            
00374c   6f1e     MOVWF     0x1e,0x1                                                                                        
00374e   0e05     MOVLW     0x5                                                                                             
003750   6f1f     MOVWF     0x1f,0x1                                                                                        
003752   0104     MOVLB     0x4                CDC_BULK_BD_IN.Stat._byte = _UCPU|_DAT1;    // Set buffer address            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003754   0e40     MOVLW     0x40                                                                                            
003756   6f1c     MOVWF     0x1c,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003758   0012     RETURN    0x0            }//end CDCInitEP                                                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        byte getsUSBUSART(char *buffer,                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                    byte len)                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    Value of input argument 'len' should be smaller than the     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  maximum endpoint size responsible for receiving bulk         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  data from USB host for CDC class.                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  Input argument 'buffer' should point to a buffer area that   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  is bigger or equal to the size specified by 'len'.           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           buffer  : Pointer to where received bytes are to be stored   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  len     : The number of bytes expected.                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          The number of bytes copied to buffer.                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    Publicly accessible variable cdc_rx_len is updated with      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  the number of bytes copied to buffer.                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  Once getsUSBUSART is called, subsequent retrieval of         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  cdc_rx_len can be done by calling macro mCDCGetRxLength().   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        getsUSBUSART copies a string of bytes received through       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  USB CDC Bulk OUT endpoint to a user's specified location.    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  It is a non-blocking function. It does not wait              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  for data if there is no data available. Instead it returns   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  '0' to notify the caller that there is no data available.    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            If the actual number of bytes received is larger than the    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  number of bytes expected (len), only the expected number     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  of bytes specified will be copied to buffer.                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  If the actual number of bytes received is smaller than the   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  number of bytes expected (len), only the actual number       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  of bytes received will be copied to buffer.                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00375a   cfd9     MOVFF     0xfd9,0xfe6    byte getsUSBUSART(unsigned char *buffer, byte len)                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00375c   ffe6                                                                                                               
00375e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003760   ffd9                                                                                                               
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003762   0101     MOVLB     0x1                cdc_rx_len = 0;                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003764   6bc2     CLRF      0xc2,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003766   0104     MOVLB     0x4                if(!mCDCUsartRxIsBusy())                                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003768   bf18     BTFSC     0x18,0x7,0x1                                                                                    
00376a   d039     BRA       0x37de                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Adjust the expected number of bytes to equal                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * the actual number of bytes received.                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00376c   0efc     MOVLW     0xfc                   if(len > CDC_BULK_BD_OUT.Cnt)                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00376e   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003770   f02a                                                                                                               
003772   0104     MOVLB     0x4                                                                                             
003774   5119     MOVF      0x19,0x0,0x1                                                                                    
003776   80d8     BSF       0xd8,0x0,0x0                                                                                    
003778   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
00377a   e203     BC        0x3782                                                                                          
00377c   0efc     MOVLW     0xfc                       len = CDC_BULK_BD_OUT.Cnt;                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00377e   c419     MOVFF     0x419,0xfdb                                                                                     
003780   ffdb                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Copy data from dual-ram buffer to user's buffer                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003782   0101     MOVLB     0x1                    for(cdc_rx_len = 0; cdc_rx_len < len; cdc_rx_len++)                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003784   6bc2     CLRF      0xc2,0x1                                                                                        
003786   0efc     MOVLW     0xfc                                                                                            
003788   50db     MOVF      0xdb,0x0,0x0                                                                                    
00378a   0101     MOVLB     0x1                                                                                             
00378c   5dc2     SUBWF     0xc2,0x0,0x1                                                                                    
00378e   e21c     BC        0x37c8                                                                                          
0037c2   0101     MOVLB     0x1                                                                                             
0037c4   2bc2     INCF      0xc2,0x1,0x1                                                                                    
0037c6   d7df     BRA       0x3786                                                                                          
003790   0101     MOVLB     0x1                        buffer[cdc_rx_len] = cdc_data_rx[cdc_rx_len];                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003792   51c2     MOVF      0xc2,0x0,0x1                                                                                    
003794   6aea     CLRF      0xea,0x0                                                                                        
003796   0f08     ADDLW     0x8                                                                                             
003798   6ee9     MOVWF     0xe9,0x0                                                                                        
00379a   0e05     MOVLW     0x5                                                                                             
00379c   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
00379e   50ef     MOVF      0xef,0x0,0x0                                                                                    
0037a0   6ee6     MOVWF     0xe6,0x0                                                                                        
0037a2   0101     MOVLB     0x1                                                                                             
0037a4   51c2     MOVF      0xc2,0x0,0x1                                                                                    
0037a6   6ee7     MOVWF     0xe7,0x0                                                                                        
0037a8   0efd     MOVLW     0xfd                                                                                            
0037aa   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0037ac   ffe9                                                                                                               
0037ae   0efe     MOVLW     0xfe                                                                                            
0037b0   cfdb     MOVFF     0xfdb,0xfea                                                                                     
0037b2   ffea                                                                                                               
0037b4   50e7     MOVF      0xe7,0x0,0x0                                                                                    
0037b6   26e9     ADDWF     0xe9,0x1,0x0                                                                                    
0037b8   0e00     MOVLW     0x0                                                                                             
0037ba   22ea     ADDWFC    0xea,0x1,0x0                                                                                    
0037bc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0037be   50e7     MOVF      0xe7,0x0,0x0                                                                                    
0037c0   6eef     MOVWF     0xef,0x0                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Prepare dual-ram buffer for next OUT transaction                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037c8   0104     MOVLB     0x4                    CDC_BULK_BD_OUT.Cnt = sizeof(cdc_data_rx);                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037ca   0e40     MOVLW     0x40                                                                                            
0037cc   6f19     MOVWF     0x19,0x1                                                                                        
0037ce   0e40     MOVLW     0x40                   mUSBBufferReady(CDC_BULK_BD_OUT);                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037d0   0104     MOVLB     0x4                                                                                             
0037d2   1718     ANDWF     0x18,0x1,0x1                                                                                    
0037d4   0104     MOVLB     0x4                                                                                             
0037d6   7d18     BTG       0x18,0x6,0x1                                                                                    
0037d8   0e88     MOVLW     0x88                                                                                            
0037da   0104     MOVLB     0x4                                                                                             
0037dc   1318     IORWF     0x18,0x1,0x1                                                                                    
                                               }//end if                                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037de   0101     MOVLB     0x1                return cdc_rx_len;                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037e0   51c2     MOVF      0xc2,0x0,0x1                                                                                    
0037e2   d000     BRA       0x37e4                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037e4   52e5     MOVF      0xe5,0x1,0x0   }//end getsUSBUSART                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037e6   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0037e8   ffd9                                                                                                               
0037ea   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        void putsUSBUSART(char *data)                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    cdc_trf_state must be in the CDC_TX_READY state.             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  The string of characters pointed to by 'data' must equal     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  to or smaller than 255 bytes.                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           data    : Pointer to a null-terminated string of data.       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                            If a null character is not found, 255 bytes        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                            of data will be transferred to the host.           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        putsUSBUSART writes a string of data to the USB including    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  the null character. Use this version, 'puts', to transfer    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  data located in data memory.                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            The transfer mechanism for device-to-host(put) is more       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  flexible than host-to-device(get). It can handle             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  a string of data larger than the maximum size of bulk IN     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  endpoint. A state machine is used to transfer a long         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  string of data over multiple USB transactions.               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  See CDCTxService() for more details.                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037ec   cfd9     MOVFF     0xfd9,0xfe6    void putsUSBUSART(unsigned char *data)                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037ee   ffe6                                                                                                               
0037f0   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0037f2   ffd9                                                                                                               
0037f4   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               byte len;                                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * User should have checked that cdc_trf_state is in CDC_TX_READY state      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * before calling this function.                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * As a safety precaution, this fuction checks the state one more time       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * to make sure it does not override any pending transactions.               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Currently it just quits the routine without reporting any errors back     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * to the user.                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Bottomline: User MUST make sure that mUSBUSARTIsTxTrfReady()==1           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *             before calling this function!                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Example:                                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * if(mUSBUSARTIsTxTrfReady())                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * IMPORTANT: Never use the following blocking while loop to wait:           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * while(!mUSBUSARTIsTxTrfReady())                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * The whole firmware framework is written based on cooperative              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * multi-tasking and a blocking code is not acceptable.                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Use a state machine instead.                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037f6   0101     MOVLB     0x1                if(cdc_trf_state != CDC_TX_READY) return;                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037f8   51c3     MOVF      0xc3,0x0,0x1                                                                                    
0037fa   e001     BZ        0x37fe                                                                                          
0037fc   d031     BRA       0x3860                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * While loop counts the number of bytes to send including the               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * null character.                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0037fe   6adf     CLRF      0xdf,0x0           len = 0;                                                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               do                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003800   2adf     INCF      0xdf,0x1,0x0           len++;                                                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003802   50df     MOVF      0xdf,0x0,0x0           if(len == 256) break;       // Break loop once max len is reached.       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003804   6e2a     MOVWF     0x2a,0x0                                                                                        
003806   6a2b     CLRF      0x2b,0x0                                                                                        
003808   502a     MOVF      0x2a,0x0,0x0                                                                                    
00380a   e102     BNZ       0x3810                                                                                          
00380c   0e01     MOVLW     0x1                                                                                             
00380e   182b     XORWF     0x2b,0x0,0x0                                                                                    
003810   e101     BNZ       0x3814                                                                                          
003812   d00b     BRA       0x382a                                                                                          
003814   0efd     MOVLW     0xfd               }while(*data++);                                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003816   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
003818   ffe9                                                                                                               
00381a   2adb     INCF      0xdb,0x1,0x0                                                                                    
00381c   0efe     MOVLW     0xfe                                                                                            
00381e   cfdb     MOVFF     0xfdb,0xfea                                                                                     
003820   ffea                                                                                                               
003822   e301     BNC       0x3826                                                                                          
003824   2adb     INCF      0xdb,0x1,0x0                                                                                    
003826   50ef     MOVF      0xef,0x0,0x0                                                                                    
003828   e1eb     BNZ       0x3800                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Re-adjust pointer to its initial location                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00382a   50df     MOVF      0xdf,0x0,0x0       data-=len;                                                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00382c   6e2a     MOVWF     0x2a,0x0                                                                                        
00382e   6a2b     CLRF      0x2b,0x0                                                                                        
003830   50d9     MOVF      0xd9,0x0,0x0                                                                                    
003832   0ffd     ADDLW     0xfd                                                                                            
003834   6ee9     MOVWF     0xe9,0x0                                                                                        
003836   0eff     MOVLW     0xff                                                                                            
003838   20da     ADDWFC    0xda,0x0,0x0                                                                                    
00383a   6eea     MOVWF     0xea,0x0                                                                                        
00383c   502a     MOVF      0x2a,0x0,0x0                                                                                    
00383e   5eee     SUBWF     0xee,0x1,0x0                                                                                    
003840   502b     MOVF      0x2b,0x0,0x0                                                                                    
003842   5aed     SUBWFB    0xed,0x1,0x0                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           	// BPS - 05/04/2006 I don't want the NULL at the end.                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003844   06df     DECF      0xdf,0x1,0x0   	len--;                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Second piece of information (length of data to send) is ready.            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Call mUSBUSARTTxRam to setup the transfer.                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * The actual transfer process will be handled by CDCTxService(),            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * which should be called once per Main Program loop.                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003846   0efd     MOVLW     0xfd               mUSBUSARTTxRam((byte*)data,len);     // See cdc.h                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003848   cfdb     MOVFF     0xfdb,0x1c4                                                                                     
00384a   f1c4                                                                                                               
00384c   0efe     MOVLW     0xfe                                                                                            
00384e   cfdb     MOVFF     0xfdb,0x1c5                                                                                     
003850   f1c5                                                                                                               
003852   cfdf     MOVFF     0xfdf,0x1c8                                                                                     
003854   f1c8                                                                                                               
003856   0101     MOVLB     0x1                                                                                             
003858   6bc9     CLRF      0xc9,0x1                                                                                        
00385a   0101     MOVLB     0x1                                                                                             
00385c   0e01     MOVLW     0x1                                                                                             
00385e   6fc3     MOVWF     0xc3,0x1                                                                                        
003860   52e5     MOVF      0xe5,0x1,0x0   }//end putsUSBUSART                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003862   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003864   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
003866   ffd9                                                                                                               
003868   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        void putrsUSBUSART(const rom char *data)                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    cdc_trf_state must be in the CDC_TX_READY state.             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  The string of characters pointed to by 'data' must equal     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  to or smaller than 255 bytes.                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           data    : Pointer to a null-terminated string of data.       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                            If a null character is not found, 255 bytes        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                            of data will be transferred to the host.           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        putrsUSBUSART writes a string of data to the USB including   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  the null character. Use this version, 'putrs', to transfer   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  data literals and data located in program memory.            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            The transfer mechanism for device-to-host(put) is more       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  flexible than host-to-device(get). It can handle             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  a string of data larger than the maximum size of bulk IN     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  endpoint. A state machine is used to transfer a long         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  string of data over multiple USB transactions.               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  See CDCTxService() for more details.                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00386a   cfd9     MOVFF     0xfd9,0xfe6    void putrsUSBUSART(const rom unsigned char *data)                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00386c   ffe6                                                                                                               
00386e   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003870   ffd9                                                                                                               
003872   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               byte len;                                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * User should have checked that cdc_trf_state is in CDC_TX_READY state      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * before calling this function.                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * As a safety precaution, this fuction checks the state one more time       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * to make sure it does not override any pending transactions.               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Currently it just quits the routine without reporting any errors back     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * to the user.                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Bottomline: User MUST make sure that mUSBUSARTIsTxTrfReady()              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *             before calling this function!                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Example:                                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * if(mUSBUSARTIsTxTrfReady())                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * IMPORTANT: Never use the following blocking while loop to wait:           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * while(cdc_trf_state != CDC_TX_READY)                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *     putsUSBUSART(pData);                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * The whole firmware framework is written based on cooperative              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * multi-tasking and a blocking code is not acceptable.                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Use a state machine instead.                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003874   0101     MOVLB     0x1                if(cdc_trf_state != CDC_TX_READY) return;                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003876   51c3     MOVF      0xc3,0x0,0x1                                                                                    
003878   e001     BZ        0x387c                                                                                          
00387a   d033     BRA       0x38e2                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * While loop counts the number of bytes to send including the               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * null character.                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00387c   6adf     CLRF      0xdf,0x0           len = 0;                                                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               do                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00387e   2adf     INCF      0xdf,0x1,0x0           len++;                                                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003880   50df     MOVF      0xdf,0x0,0x0           if(len == 255) break;       // Break loop once max len is reached.       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003882   6e2a     MOVWF     0x2a,0x0                                                                                        
003884   6a2b     CLRF      0x2b,0x0                                                                                        
003886   0eff     MOVLW     0xff                                                                                            
003888   182a     XORWF     0x2a,0x0,0x0                                                                                    
00388a   e101     BNZ       0x388e                                                                                          
00388c   502b     MOVF      0x2b,0x0,0x0                                                                                    
00388e   e101     BNZ       0x3892                                                                                          
003890   d00c     BRA       0x38aa                                                                                          
003892   0efd     MOVLW     0xfd               }while(*data++);                                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003894   cfdb     MOVFF     0xfdb,0xff6                                                                                     
003896   fff6                                                                                                               
003898   2adb     INCF      0xdb,0x1,0x0                                                                                    
00389a   0efe     MOVLW     0xfe                                                                                            
00389c   cfdb     MOVFF     0xfdb,0xff7                                                                                     
00389e   fff7                                                                                                               
0038a0   e301     BNC       0x38a4                                                                                          
0038a2   2adb     INCF      0xdb,0x1,0x0                                                                                    
0038a4   0008     TBLRD                                                                                                     
0038a6   50f5     MOVF      0xf5,0x0,0x0                                                                                    
0038a8   e1ea     BNZ       0x387e                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Re-adjust pointer to its initial location                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038aa   50df     MOVF      0xdf,0x0,0x0       data-=len;                                                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038ac   6e2a     MOVWF     0x2a,0x0                                                                                        
0038ae   6a2b     CLRF      0x2b,0x0                                                                                        
0038b0   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0038b2   0ffd     ADDLW     0xfd                                                                                            
0038b4   6ee9     MOVWF     0xe9,0x0                                                                                        
0038b6   0eff     MOVLW     0xff                                                                                            
0038b8   20da     ADDWFC    0xda,0x0,0x0                                                                                    
0038ba   6eea     MOVWF     0xea,0x0                                                                                        
0038bc   502a     MOVF      0x2a,0x0,0x0                                                                                    
0038be   5eee     SUBWF     0xee,0x1,0x0                                                                                    
0038c0   502b     MOVF      0x2b,0x0,0x0                                                                                    
0038c2   5aed     SUBWFB    0xed,0x1,0x0                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           	// BPS - 05/04/2006 I don't want the NULL at the end.                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038c4   06df     DECF      0xdf,0x1,0x0   	len--;                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Second piece of information (length of data to send) is ready.            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Call mUSBUSARTTxRom to setup the transfer.                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * The actual transfer process will be handled by CDCTxService(),            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * which should be called once per Main Program loop.                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                *                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * (BPS 5/16/2006) Don't add the zero byte at the end. Send len-1            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * bytes intead of len bytes.                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038c6   0efd     MOVLW     0xfd               mUSBUSARTTxRom((rom byte*)data,len); // See cdc.h                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038c8   cfdb     MOVFF     0xfdb,0x1c4                                                                                     
0038ca   f1c4                                                                                                               
0038cc   0efe     MOVLW     0xfe                                                                                            
0038ce   cfdb     MOVFF     0xfdb,0x1c5                                                                                     
0038d0   f1c5                                                                                                               
0038d2   cfdf     MOVFF     0xfdf,0x1c8                                                                                     
0038d4   f1c8                                                                                                               
0038d6   0101     MOVLB     0x1                                                                                             
0038d8   0e01     MOVLW     0x1                                                                                             
0038da   6fc9     MOVWF     0xc9,0x1                                                                                        
0038dc   0101     MOVLB     0x1                                                                                             
0038de   0e01     MOVLW     0x1                                                                                             
0038e0   6fc3     MOVWF     0xc3,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038e2   52e5     MOVF      0xe5,0x1,0x0   }//end putrsUSBUSART                                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038e4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0038e6   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0038e8   ffd9                                                                                                               
0038ea   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /******************************************************************************  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Function:        void CDCTxService(void)                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * PreCondition:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Input:           None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Output:          None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Side Effects:    None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Overview:        CDCTxService handles device-to-host transaction(s).          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                  This function should be called once per Main Program loop.   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *                                                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            * Note:            None                                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                            *****************************************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038ec   cfd9     MOVFF     0xfd9,0xfe6    void CDCTxService(void)                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038ee   ffe6                                                                                                               
0038f0   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
0038f2   ffd9                                                                                                               
0038f4   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               byte byte_to_send;                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038f6   0104     MOVLB     0x4                if(mCDCUsartTxIsBusy()) return;                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038f8   bf1c     BTFSC     0x1c,0x7,0x1                                                                                    
0038fa   d07d     BRA       0x39f6                                                                                          
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Completing stage is necessary while [ mCDCUSartTxIsBusy()==1 ].           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * By having this stage, user can always check cdc_trf_state,                e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * and not having to call mCDCUsartTxIsBusy() directly.                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038fc   0e03     MOVLW     0x3                if(cdc_trf_state == CDC_TX_COMPLETING)                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0038fe   0101     MOVLB     0x1                                                                                             
003900   5dc3     SUBWF     0xc3,0x0,0x1                                                                                    
003902   e102     BNZ       0x3908                                                                                          
003904   0101     MOVLB     0x1                    cdc_trf_state = CDC_TX_READY;                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003906   6bc3     CLRF      0xc3,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * If CDC_TX_READY state, nothing to do, just return.                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003908   0101     MOVLB     0x1                if(cdc_trf_state == CDC_TX_READY) return;                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00390a   51c3     MOVF      0xc3,0x0,0x1                                                                                    
00390c   e101     BNZ       0x3910                                                                                          
00390e   d073     BRA       0x39f6                                                                                          
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * If CDC_TX_BUSY_ZLP state, send zero length packet                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003910   0e02     MOVLW     0x2                if(cdc_trf_state == CDC_TX_BUSY_ZLP)                                         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003912   0101     MOVLB     0x1                                                                                             
003914   5dc3     SUBWF     0xc3,0x0,0x1                                                                                    
003916   e106     BNZ       0x3924                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003918   0104     MOVLB     0x4                    CDC_BULK_BD_IN.Cnt = 0;                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00391a   6b1d     CLRF      0x1d,0x1                                                                                        
00391c   0101     MOVLB     0x1                    cdc_trf_state = CDC_TX_COMPLETING;                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00391e   0e03     MOVLW     0x3                                                                                             
003920   6fc3     MOVWF     0xc3,0x1                                                                                        
                                               }                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003922   d061     BRA       0x39e6             else if(cdc_trf_state == CDC_TX_BUSY)                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003924   0101     MOVLB     0x1                                                                                             
003926   05c3     DECF      0xc3,0x0,0x1                                                                                    
003928   e15e     BNZ       0x39e6                                                                                          
                                               {                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * First, have to figure out how many byte of data to send.              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00392a   0e40     MOVLW     0x40               	if(cdc_tx_len > sizeof(cdc_data_tx))                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00392c   6e2a     MOVWF     0x2a,0x0                                                                                        
00392e   6a2b     CLRF      0x2b,0x0                                                                                        
003930   0101     MOVLB     0x1                                                                                             
003932   51c8     MOVF      0xc8,0x0,0x1                                                                                    
003934   5c2a     SUBWF     0x2a,0x0,0x0                                                                                    
003936   0e00     MOVLW     0x0                                                                                             
003938   582b     SUBWFB    0x2b,0x0,0x0                                                                                    
00393a   e203     BC        0x3942                                                                                          
00393c   0e40     MOVLW     0x40               	    byte_to_send = sizeof(cdc_data_tx);                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00393e   6edf     MOVWF     0xdf,0x0                                                                                        
003940   d002     BRA       0x3946             	else                                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003942   c1c8     MOVFF     0x1c8,0xfdf        	    byte_to_send = cdc_tx_len;                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003944   ffdf                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Next, load the number of bytes to send to Cnt in buffer descriptor    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003946   cfdf     MOVFF     0xfdf,0x41d            CDC_BULK_BD_IN.Cnt = byte_to_send;                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003948   f41d                                                                                                               
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Subtract the number of bytes just about to be sent from the total.    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00394a   50df     MOVF      0xdf,0x0,0x0       	cdc_tx_len = cdc_tx_len - byte_to_send;                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00394c   0101     MOVLB     0x1                                                                                             
00394e   5dc8     SUBWF     0xc8,0x0,0x1                                                                                    
003950   0101     MOVLB     0x1                                                                                             
003952   6fc8     MOVWF     0xc8,0x1                                                                                        
                                               	                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003954   0101     MOVLB     0x1                    pCDCDst.bRam = (byte*)&cdc_data_tx; // Set destination pointer           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003956   0e48     MOVLW     0x48                                                                                            
003958   6fc6     MOVWF     0xc6,0x1                                                                                        
00395a   0e05     MOVLW     0x5                                                                                             
00395c   6fc7     MOVWF     0xc7,0x1                                                                                        
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00395e   0101     MOVLB     0x1                    if(cdc_mem_type == _ROM)            // Determine type of memory source   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003960   05c9     DECF      0xc9,0x0,0x1                                                                                    
003962   e118     BNZ       0x3994                                                                                          
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003964   50df     MOVF      0xdf,0x0,0x0               while(byte_to_send)                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003966   e015     BZ        0x3992                                                                                          
003990   d7e9     BRA       0x3964                                                                                          
                                                       {                                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003968   c1c4     MOVFF     0x1c4,0xff6                    *pCDCDst.bRam = *pCDCSrc.bRom;                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00396a   fff6                                                                                                               
00396c   c1c5     MOVFF     0x1c5,0xff7                                                                                     
00396e   fff7                                                                                                               
003970   0008     TBLRD                                                                                                     
003972   50f5     MOVF      0xf5,0x0,0x0                                                                                    
003974   c1c6     MOVFF     0x1c6,0xfe9                                                                                     
003976   ffe9                                                                                                               
003978   c1c7     MOVFF     0x1c7,0xfea                                                                                     
00397a   ffea                                                                                                               
00397c   6eef     MOVWF     0xef,0x0                                                                                        
00397e   0101     MOVLB     0x1                            pCDCDst.bRam++;                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003980   2bc6     INCF      0xc6,0x1,0x1                                                                                    
003982   0e00     MOVLW     0x0                                                                                             
003984   23c7     ADDWFC    0xc7,0x1,0x1                                                                                    
003986   0101     MOVLB     0x1                            pCDCSrc.bRom++;                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003988   2bc4     INCF      0xc4,0x1,0x1                                                                                    
00398a   0e00     MOVLW     0x0                                                                                             
00398c   23c5     ADDWFC    0xc5,0x1,0x1                                                                                    
00398e   06df     DECF      0xdf,0x1,0x0                   byte_to_send--;                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                       }//end while(byte_to_send)                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   }                                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003992   d016     BRA       0x39c0                 else // _RAM                                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003994   50df     MOVF      0xdf,0x0,0x0               while(byte_to_send)                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003996   e014     BZ        0x39c0                                                                                          
0039be   d7ea     BRA       0x3994                                                                                          
                                                       {                                                                    e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
003998   c1c4     MOVFF     0x1c4,0xfe9                    *pCDCDst.bRam = *pCDCSrc.bRam;                                   e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
00399a   ffe9                                                                                                               
00399c   c1c5     MOVFF     0x1c5,0xfea                                                                                     
00399e   ffea                                                                                                               
0039a0   50ef     MOVF      0xef,0x0,0x0                                                                                    
0039a2   c1c6     MOVFF     0x1c6,0xfe9                                                                                     
0039a4   ffe9                                                                                                               
0039a6   c1c7     MOVFF     0x1c7,0xfea                                                                                     
0039a8   ffea                                                                                                               
0039aa   6eef     MOVWF     0xef,0x0                                                                                        
0039ac   0101     MOVLB     0x1                            pCDCDst.bRam++;                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039ae   2bc6     INCF      0xc6,0x1,0x1                                                                                    
0039b0   0e00     MOVLW     0x0                                                                                             
0039b2   23c7     ADDWFC    0xc7,0x1,0x1                                                                                    
0039b4   0101     MOVLB     0x1                            pCDCSrc.bRam++;                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039b6   2bc4     INCF      0xc4,0x1,0x1                                                                                    
0039b8   0e00     MOVLW     0x0                                                                                             
0039ba   23c5     ADDWFC    0xc5,0x1,0x1                                                                                    
0039bc   06df     DECF      0xdf,0x1,0x0                   byte_to_send--;                                                  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                       }//end while(byte_to_send._word)                                     e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   }//end if(cdc_mem_type...)                                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   /*                                                                       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * Lastly, determine if a zero length packet state is necessary.         e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    * See explanation in USB Specification 2.0: Section 5.8.3               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                    */                                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039c0   0101     MOVLB     0x1                    if(cdc_tx_len == 0)                                                      e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039c2   51c8     MOVF      0xc8,0x0,0x1                                                                                    
0039c4   e110     BNZ       0x39e6                                                                                          
                                                   {                                                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039c6   0104     MOVLB     0x4                        if(CDC_BULK_BD_IN.Cnt == sizeof(cdc_data_tx))                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039c8   511d     MOVF      0x1d,0x0,0x1                                                                                    
0039ca   6e2a     MOVWF     0x2a,0x0                                                                                        
0039cc   6a2b     CLRF      0x2b,0x0                                                                                        
0039ce   0e40     MOVLW     0x40                                                                                            
0039d0   182a     XORWF     0x2a,0x0,0x0                                                                                    
0039d2   e101     BNZ       0x39d6                                                                                          
0039d4   502b     MOVF      0x2b,0x0,0x0                                                                                    
0039d6   e104     BNZ       0x39e0                                                                                          
0039d8   0101     MOVLB     0x1                            cdc_trf_state = CDC_TX_BUSY_ZLP;                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039da   0e02     MOVLW     0x2                                                                                             
0039dc   6fc3     MOVWF     0xc3,0x1                                                                                        
0039de   d003     BRA       0x39e6                     else                                                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039e0   0101     MOVLB     0x1                            cdc_trf_state = CDC_TX_COMPLETING;                               e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039e2   0e03     MOVLW     0x3                                                                                             
0039e4   6fc3     MOVWF     0xc3,0x1                                                                                        
                                                   }//end if(cdc_tx_len...)                                                 e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               }//end if(cdc_tx_sate == CDC_TX_BUSY)                                        e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                               /*                                                                           e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                * Both CDC_TX_BUSY and CDC_TX_BUSY_ZLP states use the following macro       e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                */                                                                          e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039e6   0e40     MOVLW     0x40               mUSBBufferReady(CDC_BULK_BD_IN);                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039e8   0104     MOVLB     0x4                                                                                             
0039ea   171c     ANDWF     0x1c,0x1,0x1                                                                                    
0039ec   0104     MOVLB     0x4                                                                                             
0039ee   7d1c     BTG       0x1c,0x6,0x1                                                                                    
0039f0   0e88     MOVLW     0x88                                                                                            
0039f2   0104     MOVLB     0x4                                                                                             
0039f4   131c     IORWF     0x1c,0x1,0x1                                                                                    
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039f6   52e5     MOVF      0xe5,0x1,0x0   }//end CDCTxService                                                              e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
0039f8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0039fa   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0039fc   ffd9                                                                                                               
0039fe   0012     RETURN    0x0                                                                                             
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           #endif //USB_USE_CDC                                                             e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                                                                                            e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                           /** EOF cdc.c ****************************************************************/  e:\iro_svn\opensprints\FW\system\usb\class\cdc\cdc.c
                                                   LIST P=18F2455                                                           C:\MCC18\SRC\TRADIT~1\PROC\p18f2455.asm
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\PROC\p18f2455.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\PROC\p18f2455.asm
                                           #include "p18cxxx.inc"                                                           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                   LIST                                                                     C:\MCC18\MPASM\p18cxxx.inc
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\p18cxxx.inc
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\p18cxxx.inc
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\p18cxxx.inc
                                             ENDIF                                                                          C:\MCC18\MPASM\p18cxxx.inc
                                                                                                                            C:\MCC18\MPASM\p18cxxx.inc
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;/********************************************************************           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Function Name: Delay10TCYx                                      *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Return Value:  void                                             *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Parameters:    unit:                                            *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Description:   This routine delays for multiples of 10          *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  instruction cycles that is specified in unit.    *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*   Special Note:  This routine provides multiples of 10 Tcy.       *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  A value of 1 to 255 provides 10 to 2550   Tcy    *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  delay.  A value of 0 will provide a delay of     *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;*                  2560 Tcy.                                        *           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           ;********************************************************************/           C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           D10TCYXCODE CODE                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           Delay10TCYx                                                                      C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
0048ec   0eff     MOVLW     0xff               movlw   0xff                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
0048ee   50e3     MOVF      0xe3,0x0,0x0       movf    PLUSW1,0                                                             C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
0048f0   4ee8     DCFSNZ    0xe8,0x1,0x0       dcfsnz  WREG,1                                                               C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
0048f2   0012     RETURN    0x0                return                                                                       C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           D10x                                                                             C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
0048f4   0000     NOP                          nop                                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
0048f6   d000     BRA       0x48f8             bra     $+2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
0048f8   d000     BRA       0x48fa             bra     $+2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
0048fa   d000     BRA       0x48fc             bra     $+2                                                                  C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           D10_1                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
0048fc   2ee8     DECFSZ    0xe8,0x1,0x0       decfsz  WREG,1                                                               C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
0048fe   d7fa     BRA       0x48f4             bra     D10x                                                                 C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
004900   0012     RETURN    0x0                return                                                                       C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                               GLOBAL  Delay10TCYx                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                               END                                                                          C:\MCC18\SRC\TRADIT~1\DELAYS\d10tcyx.asm
                                           /*** Unsigned Integer Division: 16-bit by 16-bit                                 C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                            ***                                                                             C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                            *** Optimized: Dec. 21, 2000                                                    C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                            ***        by: Daniel R. Madill, Quanser Consulting Inc.                        C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                            ***       for: Saved (for the worst case) at least 5*16 = 80 instruction cycles C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                            ***            over the code supplied with MCC18 v1.00.12                       C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                            ***/                                                                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                           void FXD1616U (/*unsigned arg0, unsigned arg1*/)                                 C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                           {                                                                                C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                             // use INDF1 for the counter...                                                C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                                 _asm                                                                       C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                               // REM = 0                                                                   C:\MCC18\src\TRADIT~1\math\fxd1616u.c
00488c   6a1b     CLRF      0x1b,0x0           clrf __REMB0, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd1616u.c
00488e   6a1a     CLRF      0x1a,0x0           clrf __REMB1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                               // INDF1 = 16                                                                C:\MCC18\src\TRADIT~1\math\fxd1616u.c
004890   0e10     MOVLW     0x10               movlw 16                                                                     C:\MCC18\src\TRADIT~1\math\fxd1616u.c
004892   6ee7     MOVWF     0xe7,0x0           movwf INDF1, 0                                                               C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                               // Clear the carry                                                           C:\MCC18\src\TRADIT~1\math\fxd1616u.c
004894   90d8     BCF       0xd8,0x0,0x0   	bcf STATUS, 0, 0                                                                C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                           loop:                                                                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                           	//AARG16 <<= 1; Carry is always clear at this point.                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
004896   361e     RLCF      0x1e,0x1,0x0   	rlcf __AARGB1, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd1616u.c
004898   361f     RLCF      0x1f,0x1,0x0   	rlcf __AARGB0, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                           	//PROD = (PROD << 1) | (AARG16 >> 16)                                           C:\MCC18\src\TRADIT~1\math\fxd1616u.c
00489a   361a     RLCF      0x1a,0x1,0x0   	rlcf __REMB1, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd1616u.c
00489c   361b     RLCF      0x1b,0x1,0x0   	rlcf __REMB0, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                           	                                                                                C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                           	//if (PROD >= BARG16)                                                           C:\MCC18\src\TRADIT~1\math\fxd1616u.c
00489e   5023     MOVF      0x23,0x0,0x0   	movf __BARGB1, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd1616u.c
0048a0   5c1a     SUBWF     0x1a,0x0,0x0   	subwf __REMB1, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd1616u.c
0048a2   5024     MOVF      0x24,0x0,0x0   	movf __BARGB0, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd1616u.c
0048a4   581b     SUBWFB    0x1b,0x0,0x0   	subwfb __REMB0, 0, 0                                                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
0048a6   e305     BNC       0x48b2         	bnc endloop                                                                     C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                               //{                                                                          C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                           	    //PROD -= BARG16;                                                           C:\MCC18\src\TRADIT~1\math\fxd1616u.c
0048a8   5023     MOVF      0x23,0x0,0x0   	    movf __BARGB1, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd1616u.c
0048aa   5e1a     SUBWF     0x1a,0x1,0x0   	    subwf __REMB1, 1, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd1616u.c
0048ac   5024     MOVF      0x24,0x0,0x0   	    movf __BARGB0, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd1616u.c
0048ae   5a1b     SUBWFB    0x1b,0x1,0x0   	    subwfb __REMB0, 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                           	    //++AARG16; Since AARG16 was shift to the left above, the increment will    C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                                   //          simply set the LSbit. Using incf also clears the carry, which C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                                   //          means we don't have to clear the carry at the top of the loop. C:\MCC18\src\TRADIT~1\math\fxd1616u.c
0048b0   2a1e     INCF      0x1e,0x1,0x0           incf __AARGB1, 1, 0                                                      C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                               //}                                                                          C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                           endloop:                                                                         C:\MCC18\src\TRADIT~1\math\fxd1616u.c
0048b2   2ee7     DECFSZ    0xe7,0x1,0x0       decfsz INDF1, 1, 0    // does not affect the carry bit                       C:\MCC18\src\TRADIT~1\math\fxd1616u.c
0048b4   d7f0     BRA       0x4896             bra loop                                                                     C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                             _endasm                                                                        C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                             /* result in AARG already... */                                                C:\MCC18\src\TRADIT~1\math\fxd1616u.c
0048b6   0012     RETURN    0x0            }                                                                                C:\MCC18\src\TRADIT~1\math\fxd1616u.c
                                           ;	RCS Header $Id: fxm2424u.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <P18CXXX.INC>		; general Golden Gate definitions                        C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <CMATH18.INC>		; Math library definitions                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: cmath18.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                               LIST                                                                         C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ; CMATH18.INC  v1.0  Microchip Technology, Inc. / F.J. Testa                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <AARG.INC>		; AARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: aarg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN	__AARGB0, __AARGB1, __AARGB2, __AARGB3                                   C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                   EXTERN  __AARGB4, __AARGB5, __AARGB6, __AARGB7                           C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __AEXP                                                                  C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __REMB3, __REMB2, __REMB1, __REMB0                                      C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <BARG.INC>		; BARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: barg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BARGB3, __BARGB2, __BARGB1, __BARGB0                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BEXP                                                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	include <TEMPARG.INC>		; TEMPARG declarations                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: temparg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                   EXTERN  __TEMPB3, __TEMPB2, __TEMPB1, __TEMPB0, __TEMP                   C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       24x24 Bit Unsigned Fixed Point Multiply 24 x 24 -> 48                    C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Input:  24 bit unsigned fixed point multiplicand in AARGB0, AARGB1,      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               AARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               24 bit unsigned fixed point multiplier in BARGB0, BARGB1,        C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               BARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Use:    CALL    FXM2424U                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Output: 48 bit unsigned fixed point product in AARGB0, AARGB1,           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;               AARGB2, AARGB3, AARGB4, AARGB5                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Result: AARG  <--  AARG * BARG                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Max Timing:     65 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       Min Timing:     65 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;       PM: 64              DM: 12                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           PROG	CODE                                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           FXM2424U                                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           		GLOBAL	FXM2424U                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004338   c01f     MOVFF     0x1f,0x29      		MOVFF	__AARGB0,__TEMPB0	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00433a   f029                                                                                                               
00433c   c01e     MOVFF     0x1e,0x28      		MOVFF	__AARGB1,__TEMPB1	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00433e   f028                                                                                                               
004340   c01d     MOVFF     0x1d,0x27      		MOVFF	__AARGB2,__TEMPB2	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004342   f027                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004344   501d     MOVF      0x1d,0x0,0x0   		MOVF	__AARGB2,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004346   0222     MULWF     0x22,0x0       		MULWF	__BARGB2                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004348   cff4     MOVFF     0xff4,0x1b     		MOVFF	PRODH,__AARGB4                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00434a   f01b                                                                                                               
00434c   cff3     MOVFF     0xff3,0x1a     		MOVFF	PRODL,__AARGB5                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00434e   f01a                                                                                                               
                                           		                                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004350   501e     MOVF      0x1e,0x0,0x0   		MOVF	__AARGB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004352   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004354   cff4     MOVFF     0xff4,0x1d     		MOVFF	PRODH,__AARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004356   f01d                                                                                                               
004358   cff3     MOVFF     0xff3,0x1c     		MOVFF	PRODL,__AARGB3                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00435a   f01c                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00435c   0222     MULWF     0x22,0x0       		MULWF	__BARGB2                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00435e   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004360   261b     ADDWF     0x1b,0x1,0x0   		ADDWF	__AARGB4,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004362   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004364   221c     ADDWFC    0x1c,0x1,0x0   		ADDWFC	__AARGB3,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004366   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004368   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00436a   5027     MOVF      0x27,0x0,0x0   		MOVF	__TEMPB2,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00436c   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00436e   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004370   261b     ADDWF     0x1b,0x1,0x0   		ADDWF	__AARGB4,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004372   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004374   221c     ADDWFC    0x1c,0x1,0x0   		ADDWFC	__AARGB3,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004376   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004378   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00437a   501f     MOVF      0x1f,0x0,0x0   		MOVF	__AARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00437c   0222     MULWF     0x22,0x0       		MULWF	__BARGB2                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00437e   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004380   261c     ADDWF     0x1c,0x1,0x0   		ADDWF	__AARGB3,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004382   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004384   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004386   501f     MOVF      0x1f,0x0,0x0   		MOVF	__AARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004388   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00438a   6a1e     CLRF      0x1e,0x0       		CLRF	__AARGB1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00438c   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00438e   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004390   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004392   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004394   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004396   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
004398   5027     MOVF      0x27,0x0,0x0   		MOVF	__TEMPB2,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00439a   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00439c   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
00439e   261c     ADDWF     0x1c,0x1,0x0   		ADDWF	__AARGB3,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043a0   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043a2   221d     ADDWFC    0x1d,0x1,0x0   		ADDWFC	__AARGB2,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043a4   6a1f     CLRF      0x1f,0x0       		CLRF	__AARGB0                                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043a6   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043a8   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043aa   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043ac   5028     MOVF      0x28,0x0,0x0   		MOVF	__TEMPB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043ae   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043b0   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043b2   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043b4   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043b6   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043b8   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043ba   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043bc   5029     MOVF      0x29,0x0,0x0   		MOVF	__TEMPB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043be   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043c0   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043c2   261e     ADDWF     0x1e,0x1,0x0   		ADDWF	__AARGB1,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043c4   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043c6   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
0043c8   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           		END                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm2424u.asm
                                           ;	RCS Header $Id: cmath18.asm,v 1.5 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           SIGN		RES 1       ; save location for sign in MSB                                C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           __FPFLAGSbits                                                                    C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           __FPFLAGS		RES 1       ; floating point library exception flags                  C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                   GLOBAL  SIGN, __FPFLAGS, __FPFLAGSbits                                   C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\cmath18.asm
                                           ;	RCS Header $Id: aarg.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB3                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB7		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB2                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB6		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB1                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB5		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __REMB0                                                                          C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB4		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB3		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB2		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB1		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AARGB0		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           __AEXP		RES 1       ; 8 bit biased exponent for argument A                       C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           	GLOBAL	__AARGB0, __AARGB1, __AARGB2, __AARGB3                                   C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                   GLOBAL  __AARGB4, __AARGB5, __AARGB6, __AARGB7                           C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           	GLOBAL  __AEXP                                                                  C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           	GLOBAL  __REMB3, __REMB2, __REMB1, __REMB0                                      C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\aarg.asm
                                           ;	RCS Header $Id: barg.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB3		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB2		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB1		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BARGB0		RES 1       ; most significant byte of argument B                      C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           __BEXP		RES 1       ; 8 bit biased exponent for argument B                       C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                   GLOBAL  __BARGB3, __BARGB2, __BARGB1, __BARGB0                           C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                   GLOBAL  __BEXP                                                           C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\barg.asm
                                           ;	RCS Header $Id: temparg.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;       CMATH18 DATA DEFINITION FILE                                             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;   VARIABLE ALLOCATION - Core math library routines                             C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           ;******************************************************************************* C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           MATH_DATA      UDATA_ACS                                                         C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB3		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB2		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB1		RES 1                                                                  C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMP                                                                           C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           __TEMPB0		RES 1       ; temporary storage                                        C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                   GLOBAL  __TEMPB3, __TEMPB2, __TEMPB1, __TEMPB0, __TEMP                   C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                                   END                                                                      C:\MCC18\SRC\TRADIT~1\MATH\temparg.asm
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                           /* printf() is a wrapper function which calls vfprintf() with stdout as the      C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                              destination output stream. EOF is returned on error, else the number          C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                              of characters output. */                                                      C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                           int                                                                              C:\MCC18\src\TRADIT~1\stdclib\printf.c
004590   cfd9     MOVFF     0xfd9,0xfe6    printf (const rom char *fmt, ...)                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
004592   ffe6                                                                                                               
004594   cfda     MOVFF     0xfda,0xfe6                                                                                     
004596   ffe6                                                                                                               
004598   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
00459a   ffd9                                                                                                               
00459c   cfe2     MOVFF     0xfe2,0xfda                                                                                     
00459e   ffda                                                                                                               
0045a0   52e6     MOVF      0xe6,0x1,0x0                                                                                    
0045a2   52e6     MOVF      0xe6,0x1,0x0                                                                                    
0045a4   52e6     MOVF      0xe6,0x1,0x0                                                                                    
0045a6   52e6     MOVF      0xe6,0x1,0x0                                                                                    
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                             va_list ap;                                                                    C:\MCC18\src\TRADIT~1\stdclib\printf.c
                                             int n;                                                                         C:\MCC18\src\TRADIT~1\stdclib\printf.c
0045a8   50d9     MOVF      0xd9,0x0,0x0     va_start (ap, fmt);                                                            C:\MCC18\src\TRADIT~1\stdclib\printf.c
0045aa   0ffb     ADDLW     0xfb                                                                                            
0045ac   6e2a     MOVWF     0x2a,0x0                                                                                        
0045ae   0eff     MOVLW     0xff                                                                                            
0045b0   20da     ADDWFC    0xda,0x0,0x0                                                                                    
0045b2   6e2b     MOVWF     0x2b,0x0                                                                                        
0045b4   c02a     MOVFF     0x2a,0xfde                                                                                      
0045b6   ffde                                                                                                               
0045b8   6edd     MOVWF     0xdd,0x0                                                                                        
0045ba   cfde     MOVFF     0xfde,0xfe6      n = vfprintf (stdout, fmt, ap);                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
0045bc   ffe6                                                                                                               
0045be   cfdd     MOVFF     0xfdd,0xfe6                                                                                     
0045c0   ffe6                                                                                                               
0045c2   0efb     MOVLW     0xfb                                                                                            
0045c4   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0045c6   ffe6                                                                                                               
0045c8   0efc     MOVLW     0xfc                                                                                            
0045ca   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0045cc   ffe6                                                                                                               
0045ce   0efd     MOVLW     0xfd                                                                                            
0045d0   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0045d2   ffe6                                                                                                               
0045d4   c1fd     MOVFF     0x1fd,0xfe6                                                                                     
0045d6   ffe6                                                                                                               
0045d8   c1fe     MOVFF     0x1fe,0xfe6                                                                                     
0045da   ffe6                                                                                                               
0045dc   ec19     CALL      0x2a32,0x0                                                                                      
0045de   f015                                                                                                               
0045e0   6e2a     MOVWF     0x2a,0x0                                                                                        
0045e2   0e07     MOVLW     0x7                                                                                             
0045e4   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
0045e6   e202     BC        0x45ec                                                                                          
0045e8   6ae1     CLRF      0xe1,0x0                                                                                        
0045ea   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0045ec   6ee1     MOVWF     0xe1,0x0                                                                                        
0045ee   502a     MOVF      0x2a,0x0,0x0                                                                                    
0045f0   0e02     MOVLW     0x2                                                                                             
0045f2   cff3     MOVFF     0xff3,0xfdb                                                                                     
0045f4   ffdb                                                                                                               
0045f6   0e03     MOVLW     0x3                                                                                             
0045f8   cff4     MOVFF     0xff4,0xfdb                                                                                     
0045fa   ffdb                                                                                                               
                                             va_end (ap);                                                                   C:\MCC18\src\TRADIT~1\stdclib\printf.c
0045fc   0e02     MOVLW     0x2              return n;                                                                      C:\MCC18\src\TRADIT~1\stdclib\printf.c
0045fe   cfdb     MOVFF     0xfdb,0x2a                                                                                      
004600   f02a                                                                                                               
004602   0e03     MOVLW     0x3                                                                                             
004604   cfdb     MOVFF     0xfdb,0x2b                                                                                      
004606   f02b                                                                                                               
004608   c02a     MOVFF     0x2a,0xff3                                                                                      
00460a   fff3                                                                                                               
00460c   c02b     MOVFF     0x2b,0xff4                                                                                      
00460e   fff4                                                                                                               
004610   0e04     MOVLW     0x4            }                                                                                C:\MCC18\src\TRADIT~1\stdclib\printf.c
004612   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
004614   e202     BC        0x461a                                                                                          
004616   6ae1     CLRF      0xe1,0x0                                                                                        
004618   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00461a   6ee1     MOVWF     0xe1,0x0                                                                                        
00461c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00461e   cfe5     MOVFF     0xfe5,0xfda                                                                                     
004620   ffda                                                                                                               
004622   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
004624   ffd9                                                                                                               
004626   0012     RETURN    0x0                                                                                             
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                           /* by default stdout issues to the USART */                                      C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                           FILE *stdout = _H_USART;                                                         C:\MCC18\src\TRADIT~1\stdclib\stdout.c
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; @name toupper                                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;The {\bf toupper} function converts a lower case character to the               C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;corresponding upper case character.                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;@return If {\bf islower} is true for the value of {\bf c}, the corresponding    C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;upper case equivalent is returned, else the value of {\bf c} is returned        C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;unchanged.                                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; int toupper (int c);                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           CTYPE CODE                                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           toupper                                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             global toupper                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ; Proceedure: Use FSR0 as pointer to 'c'                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           ;         Return with result in PROD                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Set FSR0 = FSR1 - 2 ( location of 'c') after checking upper byte for 0       C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004782   0eff     MOVLW     0xff                     StkSetPtrToOffset FSR0L,-1                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004784   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
004786   6ee9     MOVWF     0xe9,0x0                                                                                        
004788   0eff     MOVLW     0xff                                                                                            
00478a   20e2     ADDWFC    0xe2,0x0,0x0                                                                                    
00478c   6eea     MOVWF     0xea,0x0                                                                                        
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Copy 'c' into target location                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
00478e   cfed     MOVFF     0xfed,0xff4    	  movff POSTDEC0, PRODH                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004790   fff4                                                                                                               
004792   cfef     MOVFF     0xfef,0xff3    	  movff INDF0, PRODL                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004794   fff3                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004796   66f4     TSTFSZ    0xf4,0x0                 tstfsz    PRODH,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
004798   d007     BRA       0x47a8                   bra       jNoMatch            ; upper byte must be 0                   C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Test for lower case condition                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
00479a   0e60     MOVLW     0x60                     jmpFleL   PRODL,ACCESS,'a'-1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
00479c   64f3     CPFSGT    0xf3,0x0                                                                                        
00479e   d004     BRA       0x47a8                                                                                          
0047a0   0e7b     MOVLW     0x7b                     jmpFgeL   PRODL,ACCESS,'z'+1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0047a2   60f3     CPFSLT    0xf3,0x0                                                                                        
0047a4   d001     BRA       0x47a8                                                                                          
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             ; Convert char from lower to upper by clearing bit 5                           C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0047a6   9af3     BCF       0xf3,0x5,0x0             bcf       PRODL,5,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           jNoMatch:                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
0047a8   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\toupper.asm
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #include <ctype.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #include <string.h>                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_MINUS 0x1                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_PLUS  0x2                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_SPACE 0x4                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_OCTO  0x8                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_ZERO  0x10                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FLAG_SIGNED 0x80                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           static const rom char s_digits[] = "0123456789abcdef";                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           static unsigned char                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a06   ec3f     CALL      0x347e,0x0     s_put_n_chars (FILE * handle, unsigned char n, char c)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a08   f01a                                                                                                               
00347e   cfd9     MOVFF     0xfd9,0xfe6                                                                                     
003480   ffe6                                                                                                               
003482   cfda     MOVFF     0xfda,0xfe6                                                                                     
003484   ffe6                                                                                                               
003486   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
003488   ffd9                                                                                                               
00348a   cfe2     MOVFF     0xfe2,0xfda                                                                                     
00348c   ffda                                                                                                               
00348e   0012     RETURN    0x0                                                                                             
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a0a   0efb     MOVLW     0xfb             while (n--)                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a0c   cfdb     MOVFF     0xfdb,0xff3                                                                                     
002a0e   fff3                                                                                                               
002a10   06db     DECF      0xdb,0x1,0x0                                                                                    
002a12   50f3     MOVF      0xf3,0x0,0x0                                                                                    
002a14   0900     IORLW     0x0                                                                                             
002a16   e00a     BZ        0x2a2c                                                                                          
002a18   ec8d     CALL      0x351a,0x0         if (putc (c, handle) == EOF)                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a1a   f01a                                                                                                               
002a1c   0efa     MOVLW     0xfa                                                                                            
002a1e   ecf8     CALL      0x35f0,0x0                                                                                      
002a20   f01a                                                                                                               
002a22   e1f3     BNZ       0x2a0a                                                                                          
002a24   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002a26   e1f1     BNZ       0x2a0a                                                                                          
002a28   0e01     MOVLW     0x1                  return 1;                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a2a   d001     BRA       0x2a2e                                                                                          
002a2c   0e00     MOVLW     0x0              return 0;                                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a2e   ef6e     GOTO      0x34dc         }                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a30   f01a                                                                                                               
0034dc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0034de   cfe5     MOVFF     0xfe5,0xfda                                                                                     
0034e0   ffda                                                                                                               
0034e2   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0034e4   ffd9                                                                                                               
0034e6   0012     RETURN    0x0                                                                                             
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_UNSPECIFIED 0                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_LONG 1                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_SHLONG 2                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           #define _FMT_BYTE   3                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                           int                                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a32   ec3f     CALL      0x347e,0x0     vfprintf (auto FILE *handle, auto const rom char *f, auto va_list ap)            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a34   f01a                                                                                                               
002a36   0e3b     MOVLW     0x3b                                                                                            
002a38   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
002a3a   e302     BNC       0x2a40                                                                                          
002a3c   68e1     SETF      0xe1,0x0                                                                                        
002a3e   52e6     MOVF      0xe6,0x1,0x0                                                                                    
002a40   6ee1     MOVWF     0xe1,0x0                                                                                        
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                             unsigned char c;                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a42   0e01     MOVLW     0x1              int count = 0;                                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a44   6adb     CLRF      0xdb,0x0                                                                                        
002a46   0e02     MOVLW     0x2                                                                                             
002a48   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a4a   0ef9     MOVLW     0xf9             for (c = *f; c; c = *++f)                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a4c   cfdb     MOVFF     0xfdb,0xff6                                                                                     
002a4e   fff6                                                                                                               
002a50   0efa     MOVLW     0xfa                                                                                            
002a52   cfdb     MOVFF     0xfdb,0xff7                                                                                     
002a54   fff7                                                                                                               
002a56   0efb     MOVLW     0xfb                                                                                            
002a58   cfdb     MOVFF     0xfdb,0xff8                                                                                     
002a5a   fff8                                                                                                               
002a5c   0008     TBLRD                                                                                                     
002a5e   50f5     MOVF      0xf5,0x0,0x0                                                                                    
002a60   6edf     MOVWF     0xdf,0x0                                                                                        
002a62   50df     MOVF      0xdf,0x0,0x0                                                                                    
002a64   e102     BNZ       0x2a6a                                                                                          
002a66   ef92     GOTO      0x3324                                                                                          
002a68   f019                                                                                                               
00331e   d979     RCALL     0x3612                                                                                          
003320   ef2e     GOTO      0x2a5c                                                                                          
003322   f015                                                                                                               
003612   50d9     MOVF      0xd9,0x0,0x0                                                                                    
003614   0ff9     ADDLW     0xf9                                                                                            
003616   6ee9     MOVWF     0xe9,0x0                                                                                        
003618   0eff     MOVLW     0xff                                                                                            
00361a   efa2     GOTO      0x3544                                                                                          
00361c   f01a                                                                                                               
                                               {                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a6a   0e25     MOVLW     0x25                 if (c == '%')                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a6c   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a6e   e002     BZ        0x2a74                                                                                          
002a70   ef85     GOTO      0x330a                                                                                          
002a72   f019                                                                                                               
                                                   {                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a74   0e03     MOVLW     0x3                      unsigned char flags = 0;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a76   6adb     CLRF      0xdb,0x0                                                                                        
002a78   0e04     MOVLW     0x4                      unsigned char width = 0;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a7a   6adb     CLRF      0xdb,0x0                                                                                        
002a7c   0e05     MOVLW     0x5                      unsigned char precision = 0;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a7e   6adb     CLRF      0xdb,0x0                                                                                        
002a80   0e06     MOVLW     0x6                      unsigned char have_precision = 0;                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a82   6adb     CLRF      0xdb,0x0                                                                                        
002a84   0e07     MOVLW     0x7                      unsigned char size = 0;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a86   6adb     CLRF      0xdb,0x0                                                                                        
                                                     unsigned char space_cnt;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     unsigned char cval;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     unsigned long larg;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     far rom char *romstring;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     char *ramstring;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     int n;                                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* get the first character of the conversion specifier */              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a88   eca7     CALL      0x334e,0x0               c = *++f;                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a8a   f019                                                                                                               
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /**  The conversion specification has, after the '%' character:        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         7.9.6.1                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * Zero or more flags (in any order) that modify the meaning of the  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specification.                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * An optional minimum field width. If the converted value has       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          fewer characters than the field width, it will be padded with     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          spaces (by default) on the left (or right, if the left            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          adjustment flag, described later, has been given) to the field    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          width. The field width takes the form of an asterisk *            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          (described later) or a decimal integer.                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * An optional precision that gives the minimum number of digits     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          to appear for the d, i, o, u, x, and X conversions, the           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          maximum number of digits to appear after the decimal point        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          character for e, E, and f conversions, the maximum number         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          of significant digits for the g and G conversions, or the         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          maximum number of characters to be written from a string in       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          s conversion. The precision takes the form of a period (.)        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          followed by an asterisk * (described later) or by an optional     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          decimal integer; if only the period is specified, the precision   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          is taken as zero. If a precision appears with any other           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specifier, the behaviour is undefined.                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * An optional h specifying that a following d, i, o, u, x, or X     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specifier applies to a short int or unsigned short     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          int argument (the argument will have been promoted according      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          to the integer promotions, and its value shall be converted       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          to short int or unsigned short int before printing); an           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          optional h specifying that a following n conversion specifier     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          applies to a pointer to a short int argument; an optional l       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          (ell) specifying that a following d, i, o, u, x, or X             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion specifier applies to a long int or unsigned long int   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          argument; or an optional L specifying that a following e, E,      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          f, g, or G conversion specifier applies to a long double          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          argument. If an h, l, or L appears with any other conversion      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          specifier, the behaviour is undefined.                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        * A character that specifies the type of conversion to be applied.  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       */                                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /** check for a flag.                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        7.9.6.1                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        The flag characters and their meanings are:                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        - The result of the conversion will be left-justified within        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          the field. (It will be right justified if this flag is not        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          specified.)                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        + The result of a signed conversion will always begin with a        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          plus or a minus sign. (It will begin with a sign only when        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          a negative value is converted if this flag is not specified.)     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        space  If the first character of a signed conversion is not a       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          sign, or if a signed conversion results in no characters, a       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          space will be prefixed to the result. If the space and + flags    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          both appear, the space flag will be ignored.                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        # The result is to be converted to an "alternate form." For o       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversion, it increases the precision to force the first digit   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          of the result to be a zero. For x (or X) conversion, a nonzero    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          result will have 0x (or 0X) prefixed to it. For e, E, f, g,       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          and G conversions, the result will always contain a decimal-      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          point character, even if no digits follow it. (Normally, a        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          decimal point character appears in the result of these            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversions only if a digit follows it.) For g and G              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          conversions, trailing zeros will not be removed from the          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          result. For other conversions the behaviour is undefined.         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        0 For d, i, o, u, x, X, e, E, f, g, and G conversions, leading      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          zeros (following any indication of sign or base) are used to      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          pad to the field width; no space padding is performed. If         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          the 0 and - flags both appear, the 0 flag will be ignored.        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                          For other conversions, the behaviour is undefined.                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       */                                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a8c   0e2d     MOVLW     0x2d                     while (c == '-' || c == '+' || c == ' ' || c == '#'                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002a8e   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a90   e00c     BZ        0x2aaa                                                                                          
002a92   0e2b     MOVLW     0x2b                                                                                            
002a94   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a96   e009     BZ        0x2aaa                                                                                          
002a98   0e20     MOVLW     0x20                                                                                            
002a9a   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002a9c   e006     BZ        0x2aaa                                                                                          
002a9e   0e23     MOVLW     0x23                                                                                            
002adc   d7d5     BRA       0x2a88                                                                                          
002aa0   5cdf     SUBWF     0xdf,0x0,0x0                    || c == '0')                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aa2   e003     BZ        0x2aaa                                                                                          
002aa4   0e30     MOVLW     0x30                                                                                            
002aa6   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002aa8   e11a     BNZ       0x2ade                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aaa   50df     MOVF      0xdf,0x0,0x0                 switch (c)                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aac   0a30     XORLW     0x30                                                                                            
002aae   e014     BZ        0x2ad8                                                                                          
002ab0   0a13     XORLW     0x13                                                                                            
002ab2   e00f     BZ        0x2ad2                                                                                          
002ab4   0a03     XORLW     0x3                                                                                             
002ab6   e00a     BZ        0x2acc                                                                                          
002ab8   0a0b     XORLW     0xb                                                                                             
002aba   e005     BZ        0x2ac6                                                                                          
002abc   0a06     XORLW     0x6                                                                                             
002abe   e1e4     BNZ       0x2a88                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '-':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ac0   0e03     MOVLW     0x3                              flags |= _FLAG_MINUS;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ac2   80db     BSF       0xdb,0x0,0x0                                                                                    
002ac4   d7e1     BRA       0x2a88                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '+':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ac6   0e03     MOVLW     0x3                              flags |= _FLAG_PLUS;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ac8   82db     BSF       0xdb,0x1,0x0                                                                                    
002aca   d7de     BRA       0x2a88                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case ' ':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002acc   0e03     MOVLW     0x3                              flags |= _FLAG_SPACE;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ace   84db     BSF       0xdb,0x2,0x0                                                                                    
002ad0   d7db     BRA       0x2a88                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '#':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ad2   0e03     MOVLW     0x3                              flags |= _FLAG_OCTO;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ad4   86db     BSF       0xdb,0x3,0x0                                                                                    
002ad6   d7d8     BRA       0x2a88                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case '0':                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ad8   0e03     MOVLW     0x3                              flags |= _FLAG_ZERO;                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ada   88db     BSF       0xdb,0x4,0x0                                                                                    
                                                             break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the optional width field is next */                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ade   0e2a     MOVLW     0x2a                     if (c == '*')                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ae0   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002ae2   e11b     BNZ       0x2b1a                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ae4   eca3     CALL      0x3346,0x0                   n = va_arg (ap, int);                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ae6   f019                                                                                                               
002ae8   ecf1     CALL      0x33e2,0x0                                                                                      
002aea   f019                                                                                                               
0033e2   0e13     MOVLW     0x13                                                                                            
0033e4   cfee     MOVFF     0xfee,0xfdb                                                                                     
0033e6   ffdb                                                                                                               
0033e8   0e14     MOVLW     0x14                                                                                            
0033ea   cfed     MOVFF     0xfed,0xfdb                                                                                     
0033ec   ffdb                                                                                                               
002aec   e010     BZ        0x2b0e                       if (n < 0)                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0033ee   0e13     MOVLW     0x13                                                                                            
0033f0   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0033f2   f02a                                                                                                               
0033f4   0e14     MOVLW     0x14                                                                                            
0033f6   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0033f8   f02b                                                                                                               
0033fa   0100     MOVLB     0x0                                                                                             
0033fc   0e80     MOVLW     0x80                                                                                            
0033fe   142b     ANDWF     0x2b,0x0,0x0                                                                                    
003400   0012     RETURN    0x0                                                                                             
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002aee   0e03     MOVLW     0x3                              flags |= _FLAG_MINUS;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002af0   80db     BSF       0xdb,0x0,0x0                                                                                    
002af2   681e     SETF      0x1e,0x0                         width = -n;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002af4   681f     SETF      0x1f,0x0                                                                                        
002af6   0e13     MOVLW     0x13                                                                                            
002af8   cfdb     MOVFF     0xfdb,0x23                                                                                      
002afa   f023                                                                                                               
002afc   0e14     MOVLW     0x14                                                                                            
002afe   cfdb     MOVFF     0xfdb,0x24                                                                                      
002b00   f024                                                                                                               
002b02   ece5     CALL      0x43ca,0x0                                                                                      
002b04   f021                                                                                                               
002b06   0e04     MOVLW     0x4                                                                                             
002b08   c01c     MOVFF     0x1c,0xfdb                                                                                      
002b0a   ffdb                                                                                                               
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b0c   d003     BRA       0x2b14                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b0e   0e13     MOVLW     0x13                           width = n;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b10   ecda     CALL      0x33b4,0x0                                                                                      
002b12   f019                                                                                                               
002b14   eca7     CALL      0x334e,0x0                   c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b16   f019                                                                                                               
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b18   d00b     BRA       0x2b30                   else                                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b1a   0e09     MOVLW     0x9                          cval = 0;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b1c   6adb     CLRF      0xdb,0x0                                                                                        
002b1e   ec48     CALL      0x3490,0x0                   while ((unsigned char) isdigit (c))                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b20   f01a                                                                                                               
002b22   e003     BZ        0x2b2a                                                                                          
002b28   d7fa     BRA       0x2b1e                                                                                          
003490   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
003492   ffe6                                                                                                               
003494   6ae6     CLRF      0xe6,0x0                                                                                        
003496   ecd5     CALL      0x47aa,0x0                                                                                      
003498   f023                                                                                                               
00349a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00349c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00349e   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0034a0   0012     RETURN    0x0                                                                                             
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b24   ecbc     CALL      0x3578,0x0                       cval = cval * 10 + c - '0';                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b26   f01a                                                                                                               
003578   0e09     MOVLW     0x9                                                                                             
00357a   50db     MOVF      0xdb,0x0,0x0                                                                                    
00357c   0d0a     MULLW     0xa                                                                                             
00357e   50f3     MOVF      0xf3,0x0,0x0                                                                                    
003580   24df     ADDWF     0xdf,0x0,0x0                                                                                    
003582   0fd0     ADDLW     0xd0                                                                                            
003584   6ee7     MOVWF     0xe7,0x0                                                                                        
003586   0e09     MOVLW     0x9                                                                                             
003588   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
00358a   ffdb                                                                                                               
00358c   efa7     GOTO      0x334e                           c = *++f;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00358e   f019                                                                                                               
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b2a   0e09     MOVLW     0x9                          width = cval;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b2c   ecda     CALL      0x33b4,0x0                                                                                      
002b2e   f019                                                                                                               
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* if '-' is specified, '0' is ignored */                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b30   0e03     MOVLW     0x3                      if (flags & _FLAG_MINUS)                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b32   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
002b34   98db     BCF       0xdb,0x4,0x0               flags &= ~_FLAG_ZERO;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the optional precision field is next */                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b36   0e2e     MOVLW     0x2e                     if (c == '.')                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b38   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002b3a   e11b     BNZ       0x2b72                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b3c   eca7     CALL      0x334e,0x0                   c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b3e   f019                                                                                                               
002b40   0e2a     MOVLW     0x2a                         if (c == '*')                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b42   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002b44   e10b     BNZ       0x2b5c                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b46   eca3     CALL      0x3346,0x0                       n = va_arg (ap, int);                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b48   f019                                                                                                               
002b4a   ecf1     CALL      0x33e2,0x0                                                                                      
002b4c   f019                                                                                                               
003346   d929     RCALL     0x359a                                                                                          
003348   0e02     MOVLW     0x2                                                                                             
00334a   ef94     GOTO      0x3528                                                                                          
00334c   f01a                                                                                                               
003528   5e2a     SUBWF     0x2a,0x1,0x0                                                                                    
00352a   0e00     MOVLW     0x0                                                                                             
00352c   5a2b     SUBWFB    0x2b,0x1,0x0                                                                                    
00352e   0ef7     MOVLW     0xf7                                                                                            
003530   c02a     MOVFF     0x2a,0xfdb                                                                                      
003532   ffdb                                                                                                               
003534   0ef8     MOVLW     0xf8                                                                                            
003536   c02b     MOVFF     0x2b,0xfdb                                                                                      
003538   ffdb                                                                                                               
00353a   c02a     MOVFF     0x2a,0xfe9                                                                                      
00353c   ffe9                                                                                                               
00353e   c02b     MOVFF     0x2b,0xfea                                                                                      
003540   ffea                                                                                                               
003542   0012     RETURN    0x0                                                                                             
00359a   0ef7     MOVLW     0xf7                                                                                            
00359c   cfdb     MOVFF     0xfdb,0x2a                                                                                      
00359e   f02a                                                                                                               
0035a0   0ef8     MOVLW     0xf8                                                                                            
0035a2   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0035a4   f02b                                                                                                               
0035a6   0012     RETURN    0x0                                                                                             
002b4e   e103     BNZ       0x2b56                           if (n >= 0)                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               {                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b50   0e13     MOVLW     0x13                                 precision = n;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b52   ec2c     CALL      0x3458,0x0                                                                                      
002b54   f01a                                                                                                               
003458   50db     MOVF      0xdb,0x0,0x0                                                                                    
00345a   d8ce     RCALL     0x35f8                                                                                          
0035f8   6ee7     MOVWF     0xe7,0x0                                                                                        
0035fa   0e05     MOVLW     0x5                                                                                             
0035fc   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0035fe   ffdb                                                                                                               
003600   0012     RETURN    0x0                                                                                             
00345c   0e01     MOVLW     0x1                                  have_precision = 1;                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00345e   6ef3     MOVWF     0xf3,0x0                                                                                        
003460   0e06     MOVLW     0x6                                                                                             
003462   cff3     MOVFF     0xff3,0xfdb                                                                                     
003464   ffdb                                                                                                               
003466   0012     RETURN    0x0                                                                                             
                                                               }                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b56   eca7     CALL      0x334e,0x0                       c = *++f;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b58   f019                                                                                                               
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b5a   d00b     BRA       0x2b72                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b5c   0e09     MOVLW     0x9                              cval = 0;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b5e   6adb     CLRF      0xdb,0x0                                                                                        
002b60   ec48     CALL      0x3490,0x0                       while ((unsigned char) isdigit (c))                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b62   f01a                                                                                                               
002b64   e003     BZ        0x2b6c                                                                                          
002b6a   d7fa     BRA       0x2b60                                                                                          
                                                               {                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b66   ecbc     CALL      0x3578,0x0                           cval = cval * 10 + c - '0';                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b68   f01a                                                                                                               
                                                                 c = *++f;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               }                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b6c   0e09     MOVLW     0x9                              precision = cval;                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b6e   ec2c     CALL      0x3458,0x0                                                                                      
002b70   f01a                                                                                                               
                                                             have_precision = 1;                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the optional 'h' specifier. since int and short int are             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        the same size for MPLAB C18, this is a NOP for us. */               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b72   0e68     MOVLW     0x68                     if (c == 'h')                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b74   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002b76   e107     BNZ       0x2b86                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b78   eca7     CALL      0x334e,0x0                   c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b7a   f019                                                                                                               
                                                         /* if 'c' is another 'h' character, this is an 'hh'                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specifier and the size is 8 bits */                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b7c   0e68     MOVLW     0x68                         if (c == 'h')                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b7e   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002b80   e11d     BNZ       0x2bbc                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b82   0e03     MOVLW     0x3                              size = _FMT_BYTE;                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             c = *++f;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* 'z' and 't' are both 16-bit and so are NOPs */                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b84   d018     BRA       0x2bb6                   else if (c == 't' || c == 'z')                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b86   0e74     MOVLW     0x74                                                                                            
002b88   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002b8a   e017     BZ        0x2bba                                                                                          
002b8c   0e7a     MOVLW     0x7a                                                                                            
002b8e   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002b90   e014     BZ        0x2bba                                                                                          
                                                       c = *++f;                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the 'H' specifier tells us to deal with 24-bit integers.            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        the 'T' and 'Z' specifiers are also 24 bit */                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b92   0e48     MOVLW     0x48                     else if (c == 'H' || c == 'T' || c == 'Z')                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002b94   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002b96   e006     BZ        0x2ba4                                                                                          
002b98   0e54     MOVLW     0x54                                                                                            
002b9a   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002b9c   e003     BZ        0x2ba4                                                                                          
002b9e   0e5a     MOVLW     0x5a                                                                                            
002ba0   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002ba2   e102     BNZ       0x2ba8                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ba4   0e02     MOVLW     0x2                          size = _FMT_SHLONG;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                     /* the 'l' specifier tells us to deal with 32-bit integers             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                        'j' specifies intmax_t (long in our case). */                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ba6   d007     BRA       0x2bb6                   else if (c == 'l' || c == 'j')                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ba8   0e6c     MOVLW     0x6c                                                                                            
002baa   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002bac   e003     BZ        0x2bb4                                                                                          
002bae   0e6a     MOVLW     0x6a                                                                                            
002bb0   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
002bb2   e104     BNZ       0x2bbc                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bb4   0e01     MOVLW     0x1                          size = _FMT_LONG;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bb6   ec7f     CALL      0x34fe,0x0                                                                                      
002bb8   f01a                                                                                                               
002bba   dbc9     RCALL     0x334e                       c = *++f;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00334e   d961     RCALL     0x3612                                                                                          
003350   0008     TBLRD                                                                                                     
003352   50f5     MOVF      0xf5,0x0,0x0                                                                                    
003354   6edf     MOVWF     0xdf,0x0                                                                                        
003356   0012     RETURN    0x0                                                                                             
003544   20da     ADDWFC    0xda,0x0,0x0                                                                                    
003546   6eea     MOVWF     0xea,0x0                                                                                        
003548   2aef     INCF      0xef,0x1,0x0                                                                                    
00354a   cfee     MOVFF     0xfee,0xff6                                                                                     
00354c   fff6                                                                                                               
00354e   0e00     MOVLW     0x0                                                                                             
003550   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
003552   cfee     MOVFF     0xfee,0xff7                                                                                     
003554   fff7                                                                                                               
003556   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
003558   cfee     MOVFF     0xfee,0xff8                                                                                     
00355a   fff8                                                                                                               
00355c   0012     RETURN    0x0                                                                                             
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bbc   50df     MOVF      0xdf,0x0,0x0             switch (c)                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002bbe   0a6e     XORLW     0x6e                                                                                            
002bc0   e101     BNZ       0x2bc4                                                                                          
002bc2   d37f     BRA       0x32c2                                                                                          
002bc4   0a1e     XORLW     0x1e                                                                                            
002bc6   e101     BNZ       0x2bca                                                                                          
002bc8   d192     BRA       0x2eee                                                                                          
002bca   0a20     XORLW     0x20                                                                                            
002bcc   e101     BNZ       0x2bd0                                                                                          
002bce   d18f     BRA       0x2eee                                                                                          
002bd0   0a3f     XORLW     0x3f                                                                                            
002bd2   e101     BNZ       0x2bd6                                                                                          
002bd4   d149     BRA       0x2e68                                                                                          
002bd6   0a1a     XORLW     0x1a                                                                                            
002bd8   e101     BNZ       0x2bdc                                                                                          
002bda   d146     BRA       0x2e68                                                                                          
002bdc   0a0d     XORLW     0xd                                                                                             
002bde   e101     BNZ       0x2be2                                                                                          
002be0   d143     BRA       0x2e68                                                                                          
002be2   0a20     XORLW     0x20                                                                                            
002be4   e101     BNZ       0x2be8                                                                                          
002be6   d140     BRA       0x2e68                                                                                          
002be8   0a3a     XORLW     0x3a                                                                                            
002bea   e101     BNZ       0x2bee                                                                                          
002bec   d13d     BRA       0x2e68                                                                                          
002bee   0a20     XORLW     0x20                                                                                            
002bf0   e101     BNZ       0x2bf4                                                                                          
002bf2   d13a     BRA       0x2e68                                                                                          
002bf4   0a26     XORLW     0x26                                                                                            
002bf6   e101     BNZ       0x2bfa                                                                                          
002bf8   d135     BRA       0x2e64                                                                                          
002bfa   0a0d     XORLW     0xd                                                                                             
002bfc   e101     BNZ       0x2c00                                                                                          
002bfe   d132     BRA       0x2e64                                                                                          
002c00   0a1a     XORLW     0x1a                                                                                            
002c02   e101     BNZ       0x2c06                                                                                          
002c04   d0d9     BRA       0x2db8                                                                                          
002c06   0a20     XORLW     0x20                                                                                            
002c08   e04a     BZ        0x2c9e                                                                                          
002c0a   0a30     XORLW     0x30                                                                                            
002c0c   e01f     BZ        0x2c4c                                                                                          
002c0e   0a46     XORLW     0x46                                                                                            
002c10   e00e     BZ        0x2c2e                                                                                          
002c12   0a25     XORLW     0x25                                                                                            
002c14   e001     BZ        0x2c18                                                                                          
002c16   d383     BRA       0x331e                                                                                          
                                                       {                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case '\0':                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* this is undefined behaviour. we have a trailing '%' character   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            in the string, perhaps with some flags, width, precision        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            stuff as well, but no format specifier. We'll, arbitrarily,     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            back up a character so that the loop will terminate             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            properly when it loops back and we'll output a '%'              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            character. */                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c18   50d9     MOVF      0xd9,0x0,0x0                 --f;                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c1a   0ff9     ADDLW     0xf9                                                                                            
002c1c   6ee9     MOVWF     0xe9,0x0                                                                                        
002c1e   0eff     MOVLW     0xff                                                                                            
002c20   20da     ADDWFC    0xda,0x0,0x0                                                                                    
002c22   6eea     MOVWF     0xea,0x0                                                                                        
002c24   0e01     MOVLW     0x1                                                                                             
002c26   5eee     SUBWF     0xee,0x1,0x0                                                                                    
002c28   0e00     MOVLW     0x0                                                                                             
002c2a   5aee     SUBWFB    0xee,0x1,0x0                                                                                    
002c2c   5aee     SUBWFB    0xee,0x1,0x0                                                                                    
                                                         /* fallthrough */                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case '%':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c2e   ec8d     CALL      0x351a,0x0                   if (putc ('%', handle) == EOF)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c30   f01a                                                                                                               
002c32   0e25     MOVLW     0x25                                                                                            
002c34   6ee6     MOVWF     0xe6,0x0                                                                                        
002c36   db95     RCALL     0x3362                                                                                          
002c38   e103     BNZ       0x2c40                                                                                          
002c3a   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002c3c   e101     BNZ       0x2c40                                                                                          
002c3e   d369     BRA       0x3312                                                                                          
                                                           return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c40   ec89     CALL      0x3512,0x0                   ++count;                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c42   f01a                                                                                                               
002c44   e201     BC        0x2c48                                                                                          
002c46   d36b     BRA       0x331e                                                                                          
002c48   2adb     INCF      0xdb,0x1,0x0                                                                                    
002c4a   d369     BRA       0x331e                       break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'c':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c4c   0e08     MOVLW     0x8                          space_cnt = 0;                                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c4e   6adb     CLRF      0xdb,0x0                                                                                        
002c50   0e04     MOVLW     0x4                          if (width > 1)                                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c52   50db     MOVF      0xdb,0x0,0x0                                                                                    
002c54   0801     SUBLW     0x1                                                                                             
002c56   e206     BC        0x2c64                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c58   0e04     MOVLW     0x4                              space_cnt = width - 1;                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c5a   04db     DECF      0xdb,0x0,0x0                                                                                    
002c5c   ec51     CALL      0x34a2,0x0                                                                                      
002c5e   f01a                                                                                                               
002c60   50db     MOVF      0xdb,0x0,0x0                     count += space_cnt;                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c62   db8b     RCALL     0x337a                                                                                          
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c64   0e08     MOVLW     0x8                          if (space_cnt && !(flags & _FLAG_MINUS))                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c66   50db     MOVF      0xdb,0x0,0x0                                                                                    
002c68   e009     BZ        0x2c7c                                                                                          
002c6a   0e03     MOVLW     0x3                                                                                             
002c6c   50db     MOVF      0xdb,0x0,0x0                                                                                    
002c6e   0b01     ANDLW     0x1                                                                                             
002c70   e105     BNZ       0x2c7c                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c72   db72     RCALL     0x3358                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c74   e001     BZ        0x2c78                                                                                          
002c76   d34d     BRA       0x3312                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c78   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c7a   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c7c   db64     RCALL     0x3346                       c = va_arg (ap, int);                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c7e   cfef     MOVFF     0xfef,0xfdf                                                                                     
002c80   ffdf                                                                                                               
002c82   ec01     CALL      0x3602,0x0                   if (putc (c, handle) == EOF)                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c84   f01b                                                                                                               
002c86   e103     BNZ       0x2c8e                                                                                          
002c88   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002c8a   e101     BNZ       0x2c8e                                                                                          
002c8c   d342     BRA       0x3312                                                                                          
                                                           return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c8e   ec89     CALL      0x3512,0x0                   ++count;                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c90   f01a                                                                                                               
002c92   e301     BNC       0x2c96                                                                                          
002c94   2adb     INCF      0xdb,0x1,0x0                                                                                    
002c96   db60     RCALL     0x3358                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c98   e101     BNZ       0x2c9c                                                                                          
002c9a   d341     BRA       0x331e                                                                                          
002c9c   d33a     BRA       0x3312                         return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'S':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002c9e   0e07     MOVLW     0x7                          if (size == _FMT_SHLONG)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ca0   50db     MOVF      0xdb,0x0,0x0                                                                                    
002ca2   0802     SUBLW     0x2                                                                                             
002ca4   e10f     BNZ       0x2cc4                                                                                          
002ca6   eccd     CALL      0x359a,0x0                     romstring = va_arg (ap, rom far char *);                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ca8   f01a                                                                                                               
002caa   0e03     MOVLW     0x3                                                                                             
002cac   ec94     CALL      0x3528,0x0                                                                                      
002cae   f01a                                                                                                               
002cb0   0e0e     MOVLW     0xe                                                                                             
002cb2   cfee     MOVFF     0xfee,0xfdb                                                                                     
002cb4   ffdb                                                                                                               
002cb6   0e0f     MOVLW     0xf                                                                                             
002cb8   cfee     MOVFF     0xfee,0xfdb                                                                                     
002cba   ffdb                                                                                                               
002cbc   0e10     MOVLW     0x10                                                                                            
002cbe   cfee     MOVFF     0xfee,0xfdb                                                                                     
002cc0   ffdb                                                                                                               
002cc2   d020     BRA       0x2d04                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cc4   0ef7     MOVLW     0xf7                           romstring = (far rom char*)va_arg (ap, rom near char *);         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002cc6   cfdb     MOVFF     0xfdb,0x2d                                                                                      
002cc8   f02d                                                                                                               
002cca   0ef8     MOVLW     0xf8                                                                                            
002ccc   cfdb     MOVFF     0xfdb,0x2e                                                                                      
002cce   f02e                                                                                                               
002cd0   0e02     MOVLW     0x2                                                                                             
002cd2   5e2d     SUBWF     0x2d,0x1,0x0                                                                                    
002cd4   0e00     MOVLW     0x0                                                                                             
002cd6   5a2e     SUBWFB    0x2e,0x1,0x0                                                                                    
002cd8   0ef7     MOVLW     0xf7                                                                                            
002cda   c02d     MOVFF     0x2d,0xfdb                                                                                      
002cdc   ffdb                                                                                                               
002cde   0ef8     MOVLW     0xf8                                                                                            
002ce0   c02e     MOVFF     0x2e,0xfdb                                                                                      
002ce2   ffdb                                                                                                               
002ce4   c02d     MOVFF     0x2d,0xfe9                                                                                      
002ce6   ffe9                                                                                                               
002ce8   c02e     MOVFF     0x2e,0xfea                                                                                      
002cea   ffea                                                                                                               
002cec   ec84     CALL      0x3508,0x0                                                                                      
002cee   f01a                                                                                                               
002cf0   6a2c     CLRF      0x2c,0x0                                                                                        
002cf2   0e0e     MOVLW     0xe                                                                                             
002cf4   c02a     MOVFF     0x2a,0xfdb                                                                                      
002cf6   ffdb                                                                                                               
002cf8   0e0f     MOVLW     0xf                                                                                             
002cfa   c02b     MOVFF     0x2b,0xfdb                                                                                      
002cfc   ffdb                                                                                                               
002cfe   0e10     MOVLW     0x10                                                                                            
002d00   c02c     MOVFF     0x2c,0xfdb                                                                                      
002d02   ffdb                                                                                                               
002d04   0e0e     MOVLW     0xe                          n = strlenpgm (romstring);                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d06   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002d08   ffe6                                                                                                               
002d0a   0e0f     MOVLW     0xf                                                                                             
002d0c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002d0e   ffe6                                                                                                               
002d10   0e10     MOVLW     0x10                                                                                            
002d12   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002d14   ffe6                                                                                                               
002d16   ec9c     CALL      0x4738,0x0                                                                                      
002d18   f023                                                                                                               
002d1a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d1c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d1e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002d20   0e13     MOVLW     0x13                                                                                            
002d22   c01d     MOVFF     0x1d,0xfdb                                                                                      
002d24   ffdb                                                                                                               
002d26   0e14     MOVLW     0x14                                                                                            
002d28   c01e     MOVFF     0x1e,0xfdb                                                                                      
002d2a   ffdb                                                                                                               
                                                         /* Normalize the width based on the length of the actual           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string and the precision. */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d2c   0e06     MOVLW     0x6                          if (have_precision && precision < (unsigned char) n)               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d2e   50db     MOVF      0xdb,0x0,0x0                                                                                    
002d30   e005     BZ        0x2d3c                                                                                          
002d32   0e13     MOVLW     0x13                                                                                            
002d34   ecc8     CALL      0x3590,0x0                                                                                      
002d36   f01a                                                                                                               
002d38   e201     BC        0x2d3c                                                                                          
002d3a   db6a     RCALL     0x3410                         n = precision;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003410   0e05     MOVLW     0x5                                                                                             
003412   50db     MOVF      0xdb,0x0,0x0                                                                                    
003414   6ee6     MOVWF     0xe6,0x0                                                                                        
003416   50d9     MOVF      0xd9,0x0,0x0                                                                                    
003418   0f13     ADDLW     0x13                                                                                            
00341a   d901     RCALL     0x361e                                                                                          
00341c   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00341e   50e7     MOVF      0xe7,0x0,0x0                                                                                    
003420   6eee     MOVWF     0xee,0x0                                                                                        
003422   6aed     CLRF      0xed,0x0                                                                                        
003424   0012     RETURN    0x0                                                                                             
002d3c   ecec     CALL      0x35d8,0x0                   if (width < (unsigned char) n)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d3e   f01a                                                                                                               
002d40   e202     BC        0x2d46                                                                                          
0035d8   0e13     MOVLW     0x13                                                                                            
0035da   50db     MOVF      0xdb,0x0,0x0                                                                                    
0035dc   6ef3     MOVWF     0xf3,0x0                                                                                        
0035de   0e04     MOVLW     0x4                                                                                             
0035e0   efd5     GOTO      0x33aa                                                                                          
0035e2   f019                                                                                                               
002d42   0e13     MOVLW     0x13                           width = n;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d44   db37     RCALL     0x33b4                                                                                          
002d46   ecaf     CALL      0x355e,0x0                   space_cnt = width - (unsigned char) n;                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d48   f01a                                                                                                               
00355e   0e04     MOVLW     0x4                                                                                             
003560   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003562   ffe6                                                                                                               
003564   0e13     MOVLW     0x13                                                                                            
003566   50db     MOVF      0xdb,0x0,0x0                                                                                    
003568   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00356a   5ce7     SUBWF     0xe7,0x0,0x0                                                                                    
00356c   df9a     RCALL     0x34a2                                                                                          
00356e   50db     MOVF      0xdb,0x0,0x0                 count += space_cnt;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003570   df04     RCALL     0x337a                                                                                          
                                                         /* we've already calculated the space count that the width         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            will require. now we want the width field to have the           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            number of character to display from the string itself,          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            limited by the length of the actual string and the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specified precision. */                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d4a   e006     BZ        0x2d58                       if (have_precision && precision < width)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d4c   0e04     MOVLW     0x4                                                                                             
002d4e   ecc8     CALL      0x3590,0x0                                                                                      
002d50   f01a                                                                                                               
002d52   e202     BC        0x2d58                                                                                          
003572   0e06     MOVLW     0x6                                                                                             
003574   50db     MOVF      0xdb,0x0,0x0                                                                                    
003576   0012     RETURN    0x0                                                                                             
002d54   0e05     MOVLW     0x5                            width = precision;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d56   db2e     RCALL     0x33b4                                                                                          
                                                         /* if right justified, we print the spaces before the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string */                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d58   0e03     MOVLW     0x3                          if (!(flags & _FLAG_MINUS))                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d5a   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
002d5c   d005     BRA       0x2d68                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d5e   dafc     RCALL     0x3358                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d60   e001     BZ        0x2d64                                                                                          
002d62   d2d7     BRA       0x3312                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d64   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d66   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d68   0e09     MOVLW     0x9                          cval = 0;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d6a   6adb     CLRF      0xdb,0x0                                                                                        
002d6c   0e0e     MOVLW     0xe                          for (c = *romstring; c && cval < width; c = *++romstring)          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d6e   cfdb     MOVFF     0xfdb,0xff6                                                                                     
002d70   fff6                                                                                                               
002d72   0e0f     MOVLW     0xf                                                                                             
002d74   cfdb     MOVFF     0xfdb,0xff7                                                                                     
002d76   fff7                                                                                                               
002d78   0e10     MOVLW     0x10                                                                                            
002d7a   cfdb     MOVFF     0xfdb,0xff8                                                                                     
002d7c   fff8                                                                                                               
002d7e   0008     TBLRD                                                                                                     
002d80   50f5     MOVF      0xf5,0x0,0x0                                                                                    
002d82   6edf     MOVWF     0xdf,0x0                                                                                        
002d84   50df     MOVF      0xdf,0x0,0x0                                                                                    
002d86   e014     BZ        0x2db0                                                                                          
002d88   ecf2     CALL      0x35e4,0x0                                                                                      
002d8a   f01a                                                                                                               
002d8c   e211     BC        0x2db0                                                                                          
002da4   50d9     MOVF      0xd9,0x0,0x0                                                                                    
002da6   0f0e     ADDLW     0xe                                                                                             
002da8   6ee9     MOVWF     0xe9,0x0                                                                                        
002daa   0e00     MOVLW     0x0                                                                                             
002dac   dbcb     RCALL     0x3544                                                                                          
002dae   d7e7     BRA       0x2d7e                                                                                          
0035e4   0e04     MOVLW     0x4                                                                                             
0035e6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0035e8   6ef3     MOVWF     0xf3,0x0                                                                                        
0035ea   0e09     MOVLW     0x9                                                                                             
0035ec   efd5     GOTO      0x33aa                                                                                          
0035ee   f019                                                                                                               
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d8e   ec01     CALL      0x3602,0x0                       if (putc (c, handle) == EOF)                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d90   f01b                                                                                                               
002d92   e103     BNZ       0x2d9a                                                                                          
002d94   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002d96   e101     BNZ       0x2d9a                                                                                          
002d98   d2bc     BRA       0x3312                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d9a   dbbb     RCALL     0x3512                           ++count;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002d9c   e301     BNC       0x2da0                                                                                          
002d9e   2adb     INCF      0xdb,0x1,0x0                                                                                    
002da0   0e09     MOVLW     0x9                              ++cval;                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002da2   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* If there are spaces left, it's left justified.                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            Either way, calling the function unconditionally                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            is smaller code. */                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002db0   dad3     RCALL     0x3358                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002db2   e101     BNZ       0x2db6                                                                                          
002db4   d2b4     BRA       0x331e                                                                                          
002db6   d2ad     BRA       0x3312                         return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 's':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002db8   dac6     RCALL     0x3346                       ramstring = va_arg (ap, char *);                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dba   0e11     MOVLW     0x11                                                                                            
002dbc   cfee     MOVFF     0xfee,0xfdb                                                                                     
002dbe   ffdb                                                                                                               
002dc0   0e12     MOVLW     0x12                                                                                            
002dc2   cfed     MOVFF     0xfed,0xfdb                                                                                     
002dc4   ffdb                                                                                                               
002dc6   0e11     MOVLW     0x11                         n = strlen (ramstring);                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dc8   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002dca   ffe6                                                                                                               
002dcc   0e12     MOVLW     0x12                                                                                            
002dce   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
002dd0   ffe6                                                                                                               
002dd2   ec8e     CALL      0x471c,0x0                                                                                      
002dd4   f023                                                                                                               
002dd6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002dd8   52e5     MOVF      0xe5,0x1,0x0                                                                                    
002dda   0e13     MOVLW     0x13                                                                                            
002ddc   cff3     MOVFF     0xff3,0xfdb                                                                                     
002dde   ffdb                                                                                                               
002de0   0e14     MOVLW     0x14                                                                                            
002de2   cff4     MOVFF     0xff4,0xfdb                                                                                     
002de4   ffdb                                                                                                               
                                                         /* Normalize the width based on the length of the actual           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string and the precision. */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002de6   0e06     MOVLW     0x6                          if (have_precision && precision < (unsigned char) n)               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002de8   50db     MOVF      0xdb,0x0,0x0                                                                                    
002dea   e004     BZ        0x2df4                                                                                          
002dec   0e13     MOVLW     0x13                                                                                            
002dee   dbd0     RCALL     0x3590                                                                                          
002df0   e201     BC        0x2df4                                                                                          
002df2   db0e     RCALL     0x3410                         n = precision;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002df4   ecec     CALL      0x35d8,0x0                   if (width < (unsigned char) n)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002df6   f01a                                                                                                               
002df8   e202     BC        0x2dfe                                                                                          
002dfa   0e13     MOVLW     0x13                           width = n;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002dfc   dadb     RCALL     0x33b4                                                                                          
002dfe   dbaf     RCALL     0x355e                       space_cnt = width - (unsigned char) n;                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0034a2   6ee7     MOVWF     0xe7,0x0                                                                                        
0034a4   0e08     MOVLW     0x8                                                                                             
0034a6   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0034a8   ffdb                                                                                                               
0034aa   0012     RETURN    0x0                                                                                             
                                                         count += space_cnt;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* we've already calculated the space count that the width         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            will require. now we want the width field to have the           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            number of character to display from the string itself,          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            limited by the length of the actual string and the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specified precision. */                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e00   e005     BZ        0x2e0c                       if (have_precision && precision < width)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e02   0e04     MOVLW     0x4                                                                                             
002e04   dbc5     RCALL     0x3590                                                                                          
002e06   e202     BC        0x2e0c                                                                                          
003590   50db     MOVF      0xdb,0x0,0x0                                                                                    
003592   6ef3     MOVWF     0xf3,0x0                                                                                        
003594   0e05     MOVLW     0x5                                                                                             
003596   efd5     GOTO      0x33aa                                                                                          
003598   f019                                                                                                               
002e08   0e05     MOVLW     0x5                            width = precision;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e0a   dad4     RCALL     0x33b4                                                                                          
0033b4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0033b6   6ee7     MOVWF     0xe7,0x0                                                                                        
0033b8   0e04     MOVLW     0x4                                                                                             
0033ba   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0033bc   ffdb                                                                                                               
0033be   0012     RETURN    0x0                                                                                             
                                                         /* if right justified, we print the spaces before the              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            string */                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e0c   0e03     MOVLW     0x3                          if (!(flags & _FLAG_MINUS))                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e0e   b0db     BTFSC     0xdb,0x0,0x0                                                                                    
002e10   d005     BRA       0x2e1c                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e12   daa2     RCALL     0x3358                           if (s_put_n_chars (handle, space_cnt, ' '))                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e14   e001     BZ        0x2e18                                                                                          
002e16   d27d     BRA       0x3312                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e18   0e08     MOVLW     0x8                              space_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e1a   6adb     CLRF      0xdb,0x0                                                                                        
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e1c   0e09     MOVLW     0x9                          cval = 0;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e1e   6adb     CLRF      0xdb,0x0                                                                                        
002e20   0e11     MOVLW     0x11                         for (c = *ramstring; c && cval < width; c = *++ramstring)          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e22   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002e24   ffe9                                                                                                               
002e26   0e12     MOVLW     0x12                                                                                            
002e28   cfdb     MOVFF     0xfdb,0xfea                                                                                     
002e2a   ffea                                                                                                               
002e2c   cfef     MOVFF     0xfef,0xfdf                                                                                     
002e2e   ffdf                                                                                                               
002e30   50df     MOVF      0xdf,0x0,0x0                                                                                    
002e32   e014     BZ        0x2e5c                                                                                          
002e34   dbd7     RCALL     0x35e4                                                                                          
002e36   e212     BC        0x2e5c                                                                                          
002e4c   0e11     MOVLW     0x11                                                                                            
002e4e   2adb     INCF      0xdb,0x1,0x0                                                                                    
002e50   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
002e52   ffe9                                                                                                               
002e54   0e12     MOVLW     0x12                                                                                            
002e56   e3e8     BNC       0x2e28                                                                                          
002e58   2adb     INCF      0xdb,0x1,0x0                                                                                    
002e5a   d7e6     BRA       0x2e28                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e38   dbe4     RCALL     0x3602                           if (putc (c, handle) == EOF)                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e3a   e103     BNZ       0x2e42                                                                                          
002e3c   1c2b     COMF      0x2b,0x0,0x0                                                                                    
002e3e   e101     BNZ       0x2e42                                                                                          
002e40   d268     BRA       0x3312                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e42   db67     RCALL     0x3512                           ++count;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e44   e301     BNC       0x2e48                                                                                          
002e46   2adb     INCF      0xdb,0x1,0x0                                                                                    
002e48   0e09     MOVLW     0x9                              ++cval;                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e4a   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* If there are spaces left, it's left justified.                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            Either way, calling the function unconditionally                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            is smaller code. */                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e5c   da7d     RCALL     0x3358                       if (s_put_n_chars (handle, space_cnt, ' '))                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e5e   e101     BNZ       0x2e62                                                                                          
002e60   d25e     BRA       0x331e                                                                                          
002e62   d257     BRA       0x3312                         return EOF;                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'd':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'i':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e64   0e03     MOVLW     0x3                          flags |= _FLAG_SIGNED;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e66   8edb     BSF       0xdb,0x7,0x0                                                                                    
                                                         /* fall through */                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'o':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'u':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'x':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'X':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'b':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'B':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* This is a bit of a sneaky trick. The 'l' and 'hh' size          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            specifiers are valid only for the integer conversions,          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            not the 'p' or 'P' conversions, and are ignored for the         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            latter. By jumping over the additional size specifier           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            checks here we get the best code size since we can              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                            limit the size checks in the remaining code. */                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e68   0e07     MOVLW     0x7                          if (size == _FMT_LONG)                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e6a   04db     DECF      0xdb,0x0,0x0                                                                                    
002e6c   e110     BNZ       0x2e8e                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e6e   db95     RCALL     0x359a                           larg = va_arg (ap, long int);                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e70   0e04     MOVLW     0x4                                                                                             
002e72   db5a     RCALL     0x3528                                                                                          
002e74   0e0a     MOVLW     0xa                                                                                             
002e76   cfee     MOVFF     0xfee,0xfdb                                                                                     
002e78   ffdb                                                                                                               
002e7a   0e0b     MOVLW     0xb                                                                                             
002e7c   cfee     MOVFF     0xfee,0xfdb                                                                                     
002e7e   ffdb                                                                                                               
002e80   0e0c     MOVLW     0xc                                                                                             
002e82   cfee     MOVFF     0xfee,0xfdb                                                                                     
002e84   ffdb                                                                                                               
002e86   0e0d     MOVLW     0xd                                                                                             
002e88   cfee     MOVFF     0xfee,0xfdb                                                                                     
002e8a   ffdb                                                                                                               
002e8c   d06c     BRA       0x2f66                           goto _do_integer_conversion;                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e8e   0e07     MOVLW     0x7                          else if (size == _FMT_BYTE)                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e90   50db     MOVF      0xdb,0x0,0x0                                                                                    
002e92   0803     SUBLW     0x3                                                                                             
002e94   e12c     BNZ       0x2eee                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e96   0e03     MOVLW     0x3                              if (flags & _FLAG_SIGNED)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e98   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
002e9a   d00d     BRA       0x2eb6                                                                                          
002e9c   dab2     RCALL     0x3402                             larg = (signed char) va_arg (ap, int);                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002e9e   0e02     MOVLW     0x2                                                                                             
002ea0   da76     RCALL     0x338e                                                                                          
002ea2   cfef     MOVFF     0xfef,0x2a                                                                                      
002ea4   f02a                                                                                                               
002ea6   6a2b     CLRF      0x2b,0x0                                                                                        
002ea8   6a2c     CLRF      0x2c,0x0                                                                                        
002eaa   6a2d     CLRF      0x2d,0x0                                                                                        
002eac   ae2a     BTFSS     0x2a,0x7,0x0                                                                                    
002eae   d039     BRA       0x2f22                                                                                          
002eb0   682b     SETF      0x2b,0x0                                                                                        
002eb2   682c     SETF      0x2c,0x0                                                                                        
002eb4   d035     BRA       0x2f20                           else                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eb6   0ef7     MOVLW     0xf7                               larg = (unsigned char) va_arg (ap, unsigned int);            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eb8   cfdb     MOVFF     0xfdb,0x2b                                                                                      
002eba   f02b                                                                                                               
002ebc   0ef8     MOVLW     0xf8                                                                                            
002ebe   cfdb     MOVFF     0xfdb,0x2c                                                                                      
002ec0   f02c                                                                                                               
002ec2   0e02     MOVLW     0x2                                                                                             
002ec4   5e2b     SUBWF     0x2b,0x1,0x0                                                                                    
002ec6   0e00     MOVLW     0x0                                                                                             
002ec8   5a2c     SUBWFB    0x2c,0x1,0x0                                                                                    
002eca   0ef7     MOVLW     0xf7                                                                                            
002ecc   c02b     MOVFF     0x2b,0xfdb                                                                                      
002ece   ffdb                                                                                                               
002ed0   0ef8     MOVLW     0xf8                                                                                            
002ed2   c02c     MOVFF     0x2c,0xfdb                                                                                      
002ed4   ffdb                                                                                                               
002ed6   c02b     MOVFF     0x2b,0xfe9                                                                                      
002ed8   ffe9                                                                                                               
002eda   c02c     MOVFF     0x2c,0xfea                                                                                      
002edc   ffea                                                                                                               
002ede   cfef     MOVFF     0xfef,0x2a                                                                                      
002ee0   f02a                                                                                                               
002ee2   0e0a     MOVLW     0xa                                                                                             
002ee4   c02a     MOVFF     0x2a,0xfdb                                                                                      
002ee6   ffdb                                                                                                               
002ee8   0e0b     MOVLW     0xb                                                                                             
002eea   6adb     CLRF      0xdb,0x0                                                                                        
002eec   d038     BRA       0x2f5e                           goto _do_integer_conversion;                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* fall through */                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'p':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'P':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002eee   0e07     MOVLW     0x7                          if (size == _FMT_SHLONG)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ef0   50db     MOVF      0xdb,0x0,0x0                                                                                    
002ef2   0802     SUBLW     0x2                                                                                             
002ef4   e109     BNZ       0x2f08                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ef6   0e03     MOVLW     0x3                              if (flags & _FLAG_SIGNED)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ef8   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
002efa   d004     BRA       0x2f04                                                                                          
002efc   db59     RCALL     0x35b0                             larg = va_arg (ap, short long int);                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002efe   ae2c     BTFSS     0x2c,0x7,0x0                                                                                    
002f00   d010     BRA       0x2f22                                                                                          
0034ac   cfee     MOVFF     0xfee,0x2a                                                                                      
0034ae   f02a                                                                                                               
0034b0   cfee     MOVFF     0xfee,0x2b                                                                                      
0034b2   f02b                                                                                                               
0034b4   cfef     MOVFF     0xfef,0x2c                                                                                      
0034b6   f02c                                                                                                               
0034b8   6a2d     CLRF      0x2d,0x0                                                                                        
0034ba   0012     RETURN    0x0                                                                                             
0035b0   df28     RCALL     0x3402                                                                                          
0035b2   0e03     MOVLW     0x3                                                                                             
0035b4   deec     RCALL     0x338e                                                                                          
0035b6   ef56     GOTO      0x34ac                                                                                          
0035b8   f01a                                                                                                               
002f02   d00e     BRA       0x2f20                           else                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f04   db55     RCALL     0x35b0                             larg = va_arg (ap, unsigned short long int);                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f06   d00d     BRA       0x2f22                       else if (flags & _FLAG_SIGNED)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f08   0e03     MOVLW     0x3                                                                                             
002f0a   aedb     BTFSS     0xdb,0x7,0x0                                                                                    
002f0c   d012     BRA       0x2f32                                                                                          
002f0e   da79     RCALL     0x3402                         larg = va_arg (ap, int);                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f10   0e02     MOVLW     0x2                                                                                             
002f12   da3d     RCALL     0x338e                                                                                          
002f14   daf9     RCALL     0x3508                                                                                          
002f16   6a2c     CLRF      0x2c,0x0                                                                                        
002f18   6a2d     CLRF      0x2d,0x0                                                                                        
002f1a   ae2b     BTFSS     0x2b,0x7,0x0                                                                                    
002f1c   d002     BRA       0x2f22                                                                                          
002f1e   682c     SETF      0x2c,0x0                                                                                        
002f20   682d     SETF      0x2d,0x0                                                                                        
002f22   dae2     RCALL     0x34e8                                                                                          
002f24   0e0c     MOVLW     0xc                                                                                             
002f26   c02c     MOVFF     0x2c,0xfdb                                                                                      
002f28   ffdb                                                                                                               
002f2a   0e0d     MOVLW     0xd                                                                                             
002f2c   c02d     MOVFF     0x2d,0xfdb                                                                                      
002f2e   ffdb                                                                                                               
00338e   5e2e     SUBWF     0x2e,0x1,0x0                                                                                    
003390   0e00     MOVLW     0x0                                                                                             
003392   5a2f     SUBWFB    0x2f,0x1,0x0                                                                                    
003394   0ef7     MOVLW     0xf7                                                                                            
003396   c02e     MOVFF     0x2e,0xfdb                                                                                      
003398   ffdb                                                                                                               
00339a   0ef8     MOVLW     0xf8                                                                                            
00339c   c02f     MOVFF     0x2f,0xfdb                                                                                      
00339e   ffdb                                                                                                               
0033a0   c02e     MOVFF     0x2e,0xfe9                                                                                      
0033a2   ffe9                                                                                                               
0033a4   c02f     MOVFF     0x2f,0xfea                                                                                      
0033a6   ffea                                                                                                               
0033a8   0012     RETURN    0x0                                                                                             
003402   0ef7     MOVLW     0xf7                                                                                            
003404   cfdb     MOVFF     0xfdb,0x2e                                                                                      
003406   f02e                                                                                                               
003408   0ef8     MOVLW     0xf8                                                                                            
00340a   cfdb     MOVFF     0xfdb,0x2f                                                                                      
00340c   f02f                                                                                                               
00340e   0012     RETURN    0x0                                                                                             
0034e8   0e0a     MOVLW     0xa                                                                                             
0034ea   c02a     MOVFF     0x2a,0xfdb                                                                                      
0034ec   ffdb                                                                                                               
0034ee   0e0b     MOVLW     0xb                                                                                             
0034f0   c02b     MOVFF     0x2b,0xfdb                                                                                      
0034f2   ffdb                                                                                                               
0034f4   0012     RETURN    0x0                                                                                             
003508   cfee     MOVFF     0xfee,0x2a                                                                                      
00350a   f02a                                                                                                               
00350c   cfef     MOVFF     0xfef,0x2b                                                                                      
00350e   f02b                                                                                                               
003510   0012     RETURN    0x0                                                                                             
002f30   d01a     BRA       0x2f66                       else                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f32   0ef7     MOVLW     0xf7                           larg = va_arg (ap, unsigned int);                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f34   cfdb     MOVFF     0xfdb,0x2c                                                                                      
002f36   f02c                                                                                                               
002f38   0ef8     MOVLW     0xf8                                                                                            
002f3a   cfdb     MOVFF     0xfdb,0x2d                                                                                      
002f3c   f02d                                                                                                               
002f3e   0e02     MOVLW     0x2                                                                                             
002f40   5e2c     SUBWF     0x2c,0x1,0x0                                                                                    
002f42   0e00     MOVLW     0x0                                                                                             
002f44   5a2d     SUBWFB    0x2d,0x1,0x0                                                                                    
002f46   0ef7     MOVLW     0xf7                                                                                            
002f48   c02c     MOVFF     0x2c,0xfdb                                                                                      
002f4a   ffdb                                                                                                               
002f4c   0ef8     MOVLW     0xf8                                                                                            
002f4e   c02d     MOVFF     0x2d,0xfdb                                                                                      
002f50   ffdb                                                                                                               
002f52   c02c     MOVFF     0x2c,0xfe9                                                                                      
002f54   ffe9                                                                                                               
002f56   c02d     MOVFF     0x2d,0xfea                                                                                      
002f58   ffea                                                                                                               
002f5a   dad6     RCALL     0x3508                                                                                          
002f5c   dac5     RCALL     0x34e8                                                                                          
002f5e   0e0c     MOVLW     0xc                                                                                             
002f60   6adb     CLRF      0xdb,0x0                                                                                        
002f62   0e0d     MOVLW     0xd                                                                                             
002f64   6adb     CLRF      0xdb,0x0                                                                                        
                                                       _do_integer_conversion:                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* default precision is 1 */                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f66   0e06     MOVLW     0x6                          if (!have_precision)                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f68   50db     MOVF      0xdb,0x0,0x0                                                                                    
002f6a   e105     BNZ       0x2f76                                                                                          
002f6c   0e01     MOVLW     0x1                            precision = 1;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f6e   6ef3     MOVWF     0xf3,0x0                                                                                        
002f70   0e05     MOVLW     0x5                                                                                             
002f72   cff3     MOVFF     0xff3,0xfdb                                                                                     
002f74   ffdb                                                                                                               
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         {                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f76   0e15     MOVLW     0x15                           unsigned char digit_cnt = 0;                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f78   6adb     CLRF      0xdb,0x0                                                                                        
002f7a   0e16     MOVLW     0x16                           unsigned char prefix_cnt = 0;                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f7c   6adb     CLRF      0xdb,0x0                                                                                        
                                                           unsigned char sign_char;                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* A 32 bit number will require at most 32 digits in the         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              string representation (binary format). */                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           char buf[33];                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* Start storing digits least-significant first */               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f7e   50d9     MOVF      0xd9,0x0,0x0                   char *q = &buf[31];                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f80   0f37     ADDLW     0x37                                                                                            
002f82   6e2a     MOVWF     0x2a,0x0                                                                                        
002f84   0e00     MOVLW     0x0                                                                                             
002f86   20da     ADDWFC    0xda,0x0,0x0                                                                                    
002f88   6e2b     MOVWF     0x2b,0x0                                                                                        
002f8a   0e39     MOVLW     0x39                                                                                            
002f8c   c02a     MOVFF     0x2a,0xfdb                                                                                      
002f8e   ffdb                                                                                                               
002f90   0e3a     MOVLW     0x3a                                                                                            
002f92   c02b     MOVFF     0x2b,0xfdb                                                                                      
002f94   ffdb                                                                                                               
                                                           /* null terminate the string */                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f96   0e38     MOVLW     0x38                           buf[32] = '\0';                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f98   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f9a   0e08     MOVLW     0x8                            space_cnt = 0;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002f9c   6adb     CLRF      0xdb,0x0                                                                                        
002f9e   0e0a     MOVLW     0xa                            size = 10;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fa0   daae     RCALL     0x34fe                                                                                          
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fa2   50df     MOVF      0xdf,0x0,0x0                   switch (c)                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fa4   0a78     XORLW     0x78                                                                                            
002fa6   e012     BZ        0x2fcc                                                                                          
002fa8   0a20     XORLW     0x20                                                                                            
002faa   e010     BZ        0x2fcc                                                                                          
002fac   0a28     XORLW     0x28                                                                                            
002fae   e00c     BZ        0x2fc8                                                                                          
002fb0   0a20     XORLW     0x20                                                                                            
002fb2   e00a     BZ        0x2fc8                                                                                          
002fb4   0a3f     XORLW     0x3f                                                                                            
002fb6   e006     BZ        0x2fc4                                                                                          
002fb8   0a0d     XORLW     0xd                                                                                             
002fba   e002     BZ        0x2fc0                                                                                          
002fbc   0a20     XORLW     0x20                                                                                            
002fbe   e108     BNZ       0x2fd0                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'b':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'B':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fc0   0e02     MOVLW     0x2                                size = 2;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fc2   d005     BRA       0x2fce                             break;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'o':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fc4   0e08     MOVLW     0x8                                size = 8;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fc6   d003     BRA       0x2fce                             break;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'p':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'P':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               /* from here on out, treat 'p' conversions just              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                  like 'x' conversions. */                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fc8   0e08     MOVLW     0x8                                c += 'x' - 'p';                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fca   26df     ADDWF     0xdf,0x1,0x0                                                                                    
                                                               /* fall through */                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'x':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             case 'X':                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fcc   0e10     MOVLW     0x10                               size = 16;                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fce   da97     RCALL     0x34fe                                                                                          
0034fe   6ef3     MOVWF     0xf3,0x0                                                                                        
003500   0e07     MOVLW     0x7                                                                                             
003502   cff3     MOVFF     0xff3,0xfdb                                                                                     
003504   ffdb                                                                                                               
003506   0012     RETURN    0x0                                                                                             
                                                               break;                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if it's an unsigned conversion, we should ignore the          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              ' ' and '+' flags */                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fd0   0e03     MOVLW     0x3                            if (!(flags & _FLAG_SIGNED))                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fd2   bedb     BTFSC     0xdb,0x7,0x0                                                                                    
002fd4   d002     BRA       0x2fda                                                                                          
002fd6   92db     BCF       0xdb,0x1,0x0                     flags &= ~(_FLAG_PLUS | _FLAG_SPACE);                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fd8   94db     BCF       0xdb,0x2,0x0                                                                                    
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if it's a negative value, we need to negate the               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              unsigned version before we convert to text. Using             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              unsigned for this allows us to (ab)use the 2's                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              complement system to avoid overflow and be able to            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              adequately handle LONG_MIN.                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              We'll figure out what sign character to print, if             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              any, here as well. */                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fda   50db     MOVF      0xdb,0x0,0x0                   if (flags & _FLAG_SIGNED && ((long) larg < 0))                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002fdc   0b80     ANDLW     0x80                                                                                            
002fde   e024     BZ        0x3028                                                                                          
002fe0   da8a     RCALL     0x34f6                                                                                          
002fe2   90d8     BCF       0xd8,0x0,0x0                                                                                    
002fe4   0e03     MOVLW     0x3                                                                                             
002fe6   50eb     MOVF      0xeb,0x0,0x0                                                                                    
002fe8   0a00     XORLW     0x0                                                                                             
002fea   e608     BN        0x2ffc                                                                                          
002fec   0e00     MOVLW     0x0                                                                                             
002fee   5cee     SUBWF     0xee,0x0,0x0                                                                                    
002ff0   0e00     MOVLW     0x0                                                                                             
002ff2   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
002ff4   0e00     MOVLW     0x0                                                                                             
002ff6   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
002ff8   0e00     MOVLW     0x0                                                                                             
002ffa   58ee     SUBWFB    0xee,0x0,0x0                                                                                    
002ffc   e215     BC        0x3028                                                                                          
0034f6   50d9     MOVF      0xd9,0x0,0x0                                                                                    
0034f8   0f0a     ADDLW     0xa                                                                                             
0034fa   ef0f     GOTO      0x361e                                                                                          
0034fc   f01b                                                                                                               
00361e   6ee9     MOVWF     0xe9,0x0                                                                                        
003620   0e00     MOVLW     0x0                                                                                             
003622   20da     ADDWFC    0xda,0x0,0x0                                                                                    
003624   6eea     MOVWF     0xea,0x0                                                                                        
003626   0012     RETURN    0x0                                                                                             
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
002ffe   da13     RCALL     0x3426                             larg = -(long) larg;                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003000   6821     SETF      0x21,0x0                                                                                        
003002   6822     SETF      0x22,0x0                                                                                        
003004   6823     SETF      0x23,0x0                                                                                        
003006   6824     SETF      0x24,0x0                                                                                        
003008   ec56     CALL      0x46ac,0x0                                                                                      
00300a   f023                                                                                                               
00300c   0e0a     MOVLW     0xa                                                                                             
00300e   c018     MOVFF     0x18,0xfdb                                                                                      
003010   ffdb                                                                                                               
003012   0e0b     MOVLW     0xb                                                                                             
003014   c019     MOVFF     0x19,0xfdb                                                                                      
003016   ffdb                                                                                                               
003018   0e0c     MOVLW     0xc                                                                                             
00301a   c01a     MOVFF     0x1a,0xfdb                                                                                      
00301c   ffdb                                                                                                               
00301e   0e0d     MOVLW     0xd                                                                                             
003020   c01b     MOVFF     0x1b,0xfdb                                                                                      
003022   ffdb                                                                                                               
003426   0e0a     MOVLW     0xa                                                                                             
003428   cfdb     MOVFF     0xfdb,0x1c                                                                                      
00342a   f01c                                                                                                               
00342c   0e0b     MOVLW     0xb                                                                                             
00342e   cfdb     MOVFF     0xfdb,0x1d                                                                                      
003430   f01d                                                                                                               
003432   0e0c     MOVLW     0xc                                                                                             
003434   cfdb     MOVFF     0xfdb,0x1e                                                                                      
003436   f01e                                                                                                               
003438   0e0d     MOVLW     0xd                                                                                             
00343a   cfdb     MOVFF     0xfdb,0x1f                                                                                      
00343c   f01f                                                                                                               
00343e   0012     RETURN    0x0                                                                                             
003024   0e2d     MOVLW     0x2d                               sign_char = '-';                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               ++digit_cnt;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003026   d008     BRA       0x3038                         else if (flags & _FLAG_PLUS)                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003028   0e03     MOVLW     0x3                                                                                             
00302a   a2db     BTFSS     0xdb,0x1,0x0                                                                                    
00302c   d002     BRA       0x3032                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00302e   0e2b     MOVLW     0x2b                               sign_char = '+';                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               ++digit_cnt;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003030   d003     BRA       0x3038                         else if (flags & _FLAG_SPACE)                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003032   a4db     BTFSS     0xdb,0x2,0x0                                                                                    
003034   d008     BRA       0x3046                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003036   0e20     MOVLW     0x20                               sign_char = ' ';                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003038   6ef3     MOVWF     0xf3,0x0                                                                                        
00303a   0e17     MOVLW     0x17                                                                                            
00303c   cff3     MOVFF     0xff3,0xfdb                                                                                     
00303e   ffdb                                                                                                               
003040   0e15     MOVLW     0x15                               ++digit_cnt;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003042   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003044   d002     BRA       0x304a                         else                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003046   0e17     MOVLW     0x17                             sign_char = '\0';                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003048   6adb     CLRF      0xdb,0x0                                                                                        
                                                           /* get the digits for the actual number. If the                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              precision is zero and the value is zero, the result           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              is no characters. */                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00304a   0e05     MOVLW     0x5                            if (precision || larg)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00304c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00304e   e103     BNZ       0x3056                                                                                          
003050   d9b7     RCALL     0x33c0                                                                                          
003052   e101     BNZ       0x3056                                                                                          
003054   d089     BRA       0x3168                                                                                          
0033c0   0e0a     MOVLW     0xa                                                                                             
0033c2   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0033c4   f02a                                                                                                               
0033c6   0e0b     MOVLW     0xb                                                                                             
0033c8   cfdb     MOVFF     0xfdb,0x2b                                                                                      
0033ca   f02b                                                                                                               
0033cc   0e0c     MOVLW     0xc                                                                                             
0033ce   cfdb     MOVFF     0xfdb,0x2c                                                                                      
0033d0   f02c                                                                                                               
0033d2   0e0d     MOVLW     0xd                                                                                             
0033d4   cfdb     MOVFF     0xfdb,0x2d                                                                                      
0033d6   f02d                                                                                                               
0033d8   502a     MOVF      0x2a,0x0,0x0                                                                                    
0033da   102b     IORWF     0x2b,0x0,0x0                                                                                    
0033dc   102c     IORWF     0x2c,0x0,0x0                                                                                    
0033de   102d     IORWF     0x2d,0x0,0x0                                                                                    
0033e0   0012     RETURN    0x0                                                                                             
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                               do                                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                 {                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003056   0e02     MOVLW     0x2                                    cval = s_digits[larg % size];                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003058   6e2a     MOVWF     0x2a,0x0                                                                                        
00305a   0e49     MOVLW     0x49                                                                                            
00305c   6e2b     MOVWF     0x2b,0x0                                                                                        
00305e   0e00     MOVLW     0x0                                                                                             
003060   6e2c     MOVWF     0x2c,0x0                                                                                        
003062   0e07     MOVLW     0x7                                                                                             
003064   cfdb     MOVFF     0xfdb,0x2d                                                                                      
003066   f02d                                                                                                               
003068   6a2e     CLRF      0x2e,0x0                                                                                        
00306a   6a2f     CLRF      0x2f,0x0                                                                                        
00306c   6a30     CLRF      0x30,0x0                                                                                        
00306e   c02d     MOVFF     0x2d,0x21                                                                                       
003070   f021                                                                                                               
003072   c02e     MOVFF     0x2e,0x22                                                                                       
003074   f022                                                                                                               
003076   c02f     MOVFF     0x2f,0x23                                                                                       
003078   f023                                                                                                               
00307a   c030     MOVFF     0x30,0x24                                                                                       
00307c   f024                                                                                                               
00307e   d9d3     RCALL     0x3426                                                                                          
003080   ece7     CALL      0x47ce,0x0                                                                                      
003082   f023                                                                                                               
003084   502a     MOVF      0x2a,0x0,0x0                                                                                    
003086   2418     ADDWF     0x18,0x0,0x0                                                                                    
003088   6ef3     MOVWF     0xf3,0x0                                                                                        
00308a   502b     MOVF      0x2b,0x0,0x0                                                                                    
00308c   2019     ADDWFC    0x19,0x0,0x0                                                                                    
00308e   6ef4     MOVWF     0xf4,0x0                                                                                        
003090   502c     MOVF      0x2c,0x0,0x0                                                                                    
003092   201a     ADDWFC    0x1a,0x0,0x0                                                                                    
003094   6ef8     MOVWF     0xf8,0x0                                                                                        
003096   cff4     MOVFF     0xff4,0xff7                                                                                     
003098   fff7                                                                                                               
00309a   cff3     MOVFF     0xff3,0xff6                                                                                     
00309c   fff6                                                                                                               
00309e   0008     TBLRD                                                                                                     
0030a0   0e09     MOVLW     0x9                                                                                             
0030a2   cff5     MOVFF     0xff5,0xfdb                                                                                     
0030a4   ffdb                                                                                                               
0030a6   0e58     MOVLW     0x58                                   if (c == 'X' && cval >= 'a')                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030a8   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
0030aa   e10f     BNZ       0x30ca                                                                                          
0030ac   0e61     MOVLW     0x61                                                                                            
0030ae   6ef3     MOVWF     0xf3,0x0                                                                                        
0030b0   0e09     MOVLW     0x9                                                                                             
0030b2   d97b     RCALL     0x33aa                                                                                          
0030b4   e30a     BNC       0x30ca                                                                                          
0033aa   cfdb     MOVFF     0xfdb,0xff4                                                                                     
0033ac   fff4                                                                                                               
0033ae   50f3     MOVF      0xf3,0x0,0x0                                                                                    
0033b0   5cf4     SUBWF     0xf4,0x0,0x0                                                                                    
0033b2   0012     RETURN    0x0                                                                                             
0030b6   0e20     MOVLW     0x20                                     cval -= 'a' - 'A';                                     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030b8   6e2a     MOVWF     0x2a,0x0                                                                                        
0030ba   0e09     MOVLW     0x9                                                                                             
0030bc   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
0030be   ffe7                                                                                                               
0030c0   502a     MOVF      0x2a,0x0,0x0                                                                                    
0030c2   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
0030c4   0e09     MOVLW     0x9                                                                                             
0030c6   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0030c8   ffdb                                                                                                               
0030ca   0e07     MOVLW     0x7                                    larg /= size;                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0030cc   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0030ce   f02a                                                                                                               
0030d0   6a2b     CLRF      0x2b,0x0                                                                                        
0030d2   6a2c     CLRF      0x2c,0x0                                                                                        
0030d4   6a2d     CLRF      0x2d,0x0                                                                                        
0030d6   da0f     RCALL     0x34f6                                                                                          
0030d8   c02a     MOVFF     0x2a,0x21                                                                                       
0030da   f021                                                                                                               
0030dc   c02b     MOVFF     0x2b,0x22                                                                                       
0030de   f022                                                                                                               
0030e0   c02c     MOVFF     0x2c,0x23                                                                                       
0030e2   f023                                                                                                               
0030e4   c02d     MOVFF     0x2d,0x24                                                                                       
0030e6   f024                                                                                                               
0030e8   cfee     MOVFF     0xfee,0x1c                                                                                      
0030ea   f01c                                                                                                               
0030ec   cfee     MOVFF     0xfee,0x1d                                                                                      
0030ee   f01d                                                                                                               
0030f0   cfee     MOVFF     0xfee,0x1e                                                                                      
0030f2   f01e                                                                                                               
0030f4   cfef     MOVFF     0xfef,0x1f                                                                                      
0030f6   f01f                                                                                                               
0030f8   ece7     CALL      0x47ce,0x0                                                                                      
0030fa   f023                                                                                                               
0030fc   c01f     MOVFF     0x1f,0xfed                                                                                      
0030fe   ffed                                                                                                               
003100   c01e     MOVFF     0x1e,0xfed                                                                                      
003102   ffed                                                                                                               
003104   c01d     MOVFF     0x1d,0xfed                                                                                      
003106   ffed                                                                                                               
003108   c01c     MOVFF     0x1c,0xfef                                                                                      
00310a   ffef                                                                                                               
00310c   0e39     MOVLW     0x39                                   *q-- = cval;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00310e   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
003110   ffe9                                                                                                               
003112   06db     DECF      0xdb,0x1,0x0                                                                                    
003114   0e3a     MOVLW     0x3a                                                                                            
003116   cfdb     MOVFF     0xfdb,0xfea                                                                                     
003118   ffea                                                                                                               
00311a   e201     BC        0x311e                                                                                          
00311c   06db     DECF      0xdb,0x1,0x0                                                                                    
00311e   0e09     MOVLW     0x9                                                                                             
003120   cfdb     MOVFF     0xfdb,0xfef                                                                                     
003122   ffef                                                                                                               
003124   0e15     MOVLW     0x15                                   ++digit_cnt;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003126   2adb     INCF      0xdb,0x1,0x0                                                                                    
                                                                 }                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003128   d94b     RCALL     0x33c0                             while (larg);                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00312a   e195     BNZ       0x3056                                                                                          
                                                               /* if the '#' flag was specified and we're dealing           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                  with an 'o', 'b', 'B', 'x', or 'X' conversion,            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                  we need a bit more. */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00312c   0e03     MOVLW     0x3                                if (flags & _FLAG_OCTO)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00312e   a6db     BTFSS     0xdb,0x3,0x0                                                                                    
003130   d01d     BRA       0x316c                                                                                          
                                                                 {                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003132   0e6f     MOVLW     0x6f                                   if (c == 'o')                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003134   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
003136   e106     BNZ       0x3144                                                                                          
                                                                     {                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                       /* per the standard, for octal, the '#' flag         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                          makes the precision be at least one more          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                          than the number of digits in the number */        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003138   d9c1     RCALL     0x34bc                                     if (precision <= digit_cnt)                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00313a   e318     BNC       0x316c                                                                                          
0034bc   0e05     MOVLW     0x5                                                                                             
0034be   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0034c0   f02a                                                                                                               
0034c2   0e15     MOVLW     0x15                                                                                            
0034c4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0034c6   80d8     BSF       0xd8,0x0,0x0                                                                                    
0034c8   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
0034ca   0012     RETURN    0x0                                                                                             
00313c   0e15     MOVLW     0x15                                         precision = digit_cnt + 1;                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00313e   28db     INCF      0xdb,0x0,0x0                                                                                    
003140   da5b     RCALL     0x35f8                                                                                          
                                                                     }                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003142   d014     BRA       0x316c                                 else if (c == 'x'                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003144   0e78     MOVLW     0x78                                                                                            
003146   5cdf     SUBWF     0xdf,0x0,0x0                                    || c == 'X' || c == 'b' || c == 'B')            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003148   e009     BZ        0x315c                                                                                          
00314a   0e58     MOVLW     0x58                                                                                            
00314c   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00314e   e006     BZ        0x315c                                                                                          
003150   0e62     MOVLW     0x62                                                                                            
003152   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
003154   e003     BZ        0x315c                                                                                          
003156   0e42     MOVLW     0x42                                                                                            
003158   5cdf     SUBWF     0xdf,0x0,0x0                                                                                    
00315a   e108     BNZ       0x316c                                                                                          
00315c   0e02     MOVLW     0x2                                      prefix_cnt = 2;                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00315e   6ef3     MOVWF     0xf3,0x0                                                                                        
003160   0e16     MOVLW     0x16                                                                                            
003162   cff3     MOVFF     0xff3,0xfdb                                                                                     
003164   ffdb                                                                                                               
                                                                 }                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003166   d002     BRA       0x316c                         else                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003168   0e15     MOVLW     0x15                             digit_cnt = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00316a   6adb     CLRF      0xdb,0x0                                                                                        
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* The leading zero count depends on whether the '0'             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              flag was specified or not. If it was not, then the            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              count is the difference between the specified                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              precision and the number of digits (including the             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              sign character, if any) to be printed; otherwise,             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              it's as if the precision were equal to the max of             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              the specified precision and the field width. If a             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              precision was specified, the '0' flag is ignored,             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              however. */                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00316c   0e03     MOVLW     0x3                            if ((flags & _FLAG_ZERO) && (width > precision)                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00316e   50db     MOVF      0xdb,0x0,0x0                                                                                    
003170   0b10     ANDLW     0x10                                                                                            
003174   0e04     MOVLW     0x4                                                                                             
003176   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003178   f02a                                                                                                               
00317a   0e05     MOVLW     0x5                                                                                             
00317c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00317e   80d8     BSF       0xd8,0x0,0x0                                                                                    
003180   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
003172   e00e     BZ        0x3190                             && !have_precision)                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003182   e206     BC        0x3190                                                                                          
003184   0e06     MOVLW     0x6                                                                                             
003186   50db     MOVF      0xdb,0x0,0x0                                                                                    
003188   e103     BNZ       0x3190                                                                                          
00318a   0e04     MOVLW     0x4                              precision = width;                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00318c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00318e   da34     RCALL     0x35f8                                                                                          
                                                           /* for the rest of the processing, precision contains            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              the leading zero count for the conversion. */                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003190   d995     RCALL     0x34bc                         if (precision > digit_cnt)                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003192   e20a     BC        0x31a8                                                                                          
003194   0e05     MOVLW     0x5                              precision -= digit_cnt;                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003196   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
003198   ffe7                                                                                                               
00319a   0e15     MOVLW     0x15                                                                                            
00319c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00319e   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
0031a0   0e05     MOVLW     0x5                                                                                             
0031a2   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
0031a4   ffdb                                                                                                               
0031a6   d002     BRA       0x31ac                         else                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031a8   0e05     MOVLW     0x5                              precision = 0;                                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031aa   6adb     CLRF      0xdb,0x0                                                                                        
                                                           /* the space count is the difference between the field           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              width and the digit count plus the leading zero               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              count. If the width is less than the digit count              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              plus the leading zero count, the space count is               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              zero. */                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031ac   0e04     MOVLW     0x4                            if (width > precision + digit_cnt + prefix_cnt)                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031ae   cfdb     MOVFF     0xfdb,0x2a                                                                                      
0031b0   f02a                                                                                                               
0031b2   0e16     MOVLW     0x16                                                                                            
0031b4   d945     RCALL     0x3440                                                                                          
0031b6   80d8     BSF       0xd8,0x0,0x0                                                                                    
0031b8   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
0031ba   e214     BC        0x31e4                                                                                          
003440   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003442   ffe6                                                                                                               
003444   0e15     MOVLW     0x15                                                                                            
003446   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003448   ffe6                                                                                                               
00344a   0e05     MOVLW     0x5                                                                                             
00344c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00344e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003450   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
003452   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003454   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
003456   0012     RETURN    0x0                                                                                             
                                                             space_cnt =                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031bc   0e16     MOVLW     0x16                               width - precision - digit_cnt - prefix_cnt;                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031be   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0031c0   ffe6                                                                                                               
0031c2   0e15     MOVLW     0x15                                                                                            
0031c4   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0031c6   ffe6                                                                                                               
0031c8   0e04     MOVLW     0x4                                                                                             
0031ca   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0031cc   ffe6                                                                                                               
0031ce   0e05     MOVLW     0x5                                                                                             
0031d0   50db     MOVF      0xdb,0x0,0x0                                                                                    
0031d2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0031d4   5ce7     SUBWF     0xe7,0x0,0x0                                                                                    
0031d6   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0031d8   80d8     BSF       0xd8,0x0,0x0                                                                                    
0031da   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
0031dc   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0031de   80d8     BSF       0xd8,0x0,0x0                                                                                    
0031e0   54e7     SUBFWB    0xe7,0x0,0x0                                                                                    
0031e2   d95f     RCALL     0x34a2                                                                                          
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* for output, we check the justification, if it's               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              right justified and the space count is positive, we           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              emit the space characters first. */                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031e4   0e03     MOVLW     0x3                            if (!(flags & _FLAG_MINUS) && space_cnt)                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031e6   50db     MOVF      0xdb,0x0,0x0                                                                                    
0031e8   0b01     ANDLW     0x1                                                                                             
0031ea   e10b     BNZ       0x3202                                                                                          
0031ec   0e08     MOVLW     0x8                                                                                             
0031ee   50db     MOVF      0xdb,0x0,0x0                                                                                    
0031f0   e008     BZ        0x3202                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031f2   d8b2     RCALL     0x3358                             if (s_put_n_chars (handle, space_cnt, ' '))                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031f4   e001     BZ        0x31f8                                                                                          
0031f6   d08d     BRA       0x3312                                                                                          
                                                                 return EOF;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031f8   0e08     MOVLW     0x8                                count += space_cnt;                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0031fa   50db     MOVF      0xdb,0x0,0x0                                                                                    
0031fc   d8be     RCALL     0x337a                                                                                          
0031fe   0e08     MOVLW     0x8                                space_cnt = 0;                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003200   6adb     CLRF      0xdb,0x0                                                                                        
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if we have a sign character to print, that comes              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              next */                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003202   0e17     MOVLW     0x17                           if (sign_char)                                                   C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003204   50db     MOVF      0xdb,0x0,0x0                                                                                    
003206   e007     BZ        0x3216                                                                                          
003208   d988     RCALL     0x351a                           if (putc (sign_char, handle) == EOF)                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00320a   0e17     MOVLW     0x17                                                                                            
00320c   d9f1     RCALL     0x35f0                                                                                          
00320e   e103     BNZ       0x3216                                                                                          
003210   1c2b     COMF      0x2b,0x0,0x0                                                                                    
003212   e101     BNZ       0x3216                                                                                          
003214   d07e     BRA       0x3312                                                                                          
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if we have a prefix (0b, 0B, 0x or 0X), that's next */        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003216   0e16     MOVLW     0x16                           if (prefix_cnt)                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003218   50db     MOVF      0xdb,0x0,0x0                                                                                    
00321a   e016     BZ        0x3248                                                                                          
                                                             {                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00321c   d97e     RCALL     0x351a                             if (putc ('0', handle) == EOF)                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00321e   0e30     MOVLW     0x30                                                                                            
003220   6ee6     MOVWF     0xe6,0x0                                                                                        
003222   d89f     RCALL     0x3362                                                                                          
003224   e102     BNZ       0x322a                                                                                          
003226   1c2b     COMF      0x2b,0x0,0x0                                                                                    
003228   e074     BZ        0x3312                                                                                          
                                                                 return EOF;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00322a   d977     RCALL     0x351a                             if (putc (c, handle) == EOF)                                 C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00322c   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
00322e   ffe6                                                                                                               
003230   ec14     CALL      0x4628,0x0                                                                                      
003232   f023                                                                                                               
003234   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003236   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003238   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00323a   cff4     MOVFF     0xff4,0x2b                                                                                      
00323c   f02b                                                                                                               
00323e   0100     MOVLB     0x0                                                                                             
003240   1cf3     COMF      0xf3,0x0,0x0                                                                                    
003242   e102     BNZ       0x3248                                                                                          
003244   1c2b     COMF      0x2b,0x0,0x0                                                                                    
003246   e065     BZ        0x3312                                                                                          
                                                                 return EOF;                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                             }                                                              C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if we have leading zeros, they follow. the prefix, if any     C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              is included in the number of digits when determining how      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              many leading zeroes are needed. */                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003248   0e05     MOVLW     0x5                            if (precision > prefix_cnt)                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00324a   cfdb     MOVFF     0xfdb,0x2a                                                                                      
00324c   f02a                                                                                                               
00324e   0e16     MOVLW     0x16                                                                                            
003250   50db     MOVF      0xdb,0x0,0x0                                                                                    
003252   80d8     BSF       0xd8,0x0,0x0                                                                                    
003254   542a     SUBFWB    0x2a,0x0,0x0                                                                                    
003256   e209     BC        0x326a                                                                                          
003258   0e05     MOVLW     0x5                              precision -= prefix_cnt;                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00325a   cfdb     MOVFF     0xfdb,0xfe7                                                                                     
00325c   ffe7                                                                                                               
00325e   0e16     MOVLW     0x16                                                                                            
003260   50db     MOVF      0xdb,0x0,0x0                                                                                    
003262   5ee7     SUBWF     0xe7,0x1,0x0                                                                                    
003264   0e05     MOVLW     0x5                                                                                             
003266   cfe7     MOVFF     0xfe7,0xfdb                                                                                     
003268   ffdb                                                                                                               
00326a   0e30     MOVLW     0x30                           if (s_put_n_chars (handle, precision, '0'))                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00326c   6ee6     MOVWF     0xe6,0x0                                                                                        
00326e   0e05     MOVLW     0x5                                                                                             
003270   d9cb     RCALL     0x3608                                                                                          
003272   e14f     BNZ       0x3312                                                                                          
0035ba   ec03     CALL      0x2a06,0x0                                                                                      
0035bc   f015                                                                                                               
0035be   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0035c0   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0035c2   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0035c4   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0035c6   0900     IORLW     0x0                                                                                             
0035c8   0012     RETURN    0x0                                                                                             
003608   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00360a   ffe6                                                                                                               
00360c   df86     RCALL     0x351a                                                                                          
00360e   efdd     GOTO      0x35ba                                                                                          
003610   f01a                                                                                                               
                                                             return EOF;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* print the actual number */                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003274   0e39     MOVLW     0x39                           for (cval = *++q; cval; cval = *++q)                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003276   2adb     INCF      0xdb,0x1,0x0                                                                                    
003278   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
00327a   ffe9                                                                                                               
00327c   0e3a     MOVLW     0x3a                                                                                            
00327e   e301     BNC       0x3282                                                                                          
003280   2adb     INCF      0xdb,0x1,0x0                                                                                    
003282   cfdb     MOVFF     0xfdb,0xfea                                                                                     
003284   ffea                                                                                                               
003286   0e09     MOVLW     0x9                                                                                             
003288   cfef     MOVFF     0xfef,0xfdb                                                                                     
00328a   ffdb                                                                                                               
00328c   50db     MOVF      0xdb,0x0,0x0                                                                                    
00328e   e00e     BZ        0x32ac                                                                                          
00329c   0e39     MOVLW     0x39                                                                                            
00329e   2adb     INCF      0xdb,0x1,0x0                                                                                    
0032a0   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
0032a2   ffe9                                                                                                               
0032a4   0e3a     MOVLW     0x3a                                                                                            
0032a6   e3ed     BNC       0x3282                                                                                          
0032a8   2adb     INCF      0xdb,0x1,0x0                                                                                    
0032aa   d7eb     BRA       0x3282                                                                                          
003290   d944     RCALL     0x351a                           if (putc (cval, handle) == EOF)                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003292   0e09     MOVLW     0x9                                                                                             
003294   d9ad     RCALL     0x35f0                                                                                          
003296   e102     BNZ       0x329c                                                                                          
003298   1c2b     COMF      0x2b,0x0,0x0                                                                                    
00329a   e03b     BZ        0x3312                                                                                          
0035f0   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0035f2   ffe6                                                                                                               
0035f4   efb1     GOTO      0x3362                                                                                          
0035f6   f019                                                                                                               
                                                               return EOF;                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           /* if there are any spaces left, they go to right-pad            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                              the field */                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032ac   d855     RCALL     0x3358                         if (s_put_n_chars (handle, space_cnt, ' '))                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032ae   e131     BNZ       0x3312                                                                                          
003358   0e20     MOVLW     0x20                                                                                            
00335a   6ee6     MOVWF     0xe6,0x0                                                                                        
00335c   0e08     MOVLW     0x8                                                                                             
00335e   ef04     GOTO      0x3608                                                                                          
003360   f01b                                                                                                               
00351a   0efc     MOVLW     0xfc                                                                                            
00351c   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00351e   ffe6                                                                                                               
003520   0efd     MOVLW     0xfd                                                                                            
003522   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
003524   ffe6                                                                                                               
003526   0012     RETURN    0x0                                                                                             
                                                             return EOF;                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032b0   0e16     MOVLW     0x16                           count += precision + digit_cnt + space_cnt + prefix_cnt;         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032b2   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
0032b4   ffe6                                                                                                               
0032b6   0e08     MOVLW     0x8                                                                                             
0032b8   d8c3     RCALL     0x3440                                                                                          
0032ba   52e5     MOVF      0xe5,0x1,0x0                                                                                    
0032bc   24e7     ADDWF     0xe7,0x0,0x0                                                                                    
0032be   d85d     RCALL     0x337a                                                                                          
00337a   6e2a     MOVWF     0x2a,0x0                                                                                        
00337c   6a2b     CLRF      0x2b,0x0                                                                                        
00337e   50d9     MOVF      0xd9,0x0,0x0                                                                                    
003380   0f01     ADDLW     0x1                                                                                             
003382   d94d     RCALL     0x361e                                                                                          
003384   502a     MOVF      0x2a,0x0,0x0                                                                                    
003386   26ee     ADDWF     0xee,0x1,0x0                                                                                    
003388   502b     MOVF      0x2b,0x0,0x0                                                                                    
00338a   22ed     ADDWFC    0xed,0x1,0x0                                                                                    
00338c   0012     RETURN    0x0                                                                                             
                                                         }                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032c0   d02e     BRA       0x331e                       break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       case 'n':                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032c2   0e07     MOVLW     0x7                          switch (size)                                                      C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032c4   50db     MOVF      0xdb,0x0,0x0                                                                                    
0032c6   0a03     XORLW     0x3                                                                                             
0032c8   e01c     BZ        0x3302                                                                                          
0032ca   0a01     XORLW     0x1                                                                                             
0032cc   e014     BZ        0x32f6                                                                                          
0032ce   0a03     XORLW     0x3                                                                                             
0032d0   e007     BZ        0x32e0                                                                                          
                                                           {                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case _FMT_LONG:                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032e0   d8f5     RCALL     0x34cc                           *(long *) va_arg (ap, long *) = count;                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032e2   6a2f     CLRF      0x2f,0x0                                                                                        
0032e4   ae2d     BTFSS     0x2d,0x7,0x0                                                                                    
0032e6   d002     BRA       0x32ec                                                                                          
0032e8   682e     SETF      0x2e,0x0                                                                                        
0032ea   682f     SETF      0x2f,0x0                                                                                        
0032ec   d82c     RCALL     0x3346                                                                                          
0032ee   d8bc     RCALL     0x3468                                                                                          
0032f0   c02f     MOVFF     0x2f,0xfee                                                                                      
0032f2   ffee                                                                                                               
003468   50ee     MOVF      0xee,0x0,0x0                                                                                    
00346a   cfef     MOVFF     0xfef,0xfea                                                                                     
00346c   ffea                                                                                                               
00346e   6ee9     MOVWF     0xe9,0x0                                                                                        
003470   c02c     MOVFF     0x2c,0xfee                                                                                      
003472   ffee                                                                                                               
003474   c02d     MOVFF     0x2d,0xfee                                                                                      
003476   ffee                                                                                                               
003478   c02e     MOVFF     0x2e,0xfee                                                                                      
00347a   ffee                                                                                                               
00347c   0012     RETURN    0x0                                                                                             
0034cc   0e01     MOVLW     0x1                                                                                             
0034ce   cfdb     MOVFF     0xfdb,0x2c                                                                                      
0034d0   f02c                                                                                                               
0034d2   0e02     MOVLW     0x2                                                                                             
0034d4   cfdb     MOVFF     0xfdb,0x2d                                                                                      
0034d6   f02d                                                                                                               
0034d8   6a2e     CLRF      0x2e,0x0                                                                                        
0034da   0012     RETURN    0x0                                                                                             
0032f4   d014     BRA       0x331e                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case _FMT_SHLONG:                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032f6   d8ea     RCALL     0x34cc                           *(short long *) va_arg (ap, short long *) = count;             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032f8   be2d     BTFSC     0x2d,0x7,0x0                                                                                    
0032fa   682e     SETF      0x2e,0x0                                                                                        
0032fc   d824     RCALL     0x3346                                                                                          
0032fe   d8b4     RCALL     0x3468                                                                                          
003300   d00e     BRA       0x331e                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           case _FMT_BYTE:                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003302   d963     RCALL     0x35ca                           *(signed char *) va_arg (ap, signed char *) = count;           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003304   cfdb     MOVFF     0xfdb,0xfef                                                                                     
003306   ffef                                                                                                               
003308   d00a     BRA       0x331e                           break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           default:                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032d2   d97b     RCALL     0x35ca                           *(int *) va_arg (ap, int *) = count;                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032d4   cfdb     MOVFF     0xfdb,0xfee                                                                                     
0032d6   ffee                                                                                                               
0032d8   0e02     MOVLW     0x2                                                                                             
0032da   cfdb     MOVFF     0xfdb,0xfed                                                                                     
0032dc   ffed                                                                                                               
0035ca   debd     RCALL     0x3346                                                                                          
0035cc   50ee     MOVF      0xee,0x0,0x0                                                                                    
0035ce   cfef     MOVFF     0xfef,0xfea                                                                                     
0035d0   ffea                                                                                                               
0035d2   6ee9     MOVWF     0xe9,0x0                                                                                        
0035d4   0e01     MOVLW     0x1                                                                                             
0035d6   0012     RETURN    0x0                                                                                             
                                                             break;                                                         C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                           }                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
0032de   d01f     BRA       0x331e                       break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       default:                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         /* undefined behaviour. we do nothing */                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                         break;                                                             C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                       }                                                                    C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                   }                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                 else                                                                       C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                   {                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00330a   d97b     RCALL     0x3602                   if (putc (c, handle) == EOF)                                           C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00330c   e105     BNZ       0x3318                                                                                          
00330e   1c2b     COMF      0x2b,0x0,0x0                                                                                    
003310   e103     BNZ       0x3318                                                                                          
003362   ec14     CALL      0x4628,0x0                                                                                      
003364   f023                                                                                                               
003366   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003368   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00336a   52e5     MOVF      0xe5,0x1,0x0                                                                                    
00336c   cff3     MOVFF     0xff3,0x2a                                                                                      
00336e   f02a                                                                                                               
003370   cff4     MOVFF     0xff4,0x2b                                                                                      
003372   f02b                                                                                                               
003374   0100     MOVLB     0x0                                                                                             
003376   1cf3     COMF      0xf3,0x0,0x0                                                                                    
003378   0012     RETURN    0x0                                                                                             
0035a8   cfdf     MOVFF     0xfdf,0xfe6                                                                                     
0035aa   ffe6                                                                                                               
0035ac   efb1     GOTO      0x3362                                                                                          
0035ae   f019                                                                                                               
003602   df8b     RCALL     0x351a                                                                                          
003604   efd4     GOTO      0x35a8                                                                                          
003606   f01a                                                                                                               
003312   68f3     SETF      0xf3,0x0                   return EOF;                                                          C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003314   68f4     SETF      0xf4,0x0                                                                                        
003316   d010     BRA       0x3338                                                                                          
003318   d8fc     RCALL     0x3512                   ++count;                                                               C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00331a   e301     BNC       0x331e                                                                                          
00331c   2adb     INCF      0xdb,0x1,0x0                                                                                    
003512   0e01     MOVLW     0x1                                                                                             
003514   2adb     INCF      0xdb,0x1,0x0                                                                                    
003516   0e02     MOVLW     0x2                                                                                             
003518   0012     RETURN    0x0                                                                                             
                                                   }                                                                        C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                               }                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003324   0e01     MOVLW     0x1              return count;                                                                  C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
003326   cfdb     MOVFF     0xfdb,0x2a                                                                                      
003328   f02a                                                                                                               
00332a   0e02     MOVLW     0x2                                                                                             
00332c   cfdb     MOVFF     0xfdb,0x2b                                                                                      
00332e   f02b                                                                                                               
003330   c02a     MOVFF     0x2a,0xff3                                                                                      
003332   fff3                                                                                                               
003334   c02b     MOVFF     0x2b,0xff4                                                                                      
003336   fff4                                                                                                               
003338   0e3b     MOVLW     0x3b           }                                                                                C:\MCC18\src\TRADIT~1\stdclib\vfprintf.c
00333a   5ce1     SUBWF     0xe1,0x0,0x0                                                                                    
00333c   e202     BC        0x3342                                                                                          
00333e   6ae1     CLRF      0xe1,0x0                                                                                        
003340   52e5     MOVF      0xe5,0x1,0x0                                                                                    
003342   6ee1     MOVWF     0xe1,0x0                                                                                        
003344   d0cb     BRA       0x34dc                                                                                          
                                           /*** Unsigned Integer Division: 32-bit by 32-bit                                 C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***                                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            *** Optimized: Dec. 21, 2000                                                    C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***        by: Daniel R. Madill, Quanser Consulting Inc.                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***       for: Saved (for the worst case) at least 8*32 = 256 instruction cycles C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***            over the code supplied with MCC18 v1.00.12                       C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                            ***/                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           void  FXD3232U(void/* ulong aarg, ulong barg */)                                 C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           {                                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                             // use INDF1 for the counter...                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               _asm                                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               // REM = 0                                                                   C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047ce   6a1b     CLRF      0x1b,0x0           clrf __REMB0, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047d0   6a1a     CLRF      0x1a,0x0           clrf __REMB1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047d2   6a19     CLRF      0x19,0x0           clrf __REMB2, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047d4   6a18     CLRF      0x18,0x0           clrf __REMB3, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               // INDF1 = 32                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047d6   0e20     MOVLW     0x20               movlw 32                                                                     C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047d8   6ee7     MOVWF     0xe7,0x0           movwf INDF1, 0                                                               C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               // Clear the carry                                                           C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047da   90d8     BCF       0xd8,0x0,0x0       bcf STATUS, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           loop:                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	//AARG32 <<= 1; The carry is always clear at the top of the loop.               C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047dc   361c     RLCF      0x1c,0x1,0x0   	rlcf __AARGB3, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047de   361d     RLCF      0x1d,0x1,0x0   	rlcf __AARGB2, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047e0   361e     RLCF      0x1e,0x1,0x0   	rlcf __AARGB1, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047e2   361f     RLCF      0x1f,0x1,0x0   	rlcf __AARGB0, 1, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	//REM32 = (REM32 << 1) | (AARG32 >> 32)                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047e4   3618     RLCF      0x18,0x1,0x0   	rlcf __REMB3, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047e6   3619     RLCF      0x19,0x1,0x0   	rlcf __REMB2, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047e8   361a     RLCF      0x1a,0x1,0x0   	rlcf __REMB1, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047ea   361b     RLCF      0x1b,0x1,0x0   	rlcf __REMB0, 1, 0                                                              C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	                                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	//if (PROD >= BARG32)                                                           C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047ec   5021     MOVF      0x21,0x0,0x0   	movf __BARGB3, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047ee   5c18     SUBWF     0x18,0x0,0x0   	subwf __REMB3, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047f0   5022     MOVF      0x22,0x0,0x0   	movf __BARGB2, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047f2   5819     SUBWFB    0x19,0x0,0x0   	subwfb __REMB2, 0, 0                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047f4   5023     MOVF      0x23,0x0,0x0   	movf __BARGB1, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047f6   581a     SUBWFB    0x1a,0x0,0x0   	subwfb __REMB1, 0, 0                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047f8   5024     MOVF      0x24,0x0,0x0   	movf __BARGB0, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047fa   581b     SUBWFB    0x1b,0x0,0x0   	subwfb __REMB0, 0, 0                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047fc   e309     BNC       0x4810         	bnc _false                                                                      C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               //{                                                                          C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	    //REM32-= BARG32;                                                           C:\MCC18\src\TRADIT~1\math\fxd3232u.c
0047fe   5021     MOVF      0x21,0x0,0x0   	    movf __BARGB3, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004800   5e18     SUBWF     0x18,0x1,0x0   	    subwf __REMB3, 1, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004802   5022     MOVF      0x22,0x0,0x0   	    movf __BARGB2, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004804   5a19     SUBWFB    0x19,0x1,0x0   	    subwfb __REMB2, 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004806   5023     MOVF      0x23,0x0,0x0   	    movf __BARGB1, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004808   5a1a     SUBWFB    0x1a,0x1,0x0   	    subwfb __REMB1, 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00480a   5024     MOVF      0x24,0x0,0x0   	    movf __BARGB0, 0, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00480c   5a1b     SUBWFB    0x1b,0x1,0x0   	    subwfb __REMB0, 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           	    //++AARG32; Since AARG32 was shift to the left above, we only need to set   C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                   //          the lowest bit. Use incf so that the carry flag will also be cleared. C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                   //          Thus, the carry will always be clear at the top of the loop. C:\MCC18\src\TRADIT~1\math\fxd3232u.c
00480e   2a1c     INCF      0x1c,0x1,0x0   	    incf __AARGB3, 1, 0                                                         C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                               //}                                                                          C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           _false:                                                                          C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004810   2ee7     DECFSZ    0xe7,0x1,0x0       decfsz INDF1, 1, 0    // does not affect the carry bit                       C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004812   d7e4     BRA       0x47dc             bra loop                                                                     C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                             /* result in AARG already... */                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                             _endasm                                                                        C:\MCC18\src\TRADIT~1\math\fxd3232u.c
004814   0012     RETURN    0x0            }                                                                                C:\MCC18\src\TRADIT~1\math\fxd3232u.c
                                           ;	RCS Header $Id: fxm1616s.asm,v 1.3 2006/01/12 23:16:38 rhinec Exp $            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <P18CXXX.INC>		; general Golden Gate definitions                        C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <CMATH18.INC>		; Math library definitions                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: cmath18.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ;	$Revision: 1.3 $                                                               C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                               LIST                                                                         C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                           ; CMATH18.INC  v1.0  Microchip Technology, Inc. / F.J. Testa                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\MATH\CMATH18.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <AARG.INC>		; AARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: aarg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN	__AARGB0, __AARGB1, __AARGB2, __AARGB3                                   C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                                   EXTERN  __AARGB4, __AARGB5, __AARGB6, __AARGB7                           C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __AEXP                                                                  C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	EXTERN  __REMB3, __REMB2, __REMB1, __REMB0                                      C:\MCC18\SRC\TRADIT~1\MATH\AARG.INC
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <BARG.INC>		; BARG declarations                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: barg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $                C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BARGB3, __BARGB2, __BARGB1, __BARGB0                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                   EXTERN  __BEXP                                                           C:\MCC18\SRC\TRADIT~1\MATH\BARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           	include <TEMPARG.INC>		; TEMPARG declarations                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;	RCS Header $Id: temparg.inc,v 1.3 2006/01/12 23:16:38 rhinec Exp $             C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                           ;       CMATH18 DATA DECLARATION FILE                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                   EXTERN  __TEMPB3, __TEMPB2, __TEMPB1, __TEMPB0, __TEMP                   C:\MCC18\SRC\TRADIT~1\MATH\TEMPARG.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;********************************************************************************************** C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       16x16 Bit Signed Fixed Point Multiply 16 x 16 -> 32                      C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Input:  16 bit signed fixed point multiplicand in AARGB0, AARGB1         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;               16 bit signed fixed point multiplier in BARGB0, BARGB1           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Use:    CALL    FXM1616S                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Output: 32 bit signed fixed point product in AARGB0, AARGB1,             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;               AARGB2, AARGB3                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Result: AARG  <--  AARG * BARG                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Max Timing:     39 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       Min Timing:     31 clks                                                  C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           ;       PM: 38              DM: 8                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           PROG	CODE                                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           FXM1616S                                                                         C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           		GLOBAL	FXM1616S                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043ca   c01f     MOVFF     0x1f,0x29      		MOVFF	__AARGB0,__TEMPB0                                                        C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043cc   f029                                                                                                               
0043ce   c01e     MOVFF     0x1e,0x28      		MOVFF	__AARGB1,__TEMPB1	                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043d0   f028                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043d2   501e     MOVF      0x1e,0x0,0x0   		MOVF	__AARGB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043d4   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043d6   cff4     MOVFF     0xff4,0x1d     		MOVFF	PRODH,__AARGB2                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043d8   f01d                                                                                                               
0043da   cff3     MOVFF     0xff3,0x1c     		MOVFF	PRODL,__AARGB3                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043dc   f01c                                                                                                               
                                           		                                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043de   501f     MOVF      0x1f,0x0,0x0   		MOVF	__AARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043e0   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043e2   cff4     MOVFF     0xff4,0x1f     		MOVFF	PRODH,__AARGB0                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043e4   f01f                                                                                                               
0043e6   cff3     MOVFF     0xff3,0x1e     		MOVFF	PRODL,__AARGB1                                                           C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043e8   f01e                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043ea   0223     MULWF     0x23,0x0       		MULWF	__BARGB1                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043ec   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043ee   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043f0   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043f2   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043f4   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043f6   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043f8   5028     MOVF      0x28,0x0,0x0   		MOVF	__TEMPB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043fa   0224     MULWF     0x24,0x0       		MULWF	__BARGB0                                                                 C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043fc   50f3     MOVF      0xf3,0x0,0x0   		MOVF	PRODL,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
0043fe   261d     ADDWF     0x1d,0x1,0x0   		ADDWF	__AARGB2,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004400   50f4     MOVF      0xf4,0x0,0x0   		MOVF	PRODH,W                                                                   C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004402   221e     ADDWFC    0x1e,0x1,0x0   		ADDWFC	__AARGB1,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004404   6ae8     CLRF      0xe8,0x0       		CLRF	WREG                                                                      C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004406   221f     ADDWFC    0x1f,0x1,0x0   		ADDWFC	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004408   ae24     BTFSS     0x24,0x7,0x0   		BTFSS	__BARGB0,MSB                                                             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00440a   ef0b     GOTO      0x4416         		GOTO	TSIGN1616A                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00440c   f022                                                                                                               
00440e   5028     MOVF      0x28,0x0,0x0   		MOVF	__TEMPB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004410   5e1e     SUBWF     0x1e,0x1,0x0   		SUBWF	__AARGB1,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004412   5029     MOVF      0x29,0x0,0x0   		MOVF	__TEMPB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004414   5a1f     SUBWFB    0x1f,0x1,0x0   		SUBWFB	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           TSIGN1616A                                                                       C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004416   ae29     BTFSS     0x29,0x7,0x0   		BTFSS	__TEMPB0,MSB                                                             C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004418   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00441a   5023     MOVF      0x23,0x0,0x0   		MOVF	__BARGB1,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00441c   5e1e     SUBWF     0x1e,0x1,0x0   		SUBWF	__AARGB1,F                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
00441e   5024     MOVF      0x24,0x0,0x0   		MOVF	__BARGB0,W                                                                C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004420   5a1f     SUBWFB    0x1f,0x1,0x0   		SUBWFB	__AARGB0,F                                                              C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           		                                                                               C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
004422   0c00     RETLW     0x0            		RETLW	0x00                                                                     C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           		END                                                                            C:\MCC18\SRC\TRADIT~1\MATH\fxm1616s.asm
                                           /* a signed multiply is only different from an unsigned multiply                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                            * if the upper bytes of the result matter, which for us they                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                            * don't.                                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                            */                                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           #define PRODH	(PRODL + 1)                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           extern near unsigned char __AARGB3, __BARGB3;                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           extern near unsigned char __AARGB7;                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           void FXM3232 (void)                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           {                                                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                             _asm                                                                           C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046ac   501c     MOVF      0x1c,0x0,0x0       movf __AARGB3, 0, 0                                                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046ae   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // low byte of both operands, so result adds into the low order              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // result bytes                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046b0   cff3     MOVFF     0xff3,0x18         movff PRODL, __AARGB7                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046b2   f018                                                                                                               
0046b4   cff4     MOVFF     0xff4,0x19         movff PRODH, __AARGB7 + 1                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046b6   f019                                                                                                               
                                               // W still contains AARGB3                                                   C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046b8   0222     MULWF     0x22,0x0           mulwf __BARGB3 + 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // BARGB3[1], so result adds into AARGB7[1,2]                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046ba   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046bc   2619     ADDWF     0x19,0x1,0x0       addwf __AARGB7 + 1, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046be   0e00     MOVLW     0x0                movlw 0                                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046c0   20f4     ADDWFC    0xf4,0x0,0x0       addwfc PRODH, 0, 0                                                           C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046c2   6e1a     MOVWF     0x1a,0x0           movwf __AARGB7 + 2, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3 to continue                                                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046c4   501c     MOVF      0x1c,0x0,0x0       movf __AARGB3, 0, 0                                                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046c6   0223     MULWF     0x23,0x0           mulwf __BARGB3 + 2, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // BARGB3[2], so result adds into AARGB7[2,3]                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046c8   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046ca   261a     ADDWF     0x1a,0x1,0x0       addwf __AARGB7 + 2, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046cc   0e00     MOVLW     0x0                movlw 0                                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046ce   20f4     ADDWFC    0xf4,0x0,0x0       addwfc PRODH, 0, 0                                                           C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046d0   6e1b     MOVWF     0x1b,0x0           movwf __AARGB7 + 3, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3 to continue                                                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046d2   501c     MOVF      0x1c,0x0,0x0       movf __AARGB3, 0, 0                                                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046d4   0224     MULWF     0x24,0x0           mulwf __BARGB3 + 3, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // BARGB3[3], so result adds into AARGB7[3].                                 C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046d6   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046d8   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // that's the end of all terms involving AARGB3[0].                          C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // load AARGB3[1] to continue                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046da   501d     MOVF      0x1d,0x0,0x0       movf __AARGB3 + 1, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046dc   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[1], so result adds into AARGB7[1,2]                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046de   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046e0   2619     ADDWF     0x19,0x1,0x0       addwf __AARGB7 + 1, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046e2   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046e4   221a     ADDWFC    0x1a,0x1,0x0       addwfc __AARGB7 + 2, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046e6   0e00     MOVLW     0x0                movlw 0                                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046e8   221b     ADDWFC    0x1b,0x1,0x0       addwfc __AARGB7 + 3, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3[1] to continue                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046ea   501d     MOVF      0x1d,0x0,0x0       movf __AARGB3 + 1, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046ec   0222     MULWF     0x22,0x0           mulwf __BARGB3 + 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[1] and BARGB3[1], so result adds into AARGB7[2,3]                  C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046ee   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046f0   261a     ADDWF     0x1a,0x1,0x0       addwf __AARGB7 + 2, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046f2   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046f4   221b     ADDWFC    0x1b,0x1,0x0       addwfc __AARGB7 + 3, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3[1] to continue                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046f6   501d     MOVF      0x1d,0x0,0x0       movf __AARGB3 + 1, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046f8   0223     MULWF     0x23,0x0           mulwf __BARGB3 + 2, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[1] and BARGB3[2], so result adds into AARGB7[3]                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046fa   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046fc   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // all bytes of the term from the product of AARGB3[1] and BARGB3[3] are     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // above our 32-bit result, don't even need to bother calculating            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // that term.                                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // load AARGB3[2] to continue                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
0046fe   501e     MOVF      0x1e,0x0,0x0       movf __AARGB3 + 2, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004700   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[2] and BARGB3[0], so result adds into AARGB7[2,3]                  C:\MCC18\src\TRADIT~1\math\fxm3232.c
004702   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004704   261a     ADDWF     0x1a,0x1,0x0       addwf __AARGB7 + 2, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
004706   50f4     MOVF      0xf4,0x0,0x0       movf PRODH, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004708   221b     ADDWFC    0x1b,0x1,0x0       addwfc __AARGB7 + 3, 1, 0                                                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // reload AARGB3[2] to continue                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
00470a   501e     MOVF      0x1e,0x0,0x0       movf __AARGB3 + 2, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
00470c   0222     MULWF     0x22,0x0           mulwf __BARGB3 + 1, 0                                                        C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[2] and BARGB3[1], so result adds into AARGB7[3]                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // we don't care about result bytes above AARGB7[3], ignore prodh here.      C:\MCC18\src\TRADIT~1\math\fxm3232.c
00470e   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004710   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // all bytes of the termsfrom the products of AARGB3[2] and BARGB3[2,3] are  C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // above our 32-bit result, don't even need to bother calculating            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // those terms.                                                              C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // load AARGB3[3] to continue                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
004712   501f     MOVF      0x1f,0x0,0x0       movf __AARGB3 + 3, 0, 0                                                      C:\MCC18\src\TRADIT~1\math\fxm3232.c
004714   0221     MULWF     0x21,0x0           mulwf __BARGB3, 0                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               // AARGB3[3] and BARGB3[0], so result adds into AARGB7[3]                    C:\MCC18\src\TRADIT~1\math\fxm3232.c
004716   50f3     MOVF      0xf3,0x0,0x0       movf PRODL, 0, 0                                                             C:\MCC18\src\TRADIT~1\math\fxm3232.c
004718   261b     ADDWF     0x1b,0x1,0x0       addwf __AARGB7 + 3, 1, 0                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                                                                                                            C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                               _endasm;                                                                     C:\MCC18\src\TRADIT~1\math\fxm3232.c
00471a   0012     RETURN    0x0            }                                                                                C:\MCC18\src\TRADIT~1\math\fxm3232.c
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; @name isdigit                                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;The {\bf isdigit} function tests the value of {\bf c} to determine if it        C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;is a digit character. A digit character is defined as any decimal digit         C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;character (0, 1, 2, 3, 4, 5, 6, 7, 8, 9).                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; int isdigit (int c);                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           CTYPE CODE                                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           isdigit                                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             global isdigit                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ; Proceedure: Use FSR0 as pointer to 'c'                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           ;         Return with result in PROD                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             ; Clear out result                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
0047aa   6af3     CLRF      0xf3,0x0                 clrf      PRODL, ACCESS                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
0047ac   6af4     CLRF      0xf4,0x0       	  clrf      PRODH, ACCESS                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           	                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             ; Set FSR0 = FSR1 - 2 ( location of 'c')                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
0047ae   0eff     MOVLW     0xff                     StkSetPtrToOffset FSR0L,-1                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
0047b0   24e1     ADDWF     0xe1,0x0,0x0                                                                                    
0047b2   6ee9     MOVWF     0xe9,0x0                                                                                        
0047b4   0eff     MOVLW     0xff                                                                                            
0047b6   20e2     ADDWFC    0xe2,0x0,0x0                                                                                    
0047b8   6eea     MOVWF     0xea,0x0                                                                                        
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
0047ba   66ed     TSTFSZ    0xed,0x0                 tstfsz    POSTDEC0,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
0047bc   d007     BRA       0x47cc                   bra       jNoMatch            ; upper byte must be 0 to match          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             ; Test for condition                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
0047be   0e2f     MOVLW     0x2f                     jmpFleL   INDF0,ACCESS,'0'-1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
0047c0   64ef     CPFSGT    0xef,0x0                                                                                        
0047c2   d004     BRA       0x47cc                                                                                          
0047c4   0e3a     MOVLW     0x3a                     jmpFgeL   INDF0,ACCESS,'9'+1,jNoMatch                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
0047c6   60ef     CPFSLT    0xef,0x0                                                                                        
0047c8   d001     BRA       0x47cc                                                                                          
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           jMatch:                                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
0047ca   2af3     INCF      0xf3,0x1,0x0             incf      PRODL,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           jNoMatch:                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
0047cc   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\isdigit.asm
                                           #include <stdio.h>                                                               C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                           int _user_putc (char c);                                                         C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                           int _usart_putc (char c);                                                        C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                           int                                                                              C:\MCC18\src\TRADIT~1\stdclib\putc.c
004628   cfd9     MOVFF     0xfd9,0xfe6    putc (char c, FILE * f)                                                          C:\MCC18\src\TRADIT~1\stdclib\putc.c
00462a   ffe6                                                                                                               
00462c   cfda     MOVFF     0xfda,0xfe6                                                                                     
00462e   ffe6                                                                                                               
004630   cfe1     MOVFF     0xfe1,0xfd9                                                                                     
004632   ffd9                                                                                                               
004634   cfe2     MOVFF     0xfe2,0xfda                                                                                     
004636   ffda                                                                                                               
                                           {                                                                                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                             /* if the handle > 0 then it's a pointer to a string buffer address.           C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                specifically, a pointer to a pointer referencing the next available         C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                byte in the buffer, to which the character will be stored. */               C:\MCC18\src\TRADIT~1\stdclib\putc.c
004638   0efb     MOVLW     0xfb             if ((int) f >= 0)                                                              C:\MCC18\src\TRADIT~1\stdclib\putc.c
00463a   cfdb     MOVFF     0xfdb,0x2a                                                                                      
00463c   f02a                                                                                                               
00463e   0efc     MOVLW     0xfc                                                                                            
004640   cfdb     MOVFF     0xfdb,0x2b                                                                                      
004642   f02b                                                                                                               
004644   0100     MOVLB     0x0                                                                                             
004646   0e80     MOVLW     0x80                                                                                            
004648   142b     ANDWF     0x2b,0x0,0x0                                                                                    
00464a   e11a     BNZ       0x4680                                                                                          
00464c   0efb     MOVLW     0xfb               return (unsigned char) (*(*(char **) f)++ = c);                              C:\MCC18\src\TRADIT~1\stdclib\putc.c
00464e   cfdb     MOVFF     0xfdb,0xfe9                                                                                     
004650   ffe9                                                                                                               
004652   0efc     MOVLW     0xfc                                                                                            
004654   cfdb     MOVFF     0xfdb,0xfea                                                                                     
004656   ffea                                                                                                               
004658   cfee     MOVFF     0xfee,0xff3                                                                                     
00465a   fff3                                                                                                               
00465c   cfed     MOVFF     0xfed,0xff4                                                                                     
00465e   fff4                                                                                                               
004660   2aee     INCF      0xee,0x1,0x0                                                                                    
004662   0e00     MOVLW     0x0                                                                                             
004664   22ef     ADDWFC    0xef,0x1,0x0                                                                                    
004666   cff3     MOVFF     0xff3,0xfe9                                                                                     
004668   ffe9                                                                                                               
00466a   cff4     MOVFF     0xff4,0xfea                                                                                     
00466c   ffea                                                                                                               
00466e   0efd     MOVLW     0xfd                                                                                            
004670   cfdb     MOVFF     0xfdb,0xfef                                                                                     
004672   ffef                                                                                                               
004674   50ef     MOVF      0xef,0x0,0x0                                                                                    
004676   6a2b     CLRF      0x2b,0x0                                                                                        
004678   6ef3     MOVWF     0xf3,0x0                                                                                        
00467a   c02b     MOVFF     0x2b,0xff4                                                                                      
00467c   fff4                                                                                                               
00467e   d010     BRA       0x46a0                                                                                          
                                                                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
004680   0efb     MOVLW     0xfb             if ((signed char) f == (signed char) _H_USART)                                 C:\MCC18\src\TRADIT~1\stdclib\putc.c
004682   50db     MOVF      0xdb,0x0,0x0                                                                                    
004684   08fe     SUBLW     0xfe                                                                                            
004686   e106     BNZ       0x4694                                                                                          
                                               {                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                 /* the invocation of the USART function is direct, as it's our             C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    default value and we want it to work without needing any                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    direct initialization from the user */                                  C:\MCC18\src\TRADIT~1\stdclib\putc.c
004688   0efd     MOVLW     0xfd                 return _usart_putc (c);                                                    C:\MCC18\src\TRADIT~1\stdclib\putc.c
00468a   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
00468c   ffe6                                                                                                               
00468e   ec5c     CALL      0x48b8,0x0                                                                                      
004690   f024                                                                                                               
004692   d005     BRA       0x469e                                                                                          
                                               }                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                             else                                                                           C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                               {                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                 /* the invocation of the user function is direct, not via a                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    function pointer. We just put an empty definition of the                C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    function in the library and if the user specifies their own             C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    version it will be found first and the library definition will          C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    be ignored. We do it this way because it's generally better to          C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    spend 2 bytes of program memory for the RETURN instruction of           C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    the empty function than three bytes of data memory for the              C:\MCC18\src\TRADIT~1\stdclib\putc.c
                                                    function pointer. */                                                    C:\MCC18\src\TRADIT~1\stdclib\putc.c
004694   0efd     MOVLW     0xfd                 return _user_putc (c);                                                     C:\MCC18\src\TRADIT~1\stdclib\putc.c
004696   cfdb     MOVFF     0xfdb,0xfe6                                                                                     
004698   ffe6                                                                                                               
00469a   ecc1     CALL      0xf82,0x0                                                                                       
00469c   f007                                                                                                               
00469e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                               }                                                                            C:\MCC18\src\TRADIT~1\stdclib\putc.c
0046a0   52e5     MOVF      0xe5,0x1,0x0   }                                                                                C:\MCC18\src\TRADIT~1\stdclib\putc.c
0046a2   cfe5     MOVFF     0xfe5,0xfda                                                                                     
0046a4   ffda                                                                                                               
0046a6   cfe7     MOVFF     0xfe7,0xfd9                                                                                     
0046a8   ffd9                                                                                                               
0046aa   0012     RETURN    0x0                                                                                             
                                             include <P18CXXX.INC>                                                          C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\p18F2455.INC
                                                                                                                            C:\MCC18\MPASM\p18F2455.INC
                                           ;==========================================================================      C:\MCC18\MPASM\p18F2455.INC
                                           ;  MPASM PIC18F2455 processor include                                            C:\MCC18\MPASM\p18F2455.INC
                                           ;                                                                                C:\MCC18\MPASM\p18F2455.INC
                                           ;  (c) Copyright 1999-2007 Microchip Technology, All rights reserved             C:\MCC18\MPASM\p18F2455.INC
                                           ;==========================================================================      C:\MCC18\MPASM\p18F2455.INC
                                                                                                                            C:\MCC18\MPASM\p18F2455.INC
                                                   LIST                                                                     C:\MCC18\MPASM\p18F2455.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1220                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1230                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1231                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1320                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1330                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __18F1331                                                                 C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #define __USE_PORTB 1                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                             GLOBAL _usart_putc                                                             C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           STDIO CODE                                                                       C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           _usart_putc                                                                      C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048b8   0eff     MOVLW     0xff                         MOVLW     0xff                                                     C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048ba   50e3     MOVF      0xe3,0x0,0x0                 MOVF      PLUSW1, w                                                C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048bc   baac     BTFSC     0xac,0x5,0x0                 BTFSC     TXSTA, 0x5                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048be   d004     BRA       0x48c8                       BRA       loop                                                     C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048c0   6aaf     CLRF      0xaf,0x0                     CLRF      SPBRG                                                    C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048c2   8eab     BSF       0xab,0x7,0x0                 BSF       RCSTA, 0x7                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048c4   8aac     BSF       0xac,0x5,0x0                 BSF       TXSTA, 0x5                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #ifdef __USE_PORTB                                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                         BCF       TRISB, 0x1                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #else                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048c6   9c94     BCF       0x94,0x6,0x0                 BCF       TRISC, 0x6                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048c8   a2ac     BTFSS     0xac,0x1,0x0   loop:         BTFSS     TXSTA, 0x1                                               C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048ca   d7fe     BRA       0x48c8                       BRA       loop                                                     C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048cc   6ead     MOVWF     0xad,0x0                     MOVWF     TXREG                                                    C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048ce   6ef3     MOVWF     0xf3,0x0                     MOVWF     PRODL                                                    C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048d0   6af4     CLRF      0xf4,0x0                     CLRF      PRODL + 1                                                C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
0048d2   0012     RETURN    0x0                          RETURN                                                             C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                               END                                                                          C:\MCC18\SRC\TRADIT~1\PMC\USART\_usartpc.asm
                                           ; $Id: strlen.asm,v 1.1 2003/12/09 22:53:20 GrosbaJ Exp $                        C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; @name strlen                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;``The {\bf strlen} function computes the length of the string pointed           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;to by {\bf s}.''                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;Stack usage: 2 bytes. Re-entrant.                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;@param s pointer to the string                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;@return ``The {\bf strlen} function returns the number of characters            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;that precede the terminating null character.''                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; size_t strlen (const char *s);                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           STRING CODE                                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           strlen                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             global strlen                                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; Proceedure: Use FSR0 for 's' and use PROD for 'n'.                             C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Load FSR0 by copying 's' off stack into FSR0.                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
00471c   0efe     MOVLW     0xfe                     Stk2CpyToReg -2,FSR0L                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
00471e   cfe3     MOVFF     0xfe3,0xfe9                                                                                     
004720   ffe9                                                                                                               
004722   0eff     MOVLW     0xff                                                                                            
004724   cfe3     MOVFF     0xfe3,0xfea                                                                                     
004726   ffea                                                                                                               
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Clear PROD                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004728   6af3     CLRF      0xf3,0x0                 clrf      PRODL,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
00472a   6af4     CLRF      0xf4,0x0                 clrf      PRODH,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Test for '\0'                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
00472c   52ee     MOVF      0xee,0x1,0x0             movf      POSTINC0,F,ACCESS   ; set Z flag                             C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
00472e   e003     BZ        0x4736                   bz        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             ; Count it                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004730   4af3     INFSNZ    0xf3,0x1,0x0   	  infsnz    PRODL, F, ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004732   2af4     INCF      0xf4,0x1,0x0   	  incf      PRODH, F, ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004734   d7fb     BRA       0x472c                   bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           jEnd                                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
004736   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\strlen.asm
                                           ; $Id: slenpgm.asm,v 1.4 2006/02/04 00:06:53 nairnj Exp $                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #include "P18CXXX.INC"                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                   LIST                                                                     C:\MCC18\MPASM\P18CXXX.INC
                                           ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.                  C:\MCC18\MPASM\P18CXXX.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                           ; P18C452.INC  Standard Header File, Version 0.12   Microchip Technology, Inc.   C:\MCC18\MPASM\P18C452.INC
                                                   LIST                                                                     C:\MCC18\MPASM\P18C452.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C601                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C601.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C658                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C658.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C801                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C801.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18C858                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18C858.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1230                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1230.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F1330                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F1330.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F242                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F242.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F248                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F248.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F24K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F24K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F252                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F252.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F258                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F258.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F25K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F25K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F2685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F2685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F26K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F26K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4220                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4220.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4221                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4221.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4320                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4320.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4321                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4321.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4331                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4331.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F442                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F442.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4420                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4420.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4423                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4423.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4431                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4431.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4439                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4439.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4450                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4450.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4455                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4455.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4458                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4458.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F448                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F448.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4480                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4480.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F44K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F44K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4510                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4510.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4515                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4515.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F452                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F452.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4523                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4523.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4539                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4539.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4550                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4550.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4553                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4553.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F458                                                                 C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F458.INC>                                                       C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4580                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4580.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F45K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F45K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4610                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4610.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4682                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4682.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F4685                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F4685.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F46K20                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F46K20.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F63J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F63J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F64J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F64J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F65J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F65J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F66J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F66J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F6723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F6723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F67J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F67J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8310                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8310.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8390                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8390.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F83J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F83J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8410                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8410.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8490                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8490.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F84J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F84J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8520                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8520.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8525                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8525.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8527                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8527.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8585                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8585.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F85J90                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F85J90.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8620                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8620.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8621                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8621.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8622                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8622.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8627                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8627.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8628                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8628.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8680                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8680.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J15                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J15.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J16                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J16.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J55                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J55.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F86J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F86J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8720                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8720.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8722                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8722.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F8723                                                                C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F8723.INC>                                                      C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J10                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J10.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J11                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J11.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J50                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J50.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F87J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F87J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F96J65                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F96J65.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                             IFDEF __18F97J60                                                               C:\MCC18\MPASM\P18CXXX.INC
                                                INCLUDE <p18F97J60.INC>                                                     C:\MCC18\MPASM\P18CXXX.INC
                                             ENDIF                                                                          C:\MCC18\MPASM\P18CXXX.INC
                                                                                                                            C:\MCC18\MPASM\P18CXXX.INC
                                           #include "P18MACRO.INC"                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; $Id: p18macro.inc,v 1.2 2005/05/20 15:34:54 GrosbaJ Exp $                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;         MACROS                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;==========================================================================      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   LIST                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkSetPtrToOffset macro Ptr,Offset                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Set pointer Ptr to argument in stack frame at Offset.                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr,ACCESS                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     Ptr+1                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkPushPtrToOffset macro Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Push pointer onto stack to point to Offset location in stack.                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Offset defined before push.                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     INDF1,ACCESS                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(Offset&0xFFFF)                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,W,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movwf     PREINC1,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTINC1,F,ACCESS     ; increment FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           StkAddStackPtr macro N                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add N to FSR1                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(N)                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     FSR1L,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     HIGH(N&0xFFFF)                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    FSR1H,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR0 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromFSR2 macro                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,POSTINC1                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get one byte from Reg and push on stack.  WREG unchanged.                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get two bytes from Reg and push on stack.  WREG unchanged.                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PushFromReg macro Reg                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Get three bytes from Reg and push on stack.  WREG unchanged.                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,POSTINC1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,POSTINC1                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR0 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR0 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR0 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR0 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS     ; restore FSR0                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at FSR2 without exposing stack.           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at FSR2 without exposing stack.        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToFSR2 macro                                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at FSR2 without exposing stack.      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFD                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFE                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS     ; restore FSR2                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop one byte from stack and put it at Reg without exposing stack.            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop two bytes from stack and put them at Reg without exposing stack.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3PopToReg macro Reg                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Pop three bytes from stack and put them at Reg without exposing stack.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed.                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     0xFF                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC1,F,ACCESS     ; decrement FSR1                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR0                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF0                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR0                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR0 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC0                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to FSR2                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,INDF2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to FSR2                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from stack frame at Offset to FSR2                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; WREG changed, FSR2 unchanged.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTINC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+3)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,POSTDEC2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from stack frame at Offset to Reg                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from stack frame at Offset to Reg                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyToReg macro Offset,Reg                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from stack frame at Offset to Reg                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+1)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset+2)                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     PLUSW1,Reg+2                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR0 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF0,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR0 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from FSR0 to stack frame at Offset                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR0 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR0 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC0,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from FSR2 to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     INDF2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from FSR2 to stack frame at Offset                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4CpyFromFSR2 macro Offset                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy four bytes from FSR2 to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTINC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     POSTDEC2,PLUSW1                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy one byte from Reg to stack frame at Offset                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     LOW(Offset)                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy two bytes from Reg to stack frame at Offset                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3CpyFromReg macro Reg,Offset                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Copy three bytes from Reg to stack frame at Offset                           C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg,PLUSW1                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+1,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movff     Reg+2,PLUSW1                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc     STATUS,Z                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Inc macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Increment 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement byte in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 2 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3Dec macro Offset                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Decrement 3 bytes in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bc        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3TestForZero macro Offset,jZero                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local     jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jContinue                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bz        jZero                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jContinue                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF0,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR0 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC0,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk3AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4AddToFSR2 macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwf     POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      PLUSW1,W,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     addwfc    POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 1 byte in stack at Offset                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 2 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4ShiftLeft macro Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Shift left 4 bytes in stack at Offset                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bcf       STATUS,C                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     rlcf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte in stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytesin stack at Offset                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk4Negate macro Offset                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 4 bytes in stack at Offset                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     local jEnd                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+1                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+2                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     bnz       jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     Offset+3                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      PLUSW1,F,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jEnd:                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk1NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 1 byte at FSR2.  FSR2 unchanged.                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           Stk2NegateFSR2 macro                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                             ; Negate 2 bytes at FSR2.  FSR2 unchanged.                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     incf      POSTINC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     btfsc     STATUS,Z                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     decf      INDF2,F,ACCESS                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     comf      POSTDEC2,F,ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                            endm                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           ;====== These branches are short ==============                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWeqZ macro   Label        ; jmp if W == 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      WREG,F,ACCESS                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpWneZ macro   Label        ; jmp if W != 0                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   tstfsz    WREG,ACCESS                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     endm                                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneZ macro   Reg,Acc,Label                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   movf      Reg,F,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg,W,Acc                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFleL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfsgt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFgeL macro   Reg,Acc,bVal,Label                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movlw     bVal                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     cpfslt    Reg,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bz        Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     movf      Reg1,W,Acc1                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                     subwf     Reg2,W,Acc2                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bnz       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpClr  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfss   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                           jmpSet  macro Reg,Bit,Acc,Label                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   btfsc   Reg,Bit,Acc                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   bra       Label                                                          C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                   endm                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\P18MACRO.INC
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; @name strlenpgm                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;``The {\bf strlenpgm} function computes the length of the string pointed        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;to by {\bf s}.''                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;@param s pointer to the string                                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;@return ``The {\bf strlenpgm} function returns the number of characters         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;that precede the terminating null character.''                                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ;                                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; sizerom_t strlenpgm (const rom char *s);                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             extern __AARGB2                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           STRING CODE                                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           strlenpgm                                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             global strlenpgm                                                               C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #ifdef __SMALL__                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                            messg "strlenpgm - SMALL"                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; Procedure: Use TBLPTR for 's' and create 'n' on stack.  Return 'n' in          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; __AARGB0:__AARGB1:__AARGB2.                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Load TBLPTR by POPing 's' off stack.                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk2PopToReg TBLPTRL                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTDEC1,ACCESS    ; provide extra byte below stack          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Push 3 bytes of 0 onto stack. This is initial value of 'n'.                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Test for '\0'                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     tblrd     *+                  ; read & increment                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     movf      TABLAT, F, ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     bz        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Count it                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk3Inc   -3                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jEnd                                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     Stk3CpyToReg -3, __AARGB2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                     return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #else                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #ifdef __LARGE__                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                            messg "strlenpgm - LARGE"                                                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; Procedure: Use TBLPTR for 's' and create 'n' on stack.  Return 'n' in          C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           ; __AARGB0:__AARGB1:__AARGB2.                                                    C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Load TBLPTR by POPing 's' off stack.                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
004738   0eff     MOVLW     0xff                     Stk3PopToReg TBLPTRL                                                   C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
00473a   cfe3     MOVFF     0xfe3,0xff8                                                                                     
00473c   fff8                                                                                                               
00473e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004740   0eff     MOVLW     0xff                                                                                            
004742   cfe3     MOVFF     0xfe3,0xff7                                                                                     
004744   fff7                                                                                                               
004746   52e5     MOVF      0xe5,0x1,0x0                                                                                    
004748   0eff     MOVLW     0xff                                                                                            
00474a   cfe3     MOVFF     0xfe3,0xff6                                                                                     
00474c   fff6                                                                                                               
00474e   52e5     MOVF      0xe5,0x1,0x0                                                                                    
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Push 3 bytes of 0 onto stack. This is initial value of 'n'.                  C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
004750   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
004752   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
004754   6ae6     CLRF      0xe6,0x0                 clrf      POSTINC1,ACCESS                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Scan for '\0' while counting.                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jLoop:                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Test for '\0'                                                                C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
004756   0009     TBLRDPOSTINC                       tblrd     *+                  ; read & increment                       C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
004758   52f5     MOVF      0xf5,0x1,0x0             movf      TABLAT, F, ACCESS                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
00475a   e009     BZ        0x476e                   bz        jEnd                                                         C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             ; Count it                                                                     C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
00475c   0efd     MOVLW     0xfd                     Stk3Inc   -3                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
00475e   2ae3     INCF      0xe3,0x1,0x0                                                                                    
004760   e105     BNZ       0x476c                                                                                          
004762   0efe     MOVLW     0xfe                                                                                            
004764   2ae3     INCF      0xe3,0x1,0x0                                                                                    
004766   e102     BNZ       0x476c                                                                                          
004768   0eff     MOVLW     0xff                                                                                            
00476a   2ae3     INCF      0xe3,0x1,0x0                                                                                    
00476c   d7f4     BRA       0x4756                   bra       jLoop                                                        C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           jEnd                                                                             C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
00476e   0efd     MOVLW     0xfd                     Stk3CpyToReg -3, __AARGB2                                              C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
004770   cfe3     MOVFF     0xfe3,0x1d                                                                                      
004772   f01d                                                                                                               
004774   0efe     MOVLW     0xfe                                                                                            
004776   cfe3     MOVFF     0xfe3,0x1e                                                                                      
004778   f01e                                                                                                               
00477a   0eff     MOVLW     0xff                                                                                            
00477c   cfe3     MOVFF     0xfe3,0x1f                                                                                      
00477e   f01f                                                                                                               
004780   0012     RETURN    0x0                      return                                                                 C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #else                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                            error "No Model Specified"                                                      C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                           #endif                                                                           C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                             end                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
                                                                                                                            C:\MCC18\SRC\TRADIT~1\STDCLIB\slenpgm.asm
